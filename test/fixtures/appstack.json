{"key":"tmp/appstack_bundle","val":[{"key":"theModel_appInstances","val":[{"key":"theInstance","val":[{"key":"clientScripts","val":[{"key":"ace-editor-component","val":[{"key":"devCode","val":"\nApp.AceEditorComponent = Ember.Component.extend({\n\n    templateName: 'components/ace-editor',\n    actions: {\n        execute: function() {\n\n            var driver = new webdriver.Builder().build();\n            driver.switchTo().window('slave');\n\n            var o = document.getElementById('execute');\n            o.addEventListener('click', function(e) {\n\n                eval(document.getElementById('actions').value);\n\n            }, false);\n            var testWindow = window.open('', 'slave');\n\n        }\n    },\n    didInsertElement: function () {\n        this.editor = ace.edit('ace-editor');\n        this.editor.setTheme(\"ace/theme/twilight\");//twilight, ambiance\n        this.editor.getSession().setMode(\"ace/mode/js\");\n        this.editor.setShowPrintMargin(false);\n        this.editor.getSession().setTabSize(2);\n                          this._super.apply(this, arguments);\n                          //this._copyDestinationIfOriginIsEmpty(this.$().select2('container'));\n\n                          //this.$().select2('container').on('focus', 'input', function (e) {\n                              //var $element = $(e.target), //\n                              //className = 'small-input';\n\n                          //if ($('.select2-selection-limit').length > 0) {\n                              //$element.addClass(className);\n                              //return;\n                          //}\n     }\n     \n});\n"},{"key":"codePath","val":"tmp/frontend/scenarios/components/ace-editor-component.js"},{"key":"ext","val":"js"}]},{"key":"application_controller","val":[{"key":"devCode","val":"App.ApplicationController = Ember.Controller.extend({\n    init: function() {\n        this._super();\n        //var o = Scenarios.Scenario.createRecordFromPojo({name:'hello'});\n    }\n});\n\n"},{"key":"codePath","val":"tmp/frontend/scenarios/controllers/application_controller.js"},{"key":"ext","val":"js"}]},{"key":"index_controller","val":[{"key":"devCode","val":"\nApp.IndexController = Ember.Controller.extend({\n    init: function() {\n        this._super();\n    }\n});\n"},{"key":"codePath","val":"tmp/frontend/scenarios/controllers/index_controller.js"},{"key":"ext","val":"js"}]},{"key":"scenario_controller","val":[{"key":"devCode","val":"App.ScenariosScenarioController = Ember.ObjectController.extend({\n    init: function() {\n        this._super();\n        this.set('isRunning', false);\n    },\n    isRunning: false,\n\tactions: {\n\t\thandleSubmit: function() {\n            alert('handleSubmit');\n\t\t},\n\t\trun: function() {\n            this.run();\n\t\t},\n\t\tresume: function() {\n            this.resume();\n\t\t}\n\t},\n    run: function() {\n        this.currentIndex = 0;\n        this.resume();\n    },\n    resume: function(key, value){\n        this.set('isRunning', true);\n        var snipplets = this.get('snipplets');\n        while (this.currentIndex < snipplets.get('length')) {\n            var action = snipplets.objectAt(this.currentIndex);\n            this.currentIndex++;\n            if (action.get('breakpoint')) {\n                break;\n            }\n            if (!action.get('exclude')) {\n                var dataStr = action.get('data').trim();\n                var dataObj = dataStr != '' ? JSON.parse(dataStr) : {};\n                var executeCode = this.interpolate(action.get('snipplet.code'), dataObj);\n                eval(executeCode);\n            }\n        }\n        this.set('isRunning', false);\n    },\n    /**\n     * @param {string} code\n     * @param {Object} data\n     * @private\n     */\n    interpolate: function(code, data) {\n                     debugger;\n        for (var key in data) {\n            code = code.replace('<%' + key + '%>', data[key]);\n        }\n        return code;\n    }\n\n});\n\n"},{"key":"codePath","val":"tmp/frontend/scenarios/controllers/scenario_controller.js"},{"key":"ext","val":"js"}]},{"key":"scenarios_controller","val":[{"key":"devCode","val":"App.ScenariosController = Ember.ArrayController.extend({\n    init: function() {\n        this._super();\n    },\n    activeId: null,\n    actions: {\n        clearCompleted: function() {\n            var completed = this.filterBy('isCompleted', true);\n            completed.invoke('deleteRecord');\n            completed.invoke('save');\n        },\n        selectItem: function(item) {\n            debugger;\n            var id = item.get('id');\n            this.set('activeId', item.get('id'));\n            this.transitionTo('scenarios.scenario', item);\n        },\n        createTodo: function() {\n          // Get the todo title set by the \"New Todo\" text field\n          var title = this.get('newTitle');\n          if (!title.trim()) { return; }\n\n          // Create the new Todo model\n          var todo = this.store.createRecord('todo', {\n            title: title,\n            isCompleted: false\n          });\n\n          // Clear the \"New Todo\" text field\n          this.set('newTitle', '');\n\n          // Save the new model\n          todo.save();\n        }\n    },\n    getClass: function(item) {\n                  debugger;\n                  return true;\n        //if (item.get('id') === this.get('activeId')) {\n            //return 'active';\n        //} else {\n            //return '';\n        //}\n    }.property('activeId'),\n    allAreDone: function(key, value) {\n        if (value === undefined) {\n            return !!this.get('length') && this.everyProperty('isCompleted', true);\n        } else {\n            this.setEach('isCompleted', value);\n            this.invoke('save');\n            return value;\n        }\n    }.property('@each.isCompleted'),\n\n    hasCompleted: function() {\n        return this.get('completed') > 0;\n    }.property('completed'),\n\n    completed: function() {\n        return this.filterBy('isCompleted', true).get('length');\n    }.property('@each.isCompleted'),\n\n    remaining: function() {\n        return this.filterBy('isCompleted', false).get('length');\n    }.property('@each.isCompleted'),\n\n    inflection: function() {\n        var remaining = this.get('remaining');\n        return remaining === 1 ? 'item' : 'items';\n    }.property('remaining')\n\n});\n"},{"key":"codePath","val":"tmp/frontend/scenarios/controllers/scenarios_controller.js"},{"key":"ext","val":"js"}]},{"key":"scenario","val":[{"key":"devCode","val":"App.Scenario = DS.Model.extend({\n\tname: DS.attr('string'),\n\tsnipplets: DS.hasMany('scenarioSnipplet', {async: true})\n});\n\nApp.ApplicationAdapter = DS.FixtureAdapter.extend();\n//App.ScenarioAdapter = DS.FixtureAdapter.extend();\n\nApp.Scenario.FIXTURES = [\n {\n   id: 1,\n   name: 'Scenario1',\n   snipplets: [1,3]\n },\n {\n   id: 2,\n   name: 'Scenario2',\n   snipplets: [2]\n },\n {\n   id: 3,\n   name: 'Scenario3',\n   snipplets: [1]\n }\n];\n"},{"key":"codePath","val":"tmp/frontend/scenarios/models/scenario.js"},{"key":"ext","val":"js"}]},{"key":"scenario_snipplet","val":[{"key":"devCode","val":"App.ScenarioSnipplet = DS.Model.extend({\n\tdata: DS.attr('string'),\n    snipplet: DS.belongsTo('snipplet', {async: true}),\n    exclude: DS.attr('boolean'),\n    breakpoint: DS.attr('boolean')\n});\n\nApp.ScenarioSnipplet.FIXTURES = [\n {\n   id: 1,\n   data: '{\"host\": \"local\"}',\n    snipplet: 1,\n    exclude: false,\n    breakpoint: false\n },\n {\n   id: 2,\n   data: '{\"host\": \"local2\"}',\n   snipplet: 3,\n    exclude: false,\n    breakpoint: false\n },\n {\n   id: 3,\n   data: '{\"host\": \"local3\"}',\n   snipplet: 2,\n    exclude: false,\n    breakpoint: false\n }\n];\n"},{"key":"codePath","val":"tmp/frontend/scenarios/models/scenario_snipplet.js"},{"key":"ext","val":"js"}]},{"key":"server_data","val":[{"key":"devCode","val":"App.ServerData = DS.Model.extend({\n\tname: DS.attr('string'),\n\tcode: DS.attr('string')\n});\n\n//Todos.Todo.FIXTURES = [\n //{\n   //id: 1,\n   //title: 'Learn Ember.js',\n   //isCompleted: true\n //},\n //{\n   //id: 2,\n   //title: '...',\n   //isCompleted: false\n //},\n //{\n   //id: 3,\n   //title: 'Profit!',\n   //isCompleted: false\n //}\n//];\n"},{"key":"codePath","val":"tmp/frontend/scenarios/models/server_data.js"},{"key":"ext","val":"js"}]},{"key":"snipplet","val":[{"key":"devCode","val":"App.Snipplet = DS.Model.extend({\n\tname: DS.attr('string'),\n\tcode: DS.attr('string')\n});\n\nApp.Snipplet.FIXTURES = [\n {\n   id: 1,\n   name: 'Snipplet1',\n   code: 'code1'\n },\n {\n   id: 2,\n   name: 'Snipplet2',\n   code: 'code2'\n },\n {\n   id: 3,\n   name: 'Snipplet3',\n   code: 'code3'\n }\n];\n"},{"key":"codePath","val":"tmp/frontend/scenarios/models/snipplet.js"},{"key":"ext","val":"js"}]},{"key":"application_route","val":[{"key":"devCode","val":"\nApp.ApplicationRoute = Ember.Route.extend({\n    model: function() {\n               //debugger;\n        return 'app';\n    },\n    //afterModel: function() {\n        //debugger;\n    //},\n    activate: function() {\n        //debugger;\n    },\n    deactivate: function() {\n        //debugger;\n    }\n});\n"},{"key":"codePath","val":"tmp/frontend/scenarios/routes/application_route.js"},{"key":"ext","val":"js"}]},{"key":"index_route","val":[{"key":"devCode","val":"\nApp.SnippletsSnippletIndexRoute = Ember.Route.extend({\n  model: function(){\n             return 'hello';\n  }\n});\n\n"},{"key":"codePath","val":"tmp/frontend/scenarios/routes/snipplets/snipplet/index_route.js"},{"key":"ext","val":"js"}]},{"key":"scenario_route","val":[{"key":"devCode","val":"\nApp.ScenariosScenarioRoute = Ember.Route.extend({\n    model: function(params){\n        //debugger;\n        var scenario = this.store.all('scenario').findProperty('id', params.scenarios_id);\n        var that = this;\n        scenario.get('snipplets').forEach(function(snipplet, index) {\n            var snippletFull = that.store.all('scenarioSnipplet').findProperty('id', snipplet.get('id'));\n            debugger;\n            snipplet = snippletFull;\n            //console.log(snipplet.get('id'));\n        });\n        return scenario;\n    },\n    //afterModel: function() {\n        //debugger;\n    //},\n    activate: function() {\n        //debugger;\n    },\n    deactivate: function() {\n        //debugger;\n    }\n});\n"},{"key":"codePath","val":"tmp/frontend/scenarios/routes/scenarios/scenario_route.js"},{"key":"ext","val":"js"}]},{"key":"scenarios_route","val":[{"key":"devCode","val":"\n//if renderTemplate is not present it looks for data-template=\"scenarios\"\nApp.ScenariosRoute = Ember.Route.extend({\n    model: function() {\n        //debugger;\n        //this.store.createRecordFromPojo('scenario', {name:'hello'});\n        //var recs = this.store.find('scenario');\n        //return recs;\n        return this.store.find('scenario');\n    },\n    //afterModel: function() {\n        //debugger;\n    //},\n    activate: function() {\n        //debugger;\n    },\n    deactivate: function() {\n        //this.$().hide();\n        //debugger;\n    }\n});\n"},{"key":"codePath","val":"tmp/frontend/scenarios/routes/scenarios_route.js"},{"key":"ext","val":"js"}]},{"key":"snipplet_route","val":[{"key":"devCode","val":"\nApp.SnippletsSnippletRoute = Ember.Route.extend({\n    model: function(params){\n        //debugger;\n        var snipplet = this.store.all('snipplet').findProperty('id', params.snipplet_id);\n        return snipplet;\n    },\n    //afterModel: function() {\n        //debugger;\n    //},\n    activate: function() {\n        //debugger;\n    },\n    deactivate: function() {\n        //debugger;\n    }\n});\n"},{"key":"codePath","val":"tmp/frontend/scenarios/routes/snipplets/snipplet_route.js"},{"key":"ext","val":"js"}]},{"key":"snipplets_route","val":[{"key":"devCode","val":"\nApp.SnippletsRoute = Ember.Route.extend({\n    model: function() {\n               //debugger;\n        return this.store.find('snipplet');\n    }\n});\n"},{"key":"codePath","val":"tmp/frontend/scenarios/routes/snipplets_route.js"},{"key":"ext","val":"js"}]},{"key":"sessions","val":[{"key":"devCode","val":"var Sessions = Backbone.Collection.extend({\n    url: '/sessions/list'\n});\n"},{"key":"codePath","val":"tmp/frontend/sessions/collections/sessions.js"},{"key":"ext","val":"js"}]},{"key":"session","val":[{"key":"devCode","val":"var Session = Backbone.Model.extend({\n    urlRoot: '/sessions'\n});\n"},{"key":"codePath","val":"tmp/frontend/sessions/models/session.js"},{"key":"ext","val":"js"}]},{"key":"router","val":[{"key":"devCode","val":"Router = Backbone.Router.extend({\n    routes: {\n        '': 'home',\n        'sessions': 'sessions',\n        'edit/:id': 'edit'\n    }\n});\n\nvar app = new ApplicationView();\n\nvar router = new Router();\n\nrouter.on('route:home', function() {\n    this.navigate('sessions', {trigger: true});\n});\n\nrouter.on('route:sessions', function() {\n\n    $('#stubDataListContainer').show();\n    $('#stubDataDetailsContainer').hide();\n    \n    $('#navbar-list').show();\n    $('#navbar-details').hide();\n\n    app.getStubDataList().fetchNew();\n    console.log('we have loaded the home page');\n\n});\n\nrouter.on('route:edit', function(id) {\n    $('#stubDataListContainer').hide();\n    $('#stubDataDetailsContainer').show();\n    \n    $('#navbar-list').hide();\n    $('#navbar-details').show();\n\n    app.getStubDataDetails().render({id: id});\n});\n\nBackbone.history.start();\n"},{"key":"codePath","val":"tmp/frontend/sessions/router.js"},{"key":"ext","val":"js"}]}]},{"key":"deployment","val":[{"key":"accessPoints","val":[{"key":"scenarios","val":[{"key":"config","val":"{\n    \"head\" : {\n        \"files\": [\n            \"bower_components/ace-builds/src-min-noconflict/ace.js\"\n        ]\n    },\n\n    \"vendor\" : {\n        \"files\": [\n          \"frontend/assets/javascript/jquery-1.10.2.min.js\",\n          \"bower_components/bootstrap/dist/js/bootstrap.min.js\",\n          \"frontend/assets/javascript/handlebars-1.0.0.js\",\n          \"frontend/assets/javascript/ember-1.2.0.js\",\n          \"frontend/assets/javascript/ember-data.js\",\n          \"frontend/assets/javascript/webdriver.js\"\n        ]\n    },\n\n    \"app\" : {\n        \"files\": [\n          \"frontend/scenarios/app.js\",\n          \"frontend/scenarios/router.js\",\n          \"frontend/scenarios/routes/application_route.js\",\n          \"frontend/scenarios/routes/scenarios_route.js\",\n          \"frontend/scenarios/routes/snipplets_route.js\",\n          \"frontend/scenarios/routes/index_route.js\",\n          \"frontend/scenarios/routes/scenarios/index_route.js\",\n          \"frontend/scenarios/routes/scenarios/scenario_route.js\",\n          \"frontend/scenarios/routes/scenarios/scenario/index_route.js\",\n          \"frontend/scenarios/routes/snipplets/index_route.js\",\n          \"frontend/scenarios/routes/snipplets/snipplet_route.js\",\n          \"frontend/scenarios/routes/snipplets/snipplet/index_route.js\",\n          \"frontend/scenarios/store.js\",\n          \"frontend/scenarios/models/snipplet.js\",\n          \"frontend/scenarios/models/server_data.js\",\n          \"frontend/scenarios/models/scenario.js\",\n          \"frontend/scenarios/models/scenario_snipplet.js\",\n          \"frontend/scenarios/controllers/application_controller.js\",\n          \"frontend/scenarios/controllers/index_controller.js\",\n          \"frontend/scenarios/controllers/scenarios_controller.js\",\n          \"frontend/scenarios/controllers/scenario_controller.js\",\n          \"frontend/scenarios/components/ace-editor-component.js\",\n          \"frontend/scenarios/views/edit_todo_view.js\"\n        ]\n    },\n    \"templates\" : {\n        \"files\": [\n            \"application.hbs\",\n            \"scenarios.hbs\",\n            \"snipplets.hbs\",\n            \"scenarios/scenario.hbs\",\n            \"snipplets/snipplet.hbs\",\n            \"components/ace-editor.hbs\"\n        ]\n    }\n}\n"},{"key":"configPath","val":"tmp/config/scenarios.json"},{"key":"ext","val":"html"},{"key":"htmlpage","val":"<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Scenarios</title>\n    <link rel=\"stylesheet\" href=\"/bower_components/bootstrap/dist/css/bootstrap.min.css\">\n    {{{head}}}\n  </head>\n  <body>\n    {{{templates}}}\n    {{{vendor}}}\n    {{{app}}}\n  </body>\n</html>\n"},{"key":"viewPath","val":"tmp/views/scenarios.html"}]},{"key":"sessions","val":[{"key":"config","val":"{\n    \"head\" : {\n        \"files\": [\n            \"/bower_components/ace-builds/src-min-noconflict/ace.js\"\n        ]\n    },\n    \"vendor\" : {\n        \"files\": [\n            \"/bower_components/jquery/dist/jquery.min.js\",\n            \"/bower_components/underscore/underscore.js\",\n            \"/bower_components/backbone/backbone.js\",\n            \"/bower_components/bootstrap/dist/js/bootstrap.min.js\"\n        ]\n    },\n    \"app\" : {\n        \"files\": [\n            \"/frontend/sessions/models/session.js\",\n            \"/frontend/sessions/collections/sessions.js\",\n            \"/frontend/sessions/views/stubDataList.js\",\n            \"/frontend/sessions/views/stubDataDetails.js\",\n            \"/frontend/sessions/views/application.js\",\n            \"/frontend/sessions/router.js\"\n        ]\n    },\n    \"templates\" : {\n        \"files\": [\n            \"application.html\",\n            \"stub-data-list.html\",\n            \"stub-data-details.html\"\n        ]\n    }\n}\n\n"},{"key":"configPath","val":"tmp/config/sessions.json"},{"key":"ext","val":"html"},{"key":"htmlpage","val":"<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Sessions</title>\n    <link rel=\"stylesheet\" href=\"/bower_components/bootstrap/dist/css/bootstrap.min.css\">\n    <script src=\"/frontend/assets/javascript/vkbeautify.0.99.00.beta.js\"></script>\n    {{{head}}}\n  </head>\n  <body>\n    <div style=\"position:absolute;top:0px;height:50px;right:0px;left:0px;\">\n        <nav class=\"navbar navbar-inverse\" role=\"navigation\">\n            <div class=\"container-fluid\">\n                <div class=\"navbar-header\">\n                    <a class=\"navbar-brand\" href=\"#\">fly and be free</a>\n                </div>\n                <div id=\"navbar-list\">\n                    <form class=\"navbar-form navbar-left\" role=\"search\">\n                        <div class=\"form-group\">\n                            <input type=\"text\" class=\"form-control\" placeholder=\"filter\" id=\"filter\">\n                        </div>\n                        <button id=\"testCreateSession\" class=\"btn btn-default btn-sm\">Test Create Session</button>\n                    </form>\n                </div>\n                <div id=\"navbar-details\">\n                    <form class=\"navbar-form navbar-right\" role=\"search\">\n                        <button id=\"updateSession\" class=\"btn btn-default btn-sm\">Update Session</button>\n                        <button id=\"deleteSession\" class=\"btn btn-default btn-sm\">Delete Session</button>\n                        <a href=\"#\" id=\"devOnFly\" class=\"navbar-link\">dev on fly</a>\n                    </form>\n                    <form class=\"navbar-form navbar-right\" role=\"search\">\n                        <div class=\"form-group\">\n                            <input type=\"text\" class=\"form-control input-sm\" id=\"copySessionUsername\" placeholder=\"username\">\n                        </div>\n                        <button id=\"copySession\" type=\"submit\" class=\"btn btn-default btn-sm\">Clone Session</button>\n                    </form>\n                </div>\n            </div>\n        </nav>\n    </div>\n    <div style=\"position:absolute;top:50px;bottom:0px;right:0px;left:0px;\">\n        <div id=\"stubDataListContainer\" style=\"position:absolute;top:0px;bottom:0px;right:0px;left:0px;\">\n        </div>\n        <div id=\"stubDataDetailsContainer\" style=\"position:absolute;top:0px;bottom:0px;right:0px;left:0px;\">\n        </div>\n    </div>\n    {{{templates}}}\n    {{{vendor}}}\n    {{{app}}}\n  </body>\n</html>\n"},{"key":"viewPath","val":"tmp/views/sessions.html"}]},{"key":"index","val":[{"key":"htmlpage","val":"<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <title>Be Free</title>\n    <link rel=\"stylesheet\" href=\"/bower_components/bootstrap/dist/css/bootstrap.min.css\">\n  </head>\n  <body>\n    <div style=\"position:absolute;top:0px;height:50px;right:0px;left:0px;\">\n        <nav class=\"navbar navbar-inverse\" role=\"navigation\">\n            <div class=\"container-fluid\">\n                <div class=\"navbar-header\">\n                    <a class=\"navbar-brand\" href=\"#\">fly and be free</a>\n                </div>\n            </div>\n        </nav>\n    </div>\n    <div style=\"position:absolute;top:50px;bottom:0px;right:0px;left:0px;\">\n        index\n    </div>\n  </body>\n</html>\n"},{"key":"viewPath","val":"tmp/views/index.html"},{"key":"ext","val":"html"}]},{"key":"testRequireJs","val":[{"key":"htmlpage","val":"<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Dev Basic</title>\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<script data-main=\"frontend/assets/require-test/main\" src=\"/bower_components/requirejs/require.js\"></script>\t\n\t\t<script>\n\t\t\t\t\t\t\t\t\n\t\t\tfunction load() {\n\n\t\t\t\trequire([\"hello\"], function(hello) {\n\t\t\t\t\thello.start();\n\t\t\t\t});\n\t\t\t\t\t\n\t\t\t}\n\n\t\t</script>\n\t</head>\n\t<body onload=\"load();\">\n\t</body>\n"},{"key":"viewPath","val":"tmp/views/testRequireJs.html"},{"key":"ext","val":"html"}]}]}]}]}]},{"key":"theModel_controls","val":[{"key":"application","val":[{"key":"template","val":"\n"},{"key":"templatePath","val":"tmp/frontend/sessions/templates/application.html"},{"key":"ext","val":"js"},{"key":"code","val":"\n//if (App.platformInfo.debugMode) {\n\n    function ApiRecorder(linkEle) {\n        this.linkEle = linkEle;\n        var that = this;\n        if (linkEle) {\n            linkEle.addEventListener('click', function() {\n\n                var message = prompt('Send with message such as \"rtsunoda: data from somewhere\"');\n                if (message && message.indexOf(':') != -1) {\n\n                    var data = {\n                        'PAGE_DATA': that.PAGE_DATA,\n                        'api': that.api,\n                        'message': message\n                    };\n                    $.post('http://127.0.0.1:8181/sessions', data, function() {\n\n                    });\n\n                } else {\n                    alert('please add, \"username: your brief message describing the session\"');\n                }\n\n            }, false);\n\n            //this.PAGE_DATA = PAGE_DATA;\n            this.PAGE_DATA = {};\n            this.api = [];\n        }\n    }\n\n    ApiRecorder.prototype.addData = function (data) {\n        if (this.linkEle) {\n            //quick way to remove functions (error ...)\n            this.api.push(JSON.parse(JSON.stringify(data)));\n        }\n    };\n\n\n    $.ajaxPrefilter(function( options, originalOptions, jqXHR ) {\n        var pathParts = window.location.pathname.split('/');\n        pathParts.shift(); //''\n        pathParts.shift(); //sessions\n        var appName = pathParts.shift();\n        console.log(appName);\n        var releaseVersion = pathParts.shift();\n        console.log(releaseVersion);\n        var params = 'appName=' + appName + '&releaseVersion=' + releaseVersion;\n        options.url = options.url.indexOf('?') != -1 ? options.url + '&' + params : options.url + '?' + params;\n        \n        var originalSuccess = options.success;\n        options.success = function (data) {\n            \n            apiRecorder.addData({options: options, response: data});\n\n            if (originalSuccess != null) {\n                originalSuccess(data);\n            }\n        };\n        var originalError = options.error;\n        options.error = function (data) {\n            \n            apiRecorder.addData({options: options, response: data});\n\n            if (originalError != null) {\n                originalError(data);\n            }\n        };\n    });\n\n\n    var apiRecorder = new ApiRecorder(document.getElementById('testCreateSession'));\n//}\n\n\nApplicationView = Backbone.View.extend({\n    el: 'body',\n\n    initialize: function(){\n        //this.render();\n    },\n    render: function(){\n        \n        //var template = _.template( $(\"#application\").html(), {} );\n        //this.$el.html(template);\n        //this.getStubDataList();\n        //this.$el.$html(this.template());\n\n        //this.stubDataList.setElement(this.$('#stubDataListContainer')).render();\n        return this;\n    },\n    getStubDataList: function() {\n        if (!this.stubDataList) {\n            this.stubDataList = new StubDataList({ el: $('#stubDataListContainer') });\n        }\n        return this.stubDataList;\n    },\n    getStubDataDetails: function() {\n        if (!this.stubDataDetails) {\n            this.stubDataDetails = new StubDataDetails({ el: $('#stubDataDetailsContainer') });\n        }\n        return this.stubDataDetails;\n    },\n    events: {\n        \"keyup #filter\": \"doSearch\",\n        'click #deleteSession': 'deleteSession',\n        'click #updateSession': 'updateSession',\n        'click #devOnFly': 'devOnFly',\n        'click #testCreateSession': 'testCreateSession',\n        'click #copySession': 'copySession'\n    },\n    copySession: function() {\n        var username = $('#copySessionUsername').val();\n        this.stubDataDetails.copySession(username);\n        return false;\n    },\n    updateSession: function() {\n        this.stubDataDetails.updateSession();\n        return false;\n    },\n    deleteSession: function() {\n        this.stubDataDetails.deleteSession();\n        return false;\n    },\n    devOnFly: function() {\n        this.stubDataDetails.devOnFly();\n        return false;\n    },\n    doSearch: function( event ){\n\n        var filterVal = document.getElementById('filter').value;\n        this.stubDataList.filterRecs(filterVal);\n        return false; //dont proprogate\n\n    }\n\n});\n\n"},{"key":"codePath","val":"tmp/frontend/sessions/views/application.js"}]},{"key":"ace-editor","val":[{"key":"template","val":"<div id=\"ace-editor\" style=\"z-index:10;position:absolute;bottom:0px;top:0px;right:0px;left:0px\" />\n"},{"key":"templatePath","val":"tmp/frontend/scenarios/templates/components/ace-editor.hbs"},{"key":"ext","val":"hbs"}]},{"key":"scenarios","val":[{"key":"template","val":"\n<div style=\"position:absolute;top:0px;bottom:0px;left:0px;width:200px;\">\n    <ul class=\"nav nav-pills nav-stacked\">\n        {{#each item in model}}\n            {{#link-to \"scenarios.scenario\" item tagName=\"li\"}}\n                <a href=\"#\">{{item.name}}</a>\n            {{/link-to}}\n        {{/each}}\n    </ul> \n</div>\n<div style=\"position:absolute;top:0px;bottom:0px;left:200px;right:0px;\">\n    {{outlet}}\n</div>\n"},{"key":"templatePath","val":"tmp/frontend/scenarios/templates/scenarios.hbs"},{"key":"ext","val":"hbs"}]},{"key":"scenario","val":[{"key":"template","val":"<div style=\"position:absolute;bottom:200px;top:0px;right:0px;left:0px\">\n    <div class=\"btn-group\">\n        <button type=\"button\" {{action \"run\"}} class=\"btn btn-default\">Run</button>\n        <button type=\"button\" {{action \"resume\"}} class=\"btn btn-default\">Resume</button>\n    </div>\n    <ul class=\"list-group\">\n        {{#each item in model.snipplets}}\n            <li class=\"list-group-item\">\n                {{input type=\"checkbox\" checked=item.exclude}}\n                    <span>{{item.data}}</span>\n                {{input type=\"checkbox\" checked=item.breakpoint}}\n            </li>\n        {{/each}}\n    </ul>\n</div>\n<div style=\"position:absolute;bottom:0px;height:200px;right:0px;left:0px\">\n    {{ace-editor}}\n</div>\n"},{"key":"templatePath","val":"tmp/frontend/scenarios/templates/scenarios/scenario.hbs"},{"key":"ext","val":"hbs"}]},{"key":"snipplets","val":[{"key":"template","val":"<div style=\"position:absolute;top:0px;bottom:0px;left:0px;width:200px;\">\n    <ul class=\"nav nav-pills nav-stacked\">\n        {{#each item in model}}\n            {{#link-to \"snipplets.snipplet\" item tagName=\"li\"}}\n                <a href=\"#\">{{item.name}}</a>\n            {{/link-to}}\n        {{/each}}\n    </ul> \n</div>\n<div style=\"position:absolute;top:0px;bottom:0px;left:200px;right:0px;\">\n    {{outlet}}\n</div>\n"},{"key":"templatePath","val":"tmp/frontend/scenarios/templates/snipplets.hbs"},{"key":"ext","val":"hbs"}]},{"key":"snipplet","val":[{"key":"template","val":"<div style=\"position:absolute;bottom:200px;top:0px;right:0px;left:0px\">\n    {{model.name}}\n    <form {{action \"handleSubmit\" on=submit}}>\n        {{input value=\"hello\"}}\n    </form>\n</div>\n<div style=\"position:absolute;bottom:0px;height:200px;right:0px;left:0px\">\n    {{ace-editor}}\n</div>\n"},{"key":"templatePath","val":"tmp/frontend/scenarios/templates/snipplets/snipplet.hbs"},{"key":"ext","val":"hbs"}]},{"key":"stub-data-details","val":[{"key":"template","val":"<div style=\"position:absolute;top:0px;bottom:0px;right:0px;left:0px;\">\n    <div id=\"ace-editor\" style=\"z-index:10;position:absolute;bottom:0px;top:0px;right:0px;left:0px\" />\n</div>\n"},{"key":"templatePath","val":"tmp/frontend/sessions/templates/stub-data-details.html"},{"key":"ext","val":"html"}]},{"key":"stub-data-list","val":[{"key":"template","val":"<table class=\"table table-hover table-striped table-condensed\">\n    <thead>\n        <tr>\n            <th>client/cobrand</th>\n            <th>url</th>\n            <th>date</th>\n        </tr>\n    </thead>\n    <tbody id=\"tab-body\">\n        <% _.each(sessions, function(session) { %>\n        <tr>\n            <td data-placement=\"top\" data-toggle=\"tooltip\" title=\"<%= session.get('message') %>\" ><a href=\"#/edit/<%= session.get('id') %>\"><%= session.get('username') + '/' + session.get('clientName') + '/' + session.get('cobrandName') %></a></td>\n            <td data-placement=\"top\" data-toggle=\"tooltip\" title=\"<%= session.get('searchParams') %>\" ><%= session.get('requestUrlWithParameters') %></td>\n            <td><%= session.get('timeString') %></td>\n        </tr>\n\n        <% }); %>\n    </tbody> \n</table>\n"},{"key":"templatePath","val":"tmp/frontend/sessions/templates/stub-data-list.html"},{"key":"ext","val":"html"}]},{"key":"stubDataDetails","val":[{"key":"code","val":"\nStubDataDetails = Backbone.View.extend({\n\n    initialize: function(){\n    \n    },\n    render: function(options){\n        if (options.id) {\n            var that = this;\n            this.session = new Session({id: options.id});\n            this.session.fetch({ //GET /sessions/1\n                success: function(session) {\n                    var template = _.template( $(\"#stub-data-details\").html(), {session: session} );\n                    that.$el.html( template );\n                    that.editor = ace.edit('ace-editor');\n                    that.editor.setTheme(\"ace/theme/twilight\");//twilight, ambiance\n                    that.editor.getSession().setMode(\"ace/mode/json\");\n                    that.editor.setShowPrintMargin(false);\n                    that.editor.getSession().setTabSize(2);\n                    that.editor.getSession().setValue(vkbeautify.json(JSON.stringify(session)));\n                }\n            });\n        } else {\n            //new\n        }\n\n        return this;\n    },\n    copySession: function(username) {\n        console.log('POST: ' + this.session.get('id'));\n        $.post('/sessions/copySession', {id: this.session.get('id'), username: username}, function(ret) {\n            console.log(ret);\n            var o = JSON.parse(ret);\n            console.log(o.id);\n            router.navigate('#/edit/' + o.id, {trigger: true});\n        });\n    },\n    updateSession: function() {\n        var val = this.editor.getSession().getValue();\n        var o = JSON.parse(val);\n        //PUT /sessions/id  \n        this.session.save(o, {\n            success: function(oo) {\n                //router.navigate('#/edit/' + that.session.id, {trigger: true});\n            }\n        });\n    },\n    deleteSession: function() {\n        //DELETE /sessions/id  \n        this.session.destroy({\n            success: function() {\n                router.navigate('', {trigger: true});\n            }\n        });\n    },\n    devOnFly: function() {\n        var path = window.location.pathname;\n        var hash = window.location.hash;\n        var pathParts = path.split('/');\n        var hashParts = hash.split('/');\n        var version = pathParts.pop();\n        var app = pathParts.pop();\n        var id = hashParts.pop();\n\n        var host = this.session.get('lastRequestIpAddr') || 'localhost';\n\n        window.location.href = 'http://' + host + ':8888/apps/' + app + '/' + version + '/' + id;\n    }\n\n});\n\n"},{"key":"codePath","val":"tmp/frontend/sessions/views/stubDataDetails.js"},{"key":"ext","val":"js"}]},{"key":"stubdatalist","val":[{"key":"code","val":"\nStubDataList = Backbone.View.extend({\n\n    initialize: function(){\n\n    },\n    fetchNew: function() {\n        var sessions = new Sessions();\n        var that = this;\n        sessions.fetch({\n            success: function(data) {\n                that.sessions = data.models;\n                for (var i = 0; i < that.sessions.length; i++) {\n                    var model = that.sessions[i];\n                    var date = new Date(model.get('serverTime'));\n                    model.set('timeString', \n                        date.getMonth() + '/' + \n                        date.getDate() + '/' + \n                        date.getFullYear() + \n                        ' (' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds() + ')');\n                }\n                that.filteredList = that.sessions;\n                that.render();\n             }\n        });\n    },\n    render: function(){\n        var template = _.template( $(\"#stub-data-list\").html(), {sessions: this.filteredList});\n        // Load the compiled HTML into the Backbone \"el\"\n        this.$el.html( template );\n        return this;\n    },\n    filterRecs: function(filterVal) {\n          this.filteredList = this.sessions.filter(function(item, index, array) {\n\n              var s = item.get('username') + '/' + item.get('clientName') + '/' + item.get('cobrandName') + ' | ' + item.get('requestUrlWithParameters') + ' | ' + item.get('searchParams') + ' | ' + item.get('message');\n              return s.indexOf(filterVal) != -1;\n\n          });\n          this.render();\n    }\n});\n\n"},{"key":"codePath","val":"tmp/frontend/sessions/views/stubdatalist.js"},{"key":"ext","val":"js"}]}]},{"key":"theModel_otherFiles","val":[{"key":"app","val":[{"key":"contents","val":"#!/usr/bin/env node\nvar pagebuild = require('./lib/pagebuild.js');\nvar domain = require('domain');\nvar d = domain.create();\nd.on('error', function(err) {\n      console.error(err);\n});\nvar express = require('express');\nvar bodyParser = require('body-parser');\nvar compression = require('compression');\nvar fs = require(\"fs\");\nvar p = require(\"path\");\nvar hbs = require('hbs');\nvar spawn = require(\"child_process\").spawn;\nvar app = express();\napp.use(bodyParser({limit: '50mb'}));\n//app.use(express.logger());\napp.use(compression());\napp.set('view engine', 'html'); //this allows us to use .html files instead of .hbs files\napp.engine('html', hbs.__express);\n\n\n\n\n/********* sessions *********/\nvar StubDataProvider = require('./backend/stubDataProvider').StubDataProvider;\n/**\n * business objects\n */\nvar provider = new StubDataProvider('test', 'localhost', 27017);\n\n//sessions app\napp.get(/^\\/sessions\\/\\w+\\/[0-9]+$/, function(req, res){\n    res.render('sessions', pagebuild.getPageObject('sessions'));\n});\n\n//list\napp.get(/^\\/sessions\\/list$/, function(req, res){\n    provider.getList(req.query.appName, req.query.releaseVersion, function(list) {\n        res.end(JSON.stringify(list));\n    });\n});\n\napp.post(/^\\/sessions$/, function(req, res){\n\n    res.set({\n        'Access-Control-Allow-Origin': '*'\n    });\n    //console.log('POST : ' + JSON.stringify(req.body));\n    provider.save(req.body, function() {\n\n        res.end(JSON.stringify({}));\n\n    });\n\n});\n\napp.post(/^\\/sessions\\/copySession/, function(req, res){\n\n    console.log('POST : ' + req.body.id + ' ' + req.body.username);\n    var id = req.body.id;\n    var username = req.body.username;\n    if (id) {\n        provider.findById(id, function(result) {\n\n            delete result._id;\n            if (result.message.indexOf(':') != -1) {\n                var parts = result.message.split(':');\n                parts[0] = username;\n                result.message = parts.join(':');\n            } else {\n                result.message = username + ':' + result.message;\n            }\n            provider.save(result, function(newItem) {\n\n                res.end(JSON.stringify({id: newItem._id}));\n\n            });\n        });\n    }\n\n});\n\napp.put(/^\\/sessions\\/[0-9a-z]{24}$/, function(req, res){\n\n    console.log('PUT : ' + req.body._id);\n    provider.save(req.body, function() {\n        res.end(JSON.stringify({}));\n    });\n});\n\napp.delete(/^\\/sessions\\/[0-9a-z]{24}$/, function(req, res){\n\n    console.log('DELETE');\n    var parts = req.path.split('/');\n    var id = parts.pop();\n    provider.remove(id, function(newItem) {\n        res.end(JSON.stringify({}));\n    });\n\n});\n\napp.get(/^\\/sessions\\/[0-9a-z]{24}$/, function(req, res){\n\n    res.set({\n        'Access-Control-Allow-Origin': '*'\n    })\n\n    var id = req.path.split('/').pop();\n    try {\n        provider.findById(id, function(result) {\n\n            //order so they look nicer\n            var keys = ['name', 'message', 'appName', 'releaseVersion', 'api', 'PAGE_DATA']\n            var o = {};\n            keys.forEach(function(key) {\n                o[key] = result[key];\n            });\n            for (var key in result) {\n                if (keys.indexOf(key) == -1) {\n                    o[key] = result[key];\n                }\n            }\n            o.lastRequestIpAddr = req.ip;\n            res.end(JSON.stringify(o));\n\n        });\n    } catch(e) {\n        res.end(JSON.stringify({}));\n    }\n});\n\n//scenarios app\napp.get(/^\\/scenarios$/, function(req, res){\n    res.render('scenarios', pagebuild.getPageObject('scenarios'));\n});\n\n//top index page\napp.get('/', function(req, res){\n    res.render('index', {});\n});\n\napp.use('/frontend', express.static(p.join( __dirname, 'frontend')));\napp.use('/bower_components', express.static(p.join( __dirname, 'bower_components')));\n\n\nvar port = process.argv[2] || 3000;\napp.listen(port);\n\n"},{"key":"path","val":"tmp/app.js"},{"key":"ext","val":"js"}]},{"key":"bower","val":[{"key":"contents","val":"{\n    \"name\": \"scenarios\",\n    \"version\": \"0.0.0\",\n    \"description\": \"\",\n    \"ignore\": [\n        \"**/.*\",\n        \"node_modules\",\n        \"bower_components\",\n        \"tests\"\n    ],\n    \"dependencies\": {\n        \"bootstrap\": \"~3.0.3\",\n        \"angular\": \"~1.2.21\",\n        \"backbone\": \"*\",\n        \"requirejs\": \"*\", \n        \"ace-builds\": \"~1.1.1\"\n    }\n}\n"},{"key":"path","val":"tmp/bower.json"},{"key":"ext","val":"json"}]},{"key":"Gruntfile","val":[{"key":"contents","val":"/*global module:false*/\nmodule.exports = function(grunt) {\n    console.log(\"--------------------------\");\n    console.log(\"Appstack\");\n    console.log(\"--------------------------\");\n\n    var karmaOptions = { configFile: 'karma.conf.js' };\n\n    // Determine if we should include the code coverage preprocessor.\n    // \"On\" by default.\n    if (grunt.option(\"no-coverage\")) {\n        karmaOptions[\"preprocessors\"] = {};\n    }\n\n    // Determine if we should include the code coverage preprocessor.\n    // \"On\" by default.\n    if (grunt.option(\"chrome\")) {\n        karmaOptions[\"browsers\"] = [\"Chrome\"];\n    }\n\n    // Project configuration.\n    grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n\n        // https://github.com/karma-runner/grunt-karma\n        karma: {\n            options: karmaOptions,\n            unit: {\n                singleRun: true\n            },\n            debug: {\n                singleRun: false\n            }\n        },\n\n        // https://github.com/gruntjs/grunt-contrib-jshint\n        jshint: {\n            options: {\n                curly: true,\n                eqeqeq: true,\n                immed: true,\n                latedef: true,\n                newcap: true,\n                noarg: true,\n                sub: true,\n                undef: true,\n                boss: true,\n                eqnull: true,\n                browser: true,\n                globals: {\n                    jQuery: true,\n                    Ember: true\n                }\n            },\n            files: ['grunt.js', 'scripts/**/*.js', 'test/**/*.js']\n        },\n        emberTemplates: {\n            compile: {\n                options: {\n                    templateName: function(filePath) {\n                        return filePath.replace(/.*\\/templates\\//, '');\n                    }\n                },\n                files: {\n                    './test/templates.js': [\n                        './templates/bookings.hbs', './templates/bookings/*.hbs', './templates/components/*.hbs',\n                        '../shared/templates/components/*.hbs'\n                    ]\n                }\n            }\n        },\n        db: {\n            create: {},\n            migrate: {},\n            clearMongo: {},\n            getData:{}\n        },\n        frontend: {\n            compile: {}\n        },\n        pebbletools: {\n            bundle: {\n              outputFile: 'appstack.json',\n              clientFiles: [\n                'frontend/scenarios/components/*.js', 'frontend/scenarios/controllers/*.js', 'frontend/scenarios/models/*.js', 'frontend/scenarios/routes/**/*.js',\n                'frontend/sessions/collections/*.js', 'frontend/sessions/models/*.js', 'frontend/sessions/router.js' \n              ],\n              serverFiles: [\n              \n              ],\n              serverTestFiles: [\n             \n              ],\n              testFiles: [\n            \n              ],\n              templateFiles: [\n                'frontend/scenarios/templates/**/*.hbs',\n                'frontend/sessions/templates/*.html'\n              ],\n              templateCodeFiles: [\n                'frontend/sessions/views/*.js'\n              ],\n              templateTestFiles: [\n              ],\n              accessPoints: [\n             \n              ],\n              accessPoints: 'config',\n              viewFiles: ['views/*.html'],\n              otherFiles: ['app.js', 'bower.json', 'Gruntfile.js', 'package.json', 'README.md', 'grunt-tasks/**/*.js'] \n            },\n            setup: {}\n        }\n    });\n\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n    grunt.loadNpmTasks('grunt-ember-templates');\n    grunt.loadNpmTasks('grunt-contrib-compass');\n    grunt.loadNpmTasks('grunt-karma');\n    grunt.loadNpmTasks('grunt-pebbletools');\n\n    // Default task.\n    grunt.registerTask('test', ['emberTemplates', 'karma:unit', 'assetsCheck', 'analytics:compile']);\n    grunt.registerTask('test-start', ['emberTemplates', 'karma:debug:start']);\n    grunt.registerTask('test-run', ['emberTemplates', 'karma:debug:run']);\n    grunt.registerTask('default', ['emberTemplates', 'karma', 'jshint']);\n    grunt.registerTask('templates', ['emberTemplates']);\n\n    grunt.loadTasks('grunt-tasks');\n\n};\n\n"},{"key":"path","val":"tmp/Gruntfile.js"},{"key":"ext","val":"js"}]},{"key":"package","val":[{"key":"contents","val":"{\n    \"name\": \"scenarios\",\n    \"version\": \"0.0.1\",\n    \"dependencies\": {\n        \"body-parser\": \"*\",\n        \"compression\": \"*\",\n        \"express\": \"*\",\n        \"mongodb\": \"*\",\n\t\t\"request\": \"*\",\n        \"http\": \"*\",\n        \"mocha\": \"*\", \n        \"pg\": \"*\",\n        \"hbs\": \"*\",\n        \"assert\": \"*\",\n        \"pretty-data\": \"*\",\n        \"pebble-object-json\": \"*\",\n        \"pebble-object-xmldom\": \"*\",\n        \"pebble-shared-node\": \"*\",\n        \"selenium-webdriver\": \"*\"\n    },\n    \"devDependencies\": {\n        \"bower\": \"^1.3.3\",\n        \"karma\": \"^0.12.15\",\n        \"karma-chrome-launcher\": \"^0.1.3\",\n        \"karma-coverage\": \"^0.2.1\",\n        \"karma-junit-reporter\": \"^0.2.2\",\n        \"mocha\": \"^1.18.2\",\n        \"karma-mocha\": \"^0.1.3\",\n        \"karma-phantomjs-launcher\": \"^0.1.4\",\n        \"chai\": \"^1.9.1\",\n        \"chai-as-promised\": \"4.1.1\",\n        \"karma-chai\": \"^0.1.0\",\n        \"istanbul\": \"^0.2.8\",\n        \"grunt\": \"^0.4.4\",\n        \"grunt-contrib-compass\": \"^0.7.2\",\n        \"grunt-karma\": \"^0.8.3\",\n        \"grunt-pebbletools\": \"*\",\n        \"grunt-contrib-jshint\": \"^0.10.0\",\n        \"sinon\": \"^1.9.1\",\n        \"sinon-chai\": \"^2.5.0\",\n        \"handlebars\": \"^1.3.0\",\n        \"ember-template-compiler\": \"^1.6.0-beta.3\",\n        \"grunt-ember-templates\": \"^0.4.21\"\n    }\n}\n"},{"key":"path","val":"tmp/package.json"},{"key":"ext","val":"json"}]},{"key":"README","val":[{"key":"contents","val":"# nodejs stack\n\n- app.js: the app\n- datastores: relational databases, nosql stores, etc.\n- cache: cache mechanisms, such as redis \n- backend: app backend, libs, data, etc\n- frontend: app frontend, such as ember, angular, etc. \n- automation: e2e testing\n- deploy: deployment scripts\n\neach directory may have grunt-tasks, tests, etc.\n\n### app.js\n\nThe app can be run as ./app.js \n\nIt takes parameters to tell which modules to use.\n- frontend=ember|backbone|angular\n- datastore=mongo|postgres|mysql\n\n### json api\n\ntry to follow json api which should help for caching (real-time system), etc.\n\n### datastores and caches\n\nDatastores are installed into the system, follow installation guides on\nrespective sites.  Each datastore has a provider class that implements an\ninterface expected by app.js or the business tier such that the query param\ndatastore=mongodb can tell it which provider to require.\n\n\n### backend\n\nBusiness logic for the app.  Compilable and testable.\n\n\n## installation\n\n##### MongoDB\n\nMac\n\n    brew install mongodb\n    mkdir -p /data/db\n    sudo chown rtsunoda /data/db\n    mongod\n\n## Quick Start\n\nAssuming you have nodejs installed.  \n\n    npm install\n    bower install\n\nStart the server.\n\n\t./app.js\n\n## scenarios\n\nSoftware to drive automation thru the business.  The issue tracker can be\nminimal as this could be a plug in for other systems.\n\nScenario\n- isTest: some scenarios can be used just to manually verify.\n- actions\n\nIssues\n- type: story, bug\n- owner\n\nStories/bugs have a one-to-many relationship with automation tests.  When\ndeveloping a story/bug automation tests are built.  Test suites are run by\nrunning all tests for all stories/bugs for all versions.  The philosophy is\ndon't worry about duplicates so you don't have to manage dependencies.  Other\nthan ensuring features, try to contain the bugs that keep causing problems.\nWhen you don't need a feature you just delete it along with it's tests.\n\nSometimes the feature or bug will be specific to a particular function of\ncomponents in the app.  In these cases, unit tests should be applied.  The\nphilosophy is those components should work according to specifications.  For\nexample, if a certain validation is needed, it needs to be added to the\ncomponent and a unit test should be written.  If possible the code should be\ncommented with the story/bug id.\n\n## UI\n\nIn its compact form it should search and execute scenarios.  In its expanded\nform you should be able to create, edit, delete actions and scenarios.\n\n## Runner\n\n- run: start from beg\n- breakpoint: if breakpoint remember index\n- resume: resume\n- exclude: excludes from run\n\n\n"},{"key":"path","val":"tmp/README.md"},{"key":"ext","val":"md"}]},{"key":"aws","val":[{"key":"contents","val":"//# AWS\n\n//### EC\n\n//need key/pair security file (ex. testhost.pem)\n\n\t//#might need to \n\t//chmod 400 testhost.pem\n\t//ssh -i testhost.pem ubuntu@54.200.115.81\n\n\n//### EIP\n\n//Better than dynamic DNS because switch takes time.\n\n//### VPC\n\n//VPC CIDR/16. Default VPC machine, 2 ip (public CIDR/24 and private CIRD/24).\n\n\n\n//## RDS \n\n////set security group so that you can access\n//mysql -h myinstance.mydnsnameexample.rds.amazonaws.com -P 3306 -u mymasteruser -p\n////or via ssl.  (download certificate from https://rds.amazonaws.com/doc/rds-ssl-ca-cert.pem and specify filename below)\n//mysql -h myinstance.mydnsnameexample.rds.amazonaws.com --ssl_ca=cert-rds-ssl-ca.pem\n"},{"key":"path","val":"tmp/grunt-tasks/aws.js"},{"key":"ext","val":"js"}]},{"key":"db-tasks","val":[{"key":"contents","val":"var fs = require(\"fs\");\nvar p = require(\"path\");\nvar pg = require(\"pg\");\nvar spawn = require(\"child_process\").spawn;\nvar Db = require('mongodb').Db;\nvar Connection = require('mongodb').Connection;\nvar Server = require('mongodb').Server;\nvar BSON = require('mongodb').BSON;\nvar ObjectID = require('mongodb').ObjectID;\nvar assert = require('assert');\nvar MongoClient = require('mongodb').MongoClient\n\nmodule.exports = function(grunt) {\n\n    //temp config\n    var config = {\n        connStr: \"pg://postgres:@localhost:5432/scenarios\"\n    };\n\n    var projectDir = process.cwd();\n    grunt.registerMultiTask('db', 'description', function() {\n        var done = this.async();\n        //var configStr = fs.readFileSync(p.join(projectDir, \"config.json\"));\n        //var config = JSON.parse(configStr.toString());\n\n        switch (this.target) {\n\n            case 'create':\n                create(done);\n                break;\n\n            case 'migrate':\n                migrate(done);\n                break;\n            \n            case 'getData':\n                getData(done);\n                break;\n            \n            case 'clearMongo':\n                clearMongo(done);\n                break;\n        }\n    });\n\n    function create(done) {\n\n        var exec = require('child_process').exec;\n\n        var execStr = 'createdb scenarios';\n\n        exec(execStr, function (error, stdout, stderr) {\n            console.log(stderr);\n            //maybe even 0 warning(s) ...\n            //if (stderr.indexOf('\\n0 error(s)') !== -1) {\n            if (!stderr) {\n                done(true);\n            } else {\n                //grunt.log.writeln('stderr: ' + stderr);\n                done(false);\n            }\n        });\n    }\n\n    function migrate(done) {\n\n        var pgclient = new pg.Client(config.connStr);\n        pgclient.connect();\n\n        var path = p.join(projectDir, 'datastore', 'pg_scripts', 'v1.0');\n        fs.readdir(path, function (err, files) {\n            if (err) {\n                throw err;\n            }\n\n            files.map(function (file) {\n                return p.join(path, file);\n            }).filter(function (file) {\n                console.log(file);\n                return fs.statSync(file).isFile();\n            }).forEach(function (file) {\n                console.log(file.trim());\n                console.log(\"%s (%s)\", file, p.extname(file));\n                var query = pgclient.query(file.trim());\n                query.on(\"end\", function (result) {\n                    pgclient.end();\n                });\n            });\n            done(false);\n        });\n\n    }\n\n\n    function initMongo() {\n        var db = new Db('test', new Server('localhost', 27017));\n        db.open(function(err, db) {\n\n            // Create the collection\n            db.createCollection('stubdata', function(err, result) {\n\n                // Retry to get the collection, should work as it's now created\n                db.collection('stubdata', {strict:true}, function(err, col3) {\n                    assert.equal(null, err);\n                    db.close();\n                });\n            });\n        });\n    }\n\n    function clearMongo(done){\n        MongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {\n            var collection = db.collection('stubdata');\n            collection.remove({}, function() {\n                done(true);\n                db.close();\n            });\n        });\n    };\n\n    function getData(done){\n        \n        var format = require('util').format;\n\n        var appName = 'shopping';\n        var version = '144';\n        \n        MongoClient.connect('mongodb://127.0.0.1:27017/test', function(err, db) {\n            //if(err) throw err;\n            var dir = p.join('..', '..', 'dev', 'repos', 'dev', 'fly', 'apps', appName, 'data', version);\n            console.log(dir);\n            var files = fs.readdirSync(dir);\n            files.forEach(function(file) {\n                if (file.indexOf('.json') != -1 && file.indexOf('.swp') == -1) {\n                    \n                    var filePath = p.join(dir, file);\n                    var fileContents = fs.readFileSync(filePath, 'utf8');\n                    var data  = JSON.parse(fileContents);\n                    var collection = db.collection('stubdata');\n                    var name = file.replace('.json', ''); \n                    data.name = name;\n                    data.appName = appName;\n                    data.releaseVersion = version;\n                    collection.insert(data, function(err, docs) {\n\n                    });\n                }\n            });\n\n            done(true);\n            db.close();\n        });\n    };\n};\n    \n"},{"key":"path","val":"tmp/grunt-tasks/db-tasks.js"},{"key":"ext","val":"js"}]}]}]}