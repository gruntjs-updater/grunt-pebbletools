{"key":"standard_bundle","val":[{"key":"theModel_appInstances","val":[{"key":"theInstance","val":[{"key":"description","VAL_CDATA":"The standard library with no styling.  This library is always required."},{"key":"deployment","val":[{"key":"theControlApp","val":[{"key":"name","val":"Test Standard Library"},{"key":"description"},{"key":"testItem","val":[{"key":"parent","attr":{"ref":"a2"}},{"key":"text","val":"hello"},{"key":"number","val":"10"},{"key":"date","val":"1/10/2012"},{"key":"bool","val":"true"}]},{"key":"testItems","val":[{"key":"a0","val":[{"key":"parent","attr":{"ref":"a2"}},{"key":"text","val":"test0"},{"key":"number","val":"10"},{"key":"date","val":"1/10/2012"},{"key":"bool","val":"true"}]},{"key":"a1","val":[{"key":"parent","attr":{"ref":"_top"}},{"key":"text","val":"test1"},{"key":"number","val":"1"},{"key":"date","val":"1/1/2012"},{"key":"bool","val":"true"}]},{"key":"a2","val":[{"key":"parent","attr":{"ref":"a1"}},{"key":"text","val":"test2"},{"key":"number","val":"2"},{"key":"date","val":"1/2/2012"},{"key":"bool","val":"true"}]},{"key":"a3","val":[{"key":"parent","attr":{"ref":"_top"}},{"key":"text","val":"test3"},{"key":"number","val":"3"},{"key":"date","val":"1/3/2012"},{"key":"bool","val":"true"}]},{"key":"a4","val":[{"key":"parent","attr":{"ref":"a2"}},{"key":"text","val":"test4"},{"key":"number","val":"4"},{"key":"date","val":"1/4/2012"},{"key":"bool","val":"true"}]},{"key":"a5","val":[{"key":"parent","attr":{"ref":"a2"}},{"key":"text","val":"test5"},{"key":"number","val":"5"},{"key":"date","val":"1/5/2012"},{"key":"bool","val":"true"}]},{"key":"a6","val":[{"key":"parent","attr":{"ref":"_top"}},{"key":"text","val":"test6"},{"key":"number","val":"6"},{"key":"date","val":"1/6/2012"},{"key":"bool","val":"true"}]},{"key":"a7","val":[{"key":"parent","attr":{"ref":"a1"}},{"key":"text","val":"test7"},{"key":"number","val":"7"},{"key":"date","val":"1/7/2012"},{"key":"bool","val":"true"}]},{"key":"a8","val":[{"key":"parent","attr":{"ref":"_top"}},{"key":"text","val":"test8"},{"key":"number","val":"8"},{"key":"date","val":"1/8/2012"},{"key":"bool","val":"true"}]},{"key":"a9","val":[{"key":"parent","attr":{"ref":"a2"}},{"key":"text","val":"test9"},{"key":"number","val":"9"},{"key":"date","val":"1/9/2012"},{"key":"bool","val":"true"}]}]},{"key":"testEmbItems","val":[{"key":"a0","val":[{"key":"text","val":"testEmbItem0"}]},{"key":"a1","val":[{"key":"text","val":"testEmbItem1"}]},{"key":"a2","val":[{"key":"text","val":"testEmbItem2"}]},{"key":"a3","val":[{"key":"text","val":"testEmbItem3"}]},{"key":"a4","val":[{"key":"text","val":"testEmbItem4"}]}]}]},{"key":"groupMaps"},{"key":"accessPoints","val":[{"key":"testAppControl","val":[{"key":"topControl","attr":{"ref":"testAppControl"}},{"key":"config","val":"{\n  \"dependencies\": [\n    {\n    \"lib\": \"standard\"\n  }\n  ],\n  \"accessPoint\":{\n    \"imports\": [\"libAccessPoint\"],\n    \"files\": [\n      \"karma/testEnv.js\",\n      \"frontend/accessPoints/testAppControl/src/testServer.js\",\n      \"frontend/test/lib/object/*\",\n      \"frontend/test/lib/shared/*\",\n      \"frontend/test/lib/client/*\",\n      \"frontend/test/controls/*\"\n    ]\n  }\n}\n"}]},{"key":"testDragDrop","val":[{"key":"topControl","attr":{"ref":"testDragDrop"},"val":[{"key":"array","val":[{"key":"a0","val":"test0"},{"key":"a1","val":"test1"},{"key":"a2","val":"test2"},{"key":"a3","val":"test3"},{"key":"a4","val":"test4"}]}]},{"key":"dependencies","val":[{"key":"a1","attr":{"ref":"standard"}}]}]},{"key":"testImage","val":[{"key":"topControl","attr":{"ref":"testImage"}},{"key":"dependencies","val":[{"key":"a1","attr":{"ref":"standard"}}]}]},{"key":"testNumber","val":[{"key":"topControl","attr":{"ref":"testNumber"}},{"key":"dependencies","val":[{"key":"a1","attr":{"ref":"standard"}}]}]}]}]},{"key":"clientScripts","val":[{"key":"client","val":[{"key":"devCode","val":"\n/**\n * @namespace\n */\npebble.libs.standard= {};\n\n/**\n * @namespace\n */\npebble.serverProxies = {};\n/**\n * @namespace\n */\npebble.libs.standard.interfaces = {};\n"},{"key":"codePath","val":"frontend/src/lib/client/client.js"},{"key":"ext","val":"js"}]},{"key":"AppControlBase","val":[{"key":"devCode","val":"/**\n * top control base\n * @constructor\n * @param {pebble.libs.standard.interfaces.ModuleAccess} moduleAccess\n * @param {pebble.Pebble} dm\n * @param {boolean} isLoadTop\n * @extends {pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.AppControlBase = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n\n\n\tthis.isAppControlBase = true;\n\n\tthis.watchOnline();\n\tthis.watchOrientation();\n\tthis.watchGeo();\n\tthis.setDocumentAttributes();\n\tthis.layoutStateManager = new pebble.libs.standard.LayoutStateManager();\n};\n\npebble.inherits(pebble.libs.standard.AppControlBase, pebble.libs.standard.ClientControl);\n\npebble.libs.standard.AppControlBase.prototype.initialize = function(cb) {\n\t//check cookie\n//\tvar userCookie = this.getCookie('user');\n//\tif (userCookie == null) { //no cookie\n\t\t\n\tvar keys = Object.keys(pebble.serverProxies).length;\n\n\t//init each server\n\tfor (var key in pebble.serverProxies) {\n\n\t\tvar obj = new pebble.Pebble();\n\t\tvar params = obj.getParams();\n\t\tparams.setRef('.', key + '.doInit');\n\t\tparams.setRef('clientInstance', this.getRef('.'));\n\t\tparams.setRef('topControl', this.getRef('.'));\n\t\tvar that = this;\n\t\tobj.setCallback( function(proxyKey) {\n\t\t\t\n\t\t\treturn function(init) {\n\n\t\t\t\tinit.remove('_generate');\n\n\t\t\t\t//only use SERVER as the authenticating server\n\t\t\t\tif ( proxyKey === 'SERVER') {\n\t\t\t\t\tvar user = init.get('user');\n\t\t\t\t\t//that.setCookie('user', user.toString());\n\t\t\t\t\tthat.set('global.user', user);\n\t\t\t\t}\n\n\t\t\t\t//set session\n\t\t\t\tif (obj.get('sessionId')) {\n\t\t\t\t\tpebble.serverProxies[proxyKey].sessionId = obj.getRef('sessionId');\n\t\t\t\t}\n\t\t\t\tkeys -= 1;\n\t\t\t\tif (keys == 0) {\n\t\t\t\t\tcb();\n\t\t\t\t}\n\t\t\t}\t\n\t\t\t\n\t\t}(key)\t\n\n\t\t);\n\t\tthis.resolve(obj);\n\n\t}\n//\t} else {\n//\tvar user = new pebble.Pebble(userCookie);\n//\tconsole.log(userCookie);\n//\tglobal.set('user', user);\n//\tthis._loadApp(global);\n//\t}\n};\n\npebble.libs.standard.AppControlBase.prototype.startHistoryWatch = function() {\n\n\tthis.layoutStateManager.startHistoryWatch(this);\n\n};\n\n/**\n * allows binding components to set some global attributes\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {string} field\n * @param {string} relPath\n * @param {Function} cb\n * @return {boolean}\n * @override\n */\npebble.libs.standard.AppControlBase.prototype.onDataModelChanged = function(source, field, relPath, cb) {\n\tvar that = this;\n\tpebble.libs.standard.AppControlBase.superClass_.onDataModelChanged.call(this, source, field, relPath, function() {\n\t\t\n\t\tif (source != that && field == 'global.title') {\n\t\t\tdocument.title = that.getOriginInfo('global.title').getValue() || 'Pebble Fields';\n\t\t} else if (source != that && field == 'global.notification') {\n\t\t\tvar notification = that.getOriginInfo('global.notification').getValue();\n\t\t\tif (notification != null && window.webkitNotifications.checkPermission() == 0) { // 0 is PERMISSION_ALLOWED\n\t\t\t\t// function defined in step 2\n\t\t\t\tvar note = window.webkitNotifications.createNotification('icon.png', 'Notification Title', notification);\n\t\t\t\t//notification_test.ondisplay = function() { ... do something ... };\n\t\t\t\tnote.onclose = function() { \n\n\t\t\t\t};\n\t\t\t\tnote.show();\n\t\t\t} else {\n\t\t\t\twindow.webkitNotifications.requestPermission();\n\t\t\t}\n\t\t}\n\t\tcb();\n\t});\n\n\treturn false;\n};\npebble.libs.standard.AppControlBase.prototype.setScreen = function() {\n\t//screen.availWidth\n\t//screen.availHeight\n};\npebble.libs.standard.AppControlBase.prototype.setLocation = function () {\n\t//location.href\t\t\t(ie http://www.pebblefields.com/tests/remira.html)\n\t//location.pathname   (ie /tests/remira.html)\n\t//location.port\n\t//location.search for  //obj[ decodeURIComponent( pair[0] ) ] = decodeURIComponent( pair[1] ); \n\t//location.hash\n\t//location.host\n\t//location.hostname\n\n};\n//performance.memory ...\n\n\npebble.libs.standard.AppControlBase.prototype.setNavigator = function() {\n\t//navigator.appCodeName\n\t//navigator.appName\n\t//navigator.appVersion\n\t//navigator.cookieEnabled\n\t//navigator.platform\n\t//navigator.userAgent\n\t//navigator.systemLanguage\n};\n//this also can be done in xhr as fallback\npebble.libs.standard.AppControlBase.prototype.watchOnline = function() {\n\tvar that = this;\n\tif (navigator.onLine != null) {\n\n\t\tthat.setOnline(navigator.onLine);\n\n\t\twindow.addEventListener('offline', function(e) {\n\t\t\tthat.setOnline(navigator.onLine);\n\t\t}, false);\n\n\t\twindow.addEventListener('online', function(e) {\n\t\t\tthat.setOnline(navigator.onLine);\n\t\t}, false);\n\t}\n};\npebble.libs.standard.AppControlBase.prototype.setDocumentAttributes = function() {\n\tvar data = new pebble.Pebble();\n\tdata.setValue('.', document.title);\n\tvar origin = this.getOriginInfo('global.title');\n\torigin.set(data, this, false);\n};\npebble.libs.standard.AppControlBase.prototype.setOnline = function(val){\n\tvar data = new pebble.Pebble();\n\tdata.setValue('.', val);\n\tvar origin = this.getOriginInfo('global.online');\n\torigin.set(data, this, false);\n};\npebble.libs.standard.AppControlBase.prototype.watchOrientation = function() {\n\twindow.addEventListener('orientationchange', function() {\n\t\tvar orientation = window.orientation;\n/*\t\t\n\t\tif (orientation == 0) {\n\t\t\t//portraitMode, do your stuff here\n\t\t}\n\t\telse if (orientation == 90) {\n\t\t\t//landscapeMode\n\t\t}\n\t\telse if (orientation == -90) {\n\t\t\t//landscapeMode\n\t\t}\n\t\telse if (orientation == 180) {\n\t\t\t//portraitMode\n\t\t}\n\t\telse {\n\t\t}\n*/\n\t\tvar data = new pebble.Pebble();\n\t\tdata.setValue('.', orientation.toString());\n\t\tvar origin = this.getOriginInfo('global.orientation');\n\t\torigin.set(data, this, false);\n\n\t}, false);\n};\n/**\n * @suppress {checkTypes} because some of this is not in official specs yet\n */\npebble.libs.standard.AppControlBase.prototype.watchGeo = function() {\n\n\tif (navigator.geolocation) {\n\t\tvar that = this;\n\t\tnavigator.geolocation.watchPosition(\n\t\t\t\tfunction(position) {\n\t\t\t\t\t//success\n\t\t\t\t\tthat.setGeo(position);\n\t\t\t\t}, \n\t\t\t\tfunction() { \n\t\t\t\t\t//error\n\n\t\t\t\t}, \n\t\t\t\t{enableHighAccuracy:true, maximumAge:30000,\ttimeout:27000}\n\t\t);\n\n//\t\tnavigator.geolocation.getCurrentPosition(function(position) {\n//\t\tthat.setGeo(position);\n//\t\t});\n\n\n\t} else {  \n\n\t}\n\n};\npebble.libs.standard.AppControlBase.prototype.setGeo = function(position) {\n\tvar data = new pebble.Pebble();\n\tdata.setValue('latitude', position.coords.latitude);\n\tdata.setValue('longitude', position.coords.longitude);\n\tdata.setValue('accuracy', position.coords.accuracy); //The accuracy of the current latitude and longitude readings (in metres)\n\tdata.setValue('speed', position.coords.speed);//The current speed reading in metres per second (you can simply multiply by 2.2369 to convert to miles per hour or multiply by 3.6 to convert to kilometres per hour)\n\tdata.setValue('altitude', position.coords.altitude);//The current altitude reading (in metres)\n\tdata.setValue('altitudeAccuracy', position.coords.altitudeAccuracy);//The accuracy of the current altitude reading (in metres)\n\n\tvar origin = this.getOriginInfo('global.geolocation');\n\torigin.set(data, this, false);\n};\npebble.libs.standard.AppControlBase.prototype.setCatchAppUpdates = function() {\n\tif (!!window.applicationCache) {\n\t\twindow.applicationCache.addEventListener('updateready', function(e) {\n\t\t\tif (window.applicationCache.status == window.applicationCache.UPDATEREADY) {\n\t\t\t\t// Browser downloaded a new app cache.\n\t\t\t\t// Swap it in and reload the page to get the new hotness.\n\t\t\t\twindow.applicationCache.swapCache();\n\t\t\t\tif (confirm('A new version of this site is available. Load it?')) {\n\t\t\t\t\twindow.location.reload();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Manifest didn't changed. Nothing new to server.\n\t\t\t}\n\t\t}, false);\n\t}\n\n\n//\t// Fired after the first cache of the manifest.\n//\tappCache.addEventListener('cached', handleCacheEvent, false);\n\n//\t// Checking for an update. Always the first event fired in the sequence.\n//\tappCache.addEventListener('checking', handleCacheEvent, false);\n\n//\t// An update was found. The browser is fetching resources.\n//\tappCache.addEventListener('downloading', handleCacheEvent, false);\n\n//\t// The manifest returns 404 or 410, the download failed,\n//\t// or the manifest changed while the download was in progress.\n//\tappCache.addEventListener('error', handleCacheError, false);\n\n//\t// Fired after the first download of the manifest.\n//\tappCache.addEventListener('noupdate', handleCacheEvent, false);\n\n//\t// Fired if the manifest file returns a 404 or 410.\n//\t// This results in the application cache being deleted.\n//\tappCache.addEventListener('obsolete', handleCacheEvent, false);\n\n//\t// Fired for each resource listed in the manifest as it is being fetched.\n//\tappCache.addEventListener('progress', handleCacheEvent, false);\n\n//\t// Fired when the manifest resources have been newly redownloaded.\n//\tappCache.addEventListener('updateready', handleCacheEvent, false);\n};\n/**\n * define worker in separate file 'myworker.js';\n * in that file, postMessage(i) back to page\n * not sure how to use or if useful yet\n */\npebble.libs.standard.AppControlBase.prototype.setWebWorkers = function() {\n\tif( typeof(Worker) !== 'undefined'){\n\t\tvar data = new pebble.Pebble();\n\t\tvar origin = this.getOriginInfo('global.webWorker.enabled');\n\t\torigin.set(data, this, false);\n\n\t\t//if(typeof(w)=='undefined') {\n//\t\t\tw = new Worker('myworker.js');\n\t\t//}\n\t\t//w.onmessage = function (event) {\n//\t\t\tdocument.getElementById('result').innerHTML=event.data;\n\t\t//};\n\t} else {\n\t\t// Sorry! No Web Worker support..\n\t}\n};\npebble.libs.standard.AppControlBase.prototype.setLocalStorage = function() {\n\t//make local storage availble (swap active storage ...)\n};\npebble.libs.standard.AppControlBase.prototype.setSessionStorage = function() {\n\n};\npebble.libs.standard.AppControlBase.prototype.getCookie = function(c_name)\t{\n\tvar i, x, y, ARRcookies = document.cookie.split(';');\n\tfor (i = 0; i < ARRcookies.length; i++) {\n\t\tx = ARRcookies[i].substr(0,ARRcookies[i].indexOf('='));\n\t\ty = ARRcookies[i].substr(ARRcookies[i].indexOf('=')+1);\n\t\tx = x.replace(/^\\s+|\\s+$/g,'');\n\t\tif (x == c_name) {\n\t\t\treturn unescape(y);\n\t\t}\n\t}\n};\npebble.libs.standard.AppControlBase.prototype.setCookie = function(c_name, value, exdays) {\n\tvar exdate = new Date();\n\texdate.setDate(exdate.getDate() + exdays);\n\tvar c_value = escape(value) + ((exdays == null) ? '' : '; expires=' + exdate.toUTCString());\n\tdocument.cookie = c_name + '=' + c_value;\n};\n/**\n * @param {string} funcName\n * @param {pebble.Pebble} obj\n * @return {number}\n * @override\n */\npebble.libs.standard.AppControlBase.prototype.executeMethod = function(funcName, obj) {\n\tvar ret = 1;\n\t//list all ui public methods\n//\tif (funcName == 'login'){\n//\tthis.login(obj);\n//\t} else if (funcName == 'logout') {\n//\tthis.logout(obj);\n//\t} else {\n\treturn pebble.libs.standard.AppControlBase.superClass_.executeMethod.call(this, funcName, obj);\n//\t}\n//\treturn ret;\n};\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/AppControlBase.js"},{"key":"ext","val":"js"},{"key":"testCode","val":"\nvar topApp;\n\ndescribe('testAppControl', function () {\n\n\tfunction getBaseInnerMarkup() {\n\t\tvar ctrl = new pebble.Pebble();\n\t\tctrl.setRef('.', 'standard:Text');\n\n\t\tvar innerMarkup = new pebble.Pebble();\n\t\tinnerMarkup.set('div.control', ctrl);\n\n\t\treturn innerMarkup;\n\t}\n\n\tbeforeEach(function() {\n\n\t\tvar ready = false;\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\ttopApp && topApp.kill();\n\t\t\t\ttopApp = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top');\n\t\t\t\ttopApp.load(function() {\n\t\t\t\t\tready = true;\t\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn ready;\n\t\t}, 'wait for deployment and testAppControl', 300);\n\n\t\truns(function() {\n\n\t\t\tvar innerMarkup = getBaseInnerMarkup();\t\n\t\t\tvar dm = topApp.item;\n\n\t\t\tdm.set('innerMarkup', innerMarkup);\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\tctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\toriginInfo = ctrl1.getOriginInfo('model');\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\t});\n\n\tit ('can setData / getData', function() {\n\n\t\tvar returned = false;\n\t\truns(function() {\n\t\t\tvar obj = new pebble.Pebble();\n\t\t\tvar params = obj.getParams();\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('.', 'hello');\n\t\t\tparams.setRef('path', 'aaa.bbb');\n\t\t\tparams.set('data', data);\n\t\t\tobj.setCallback(function() { returned = true; });\n\t\t\ttopApp.item.setData(obj);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'setData should have returned', 300);\n\n\t\truns(function() {\n\n\t\t\texpect(topApp.item.getOriginInfo('aaa.bbb').getValue()).toEqual('hello'); \n\t\t});\n\t\t\n\t\tvar returned = false;\n\t\tvar obj = new pebble.Pebble();\n\t\truns(function() {\n\t\t\tvar params = obj.getParams();\n\t\t\tparams.setRef('path', 'aaa.bbb');\n\t\t\tobj.setCallback(function() { returned = true; });\n\t\t\ttopApp.item.getData(obj);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'getData should have returned', 300);\n\n\t\truns(function() {\n\t\t\texpect(obj.getValue('.')).toEqual('hello'); \n\t\t});\n\t\t\n\t\tvar returned = false;\n\t\truns(function() {\n\t\t\tvar obj = new pebble.Pebble();\n\t\t\tvar params = obj.getParams();\n\t\t\tparams.setRef('path', 'aaa.bbb');\n\t\t\tparams.set('data', null);\n\t\t\tobj.setCallback(function() { returned = true; });\n\t\t\ttopApp.item.setData(obj);\n\t\t});\n\n\t});\n\n\tit ('can getData of null will return empty item, thus empty is also null', function() {\n\n\t\tvar returned = false;\n\t\tvar obj = new pebble.Pebble();\n\t\truns(function() {\n\t\t\tvar params = obj.getParams();\n\t\t\tparams.setRef('path', 'aaa.bbb');\n\t\t\tobj.setCallback(function() { returned = true; });\n\t\t\ttopApp.item.getData(obj);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'getData should have returned', 300);\n\n\t\truns(function() {\n\t\t\texpect(obj.getRecords('.').length).toEqual(0); \n\t\t});\n\t});\n\n\tit ('can toggle a bool value (null=falsy is false)', function() {\n\n\t\tvar returned = false;\n\t\tvar obj = new pebble.Pebble();\n\t\truns(function() {\n\t\t\tvar params = obj.getParams();\n\t\t\tparams.setRef('path', 'ccc');\n\t\t\tobj.setCallback(function() { returned = true; });\n\t\t\ttopApp.item.toggle(obj);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'getData should have returned', 300);\n\n\t\truns(function() {\n\t\t\texpect(topApp.item.getOriginInfo('ccc').getValue()).toEqual('true'); \n\t\t});\n\t\t\n\t\tvar returned = false;\n\t\tvar obj = new pebble.Pebble();\n\t\truns(function() {\n\t\t\tvar params = obj.getParams();\n\t\t\tparams.setRef('path', 'ccc');\n\t\t\tobj.setCallback(function() { returned = true; });\n\t\t\ttopApp.item.toggle(obj);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'getData should have returned', 300);\n\n\t\truns(function() {\n\t\t\texpect(topApp.item.getOriginInfo('ccc').getValue()).toEqual('false'); \n\t\t});\n\t});\n\n\tit ('can loadControl ', function() {\n\n\t\tvar returned = false;\n\t\tvar obj = new pebble.Pebble();\n\t\tvar ctrlRef =  'standard:Text';\n\t\truns(function() {\n\t\t\tvar params = obj.getParams();\n\t\t\tparams.setRef('control', ctrlRef);\n\t\t\tobj.setCallback(function() { returned = true; });\n\t\t\ttopApp.item.modules['childmod0'].item.loadControl(obj);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'loadControl should have returned', 300);\n\n\t\truns(function() {\n\t\t\tvar ctrl = topApp.item.modules['childmod0'].item;\n\t\t\texpect(ctrl.getRef('.')).toEqual('theModel.libs.standard.controls.Text');\n\t\t});\n\t});\n\n\n\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/controls/AppControlBase.js"}]},{"key":"ArrayControl","val":[{"key":"devCode","val":"/**\n * @constructor\n * @param {pebble.libs.standard.interfaces.ModuleAccess} moduleAccess\n * @param {pebble.Pebble} dm\n * @param {boolean} isLoadTop\n * @extends {pebble.libs.standard.ArrayTreeBase}\n */\npebble.libs.standard.ArrayControl = function(moduleAccess, dm, isLoadTop) {\n\t/**\n\t * @type {boolean}\n\t */\n\tthis.isArrayControl = true;\n\t\n\tpebble.libs.standard.ArrayTreeBase.call(this, moduleAccess, dm, isLoadTop);\n\t\n\t/**\n\t * @type {Array.<pebble.Pebble>}\n\t */\n\tthis.showRecs; \t\t\t\t\t\t\t\t\t//per control records that are displayed\n\n\t/**\n\t * @type {number}\n\t */\n\tthis.lastDisplayIndex = -1;\n\t/**\n\t * @type {pebble.libs.standard.ClientControl}\n\t */\n\tthis.eventCtrl;\n\n\tthis.prependItems = [];\n\tthis.appendItems = [];\n\t\n\n\tvar innerMarkup = this.getOriginInfo('displayControl.innerMarkup').get();\n\tif (innerMarkup != null) {\n\t\t\n\t\tthis.innerMarkupStr = innerMarkup.getInnerXml();\n\t\t\n\t\tthis.isSimpleMarkup = this.innerMarkupStr.indexOf('<control ') == -1;\n\t}\n};\n\npebble.inherits(pebble.libs.standard.ArrayControl, pebble.libs.standard.ArrayTreeBase);\n\n/**\n * @param {string} itemMeta\n * @return {pebble.Pebble}\n */\npebble.libs.standard.ArrayControl.prototype.getArrayItemLoadItem = function (itemMeta) {\n\n\tvar array = this.origin.getCreateOnNull();\n\tvar item = array.get(itemMeta);\n\tif (item == null) {\n\t\titem = new pebble.Pebble(); //this shouldn't happen ...\n\t}\n\n\t//expensive!!!\n\tif (this.pCM instanceof pebble.libs.standard.ReferenceArray) {// || this.pCM instanceof Reference) {\n\t\t//get data from this.pCM where metaVal\n\t\tvar refArray = this.pCM.getOriginInfo('model').getCreateOnNull();\n\t\tvar recs = refArray.getRecords('.');\n\t\tfor (var i = 0; i < recs.length; i++) {\n\t\t\tvar rec = recs[i];\n\t\t\tif (rec.getRef('.') == itemMeta) {\n\t\t\t\titem.set('_config', rec);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\t\n\n\tvar displayControl = this.getOriginInfo('displayControl').get().getCopy('.');\n\tif (displayControl == null) {\n\t\tthrow new Error('no displayControl');\n\t}\n\n\tvar arrayControlPath = this.isCollection ? 'collection' : 'model';\n\tarrayControlPath += '.' + itemMeta;\n\n\tvar mapPath = displayControl.get('mapPath');\n\tif (mapPath != null) {\n\t\tarrayControlPath += '.' + mapPath.getRef('.');\n\t} \n\n\tif (displayControl.getRef('.') == null ) {\n\t\tdisplayControl.setRef('.', pebble.shared.TypeReferences.ControlBase.CONTROL_BASE);\n\t}\n\n\tdisplayControl.setRef('model._bind', arrayControlPath); //need\n\t//displayControl.setRef('baseArray._bind', 'arrayPass');\n\t//displayControl.setRef('thisPath', itemMeta);\n\n\treturn displayControl;\n};\n/**\n * @override\n */\npebble.libs.standard.ArrayControl.prototype.onDataModelChanged = function(source, field, relPath, cb) {\n\tvar that = this;\n\tpebble.libs.standard.ArrayControl.superClass_.onDataModelChanged.call(this, source, field, relPath, function() {\n\t\tvar elements = relPath.split('.');\n\n\t\t//TODO: it never makes it in this first condition!!! this is required for selection binding\n\t\tif (relPath.indexOf('singleSelectedMeta') != -1 && elements.length == 3 && group == that.getGroup() ){\t//not collections with/in collections\n\t\t\tvar group = elements[1];\n\t\t\t\n\t\t\tvar model = that.modelOrigin.getCreateOnNull()\n\t\t\tvar relMeta = model.getRef(relPath);\n\t\t\t\n\t////select page?\n\t//if (!that.isInCurrentPage(relMeta)) { \n\t//\tthat.renderPage(cb);\n\t//}\n\n\t\t\tif (that.getMainPath() == 'collection') {\n\t\t\t\t//if model selection changes need to tell children bound on collection\n\t\t\t\tvar oldMeta = that.getSingleSelectedMeta('collection');\n\t\t\t\tif (oldMeta != null) {\n\t\t\t\t\tvar isSelected = new pebble.Pebble();\n\t\t\t\t\tisSelected.setValue('.', 'false');\n\t\t\t\t\tvar isSelectedOriginInfo = that.getOriginInfo('collection.' + oldMeta + '._selection.' + group + '.selected');\n\t\t\t\t\tisSelectedOriginInfo.set(isSelected, null, false, function(){});\n\t\t\t\t}\n\t\t\t\tthat.setSelectedMeta('collection', relMeta, group, function() {\n\n\t\t\t\t\tvar isSelected = new pebble.Pebble();\n\t\t\t\t\tisSelected.setValue('.', 'true');\n\t\t\t\t\tvar isSelectedOriginInfo = that.getOriginInfo('collection.' + relMeta + '._selection.' + group + '.selected');\n\t\t\t\t\tisSelectedOriginInfo.set(isSelected, null, false, cb);\n\t\t\t\t});\n\t\t\t\n\t\t\t} else {\n\t\t\t\tcb();\n\t\t\t}\n\n\t\t} else if (field == 'arrayPages_' && source != that && relPath.indexOf('singleSelectedMeta') != -1) {\n\n\t\t\tthat.loadSub(cb);\t\n\t\t\t//that.renderPage(cb); \n\n\t\t} else if (field == 'model' && relPath.indexOf('selected') > 0 && elements.length == 4 ){\t//not collections with/in collections\n\t\t\telements.pop();//selected\n\t\t\tvar group = elements.pop();//group\n\t\t\telements.pop();//selection\n\t\t\tvar relMeta = elements.pop();\n\t\t\tvar model = that.modelOrigin.getCreateOnNull()\n\t\t\tvar selectionClass = that.getOriginInfo('displayControl.selectionClass').get();\n\t\t\tif (selectionClass != null) {\n\t\t\t\tvar selectionGroups = selectionClass.getRecords('.');\n\t\t\t\tfor (var i = 0; i < selectionGroups.length; i++) { \n\t\t\t\t\tvar selectionGroup = selectionGroups[i];\n\t\t\t\t\tif (selectionGroup.getRef('.') == group) {\n\n\t\t\t\t\t\tvar ele = that.getElementByMeta(relMeta);\n\t\t\t\t\t\tif (ele) {\n\t\t\t\t\t\t\tif (model.getBool(relPath)) {\n\n\t\t\t\t\t\t\t\tvar cls = selectionGroup.getValue('class'); \n\t\t\t\t\t\t\t\tele.className = cls;\n\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tele.className = '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//debugger;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\n\t\t\t\n\t\t\tif (that.getMainPath() == 'collection') {\n\t\t\t\tvar val = model.getBool(relPath);\n\t\t\t\tvar isSelected = new pebble.Pebble();\n\t\t\t\tisSelected.setValue('.', val);\n\t\t\t\tvar isSelectedOriginInfo = that.getOriginInfo('collection.' + relMeta + '._selection.' + group + '.selected');\n\t\t\t\tisSelectedOriginInfo.set(isSelected, null, false, cb);\n\n\t\t\t} else {\n\t\t\t\tcb();\n\t\t\t}\n\t\t\t\n\t\t} else if (that != source && field == 'sortFields' && relPath.indexOf('singleSelectedMeta') != -1 && relPath.split('.').length == 3 ){\t//not collections with/in collections\n\t\t\tvar sortFields = that.getOriginInfo('sortFields').get();\n\t\t\tvar relMeta = sortFields.getRef(relPath);\n\t\t\tif (relMeta != null) {\n\t\t\t\t\t\n\t\t\t\tvar selectedSortField = that.getOriginInfo('sortFields.' + relMeta).get();\n\t\t\t\tvar path = selectedSortField.getRef('path');\n\t\t\t\tif (path != null) {\n\t\t\t\t\tvar sortDir = selectedSortField.getValue('sortDir');\n\t\t\t\t\tthat.sortShowRecs(path, sortDir);\n\t\t\t\t}\n\n\t\t\t} \n\t\t\tcb();\n\t\t\n\t\t} else if (that != source && field == 'sortFields' && relPath.indexOf('sortDir') != -1 ){\t//not collections with/in collections\n\t\t\tvar sortFields = that.getOriginInfo('sortFields').get();\n\t\t\tvar selectedMeta = sortFields.getRef('_selection.default.singleSelectedMeta');\n\t\t\tif (selectedMeta != null) {\n\t\t\t\tvar selectedSortField = sortFields.get(selectedMeta);\n\t\t\t\tvar path = selectedSortField.getRef('path');\n\t\t\t\tif (path != null) {\n\t\t\t\t\tvar sortDir = selectedSortField.getValue('sortDir');\n\t\t\t\t\tthat.sortShowRecs(path, sortDir);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcb();\n\n\t\t\t\n\t\t} else {\n\t\t\t//one case source comes in as null it on rebind/selectedItemChanges of arrayDisplaySingleControl's item\n\t\t\tif (field.indexOf('filter.') != -1) {\n\n\t\t\t\tthat.loadSub(cb);\n\n\t\t\t//} else if ( source != null && that != source && field == 'model' && relPath == '.' && source.getId().indexOf(that.moduleAccess.getId()) != 0) { //source cannot be inside this (same as this triggering the data change)\n\t\t\t} else if ((field == 'collection' || field == 'model') && relPath == '.' )  { //source cannot be inside this (same as this triggering the data change)\n\n\t\t\t\tthat.loadSub(cb);\n\t\t\t\t\n\t\t\t} else {\n\n\t\t\t\tcb();\n\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn false;\n};\n\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {pebble.Pebble} data\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.ArrayControl.prototype.onBeforeArrayItemsDeleted = function(source, data, cb) {\n\tvar deletedItemSpecs = data.getRecords('.');\n\n\tfor (var i = 0; i < deletedItemSpecs.length; i++) {\n\t\tvar spec = deletedItemSpecs[i];\n\t\tvar meta = spec.getTagName();\n\t\t\n\t\tif (this.isSimpleMarkup) {\n\n\t\t\tvar containerEle = this.getElementByMeta(meta);\n\t\t\tthis.element.removeChild(containerEle);\n\n\t\t} else {\n\n\t\t\tvar mod = this.modules[meta];\n\t\t\tif (mod != null) {\n\t\t\t\tmod.kill();\n\t\t\t}\n\n\t\t}\n\t}\n\n\t//get again\n\tthis.setShowRecs();\n\tcb();\n};\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {pebble.Pebble} data\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.ArrayControl.prototype.onArrayItemsUpdated = function(source, data, cb) {\n\tvar deletedItemSpecs = data.getRecords('.');\n\n\tfor (var i = 0; i < deletedItemSpecs.length; i++) {\n\t\tvar spec = deletedItemSpecs[i];\n\t\tvar meta = spec.getTagName();\n\t\t\n\t\tif (this.isSimpleMarkup) {\n\n\t\t\tvar array = this.origin.get();\n\t\t\tvar rec = array.get(meta);\n\t\t\tvar containerEle = this.getElementByMeta(meta);\n\t\t\tcontainerEle.innerHTML = this.getSimpleMarkup(rec);\n\n\t\t} else {\n\n\t\t\tvar mod = this.modules[meta];\n\t\t\t//reload inner module in current layout\n\t\t\tif (mod) {\n\t\t\t\tthis.origin.reloadControl(mod.getClientControl()); \n\t\t\t}\n\n\t\t}\n\t}\n\tcb();\n};\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {pebble.Pebble} data\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.ArrayControl.prototype.onArrayItemsAdded = function(source, data, cb) {\n\n\tvar addedItems = data.getRecords('.');\n\tvar count = addedItems.length;\n\tif (count > 0) {\n\t\tfor (var i = 0; i < addedItems.length; i++) {\n\t\t\tvar addedItem = addedItems[i];\n\t\t\tvar meta = addedItem.getTagName();\n\n\t\t\tif (this.isCollection){\n\t\t\t\tvar that = this;\n\t\t\t\tthis.retrieveArrayItem(meta, false, function(ret) {\n\t\t\t\t\tvar rec = new pebble.Pebble(meta);\n\t\t\t\t\trec.set('.', ret);\n\t\t\t\t\tthat.loadArrayItem(rec, function() {\n\n\t\t\t\t\t\tcount -= 1;\n\t\t\t\t\t\tif (count == 0) {\n\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t} else {\n\t\t\t\n\t\t\t\tvar array = this.origin.getCreateOnNull();\n\t\t\t\tvar rec = array.get(meta);\n\n\t\t\t\t//this will handle both simpleMarkup and normal\n\t\t\t\tthis.loadArrayItem(rec, function() {\n\t\t\t\t\t\tcount -= 1;\n\t\t\t\t\t\tif (count == 0) {\n\t\t\t\t\t\t\tcb();\n\t\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t//get again\n\t\tthis.setShowRecs();\n\t} else {\n\t\tcb();\n\t}\n\t\n};\n\n/**\n * Applies localFilter and renders\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.ArrayControl.prototype.loadSub = function(cb) {\n\t\n\tthis.clearChildren();\n\n\tif (this.isSimpleMarkup) { \n\t\tthis.element.innerHTML = '';\n\t}\n\n\tvar that = this;\t\n\tthis.renderAppendPrependItems('prepend', function() {\n\t\t\n\t\tthat.setShowRecs();\n\n\t\tthat.setArrayPages(that.showRecs.length, function() {\n\t\t\t\n\t\t\tthat.renderPage(function() {\n\t\t\t\t\n\t\t\t\tthat.renderAppendPrependItems('append', function() {\n\t\t\t\t\tcb();\t\n\t\t\t\t});\n\n\t\t\t});\n\n\t\t});\n\n\t});\n};\n\n/**\n * load with showRecsFilter\n */\npebble.libs.standard.ArrayControl.prototype.setShowRecs = function() {\n\t\n\tvar expression = this.getOriginInfo('showRecsFilter').getValue();\n\n\tthis.showRecs = this.getItemsWithFilter(expression);\n\n};\n/**\n * set showRecs\n * @param {?string} expression\n */\npebble.libs.standard.ArrayControl.prototype._setShowRecs = function(expression) {\n\n\tthis.showRecs = this.getItemsWithFilter(expression);\n\n};\n/**\n * @param {string} appendPrepend\n * @param {Function} cb\n */\npebble.libs.standard.ArrayControl.prototype.renderAppendPrependItems = function(appendPrepend, cb) {\n\t\n\tthis.clearArrayItems(function(key) {\n\t\treturn key.indexOf(appendPrepend) == 0; \n\t});\n\n\tvar items;\n\tif (appendPrepend == 'prepend') {\n\n\t\titems = this.prependItems = this.getOriginInfo('prependControls').getRecords();\n\t\tthis.renderCount = this.prependItems.length;\n\n\t} else {\n\n\t\titems = this.appendItems = this.getOriginInfo('appendControls').getRecords();\n\t\tthis.renderCount = this.appendItems.length;\n\n\t}\n\tthis.renderCb = cb\n\n\tif (this.renderCount == 0) {\n\t\t\tthis.renderCb && this.renderCb();\n\t} else {\n\t\tvar that = this;\n\t\tfor (var i = 0; i < items.length; i++) {\n\t\t\tvar item = items[i];\n\t\t\tthis.loadPrependAppendItem(appendPrepend + i, item, function() {\n\t\t\t\tthat.decrement();\t\n\t\t\t});\n\t\t}\n\t}\n};\n/**\n * Renders page (change page, sort)\n * @param {Function} cb\n */\npebble.libs.standard.ArrayControl.prototype.renderPage = function(cb) {\n\t\n\tvar pageIndex;\n\tvar selectedPage = this.getOriginInfo('arrayPages_._selection.default.singleSelectedMeta').getRef();\n\tif (selectedPage) {\n\t\tpageIndex = parseInt(selectedPage.replace('a', ''), 10);\n\t} else {\n\t\tpageIndex = 0;\n\n\t\t//select in array control that binds by \"model\".selectFirst\n\t\t\n\t}\n\tthis.clearArrayItems(function(key) {\n\t\treturn key.indexOf('append') != 0 && key.indexOf('prepend') != 0; \n\t});\n\n\tvar itemsPerPageSize = this.getItemsPerPage();\n\tvar start = pageIndex * itemsPerPageSize;\n\tvar end = Math.min(start + itemsPerPageSize, this.showRecs.length);\n\tthis.renderCount = end - start;\n\n\tthis.renderCb = cb\n\tif (this.renderCount == 0) {\n\t\tcb && cb();\n\t} else {\n\t\tvar that = this;\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar rec = this.showRecs[i];\n\t\t\tthis.loadArrayItem(rec, function() {\n\t\t\t\tthat.decrement();\t\n\t\t\t});\n\t\t}\n\t}\n};\n/**\n * @private\n */\npebble.libs.standard.ArrayControl.prototype.decrement = function() {\n\tthis.renderCount -= 1;\n\tif (this.renderCount == 0) {\n\t\tthis.renderCb && this.renderCb();\n\t}\n};\n/**\n * @param {Function} compareFn\n */\npebble.libs.standard.ArrayControl.prototype.clearArrayItems = function(compareFn) {\n\tif (this.modules != null) {\n\t\tfor (var key in this.modules){\n\t\t\tif (compareFn(key)) {\n\t\t\t\tvar mod = this.modules[key];\n\t\t\t\tmod.kill();\n\t\t\t\tmod = null;\n\t\t\t\tthis.modules[key] = null\n\t\t\t}\n\t\t}\n\t}\n};\n/**\n * @param {string} path\n * @param {?string} sortDir \n */\npebble.libs.standard.ArrayControl.prototype.sortShowRecs = function(path, sortDir) {\n\tsortDir = sortDir || 'desc';\n\tvar compareFn;\n\tif (path == 'key_') {\n\t\tcompareFn = function (o1, o2) {\n\t\t\tvar ret = 0;\n\n\t\t\tif (o1.getTagName() > o2.getTagName()) {\n\t\t\t\tret = 1;\n\t\t\t} else if (o1.getTagName() < o2.getTagName()){\n\t\t\t\tret = -1;\n\t\t\t} else {\n\t\t\t\tret = 0;\n\t\t\t}\n\n\t\t\tif (sortDir == 'asc') {\n\t\t\t\treturn ret;\n\t\t\t} else {\n\t\t\t\treturn -1 * ret;\n\t\t\t}\n\t\t}\n\t\tthis.showRecs.sort(compareFn);\n\t\tthis.renderPage(function() {});\n\n\t} else {\n\t\tvar thisType = this.origin.getThisType();\n\t\tvar arrayFormId = thisType.get('arrayFormId');\n\t\tif (arrayFormId != null) {\n\n\t\t\tvar typeObj = pebble.libs.standard.Module.topMod.deployment.getTypeDocument(arrayFormId.getRef('.'));\n\t\t\tvar field = typeObj.getInnerField(path);\n\t\t\tvar type = field.getRef('type');\n\t\t\t//var sorter = new pebble.libs.standard.NodeSorter(path, field.getRef('type'), sortDir);\n\n\t\t\t/**\n\t\t\t * @param {pebble.Pebble} o1\n\t\t\t * @param {pebble.Pebble} o2\n\t\t\t * @return {number}\n\t\t\t */\n\t\t\tcompareFn = function(o1, o2) {\n\t\t\t\tvar ret = 0;\n\t\t\t\tswitch (type) {\n\t\t\t\t \n\t\t\t\t\tcase pebble.shared.TypeReferences.NUMBER:\n\t\t\t\t\t\tif (o1.getInt(path) > o2.getInt(path)) {\n\t\t\t\t\t\t\tret = 1;\n\t\t\t\t\t\t} else if (o1.getInt(path) < o2.getInt(path)){\n\t\t\t\t\t\t\tret = -1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tret = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase pebble.shared.TypeReferences.DATE:\n\t\t\t\t\t\tvar n1 = Date.parse(o1.getValue(path));\n\t\t\t\t\t\tvar n2 = Date.parse(o2.getValue(path));\n\t\t\t\t\t\tif (n1 < n2) {\n\t\t\t\t\t\t\tret = -1;\n\t\t\t\t\t\t} else if (n1 > n2) {\n\t\t\t\t\t\t\tret = 1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tret = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase pebble.shared.TypeReferences.REFERENCE:\n\t\t\t\t\t\tif (o1.getRef(path) > o2.getRef(path)) {\n\t\t\t\t\t\t\tret = 1;\n\t\t\t\t\t\t} else if (o1.getRef(path) < o2.getRef(path)){\n\t\t\t\t\t\t\tret = -1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tret = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (o1.getValue(path) > o2.getValue(path)) {\n\t\t\t\t\t\t\tret = 1;\n\t\t\t\t\t\t} else if (o1.getValue(path) < o2.getValue(path)){\n\t\t\t\t\t\t\tret = -1;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tret = 0;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (sortDir == 'asc') {\n\t\t\t\t\treturn ret;\n\t\t\t\t} else {\n\t\t\t\t\treturn -1 * ret;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.showRecs.sort(compareFn);\n\t\t\tthis.renderPage(function() {});\n\t\t}\t\n\t}\n};\n\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayControl.prototype.selectNext = function(obj) {\n\tif (this.showRecs.length > 0) {\n\n\t\tvar current = this.getSingleSelectedMeta();\n\t\tif (current == null) {\n\t\t\tthis.setSelectedItem(this.showRecs[0].getTagName());\n\t\t} else {\n\t\t\tfor (var i = 0; i < this.showRecs.length; i++) {\n\t\t\t\tvar rec = this.showRecs[i];\n\t\t\t\tif (rec.getTagName() == current && i != this.showRecs.length - 1) {\n\t\t\t\t\tthis.setSelectedItem(this.showRecs[i + 1].getTagName());\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tobj.callback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayControl.prototype.selectPrev = function(obj) {\n\tif (this.showRecs.length > 0) {\n\t\tvar current = this.getSingleSelectedMeta();\n\t\tif (current == null) {\n\t\t\tthis.setSelectedItem(this.showRecs[0].getTagName());\n\t\t} else {\n\t\t\tfor (var i = 0; i < this.showRecs.length; i++) {\n\t\t\t\tvar rec = this.showRecs[i];\n\t\t\t\tif (rec.getTagName() == current && i != 0) {\n\t\t\t\t\tthis.setSelectedItem(this.showRecs[i - 1].getTagName());\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tobj.callback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayControl.prototype.selectFirst = function(obj) {\n\tif (this.showRecs.length > 0) {\n\t\tvar item = this.showRecs[0];\n\t\tthis.setSelectedItem(item.getTagName());\n\t}\n\tobj.callback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayControl.prototype.selectLast = function(obj) {\n\tif (this.showRecs.length > 0) {\n\t\tvar item = this.showRecs[this.showRecs.length - 1];\n\t\tthis.setSelectedItem(item.getTagName());\n\t}\n\tobj.callback();\n};\n/*            <containerEvent>\n                <onScrollEnd>\n                    <exec ref='this.extendVisibleRange'>\n                        <increment>{{ctx.incrementSize}}</increment>\n                    </exec>\n                </onScrollEnd>\n            </containerEvent>\n *\n */\npebble.libs.standard.ArrayControl.prototype.incrementRecs = function() {\n\t//var itemsPerPageSize = this.getItemsPerPage();\n\t//var start = this.lastDisplayIndex + 1;\n\t//var end = Math.min(start + itemsPerPageSize, this.showRecs.length);\n\t//this.addElements(start, end);\n};\n//note this does not clear\n/**\n * @param {number} start\n * @param {number} end\n */\npebble.libs.standard.ArrayControl.prototype.addElements = function(start, end) {\n\n\tfor (var i = start; i < end; i++) {\n\t\tvar rec = this.showRecs[i];\n\t\tthis.loadArrayItem(rec, function() {});\n\t\tthis.lastDisplayIndex = i;\n\t}\n}; \n/**\n * @param {string} meta\n * @return {pebble.Pebble}\n */\npebble.libs.standard.ArrayControl.prototype.getArrayItemEdm = function(meta) {\n\n\treturn new pebble.Pebble(meta);\n};\n/**\n * @param {pebble.Pebble} rec\n * @return string\n */\npebble.libs.standard.ArrayControl.prototype.getSimpleMarkup = function(rec) {\n\n\treturn this.formatText(rec, this.innerMarkupStr || '');\n};\n/**\n * @param{string} metaVal\n */\npebble.libs.standard.ArrayControl.prototype.getArrayItemElement = function(metaVal) {\n\tvar childElementPeb = this.getOriginInfo('childElement').get();\n\tvar childElement = childElementPeb.getRecords('.')[0]; \n\tvar containerEle = document.createElement(childElement.getTagName());\n\tvar attributes = childElement.getAttributes('.');\n\tfor (var key in attributes) {\n\t\tcontainerEle.setAttribute(key, attributes[key]);\n\t}\n\tcontainerEle.setAttribute('pebble.meta', metaVal);\n\treturn containerEle;\n};\n/**\n * @param {?string} meta\n * @return {Element}\n */\npebble.libs.standard.ArrayControl.prototype.getElementByMeta = function(meta) {\n\tif (meta == null) {\n\t\tthrow new Error('ArrayControl: getElementByMeta() requires meta');\n\t}\n\n\tfor (var i = 0; i < this.element.childNodes.length; i++) {\n\t\tvar childNode = this.element.childNodes[i];\n\t\tif (childNode.getAttribute('pebble.meta') == meta) {\n\t\t\treturn childNode;\n\t\t}\n\t}\n\treturn null;\n};\n/**\n * @param {string} id\n * @param {pebble.Pebble} control\n * @param {Function} cb\n */\npebble.libs.standard.ArrayControl.prototype.loadPrependAppendItem = function(id, control, cb) {\n\t\n\tif (control.getRef('.') == null ) {\n\t\tcontrol.setRef('.', pebble.shared.TypeReferences.ControlBase.CONTROL_BASE);\n\t}\n\n\tvar containerEle = this.getArrayItemElement(id);\n\tthis.element.appendChild(containerEle);\n\t\n\tvar innerMarkup = control.get('innerMarkup');\n\tif (this.isAppendPrependSimpleMarkup(control)) {\n\n\t\tvar innerMarkupStr = innerMarkup.getInnerXml();\n\n\t\tcontainerEle.innerHTML = innerMarkupStr;//this.getSimpleMarkup(new pebble.Pebble());\n\n\t\tcb && cb();\n\n\t} else {\n\n\t\tvar win = this.modules[id] = this.moduleAccess.getNewInstance(this, this, containerEle, this.getId() + '-' + id);\n\t\t\n\t\twin.getItem(control, cb);\n\n\t}\n};\n\n//simplemarkup\npebble.libs.standard.ArrayControl.prototype.isAppendPrependSimpleMarkup = function(control) {\n\tvar innerMarkup = control.get('innerMarkup');\n\treturn innerMarkup != null && innerMarkup.toString().indexOf('<control ') == -1; \n};\n/**\n * @param {pebble.Pebble} rec\n * @param {Function} cb\n */\npebble.libs.standard.ArrayControl.prototype.loadArrayItem = function(rec, cb) {\n\tvar metaVal = rec.getTagName();\n\tvar containerEle = this.getArrayItemElement(metaVal);\n\tthis.element.appendChild(containerEle);\n\t\n\tif (this.isSimpleMarkup) { \n\t\t\n\t\tcontainerEle.innerHTML = this.getSimpleMarkup(rec);\n\n\t\tcb && cb();\n\n\t} else {\n\n\t\tvar edm = this.getArrayItemEdm(metaVal);\n\t\tvar dm = this.getArrayItemLoadItem(metaVal);\n\t\tedm.set('control', dm);\n\t\tvar win = this.createModuleWithEdm(edm, containerEle);\n\t\t\n\t\twin.getItem(dm, cb);\n\n\t}\n};\n\n/**\n * ArrayControl knows that it has child elements with controls\n * @param {string} funcName\n * @param {pebble.Pebble} obj\n * @return {number}\n * @override\n */\npebble.libs.standard.ArrayControl.prototype.executeMethod = function(funcName, obj) {\n\tvar ret = 1;\n\t//list all ui public methods\n\tif (funcName == 'delete') {\n\t\tthis.deleteArrayItem(obj);\n\t} else if (funcName == 'deleteThru') { // remember this is internal tabPanel\n\t\tthis.deleteThru(obj);\n//\t} else if (funcName == 'updateArrayItem') {\n//\t\tthis.updateArrayItem(obj);\n\t} else if (funcName == 'setLayoutByDataPath') { // remember this is internal tabPanel\n\t\tthis.setLayoutByDataPath(obj);\n\t} else if (funcName == 'setSingleSelectedItem') { // remember this is internal tabPanel\n\t\tthis.setArrayItemSelect(obj);\n\t} else if (funcName == 'setMultipleSelectedItem') { // remember this is internal tabPanel\n\t\tthis.setArrayItemSelectMultiple(obj);\n\t} else if (funcName == 'applyLocalFilter') { // remember this is internal tabPanel\n\t\tthis.applyLocalFilter(obj);\n\t} else if (funcName == 'extendVisibleRange') { \n\t\tthis.extendVisibleRange(obj);\n\t} else {\n\t\treturn pebble.libs.standard.ArrayControl.superClass_.executeMethod.call(this, funcName, obj);\n\t}\n\treturn ret;\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayControl.prototype.extendVisibleRange = function(obj) {\n\tvar params = obj.getParams();\n\tvar incrementSize = params.getInt('increment');\n\tvar newPageSize = this.getItemsPerPage() + incrementSize;\n\n\tvar o = this.getOriginInfo('itemsPerPage');\n\tvar itemsPerPage = o.getCreateOnNull();\n\titemsPerPage.setValue('.', newPageSize.toString());\n\to.set(itemsPerPage, this, true);\n\n\tthis.setArrayPages(this.showRecs.length);\n\n\tif (this.getCurrentPage() == 0){\n\t\tthis.incrementRecs();\n\t}\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayControl.prototype.setLayoutByDataPath = function(obj) {\n\n\tvar params = obj.getParams();\n\n\tvar layoutState = params.getRef('layoutState'); //could be useful when multiple layout paths for one dataPath\n\tvar dataPathParams = params.get('params');\n\n\tvar that = this;\n\tthis.setSelectedItemCheckLayoutState(that.clickedMeta, true, dataPathParams, layoutState, obj.getCallback());\n\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayControl.prototype.setArrayItemSelect = function(obj) {\n\n\tvar params = obj.getParams();\n\tvar byDataPath = params.getBool('byDataPath');\n\n\tthis.setSelectedItemCheckLayoutState(this.clickedMeta, byDataPath, null, null, obj.getCallback());\n\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayControl.prototype.setArrayItemSelectMultiple = function(obj) {\n\n\tvar params = obj.getParams();\n\tvar group = params.getValue('group');\n\tvar callerId = params.getValue('caller');\n\tvar mod = this.moduleAccess.getGlobalModule(callerId);\n\tvar meta = this.clickedMeta;\n\n\tvar isControlKeyDown = false;\n\tvar isShiftKeyDown = false;\n\n\tif (isControlKeyDown){\n\t\t//mark\n\t\tvar arrayItemOrigin = this.getOriginInfo(this.getMainPath() + '.' + meta);\n\t\tvar arrayItem = arrayItemOrigin.get();\n\t\t\n\t\tobj.callback();\n\n\t} else if (isShiftKeyDown){\n\t\t//mark from this.selectedEl\n\t\t//add/remove from set\n\n\t\tobj.callback();\n\t} else {\n\t\t//select\n\t\tthis.setMultipleSelectedItem(meta, group, obj.getCallback());\n\t}\n};\n/**\n * @param {pebble.Pebble} obj\n * \n */\n//pebble.libs.standard.ArrayControl.prototype.updateArrayItem = function(obj) {\n//\n//\tvar that = this;\n//\tthis.saveManager.save( function () {\n//\t\tvar itemMeta = that.moduleAccess.getTagName();\n//    \n//\t\tthis.pCM.updateArrayItem(itemMeta, obj.getCallback());\n//\n//\t\t\n//\t});\n//};\n/**\n * \n * @param {pebble.Pebble} obj\n * @private\n */\npebble.libs.standard.ArrayControl.prototype.deleteArrayItem = function(obj) {\n\tvar params = obj.getParams();\n\tvar meta = this.getSingleSelectedMeta();\n\tvar mod = this.modules[meta];\n\t//var callerId = params.getValue('caller');\n\t//var mod = this.moduleAccess.getGlobalModule(callerId);\n\t//var meta = mod.element.getAttribute('pebble.meta');\n\n\tif (meta) {\n\t\tvar confirmMessage = params.getValue('confirmMessage');\n\t\tif (confirmMessage != null) {\n\t\t\tif (confirm(confirmMessage)) {\n\t\t\t\tthis.removeArrayItem(meta, obj.getCallback());\n\t\t\t}\n\t\t} else {\n\t\t\tthis.removeArrayItem(meta, obj.getCallback());\n\t\t}\n\t} else {\n\t\tobj.callback();\n\t}\n};\n/**\n * \n * @param {pebble.Pebble} obj\n * @private\n */\npebble.libs.standard.ArrayControl.prototype.deleteThru = function(obj) {\n\tvar params = obj.getParams();\n\tvar meta = this.getSingleSelectedMeta();\n\tvar mod = this.modules[meta];\n\t//var callerId = params.getValue('caller');\n\t//var mod = this.moduleAccess.getGlobalModule(callerId);\n\t//var meta = mod.element.getAttribute('pebble.meta');\n\n\tif (meta) {\n\t\tvar confirmMessage = params.getValue('confirmMessage');\n\t\tif (confirmMessage != null) {\n\t\t\tif (confirm(confirmMessage)) {\n\t\t\t\tthis.removeThru(meta, obj.getCallback());\n\t\t\t}\n\t\t} else {\n\t\t\tthis.removeThru(meta, obj.getCallback());\n\t\t}\n\t} else {\n\t\tobj.callback();\n\t}\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayControl.prototype.applyLocalFilter = function(obj) {\n\n\tvar params = obj.getParams();\n\tvar showRecsFilter = params.get('showRecsFilter');\n\tvar expression = showRecsFilter.getValue('.');\n\tthis._setShowRecs(expression);\n\n\tobj.callback();\n\n};\n\n\n//Calculate pageX/Y if missing and clientX/Y available, from jQuery\n//if ( event.pageX == null && event.clientX != null ) {\n//var doc = document.documentElement, body = document.body;\n//event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n//event.pageY = event.clientY + (doc && doc.scrollTop  || body && body.scrollTop  || 0) - (doc   && doc.clientTop  || body && body.clientTop  || 0);\n//}\n\n\n\n//\tif (true) {//want to do show more\n//\t// Do not let the scrollable take tab focus.\n//\tthis.scrollPanel.getElement().setTabIndex(-1); //why, i dont know\n\n//\t// Handle scroll events.\n//\tthis.scrollPanel.addScrollHandler(new ScrollHandler() {\n//\t@Override\n//\tpublic void onScroll(ScrollEvent event) {\n//\t// If scrolling up, ignore the event.\n//\tint oldScrollPos = lastScrollPos;\n//\tlastScrollPos = scrollPanel.getVerticalScrollPosition();\n//\tif (oldScrollPos >= lastScrollPos) {\n//\treturn;\n//\t}\n\n//\tint maxScrollTop = scrollPanel.getWidget().getOffsetHeight() - scrollPanel.getOffsetHeight();\n//\tif (lastScrollPos >= maxScrollTop) {\n//\texec('onScrollEnd', null, new Callback() {\n//\tpublic void call(Pebble data) {\n\n//\t}\n//\t});\n//\t}\n//\t}\n//\t});\n//\t}\n\n\n\n\n\n\n\n/**\n * @return {number}\n */\npebble.libs.standard.ArrayControl.prototype.getCurrentPage = function() {\n\tvar currentPage = 0;\n\tvar arrayPages = this.getOriginInfo('_arrayPages').getCreateOnNull();\n\tvar selectedMeta = arrayPages.getRef('_selection.default.singleSelectedMeta');\n\tif (selectedMeta != null) {\n\t\tvar selItem = arrayPages.get(selectedMeta);\n\t\tif (selItem != null) {\n\t\t\tcurrentPage = selItem.getInt('pageNumber') || 0;\n\t\t}\n\t}\n\treturn currentPage;\n};\n/**\n * @param {string} relMeta\n * @return {boolean}\n * @protected\n */\npebble.libs.standard.ArrayControl.prototype.isInCurrentPage = function(relMeta) {\n\tif (this.showRecs.length > 0) {\n\t\tvar itemsPerPageSize = this.getItemsPerPage();\n\n\t\tvar start = this.getCurrentPage() * itemsPerPageSize;\n\t\tfor (var i = start; i < start + itemsPerPageSize; i++) {\n\t\t\tvar meta = this.showRecs[i].getTagName();\n\t\t\tif (relMeta == meta){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n\n/**\n * @param {string} relMeta\n * @return {number}\n * @protected\n */\npebble.libs.standard.ArrayControl.prototype.getPageForItem = function(relMeta) {\n\t//calculate page selected item is on!!!\n\tvar index = -1;\n\tfor (var i = 0; i < this.showRecs.length; i++) {\n\t\tvar rec = this.showRecs[i];\n\t\tif (rec.getTagName() == relMeta){\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index != -1) {\n\t\t//must be found\n\t\tvar itemsPerPageSize = this.getItemsPerPage();\n\t\tvar page = Math.floor(index/itemsPerPageSize);\n\t\treturn page;\n\t} else {\n\t\treturn -1;\n\t}\n};\n/**\n * @return {number}\n */\npebble.libs.standard.ArrayControl.prototype.getItemsPerPage = function() {\n\tvar itemsPerPage = this.getOriginInfo('itemsPerPage').get();\n\tvar itemsPerPageSize = null;\n\tif (itemsPerPage != null) {\n\t\titemsPerPageSize = itemsPerPage.getInt('.');\n\t} \n\tif (itemsPerPageSize == null) {\n\t\titemsPerPageSize = this.showRecs.length;\n\t}\n\treturn itemsPerPageSize;\n};\n/**\n * recreate pages every time array changes\n * @param {number} size\n * @param {Function=} cb\n */\npebble.libs.standard.ArrayControl.prototype.setArrayPages = function(size, cb) {\n\t//set _arrayPages\n\tvar itemsPerPage = this.getItemsPerPage();\n\n\tif (itemsPerPage != 0) {\n\t\tvar pages = Math.ceil(size/itemsPerPage);\n\n\t\tvar selectedPage = this.getOriginInfo('arrayPages_._selection.default.singleSelectedMeta').getRef();\n\t\tvar selectedIndex;\n\t\tif (selectedPage != null) {\n\t\t\tselectedIndex = parseInt(selectedPage.replace('a', ''), 10);\n\t\t} else {\n\t\t\t//select first page\n\t\t\tselectedIndex = 0;\n\t\t\tselectedPage = 'a0';\n\t\t}\n\n\t\tvar arrayPages = new pebble.Pebble();\n\t\tarrayPages.setRef('_selection.default.singleSelectedMeta', selectedPage);\n\n\t\tfor (var i = 0; i <= pages - 1; i++) {\n\t\t\tvar page = new pebble.Pebble();\n\t\t\tpage.setValue('name', 'page' + i);\n\t\t\tpage.setValue('pageNumber', i.toString());\n\t\t\tpage.setValue('numPageItems', itemsPerPage.toString());\n\t\t\tif (i == selectedPage) {\n\t\t\t\tpage.setTrue('_selection.default.selected');\n\t\t\t}\n\t\t\tarrayPages.setFull('a' + i, page);\n\t\t}\n\t\t//sets and contacts pagers\n\t\tthis.getOriginInfo('arrayPages_').set(arrayPages, this, false, cb);\n\n\t} else {\n\n\t\tcb && cb();\n\n\t}\n};\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/ArrayControl.js"},{"key":"ext","val":"js"},{"key":"testCode","val":"\nvar topApp;\n\n\ndescribe('testArrayControl', function () {\n\tbeforeEach(function() {\n\n\t\tvar ready = false;\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\ttopApp && topApp.kill();\n\t\t\t\ttopApp = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top');\n\t\t\t\ttopApp.load(function() {\n\t\t\t\t\tready = true;\t\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn ready;\n\t\t}, 'wait for deployment and testAppControl', 300);\n\n\t\truns(function() {\n\t\t\tvar bindPoint = 'model.testEmbItems';\t\n\t\t\tvar innerMarkup = new pebble.Pebble();\n\n\t\t\tvar ctrl1 = new pebble.Pebble();\n\t\t\tctrl1.setRef('.', 'standard:ArrayControl');\n\t\t\tctrl1.setRef('model._bind', bindPoint);\n\n\t\t\tvar control1 = new pebble.Pebble();\n\t\t\tcontrol1.setRef('.', 'standard:TextInput');\n\t\t\tcontrol1.setRef('model._bind', 'model');\n\n\t\t\tvar displayControl1 = new pebble.Pebble();\n\t\t\tdisplayControl1.setRef('mapPath', 'text');\n\t\t\tdisplayControl1.set('innerMarkup.control', control1);\n\n\t\t\tctrl1.set('childElement.input', new pebble.Pebble());\n\t\t\tctrl1.setAttribute('childElement.input', 'type', 'text');\n\t\t\tctrl1.set('displayControl', displayControl1);\n\n\t\t\tvar div1 = new pebble.Pebble('div');\n\t\t\tdiv1.set('control', ctrl1);\n\n\t\t\tinnerMarkup.add('.', div1);\n\n\t\t\tvar ctrl2 = new pebble.Pebble();\n\t\t\tctrl2.setRef('.', 'standard:ArrayControl');\n\t\t\tctrl2.setRef('model._bind', bindPoint);\n\n\t\t\tvar displayControl2 = new pebble.Pebble();\n\t\t\tdisplayControl2.setValue('innerMarkup', '{{item.text}}');\n\n\t\t\tctrl2.set('childElement.div', new pebble.Pebble());\n\t\t\tctrl2.set('displayControl', displayControl2);\n\n\t\t\tvar div2 = new pebble.Pebble('div');\n\t\t\tdiv2.set('control', ctrl2);\n\n\t\t\tinnerMarkup.add('.', div2);\n\n\t\t\tvar dm = topApp.item;\n\n\t\t\tdm.set('innerMarkup', innerMarkup);\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\tctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\toriginInfo = ctrl1.getOriginInfo('model');\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t});\n\n\t//this.deleteArrayControlItem\n\t//this.setSingleSelectedItem\n\tit ('should be able to render embedded items (simple/normal)', function() {\n\n\t\truns(function() {\n\t\t\t//normal\n\t\t\tvar ctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\tvar originInfo = ctrl1.getOriginInfo('model');\n\t\t\texpect(originInfo.getThisType().getRef('arrayFormId').split('.').pop()).toEqual('testItem');\n\t\t\texpect(Object.keys(ctrl1.modules).length).toEqual(5);\n\t\t\texpect(ctrl1.modules['a4'].item.modules['childmod0'].element.tagName.toUpperCase()).toEqual('INPUT');\n\t\t\texpect(ctrl1.modules['a4'].item.modules['childmod0'].element.value).toEqual('testEmbItem4');\n\t\t\t\n\t\t\t//simpleMarkup\t\n\t\t\tvar ctrl2 = topApp.item.modules['childmod1'].item; \n\t\t\tvar originInfo = ctrl2.getOriginInfo('model');\n\t\t\texpect(originInfo.getThisType().getRef('arrayFormId').split('.').pop()).toEqual('testItem');\n\t\t\texpect(Object.keys(ctrl2.modules).length).toEqual(0);\n\t\t\texpect(ctrl2.element.childNodes.length).toEqual(5);\n\t\t\texpect(ctrl2.element.childNodes[4].innerHTML).toEqual('testEmbItem4');\n\n\t\t});\n\t});\n\n\tit ('should be able to update embedded items (simple/normal)', function() {\n\n\t\tvar returned = false;\n\t\truns(function() {\n\t\t\t//normal\t\n\t\t\tvar ctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\tvar ctrl2 = topApp.item.modules['childmod1'].item; \n\t\t\tctrl1.modules['a4'].element.value = 'update a4';\n\t\t\tspyOn(ctrl1, 'updateArrayItem').andCallThrough();\n\t\t\t\n\t\t\tspyOn(ctrl1, 'onArrayItemsUpdated').andCallThrough();\n\t\t\tspyOn(ctrl2, 'onArrayItemsUpdated').andCallThrough();\n\t\t\tctrl1.modules['a4'].item.saveManager.save(function() {\n\t\t\t\t\n\t\t\t\treturned = true;\n\n\t\t\t});\n\t\t\t\n\t\t\twaitsFor(function() {\n\t\t\t\treturn returned;\t \n\t\t\t}, 'save did not load', 300);\n\n\t\t\truns(function() {\n\t\t\t\t//simpleMarkup\t\n\t\t\t\tvar testItem = ctrl2.getOriginInfo('model.a4').get();\n\n\t\t\t\texpect(ctrl1.updateArrayItem).toHaveBeenCalled();\n\t\t\t\texpect(ctrl1.updateArrayItem.calls.length).toEqual(1);\n\t\t\t\texpect(ctrl1.onArrayItemsUpdated).toHaveBeenCalled();\n\t\t\t\texpect(ctrl1.onArrayItemsUpdated.calls.length).toEqual(1);\n\t\t\t\t\n\t\t\t\texpect(ctrl2.onArrayItemsUpdated).toHaveBeenCalled();\n\t\t\t\texpect(ctrl2.onArrayItemsUpdated.calls.length).toEqual(1);\n\n\t\t\t\texpect(testItem.getValue('text')).toEqual('update a4');\n\t\t\t\texpect(ctrl2.element.childNodes[4].innerHTML).toEqual('update a4');\n\t\t\t\t\n\t\t\t\texpect(ctrl1.modules['a4'].item.modules['childmod0'].element.value).toEqual('update a4'); //source should update itself\n\t\n\t\t\t});\n\t\t});\n\t});\n\n\tit ('should be able to delete embedded items (simple/normal)', function() {\n\n\t\tvar returned = false;\n\t\truns(function() {\n\t\t\t//normal\t\n\t\t\tvar ctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\tctrl1.setSelectedItem('a2', function() {\n\t\t\t\t\n\t\t\t\tvar obj = new pebble.Pebble();\n\t\t\t\tvar params = obj.getParams();\n\t\t\t\tparams.setRef('.', 'SERVER.deleteArrayItem');\n\t\t\t\tobj.setCallback(function() {\n\t\t\t\t\treturned = true;\n\t\t\t\t});\n\t\t\t\tctrl1.deleteArrayItem(obj);\n\n\t\t\t});\n\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'delete did not return', 300);\n\n\t\truns(function() {\n\t\t\tvar ctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\texpect(Object.keys(ctrl1.modules).length).toEqual(4);\n\t\t\t\n\t\t\t//simpleMarkup\t\n\t\t\tvar ctrl2 = topApp.item.modules['childmod1'].item; \n\t\t\texpect(Object.keys(ctrl2.modules).length).toEqual(0);\n\t\t\texpect(ctrl2.element.childNodes.length).toEqual(4);\n\n\t\t});\n\t});\n\n\tit ('should be able to change full array - embedded items (simple/normal)', function() {\n\n\t\tvar returned = false;\n\t\truns(function() {\n\t\t\t//create new array\n\t\t\tvar array = new pebble.Pebble();\n\t\t  array.setValue('a0.text', 'newtext0');\n\t\t  array.setValue('a1.text', 'newtext1');\n\t\t \t\n\t\t\tvar ctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\tvar originInfo = ctrl1.getOriginInfo('model');\n\t\t\toriginInfo.set(array, ctrl1, false, function () {\n\t\t\t\treturned = true;\n\t\t\t});\n\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'set did not load', 300);\n\n\t\truns(function() {\n\t\t\tvar ctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\texpect(Object.keys(ctrl1.modules).length).toEqual(2);\n\t\t\texpect(ctrl1.modules['a1'].element.tagName.toUpperCase()).toEqual('INPUT');\n\t\t\texpect(ctrl1.modules['a1'].element.value).toEqual('newtext1');\n\t\t\t\n\t\t\t//simpleMarkup\t\n\t\t\tvar ctrl2 = topApp.item.modules['childmod1'].item; \n\t\t\tvar originInfo = ctrl2.getOriginInfo('model');\n\t\t\texpect(Object.keys(ctrl2.modules).length).toEqual(0);\n\t\t\texpect(ctrl2.element.childNodes.length).toEqual(2);\n\t\t\texpect(ctrl2.element.childNodes[1].innerHTML).toEqual('newtext1');\n\n\n\t\t});\n\n\t});\n\n\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/controls/ArrayControl.js"}]},{"key":"ArraySelect","val":[{"key":"devCode","val":"\n(function() {\n\n/**\n * ArraySelect loads the selected item in array.\n * Modules are instantiated on demand, and thus are not in order.  \n * @constructor\n * @extends{pebble.libs.standard.ArrayControl}\n */\npebble.libs.standard.ArraySelect = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.ArrayControl.call(this, moduleAccess, dm, isLoadTop);\n\n\tvar that = this;\n\tthis.element.addEventListener('change', function (e) {\n\t\t\n\t\tvar originInfo = that.getOriginInfo('model');\n\t\tvar index = that.element.selectedIndex - that.prependItems.length;\n\t\tif (index >= 0 && index < that.showRecs.length) {\n\n\t\t\tvar selectedItem = that.showRecs[index];\n\t\t\tthat.clickedMeta = selectedItem.getTagName();\n\t\t\tthat.exec('mouseEvents.change');\n\n\t\t} else {\n\t\t\t//prepend or append\n\t\t\tif (index < 0) {\n\t\t\t\t//prepend\n\t\t\t\tvar prependControl = that.prependItems[that.element.selectedIndex];\n\t\t\t\tvar click = prependControl.get('control.mouseEvents.click');\n\t\t\t\tif (click) {\n\n\t\t\t\t\tthat._execListOfVoidRg(that, click.getRecords('.'), 0, null, function() {});\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//append\n\t\t\t\tvar prependControl = that.prependItems[that.element.selectedIndex - that.prependItems.length - that.showRecs.length];\n\t\t\t\tvar click = prependControl.get('control.mouseEvents.click');\n\t\t\t\tif (click) {\n\n\t\t\t\t\tthat._execListOfVoidRg(that, click.getRecords('.'), 0, null, function() {});\n\n\t\t\t\t}\n\t\t\t}\n\t\t\tthat.deSelectAny();\t\t\t\n\t\t}\n\n\t}, false);\n};\n\t\npebble.inherits(pebble.libs.standard.ArraySelect, pebble.libs.standard.ArrayControl);\n\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {string} field\n * @param {string} relPath\n * @param {Function} cb\n * @return {boolean}\n * @override\n */\npebble.libs.standard.ArraySelect.prototype.onDataModelChanged = function(source, field, relPath, cb) {\n\n\tvar that = this;\n\tpebble.libs.standard.ArraySelect.superClass_.onDataModelChanged.call(this, source, field, relPath, function() {\n\t\tvar elements = relPath.split('.');\n\t\tif (field == 'model' && relPath.indexOf('selected') > 0 && elements.length == 4 ){\t//not collections with/in collections\n\t\t\telements.pop();//selected\n\t\t\tvar group = elements.pop();//group\n\t\t\telements.pop();//selection\n\t\t\tvar relMeta = elements.pop();\n\t\t\tvar model = that.origin.getCreateOnNull();\n\t\t\tif (model.getBool(relPath)) {\n\n\t\t\t\tvar index = model.getIndex('.', relMeta);\n\t\t\t\tthat.element.selectedIndex = that.prependItems.length + index;\n\n\t\t\t}\n\t\t}\n\t\tcb();\n\t});\n\treturn false;\n};\n\n\n})();\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/ArraySelect.js"},{"key":"ext","val":"js"}]},{"key":"ArraySingleControl","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends {pebble.libs.standard.ArrayControl}\n */\npebble.libs.standard.ArraySingleControl = function (moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.ArrayControl.call(this, moduleAccess, dm, isLoadTop);\n\n\t/**\n\t * @type {boolean}\n\t */\n\tthis.noSelectionDisplay = false;\n\n\t//set up dummy\n\tvar edm = new pebble.Pebble('div');\n\tedm.setRef('control', pebble.shared.TypeReferences.ControlBase.CONTROL_BASE);\n\tthis.module = this.createModuleWithEdm(edm, this.element);\n};\n\npebble.inherits(pebble.libs.standard.ArraySingleControl, pebble.libs.standard.ArrayControl);\n\n/**\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.ArraySingleControl.prototype.loadSub = function(cb) {\n\t//if loadFirstArrayItem\n\tvar selectedItemMeta = this.getSingleSelectedMeta();\n\tif (selectedItemMeta != null) {\n\t\t//if selected show ...\n\n\t} else {\n\t\tthis.noSelectionDisplay = true;\n\t\tvar noSelectionDisplayControl = this.getOriginInfo('noSelectionDisplayControl').get();\n\n\t\tif (noSelectionDisplayControl != null) {\n\t\n\t\t\tthis.module.getItem(noSelectionDisplayControl, function(data) {\n\n\t\t\t});\n\t\t}\n\t}\n\tcb(null);\n};\n/**\n * @override\n */\npebble.libs.standard.ArraySingleControl.prototype.onDataModelChanged = function(source, field, relPath, cb) {\n\tvar that = this;\n\tpebble.libs.standard.ArrayControl.superClass_.onDataModelChanged.call(this, source, field, relPath, function() {\n\t\tvar originInfo = that.getOriginInfo('model');\n\t\tvar model = originInfo.getCreateOnNull()\n\t\tif (field == 'model' && relPath.indexOf('singleSelectedMeta') != -1 && relPath.split('.').length == 3 ){\t//not collections with/in collections\n\t\t\tvar relMeta = model.getRef(relPath);\n\t\t\t\t\t\n\t\t\tif (this != source && relMeta != null) {\n\n\t\t\t\tvar ctrl = that.getArrayItemLoadItem(relMeta);\n\t\t\t\tvar item = model.get(relMeta);\n\n\t\t\t\t//possiblilties\n\t\t\t\t//-data swap (w/current layout) vs reset (load again)\n\t\t\t\tif (that.noSelectionDisplay ) {//|| that.module.getArrayItemPath == null) { //reset\n\t\t\t\t\tthat.noSelectionDisplay = false;\n\n\t\t\t\t\tif (that.isCollection){\n\n\t\t\t\t\t\tthat.retrieveArrayItem(relMeta, false, function(data) {\n\n\t\t\t\t\t\t\tif (that.isSimpleMarkup) {\n\n\t\t\t\t\t\t\t\tthat.module.element.innerHTML = that.getSimpleMarkup(data);\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tthat.module.getItem(ctrl, function(data) {\n\n\t\t\t\t\t\t\t\t\tcb();\n\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t});\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif (that.isSimpleMarkup) {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tthat.module.element.innerHTML = that.getSimpleMarkup(item);\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tthat.module.getItem(ctrl, function(data) {\n\n\t\t\t\t\t\t\t\t\tcb();\n\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (that.isSimpleMarkup) {\n\n\t\t\t\t\t\tthat.module.element.innerHTML = that.getSimpleMarkup(item);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t//data swap (change ) which is in win already ... \n\t\t\t\t\t\t//needs to rebind (go down inner controls and change bind (unsubscribe, subscribe)\n\t\t\t\t\t\tif (that.currentMeta != relMeta) {\n\t\t\t\t\t\t\toriginInfo.rebindArrayItem(that.module.getClientControl(), that.currentMeta, relMeta);\n\n\t\t\t\t\t\t\t//rebound thus can get its originItem\n\t\t\t\t\t\t\toriginInfo.reloadControl(that.module.getClientControl());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcb();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\tthat.currentMeta = relMeta;\n\n\t\t} else {\n\t\t\t//one case source comes in as null it on rebind/selectedItemChanges of arrayDisplaySingleControl's item\n\t\t\tif (field.indexOf('filter.') != -1) {\n\t\t\t\tthat.loadSub(cb);\n\t\t\t} else if ( source != null && that != source && field == 'model' && source.getId().indexOf(that.moduleAccess.getId()) != 0) { \n\t\t\t\t//source cannot be inside this (same as this triggering the data change)\n\t\t\t\tthat.loadSub(cb);\n\t\t\t} else {\n\n\t\t\t\tcb();\n\t\t\t}\t\n\t\t}\n\t});\n\treturn false;\n};\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/ArraySingleControl.js"},{"key":"ext","val":"js"},{"key":"testCode","val":"\nvar topApp;\n\ndescribe('testArraySingleControl', function () {\n\n\tfunction getBaseInnerMarkup() {\n\t\tvar ctrl = new pebble.Pebble();\n\t\tctrl.setRef('.', 'standard:DynControl');\n\t\tctrl.setRef('model._bind', 'testItem');\n\n\t\t\t\t\t\t\t\t\t//<displayControlFilters>\n                    //<a1>\n                        //<filter>item.ref_ == 'standard:Text'</filter>\n                        //<displayControl>\n                            //<innerMarkup>\n                                //<input type='text'>\n                                    //<control ref='theModel.libs.standard.controls.textInput'>\n                                        //<dummy/>\n                                    //</control>\n                                //</input>\n                            //</innerMarkup>\n                        //</displayControl>\n                    //</a1>\n                //</displayControlFilters>\t\n\t\t\n\t\tvar dcf = new pebble.Pebble();\n\t\tdcf.setValue('filter', '(item.ref_).indexOf(\"text\") != -1');\n\t\t\n\t\tvar control = new pebble.Pebble();\n\t\tcontrol.setRef('.', 'standard:TextInput');\n\n\t\tvar displayControl = new pebble.Pebble();\n\t\tdisplayControl.setAttribute('innerMarkup.input', 'type', 'text');\n\t\tdisplayControl.set('innerMarkup.input.control', control);\n\n\t\tdcf.set('displayControl', displayControl);\n\t\t\n\t\tvar displayControlFilters = new pebble.Pebble();\n\t\tdisplayControlFilters.set('a0', dcf);\n\n\t\tctrl.set('displayControlFilters', displayControlFilters);\n\n\t\t//ctrl.setRef('onSelected.exec', 'this.save');\n\n\t\tvar div1 = new pebble.Pebble('div');\n\t\tdiv1.set('control', ctrl);\n\n\t\tvar innerMarkup = new pebble.Pebble();\n\t\tinnerMarkup.add('.', div1);\n\t\treturn innerMarkup;\n\t}\n\n\tbeforeEach(function() {\n\n\t\tvar ready = false;\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\ttopApp && topApp.kill();\n\t\t\t\ttopApp = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top');\n\t\t\t\ttopApp.load(function() {\n\t\t\t\t\tready = true;\t\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn ready;\n\t\t}, 'wait for deployment and testAppControl', 300);\n\n\t\truns(function() {\n\n\t\t\tvar innerMarkup = getBaseInnerMarkup();\t\n\t\t\tvar dm = topApp.item;\n\n\t\t\tdm.set('innerMarkup', innerMarkup);\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\tctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\t});\n\n\tit ('should be able to render and any item (not a reference)', function() {\n\n\t\tvar dynControl = topApp.item.modules['childmod0'].item;\t\n\t\texpect(dynControl.getRef('.').split('.').pop()).toEqual('DynControl');\n\t\tvar textInput = dynControl.modules['childmod0'].item;\n\t\texpect(textInput.element.tagName.toUpperCase()).toEqual('INPUT');\n\t\texpect(textInput.getRef('model._bind')).toEqual('model.text');\n\n\t});\n\n\tit ('should be able to save and any item (not a reference)', function() {\n\n\t\truns(function() {\n\t\t\tvar dynControl = topApp.item.modules['childmod0'].item;\t\n\t\t\tvar textInput = dynControl.modules['childmod0'].item;\n\t\t\ttextInput.element.value = 'hello';\n\t\t\ttopApp.item.saveManager.save(function() {});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\t\treturn topApp.item.saveManager.isValidSave;\n\t\t}, 'Reference should load embedded references.  Reference should select if exists.', 3000);\n\n\t\truns(function() {\n\t\t\texpect(topApp.item.getValue('testItem.text')).toEqual('hello');\n\t\t});\n\t});\n\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/controls/ArraySingleControl.js"}]},{"key":"ArrayStackControl","val":[{"key":"devCode","val":"\n\n(function() {\n\n\n\n/**\n * ArrayStackControl loads the selected item in array.\n * Modules are instantiated on demand, and thus are not in order.  \n * @constructor\n * @extends{pebble.libs.standard.ArrayControl}\n */\npebble.libs.standard.ArrayStackControl = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.ArrayControl.call(this, moduleAccess, dm, isLoadTop);\n\t\t\n  this.useAnimation = false;\t\n\n\tif (this.useAnimation) {\n\t\tthis.swipe = Swipe(this.element.parentNode, {\n\t\t\t//startSlide: 2,\n\t\t\tspeed: 4000,\n\t\t\t//auto: 3000,\n\t\t\t//continuous: true,\n\t\t\t//disableScroll: false,\n\t\t\t//stopPropagation: false,\n\t\t\tcallback: function(index, elem) {\n\t\t\t\t//alert('hello')\n\t\t\t},\n\t\t\ttransitionEnd: function(index, elem) {\n\t\t\t\t//alert('goodbye');\t\n\t\t\t}\n\t\t});\n\t}\n\t//bind to self so that evaluateHistory and other stuff can call you direct\t\n\t//var originInfo = this.getOriginInfo('model');\n\t//originInfo.subscribe(this.moduleAccess.getId(), 'model', true);\n};\n\t\npebble.inherits(pebble.libs.standard.ArrayStackControl, pebble.libs.standard.ArrayControl);\n\n/**\n * All array controls will attempt to load and source the local embedded array or,\n * get the external array if a filter is present\n * @override\n */\npebble.libs.standard.ArrayStackControl.prototype.onReady = function() {\n\tvar that = this;\n  var loadQuery = this.getOriginInfo('loadQuery').get();\n  if (loadQuery) {\n    //specify loadQuery if you need to preload the array\n    pebble.libs.standard.ArrayStackControl.superClass_.onReady.call(this);\n  } else {\n    this.showArrayItem(this.getSingleSelectedMeta(), function() {\n      that.setLoaded();\t\n    });\n  }\n};\n/**\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.ArrayStackControl.prototype.loadSub = function(cb) {\n\n\t//this.setShowRecs();\n\t\n\tif (this.useAnimation) {\n\t\t//set empty divs for swipe\n\t\tfor (var i = 0; i < this.showRecs.length; i++) {\n\t\t\tvar el = document.createElement('div');\n\t\t\tel.style.position = 'absolute';\n\t\t\tthis.element.appendChild(el);\n\t\t}\n\t\tthis.element.style.width = '100%';\n\t\tthis.element.style.height = '100%';\n\t\tthis.element.parentNode.style.width = '100%';\n\t\tthis.element.parentNode.style.height = '100%';\n\t} else {\n\n\t}\n\n\tthis.showArrayItem(this.getSingleSelectedMeta(), cb);\n};\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {string} field\n * @param {string} relPath\n * @param {Function} cb\n * @return {boolean}\n * @override\n */\npebble.libs.standard.ArrayStackControl.prototype.onDataModelChanged = function(source, field, relPath, cb) {\n\tif (source != this) {\n\t\tvar that = this;\n\t\tpebble.libs.standard.ArrayStackControl.superClass_.onDataModelChanged.call(this, source, field, relPath, function() {\n\t\t\tvar elements = relPath.split('.');\n\t\t\tvar group = elements[1];\n\t\t\tif (relPath.indexOf('singleSelectedMeta') != -1 && elements.length == 3 && group == that.getGroup() ){\t//not collections with/in collections\n\t\t\t\tvar model = that.modelOrigin.getCreateOnNull()\n\t\t\t\tvar relMeta = model.getRef(relPath);\n\t\t\t\t\t\t\n\t\t\t\tthat.showArrayItem(relMeta, cb);\n\t\t\t\tthat.currentMeta = relMeta;\n\n\t\t\t} else {\n\t\t\t\tcb();\n\t\t\t}\n\t\t});\n\t} else {\n\t\tcb();\n\t}\n\treturn false;\n};\n\n/**\n * @param {?string} relMeta\n * @param {Function} cb\n */\npebble.libs.standard.ArrayStackControl.prototype.showArrayItem = function(relMeta, cb) {\n\n\tif (relMeta != null) {\n\n\t\t//create load event (used for layoutState)\n\t\tthis.loadEvent = new pebble.libs.standard.Event();\n\n\t\tif (!this.modules[relMeta]) { \n\t\t\tvar that = this;\n\n\t\t\tthis.loadMyArrayItem(relMeta, function() {\n\n\t\t\t\tvar mod = that.modules[relMeta];\n\t\t\t\tif (!that.useAnimation) {\n\t\t\t\t\tthat.element.appendChild(mod.element);\n\t\t\t\t}\n\n\t\t\t\tthat.showElement(mod, relMeta);\n\n\t\t\t\tthat.loadEvent.fire(null);\n\t\t\t\tthat.loadEvent = null;\n\t\t\t\tcb && cb();\n\n\t\t\t});\n\n\t\t} else {\n\t\t\tthis.showElement(this.modules[relMeta], relMeta);\n\t\t\tthis.loadEvent.fire(null);\n\t\t\tthis.loadEvent = null;\n\t\t\tcb && cb();\n\t\t}\n\n\t} else {\n\n\t\tcb();\n\n\t}\n\n};\n/**\n * @param {string} meta\n * @param {Function} cb\n */\npebble.libs.standard.ArrayStackControl.prototype.loadMyArrayItem = function(meta, cb) {\n\t\n\tvar containerEle = this.getArrayItemElement(meta);\n\n\tvar edm = this.getArrayItemEdm(meta);\n\tvar dm = this.getArrayItemLoadItem(meta);\n\tvar win = this.createModuleWithEdm(edm, containerEle);\n\n\tif (this.isCollection){\n\t\tvar that = this;\n\t\tthis.retrieveArrayItem(meta, false, function(data) {\n\t\t\tthat.getOriginInfo(that.getMainPath() + '.' + meta).setSilent(data);\n\t\t\twin.getItem(dm, cb);\n\t\t});\n\n\t} else {\n\t\n\t\twin.getItem(dm, cb);\n\t}\n};\n\n/**\n        <div class='swipe'>\n            <div class='swipe-wrap'>\n\t\t\t\t\t\tArrayStackControl\n            </div>\n        </div>\n * @param {pebble.libs.standard.interfaces.ModuleAccess} mod\n * @param {?string} relMeta\n */\npebble.libs.standard.ArrayStackControl.prototype.showElement = function(mod, relMeta) {\n\n\tif (relMeta != null) {\t\n\t\tvar autoHeight = this.getOriginInfo('autoHeight').getBool();\n\n\t\tif (this.useAnimation){ //animation\n\t\t\tvar model = this.origin.getCreateOnNull();\n\t\t\tvar index = model.getIndex('.', relMeta);\n\t\t\tvar divs = this.element.parentNode.querySelectorAll('.swipe-wrap > div');\n\t\t\tdivs[index].appendChild(mod.element);\n\t\t\t//this.element.childNodes[index].appendChild(mod.element);\n\t\t\tthis.swipe.slide(index, 200);\n\t\t} else {\n\t\t\tvar peb = new pebble.Pebble();\n\t\t\tif (this.currentMeta != null && this.modules[this.currentMeta]) {\n\n\t\t\t\tif (autoHeight) {\n\n\t\t\t\t\tthis.modules[this.currentMeta].element.style.display = 'none';\n\n\t\t\t\t} else {\n\t\t\t\t\tthis.modules[this.currentMeta].element.setAttribute('class', 'listStackPanelhide');\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif (autoHeight) {\n\n\t\t\t\tmod.element.style.display = 'blocK';\n\t\t\t} else {\n\t\t\t\tmod.element.setAttribute('class', 'listStackPanelshow');\n\t\t\t}\n\t\t}\n\t} else {\n\t\tthrow new Error('ArrayStackControl: showElement() requires relMeta');\n\t}\n};\n\n\n\n\n\n})();\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/ArrayStackControl.js"},{"key":"ext","val":"js"},{"key":"testCode","val":"\nvar topApp;\n\ndescribe('testArrayStackControl', function () {\n\n\tfunction getBaseInnerMarkup() {\n\t\tvar ctrl = new pebble.Pebble();\n\t\tctrl.setRef('.', 'standard:DynControl');\n\t\tctrl.setRef('model._bind', 'testItem');\n\n\t\t\t\t\t\t\t\t\t//<displayControlFilters>\n                    //<a1>\n                        //<filter>item.ref_ == 'theModel.libs.standard.types.text'</filter>\n                        //<displayControl>\n                            //<innerMarkup>\n                                //<input type='text'>\n                                    //<control ref='theModel.libs.standard.controls.textInput'>\n                                        //<dummy/>\n                                    //</control>\n                                //</input>\n                            //</innerMarkup>\n                        //</displayControl>\n                    //</a1>\n                //</displayControlFilters>\t\n\t\t\n\t\tvar dcf = new pebble.Pebble();\n\t\tdcf.setValue('filter', '(item.ref_).indexOf(\"text\") != -1');\n\t\t\n\t\tvar control = new pebble.Pebble();\n\t\tcontrol.setRef('.', 'standard:TextInput');\n\n\t\tvar displayControl = new pebble.Pebble();\n\t\tdisplayControl.setAttribute('innerMarkup.input', 'type', 'text');\n\t\tdisplayControl.set('innerMarkup.input.control', control);\n\n\t\tdcf.set('displayControl', displayControl);\n\t\t\n\t\tvar displayControlFilters = new pebble.Pebble();\n\t\tdisplayControlFilters.set('a0', dcf);\n\n\t\tctrl.set('displayControlFilters', displayControlFilters);\n\n\t\t//ctrl.setRef('onSelected.exec', 'this.save');\n\n\t\tvar div1 = new pebble.Pebble('div');\n\t\tdiv1.set('control', ctrl);\n\n\t\tvar innerMarkup = new pebble.Pebble();\n\t\tinnerMarkup.add('.', div1);\n\t\treturn innerMarkup;\n\t}\n\n\tit ('requires deployment and testAppControl', function() {\n\t\tvar ready = false;\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\ttopApp && topApp.kill();\n\t\t\t\ttopApp = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top');\n\t\t\t\ttopApp.load(function() {\n\t\t\t\t\tready = true;\t\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn ready;\n\t\t}, 'wait for deployment and testAppControl', 300);\n\n\t});\n\n\tit ('should be able to render and any item (not a reference)', function() {\n\n\t\tvar innerMarkup = getBaseInnerMarkup();\t\n\t\tvar dm = topApp.item;\n\n\t\tdm.set('innerMarkup', innerMarkup);\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;// && topApp.item.modules['childmod0'] && topApp.item.modules['childmod0'].item.modules['childmod0'];\n\t\t}, 'Reference should load embedded references.  Reference should select if exists.', 3000);\n\n\t\truns(function() {\n\n\t\t\tvar dynControl = topApp.item.modules['childmod0'].item;\t\n\t\t\texpect(dynControl.getRef('.').split('.').pop()).toEqual('DynControl');\n\t\t\tvar textInput = dynControl.modules['childmod0'].item;\n\t\t\texpect(textInput.element.tagName.toUpperCase()).toEqual('INPUT');\n\t\t\texpect(textInput.getRef('model._bind')).toEqual('model.text');\n\n\t\t});\n\t});\n\n\tit ('should be able to save and any item (not a reference)', function() {\n\n\t\truns(function() {\n\t\t\tvar dynControl = topApp.item.modules['childmod0'].item;\t\n\t\t\tvar textInput = dynControl.modules['childmod0'].item;\n\t\t\ttextInput.element.value = 'hello';\n\t\t\ttopApp.item.saveManager.save(function() {});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\t\treturn topApp.item.saveManager.isValidSave;\n\t\t}, 'Reference should load embedded references.  Reference should select if exists.', 3000);\n\n\t\truns(function() {\n\t\t\texpect(topApp.item.getValue('testItem.text')).toEqual('hello');\n\t\t});\n\t});\n\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/controls/ArrayStackControl.js"}]},{"key":"ArrayTreeBase","val":[{"key":"devCode","val":"/**\n * ArrayTreeBase are composite controls that have an array on model but do not directly render the array items\n * ArrayTreeBase may source the origin.  This is often the case because the user will directly write the array or filter\n *\n * Fires to EventBus (added, updated, deleted), must subscribe to these to be notified\n *\n * @constructor\n * @param {pebble.libs.standard.interfaces.ModuleAccess} moduleAccess\n * @param {pebble.Pebble} dm\n * @param {boolean} isLoadTop\n * @extends {pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.ArrayTreeBase = function(moduleAccess, dm, isLoadTop) {\n\n\tpebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n\t/**\n\t * @type {boolean}\n\t */\n\tthis.isArrayBase = true;\n\n\tthis.modelOrigin = this.getOriginInfo('model');\n\n\tvar typePeb = this.modelOrigin.getThisType();\n\n\tif (typePeb != null) {\n\t\tvar typeRef = typePeb.getRef('.');\n\t\tthis.isCollection = typeRef.split('.').pop() === 'collection';\n\t\tthis.arrayFormId = typePeb.getRef('arrayFormId');\n\t}\n\tthis.origin = this.isCollection ? this.getOriginInfo('collection') : this.getOriginInfo('model');\n\n\t//event mapping\n\tvar addedOrigin = this.getOriginInfo('model._events.added');\n\t//addedOrigin.subscribe(this.moduleAccess.getId(), '_added', true);//can bind to anything\n\taddedOrigin.subscribe(this.moduleAccess.getId(), 'model._events.added', true);\n\n\tvar updatedOrigin = this.getOriginInfo('model._events.updated');\n\tupdatedOrigin.subscribe(this.moduleAccess.getId(), 'model._events.updated', true);\n\t\n\tvar deletedOrigin = this.getOriginInfo('model._events.deleted');\n\tdeletedOrigin.subscribe(this.moduleAccess.getId(), 'model._events.deleted', true);\n\n};\n\npebble.inherits(pebble.libs.standard.ArrayTreeBase, pebble.libs.standard.ClientControl);\n\n/**\n * All array controls will attempt to load and source the local embedded array or,\n * get the external array if a filter is present\n * @override\n */\npebble.libs.standard.ArrayTreeBase.prototype.onReady = function() {\n\n\tvar that = this;\n\tvar loadQuery = this.getOriginInfo('loadQuery').get();\n\tif (loadQuery != null) {\n\n\t\t//external (need this case for references that don't bind back to server origin)\n\t\t//loadQuery is the params part of request\n\t\tvar obj = new pebble.Pebble();\n\t\tloadQuery.setRef('clientInstance', this.getRef('.'));\n\t\tloadQuery.setRef('arrayControlId', this.moduleAccess.getId());\n\t\tvar collectionPath = this.modelOrigin.getBasePath();\n\t\tloadQuery.setRef('collection', collectionPath);\t\n\t\tobj.setParams(loadQuery);\n\t\tobj.setCallback(function(fetchedData) {\n\n\t\t\tvar recs = fetchedData.getRecords('.');\n\n\t\t\tthat.origin.setSilent(fetchedData);\n\t\t\tthat.loadSub(function() {\n\n\t\t\t\tthat.setLoaded();\n\n\t\t\t});\n\n\t\t}); \n\t\tthis.resolve(obj);\n\t} else {\n\t\t//check embedded\n\t\tif (!this.isCollection) {\n\t\t\t//embedded array, set/source origin\n\t\t\tvar recs = this.getRecords('model');\n\t\t\t//check this way because _bind often exists\n\t\t\tif (recs.length > 0) {\n\t\t\t\tthis.origin.set(this.get('model'), this, false);\n\t\t\t}\n\t\t\tthis.loadSub(function () {\n\n\t\t\t\tthat.setLoaded();\n\t\t\t});\n\n\t\t} else {\n\t\t\tthis.setLoaded();\n\t\t}\n\t}\n};\n/**\n * ArrayTreeBase doesn't load anything, inner controls will load themselves\n * @param {Function} cb\n */\npebble.libs.standard.ArrayTreeBase.prototype.loadSub = function(cb){\n\n\tcb();\n\n};\n/**\n * @return {string}\n */\npebble.libs.standard.ArrayTreeBase.prototype.getMainPath = function() {\n\n\treturn this.isCollection ? 'collection' : 'model';\n\n};\n//------------------- HasBindedArray (start)-------------------------\n\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {string} field\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.ArrayTreeBase.prototype.onDataModelChangedExact = function(source, field, cb) {\n\tvar that = this;\n\tvar aa = this.element;\n\tpebble.libs.standard.ArrayTreeBase.superClass_.onDataModelChangedExact.call(this, source, field, function() {\n\t\n\t\tvar data = that.getOriginInfo(field).get();\n\n\t\tif (field == 'model._events.added'){\n\t\t\tthat.onArrayItemsAdded(source, data, cb); \n\t\t} else if (field == 'model._events.deleted'){\n\t\t\tthat.onBeforeArrayItemsDeleted(source, data, cb); \n\t\t} else if (field == 'model._events.updated'){\n\t\t\tthat.onArrayItemsUpdated(source, data, cb); \n\t\t} else {\n\t\t\tcb();\n\t\t}\n\n//\t\tvar exposeMap = that.getOriginInfo('events.' + field).get();\n//\t\tif (exposeMap != null) { \n//\t\t\tthat.exec('events.' + field);\n//\t\t}\n\n\t});\n};\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {pebble.Pebble} data\n * @param {Function} cb\n */\npebble.libs.standard.ArrayTreeBase.prototype.onArrayItemsAdded = function(source, data, cb) {\n\tcb();\n};\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {pebble.Pebble} data\n * @param {Function} cb\n */\npebble.libs.standard.ArrayTreeBase.prototype.onArrayItemsUpdated = function (source, data, cb) {\n\tcb();\n};\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {pebble.Pebble} data\n * @param {Function} cb\n */\npebble.libs.standard.ArrayTreeBase.prototype.onBeforeArrayItemsDeleted = function(source, data, cb) {\n\tcb();\n};\n\n//------------------- HasBindedArray (end)-------------------------\n\n\n/**\n * @param {string} meta\n * @param {boolean} byDataPath\n * @param {pebble.Pebble} dataPathParams\n * @param {?string} layoutStateRef\n * @param {Function} cb\n */\npebble.libs.standard.ArrayTreeBase.prototype.setSelectedItemCheckLayoutState = function(meta, byDataPath, dataPathParams, layoutStateRef, cb) {\n\n\tvar dataPath = this.modelOrigin.getBasePath() + '.' + meta;\n\tdataPath = dataPath.replace('theModel', 'model');\n\n\tvar handled = pebble.libs.standard.Module.topMod.item.layoutStateManager.checkLayoutState(this, meta, byDataPath, dataPathParams, layoutStateRef, dataPath);\t\t\t\n\n\tif (handled) {\n\n\t\tcb();\n\n\t} else { \n\n\t\tthis.setSelectedItem(meta, cb);\n\n\t}\n\n};\n//Service Layer\n/**\n * @param {string} funcName\n * @param {pebble.Pebble} obj\n * @return {number}\n * @override\n */\npebble.libs.standard.ArrayTreeBase.prototype.executeMethod = function(funcName, obj) {\n\tvar ret = 1;\n\t//list all ui public methods\n\tif (funcName == 'create') {\n\t\tthis.createArrayItem(obj);\n\t} else if (funcName == 'createThru') {\n\t\tthis.createThru(obj);\n\t} else if (funcName == 'setSingleSelectedItemByMeta') {\n\t\tthis.setSingleSelectedItemByMeta(obj);\n\t} else if (funcName == 'deleteSelectedItem') {\n\t\tthis.deleteSelectedItem(obj);\n\t} else if (funcName == 'getSelectedItem') {\n\t\tthis.getSelectedItem(obj);\n\t} else if (funcName == 'getSelectedItemMeta') {\n\t\tthis.getSelectedItemMeta(obj);\n\t} else if (funcName == 'selectFirst') {\n\t\tthis.selectFirst(obj);\n\t} else if (funcName == 'selectLast') {\n\t\tthis.selectLast(obj);\n\t} else if (funcName == 'selectNext') {\n\t\tthis.selectNext(obj);\n\t} else if (funcName == 'selectPrev') {\n\t\tthis.selectPrev(obj);\n\t} else if (funcName == 'setSelectedItemByIndex') {\n\t\tthis.setSelectedItemByIndex(obj);\n\t} else if (funcName == 'getGroup') {\n\t\tthis.getGroupItems(obj);\n\t} else if (funcName == 'addItems') {\n\t\tthis.addItems(obj);\n\t} else {\n\t\treturn pebble.libs.standard.ArrayTreeBase.superClass_.executeMethod.call(this, funcName, obj);\n\t}\n\treturn ret;\n};\n/**\n * subclasses override\n */\npebble.libs.standard.ArrayTreeBase.prototype.incrementRecs = function() {\n\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayTreeBase.prototype.setSingleSelectedItemByMeta = function (obj) {\n\tvar params = obj.getParams();\n\tvar meta = params.getRef('meta');\n\tif (meta != null) { \n\t\tvar byDataPath = params.getBool('byDataPath');\n\t\tthis.setSelectedItemCheckLayoutState(meta, byDataPath, null, null, obj.getCallback());\n\t} else {\n\t\tthrow new Error('ArrayTreeBase: setSingleSelectedItemByMeta() requires meta');\n\t}\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayTreeBase.prototype.deleteSelectedItem = function (obj) {\n\tvar meta = this.getSingleSelectedMeta();\n\tif (meta != null) {\n\t\tthis.removeArrayItem(meta, obj.getCallback());\n\t} else {\n\t\tobj.callback();\n\t}\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayTreeBase.prototype.getSelectedItemMeta = function (obj) {\n\tvar meta = this.getSingleSelectedMeta();\n\tvar basePath = this.modelOrigin.getBasePath();\n\tobj.setRef('.', basePath + '.' + meta);\n\tobj.callback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayTreeBase.prototype.getSelectedItem = function (obj) {\n\tvar params = obj.getParams();\n\tvar meta = this.getSingleSelectedMeta();\n\tvar path = params.getRef('path') || '.';\n\tif (meta != null) {\n\t\t\n\t\tif (this.isCollection) {\n\t\t\t\n\t\t\tvar asDs = params.getBool('asDs');\n\t\t\tthis.retrieveArrayItem(meta, asDs, function(data) {\n\n\t\t\t\tif (!asDs) {\n\t\t\t\t\tdata = data.get(path);\n\t\t\t\t}\n\t\t\t\t//preserver _source\n\t\t\t\tobj.setFull('.', data);\n\t\t\t\tobj.callback();\n\n\t\t\t});\n\t\t} else {\n\n\t\t\t//ui (default) \n\t\t\tvar item = this.getOriginInfo(this.getMainPath() + '.' + meta).get();\n\t\t\tobj.set('.', item.get(path));\n\t\t\tobj.callback();\n\n\t\t}\n\n\t} else {\n\n\t\tobj.callback();\n\n\t}\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayTreeBase.prototype.getGroupItems = function (obj) {\n\n\tvar params = obj.getParams();\n\tvar group = params.getValue('group');\n\tvar asRef = params.getBool('asRef');\n\tvar setPath = params.getRef('setPath') || '.';\n\tvar getPath = params.getRef('getPath') || '.';\n\n\tvar expression = '{{item._selection.' + group + '.selected == true}}';\n\n\tvar recs = this.getItemsWithFilter(expression);\n\n\tfor (var i = 0; i < recs.length; i++) {\n\t\tvar rec = recs[i];\n\t\tvar tagName = rec.getTagName();\n\t\tvar path = setPath === '.' ? tagName : tagName + '.' + setPath;\n\t\tif (asRef) {\n\n\t\t\t//fullPath?\n\t\t\tobj.setRef(path, rec.getTagName());\n\n\t\t} else {\n\n\t\t\tobj.set(path, rec.get(getPath));\n\n\t\t}\n\t}\n\tobj.callback();\t\n};\n\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayTreeBase.prototype.addItems = function (obj) {\n\t\n\tvar params = obj.getParams();\n\tvar array = this.origin.getCreateOnNull();\n\tvar recs = params.getRecords('withItems');\n\tvar addedItems = new pebble.Pebble();\n\tfor (var i = 0; i < recs.length; i++) {\n\t\tvar rec = recs[i];\n\n\t\t//check exists?\n\t\tvar item = array.add2Array('.', rec, null);\n\n\t\taddedItems.set(item.getTagName(), item);\n\n\t}\n\t\n\tvar originInfo = this.getOriginInfo('model' + '._events.added');\n\toriginInfo.setSilent(addedItems);\n\toriginInfo.notifyExact(null, null, obj.getCallback());\n\n};\n\n\n\n\n/**\n * @param {string} group\n * @param {string} path\n * @param {pebble.Pebble} data\n * @param {Function} cb\n */\npebble.libs.standard.ArrayTreeBase.prototype.setGroup = function (group, path, data, cb) {\n\n\tvar expression = '{{item._selection.' + group + '.selected == true}}';\n\n\tthis.setGroupWithFilter(expression, path, data, cb);\n\t\n};\n\n/**\n * selected: item controls bound to selected will be removed, dont worry about them\n * count: need to notify 0\n * @param {string} group\n */\npebble.libs.standard.ArrayTreeBase.prototype.deleteGroup = function (group, cb) {\n\n\tvar metasOrigin = this.getOriginInfo('model._selection.' + group + '.metas');\n\n\tvar metas = metasOrigin.getRecords();\n\n\tif (metas.length > 0) {\n\t\t\n\t\tvar expression = '{{item._selection.' + group + '.selected == true}}';\n\n\t\t//set metas\n\t\tmetasOrigin.set(new pebble.Pebble(), null, true, function() {});\n\t\n\t\t//update count\n\t\tvar selectedCountOrigin = this.getOriginInfo('model._selection.' + group + '.count');\n\t\tvar count = new pebble.Pebble();\n\t\tcount.setValue('.', 0);\n\t\tselectedCountOrigin.set(count, null, true, function() {});\n\n\t\tthis.deleteWithFilter(expression, cb);\n\n\t} else {\n\t\tcb && cb();\n\t}\n};\n\n/**\n * @param {?string} expression (possibly PebbleFilter?)\n */\npebble.libs.standard.ArrayTreeBase.prototype.getItemsWithFilter = function (expression) {\n\n\tvar array = this.origin.getCreateOnNull();\n\tvar recs = array.getRecords('.');\n\tif (expression !== null) {\n\n\t\tvar filteredData = new pebble.Pebble();\n\t\tvar resolvedExpression = this.expressionManager.resolveExpression(expression, null);\n\t\tfor (var i = recs.length - 1; i >= 0; i--) {\n\t\t\tvar item = recs[i];\n\t\t\tif (this.expressionManager.evaluate(resolvedExpression, item)){\n\t\t\t\tfilteredData.setFull(item.getTagName(), item);\n\t\t\t}\n\t\t}\n\t\trecs = filteredData.getRecords('.');\n\t} \n\treturn recs;\n};\n/**\n * @param {string} expression\n * @param {Function} cb\n */\npebble.libs.standard.ArrayTreeBase.prototype.deleteWithFilter = function (expression, cb) {\n\n\tvar recs = this.getItemsWithFilter(expression);\n\tvar array = this.origin.getCreateOnNull();\n\n\tvar itemsDeleted = new pebble.Pebble();\n\tfor (var i = 0; i < recs.length; i++) {\n\n\t\tvar rec = recs[i];\n\t\tvar tagName = rec.getTagName();\n\t\tarray.remove(tagName);\n\t\t\n\t\titemsDeleted.set(tagName, new pebble.Pebble());\n\t}\n\t\n\tvar originInfo = this.getOriginInfo('model' + '._events.deleted');\n\toriginInfo.setSilent(itemsDeleted);\n\toriginInfo.notifyExact(null, null, cb);\n\n};\n\n/**\n * @param {string} expression\n * @param {string} relPath\n * @param {pebble.Pebble} data\n * @param {Function} cb\n */\npebble.libs.standard.ArrayTreeBase.prototype.setGroupWithFilter = function (expression, relPath, data, cb) {\n\t\n\tvar recs = this.getItemsWithFilter(expression);\n\tvar array = this.origin.getCreateOnNull();\n\n\tvar itemsUpdated = new pebble.Pebble();\n\tfor (var i = 0; i < recs.length; i++) {\n\n\t\tvar rec = recs[i];\n\t\tvar tagName = rec.getTagName();\n\t\tvar path = relPath === '.' ? tagName : tagName + '.' + relPath;\n\t\tarray.set(path, data);\n\n\t\titemsUpdated.set(rec.getTagName(), new pebble.Pebble());\n\t}\n\t\n\tvar originInfo = this.getOriginInfo('model' + '._events.updated');\n\toriginInfo.setSilent(itemsUpdated);\n\toriginInfo.notifyExact(null, null, cb);\n};\n\n\n\n\n\n\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayTreeBase.prototype.createArrayItem = function (obj) {\n\tthis._createItem(obj, false);\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayTreeBase.prototype.createThru = function (obj) {\n\tthis._createItem(obj, true);\n};\n/**\n * @param {pebble.Pebble} obj\n * @param {boolean} createThru\n */\npebble.libs.standard.ArrayTreeBase.prototype._createItem = function(obj, createThru) {\n\tvar params = obj.getParams();\n\tvar withData = params.get('withData') || new pebble.Pebble();\n\t\n\n\tvar useSourceName = params.getBool('useSourceName');\n\tif (useSourceName) {\n\t\tvar source = withData.getRef('_source');\n\t\tvar name = source.split('.').pop();\n\t\twithData.setValue('key_', name);\n\t\twithData.remove('_source');\n\t}\n\n\tvar tagName = params.getValue('tagName');\n\tif (tagName != null) {\n\t\twithData.setValue('key_', tagName);\n\t}\n\n\tvar that = this;\n\tif (this.isCollection) {\n\t\t//create on server\n\t\tvar asDs = params.getBool('asDs');\n\t\tthis._createCollectionItem(withData, asDs, function() {\n\t\t\tobj.callback();\n\n\t\t});\n\t} else {\n\n\t\tthis._createArrayItem(withData, function(item) {\n\n\t\t\tvar path = item.getTagName();\n\n\t\t\tif (createThru) {\n\n\t\t\t\tvar newItemOrigin = that.getOriginInfo('model.' + path);\n\t\t\t\tthat.saveManager.writeThru(newItemOrigin, true, function() {});\n\n\t\t\t}\n\n\t\t\t//notify\n\t\t\tvar addedOriginInfo = that.getOriginInfo('model._events.added');\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.set(item.getTagName(), new pebble.Pebble());\n\t\t\taddedOriginInfo.setSilent(data);\n\t\t\taddedOriginInfo.notifyExact(that, that.getId(), function() {\n\n\t\t\t\t//select only for embedded array\n\t\t\t\t//embedded items\n\t\t\t\tobj.callback();\n\n\t\t\t}); \n\t\t});\n\n\t}\n};\n/**\n * create just creates the new item w/defaultData (up to implementing methods to notify and select\n * @param {pebble.Pebble} data\n * @param {Function} cb\n */\npebble.libs.standard.ArrayTreeBase.prototype._createArrayItem = function(data, cb) {\n\tvar forceName = data.getValue('key_');\n\tdata.remove('key_'); //remove otherwise remains in data\n\tthis._addArrayItem(null, data, forceName, cb);\n};\n/**\n * @param {pebble.Pebble} data\n * @param {number} index\n * @param {Function} cb\n */\npebble.libs.standard.ArrayTreeBase.prototype.insertArrayItem = function(data, index, cb) {\n\tthis._addArrayItem(index, data, null, cb);\n};\n/**\n * create directly on server, on success set\n * @param {pebble.Pebble} data\n * @param {boolean} asDs\n * @param {Function} cb\n */\npebble.libs.standard.ArrayTreeBase.prototype._createCollectionItem = function(data, asDs, cb) {\n\n\t\tvar obj = new pebble.Pebble();\n\t\t//var params = obj.getParams();\n\t\tvar collectionPath = this.modelOrigin.getBasePath();\n\t\tif (collectionPath != null) {\n\t\t\tvar params = this.getOriginInfo('crud.create').get();\n\t\t\tif (params != null) {\n\t\t\t\tparams.setRef('collection', collectionPath);\n\t\t\t\tparams.setValue('asDs', asDs);\n\t\t\t\tparams.setRef('clientInstance', this.getRef('.')); //could send displayControl\n\t\t\t\tparams.setFull('item', data); \n\t\t\t\tobj.setFull('_generate', params);\n\n\t\t\t\tvar that = this;\n\t\t\t\tobj.setCallback(function(data) {\n\n\t\t\t\t\tvar error = data.getValue('error');\n\t\t\t\t\t//if (error != null) \n\t\t\t\t\t//// get status panel\n\t\t\t\t\t//showError(error);\n\t\t\t\t\t//}\n\n\t\t\t\t\tvar confirmation = data.getValue('confirmation');\n\t\t\t\t\t//if (confirmation != null) {\n\t\t\t\t\t//showConfirmation(confirmation);\n\t\t\t\t\t//}\n\n\t\t\t\t\tvar newMeta = data.getRef('id');\n\n\t\t\t\t\t//notify \n\t\t\t\t\tvar addedOriginInfo = that.getOriginInfo('model._events.added');\n\t\t\t\t\tvar added = new pebble.Pebble();\n\t\t\t\t\tadded.set(newMeta, new pebble.Pebble());\n\t\t\t\t\taddedOriginInfo.setSilent(added);\n\t\t\t\t\taddedOriginInfo.notifyExact(that, that.getId(), function() {\n\n\t\t\t\t\t\tcb();\n\n\t\t\t\t\t}); \n\n\n\t\t\t\t});\n\t\t\t\tthis.resolve(obj);\n\t\t\t}\n\t\t} else {\n\t\t\tcb();\n\t\t}\n};\n\n/**\n * @param {?number} index\n * @param {pebble.Pebble} defaultData\n * @param {?string} forceName\n * @param {Function} cb\n * @private\n */\npebble.libs.standard.ArrayTreeBase.prototype._addArrayItem = function(index, defaultData, forceName, cb) {\n\tvar array = this.origin.getCreateOnNull();\n\n\t//add to model\n\tvar newMeta = forceName;\n\tif (newMeta == null) {\n\t\tnewMeta = array.getArrayName('.', 'a');\n\t}\n\tvar item = new pebble.Pebble(newMeta);\n\titem.set('.',  defaultData);\n\tif (index != null) {\n\t\tif (index == array.getRecords('.').length) {\n\t\t\t//no target mod\n\t\t\tarray.add2Array('.', item, newMeta);\n\t\t} else {\n\t\t\tvar target = array.getByIndex('.', index);\n\t\t\tarray.insertBefore(item, target.getTagName());\n\t\t}\n\t} else {\n\t\tarray.add2Array('.', item, newMeta);\n\t}\n\tarray.setFull(item.getTagName(), item);\n\tthis.origin.setSilent(array); //changes full array without alerting DataModel\n\n\tcb(item);\n\n};\n/**\n * update basePath.meta.relPath for data in model\n * @param {string} meta\n * @param {string} relPath\n * @param {boolean} setSilent\n * @param {Function} cb \n */\npebble.libs.standard.ArrayTreeBase.prototype.updateArrayItem = function(meta, relPath, setSilent, cb) {\n\tvar that = this;\n\n\tif (this.isCollection) {\n\t\t//when collection item, the new indexItem is passed back from the submit\n\t\tvar obj = new pebble.Pebble();\n\t\t//var params = obj.getParams();\n\t\tvar collectionPath = this.modelOrigin.getBasePath();\n\t\tif (collectionPath != null) {\n\t\t\tvar params = this.getOriginInfo('crud.update').get();\n\t\t\tif (params != null) {\n\t\t\t\tparams.setRef('collection', collectionPath);\n\t\t\t\tparams.setRef('name', meta);\n\t\t\t\tparams.setRef('relPath', relPath);\n\t\t\t\tvar controlItem = this.origin.get();\n\t\t\t\tvar item = controlItem.get(meta);\n\t\t\t\tvar data;\n\t\t\t\tif (relPath) {\n\t\t\t\t\tdata = item.get(relPath);\n\t\t\t\t} else {\n\t\t\t\t\tdata = item;\n\t\t\t\t}\n\t\t\t\tparams.set('data', data);\n\t\t\t\tparams.setAttribute('data', 'noresolve', 'once');\n\t\t\t\tobj.setFull('_generate', params);\n\t\t\t\tobj.setCallback(function(data) {\n\n\t\t\t\t\t/*\n\t\t\t\t\t\t var error = data.getValue('error');\n\t\t\t\t\t\t if (error != null) {\n\t\t\t\t\t// get status panel\n\t\t\t\t\t// showError(error);\n\t\t\t\t\t}\n\t\t\t\t\tvar confirmation = data.getValue('confirmation');\n\t\t\t\t\tif (confirmation != null) {\n\t\t\t\t\t// showConfirmation(confirmation);\n\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t\tthat._updateArrayItem(meta, setSilent, cb);\n\t\t\t\t});\n\t\t\t\tthis.resolve(obj);\n\t\t\t}\n\t\t} else {\n\t\t\tcb();\n\t\t}\n\t} else {\n\t\tthis._updateArrayItem(meta, setSilent, cb);\n\t}\n};\n/**\n * @param {string} meta \n * @param {boolean} setSilent\n * @param {Function} cb \n */\npebble.libs.standard.ArrayTreeBase.prototype._updateArrayItem = function(meta, setSilent, cb) {\n\tvar updatedOriginInfo = this.getOriginInfo('model._events.updated');\n\tvar updated = new pebble.Pebble();\n\tupdated.set(meta, new pebble.Pebble());\n\tupdatedOriginInfo.setSilent(updated);\n\tif (!setSilent) {\n\t\tupdatedOriginInfo.notifyExact(this, this.getId(), cb);\n\t}\n};\n/**\n * 1. remove from mode\n * 2. notify\n * 3. select -1 ? previous?\n * @param {string} itemPath\n * @param {Function} cb\n */\npebble.libs.standard.ArrayTreeBase.prototype.removeArrayItem = function (itemPath, cb) {\n\t\n\tvar that = this;\n\tif (this.isCollection) {\n\t\t//delete on server\n\t\tvar obj = new pebble.Pebble();\n\t\tvar collectionPath = this.modelOrigin.getBasePath();\n\t\tif (collectionPath != null) {\n\t\t\tvar params = this.getOriginInfo('crud.delete').get();\n\t\t\tif (params != null) {\n\n\t\t\t\tparams.setRef('collection', collectionPath);\n\t\t\t\tparams.setRef('clientInstance', this.getRef('.')); //could send displayControl\n\t\t\t\tparams.setRef('name', itemPath);\n\t\t\t\tobj.setCallback(function(data) {\n\n\t\t\t\t\tvar error = data.getValue('error');\n\t\t\t\t\t//if (error != null) {\n\t\t\t\t\t//// get status panel\n\t\t\t\t\t//showError(error);\n\t\t\t\t\t//}\n\t\t\t\t\tvar confirmation = data.getValue('confirmation');\n\t\t\t\t\t//if (confirmation != null) {\n\t\t\t\t\t//showConfirmation(confirmation);\n\t\t\t\t\t//}\n\n\t\t\t\t\tthat.removeItem(itemPath);//delete from local and notify\n\t\t\t\t\tcb();\n\n\t\t\t\t});\n\t\t\t\tobj.setFull('_generate', params);\n\t\t\t\tthis.resolve(obj);\n\t\t\t}\n\t\t} else {\n\t\t\tcb();\n\t\t}\n\t} else {\n\t\tthis.removeItem(itemPath);//delete from local and notify\n\t\tcb();\n\t}\n};\n/**\n * 1. remove from mode\n * 2. notify\n * 3. select -1 ? previous?\n * @param {string} itemPath\n * @param {Function} cb\n */\npebble.libs.standard.ArrayTreeBase.prototype.removeThru = function (itemPath, cb) {\n\t\n\tvar that = this;\n\tthis.removeItem(itemPath);//delete from local and notify\n\n\tvar origin = that.getOriginInfo('model.' + itemPath);\n\tthis.saveManager.writeThru(origin, true, function() {});\n\n\tcb();\n};\n/**\n * @param {string} itemPath\n */\npebble.libs.standard.ArrayTreeBase.prototype.removeItem = function(itemPath) {\n\tvar deletedOriginInfo = this.getOriginInfo('model._events.deleted');\n\tvar data = new pebble.Pebble();\n\t//data.setRef('.', itemPath);\n\tdata.set(itemPath, new pebble.Pebble());\n\tdeletedOriginInfo.setSilent(data);\n\tdeletedOriginInfo.notifyExact(this, this.getId(), function() {\n\n\t});\n\n\t//must set after notifying so controls can find the index of arrayItem\n\t//remove from model\n\tvar array = this.origin.get();\n\tarray.remove(itemPath);\n\tthis.origin.setSilent(array); //changes full array without alerting DataModel\n\n};\n/**\n * gets item\n * @param {string} relPath\n * @param {boolean} asDs\n * @param {Function} cb\n */\npebble.libs.standard.ArrayTreeBase.prototype.retrieveArrayItem = function (relPath, asDs, cb) {\n\n\tvar obj = new pebble.Pebble();\n\t//var params = obj.getParams();\n\t//tells server needs data\n\tvar collection = this.modelOrigin.getBasePath();\n\tif (collection != null) { \n\t\t\tvar params = this.getOriginInfo('crud.retrieve').get();\n\t\t\tif (params != null) {\n\n\t\t\t\tparams.setRef('relPath', relPath);\n\t\t\t\tparams.setRef('collection', collection);\n\t\t\t\tif (asDs) {\n\t\t\t\t\tparams.setTrue('asDs');\t\n\t\t\t\t}\n\t\t\t\tparams.setRef('clientInstance', this.getRef('.'));\n\t\t\t\tvar that = this;\n\t\t\t\tthis.retrieving = true;\n\t\t\t\tobj.setCallback(function(data) {\n\t\t\t\t\tvar arrayItem = data.get('arrayItem');\n\t\t\t\t\tif (arrayItem) {\n\t\t\t\t\t\tarrayItem.set('_source', data.get('source'));\n\t\t\t\t\t\tvar array = that.origin.getCreateOnNull();\n\t\t\t\t\t\tarray.set(relPath, arrayItem);\n\t\t\t\t\t\tthat.origin.setSilent(array);\n\t\t\t\t\t}\n\t\t\t\t\tcb(arrayItem);\n\t\t\t\t\tthat.retrieving = false;\n\n\t\t\t\t});\n\t\t\t\tobj.setFull('_generate', params);\n\t\t\t\tthis.resolve(obj);\n\n\t\t\t}\n\t} else {\n\t\tcb();\n\t}\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ArrayTreeBase.prototype.setSelectedItemByIndex = function(obj) {\n\tvar params = obj.getParams();\n\t\n\t//only for elements that have selectedIndex on them <select>\n\tvar index = params.getInt('index'); //this.element.selectedIndex\n\tif (index != null) {\n\t\tvar array = this.origin.get();\n\t\tvar selectedItem = array.getByIndex('.', index);\n\t\tthis.setSelectedItem(selectedItem.getTagName());\n\t} else {\n\t\tconsole.error('ArrayTreeBase: setSelectedItemByIndex() no index given');\n\t}\n\tobj.callback();\n};\n\n/**\n * @param {string} meta\n * @param {?string} group\n * @param {Function} [cb]\n */\npebble.libs.standard.ArrayTreeBase.prototype.setMultipleSelectedItem = function(meta, group, cb) {\n\tgroup = group || 'default';\n\t\n\tvar currentlySelected = this.getOriginInfo('model.' + meta + '._selection.' + group + '.selected').getBool();\n\n\t//toggle\n\tthis.setIsSelected('model', meta, !currentlySelected, group, function() {});\n\n\t//set metas\n\tvar metasOrigin = this.getOriginInfo('model._selection.' + group + '.metas');\n\tvar metasArray = metasOrigin.getCreateOnNull();\n\tif (currentlySelected) {\n\t\tmetasArray.remove(meta);\n\t} else {\n\t\tmetasArray.set(meta, new pebble.Pebble());\n\t}\n\tmetasOrigin.set(metasArray, null, true, function() {});\n\n\t//update count\n\tvar selectedCountOrigin = this.getOriginInfo('model._selection.' + group + '.count');\n\tvar count = new pebble.Pebble();\n\tcount.setValue('.', metasArray.getRecords('.').length);\n\tselectedCountOrigin.set(count, null, true, function() {});\n\n\tcb && cb();\n\n};\n/**\n * TODO: _atFirst, _atLast, _somethingSelected, not here but _records ...\n * @param {string} meta\n * @param {Function=} cb\n */\npebble.libs.standard.ArrayTreeBase.prototype.setSelectedItem = function(meta, cb) {\n\tvar that = this;\n\t//if no selectionAction assume commands (must do something)\n\tvar beforeSelectionAction = this.getOriginInfo('beforeSelectionAction').get();\n\tif (beforeSelectionAction != null) {\n\t\tthis.exec('beforeSelectionAction', null, function() {\n\t\t\tthat._setSelectedItem(meta, cb);\n\t\t});\n\t} else {\n\t\tthis._setSelectedItem(meta, cb);\n\t}\n};\n/**\n * @return {string}\n */\npebble.libs.standard.ArrayTreeBase.prototype.getGroup = function() {\n\tif (!this.group) {\n\n\t\tvar groupOrigin = this.getOriginInfo('selection.defaultGroup');\n\t\tthis.group = groupOrigin.getValue() || 'default';\n\n\t}\n\n\treturn this.group;\n};\n\n/**\n * @param {string} meta\n * @param {Function=} cb\n * @private\n */\npebble.libs.standard.ArrayTreeBase.prototype._setSelectedItem = function(meta, cb) {\n\n\tvar group = this.getGroup();\n\t\n\t//change old\n\tvar oldMeta = this.getSingleSelectedMeta();\n\tif (oldMeta != null) {\n\t\tthis.setIsSelected('model', oldMeta, false, group);\n\t}\n\tvar that = this;\n\tthis.setSelectedMeta('model', meta, group, function() {\n\n\t\t//\tif (meta != this.selectedMeta) {\n\n\t\tif (meta != null) {\n\t\t\tthat.setIsSelected('model', meta, true, group, function() {\n\n\t\t\t\tpebble.shared.logger.log('INFO', 'OriginItem - selectedMeta: ' + meta + '(' + that.getId() + ')' );\n\n\t\t\t\t//exec command\n\t\t\t\tif (that.arrayFormId == pebble.shared.TypeReferences.COMMAND) {\n\t\t\t\t\tthat.exec('model' + '.' + meta + '.function', null, function() {\n\t\t\t\t\t\tthat._afterSelection(cb);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthat._afterSelection(cb);\n\t\t\t\t}\n\n\t\t\t});\n\t\t} else {\n\t\t\tcb && cb();\n\t\t\t}\n\t }); \n\t\n};\n/**\n * @param {Function=} cb\n * @private \n */\npebble.libs.standard.ArrayTreeBase.prototype._afterSelection = function(cb) {\n\tvar selectionAction = this.getOriginInfo('selectionAction').get();\n\tif (selectionAction != null) {\n\t\tthis.exec('selectionAction', null, cb);\n\t} else {\n\t\tcb && cb();\n\t}\n};\n\n\n//--- selection policy (start)\n\n/**\n * @param {string} arrayPath\n * @param {string} meta\n * @param {boolean} val\n * @param {string=} group\n * @param {Function=} cb\n * @private \n */\npebble.libs.standard.ArrayTreeBase.prototype.setIsSelected = function(arrayPath, meta, val, group, cb) {\n\n\tvar isSelected = new pebble.Pebble();\n\tisSelected.setValue('.', val.toString());\n\tvar isSelectedOriginInfo = this.getOriginInfo(arrayPath + '.' + meta + '._selection.' + group + '.selected');\n\tisSelectedOriginInfo.set(isSelected, null, false, cb);\n\n};\n\npebble.libs.standard.ArrayTreeBase.prototype.setSelectedMeta = function(arrayPath, meta, group, cb) {\n\n\tgroup = group || 'defaut';\n\tvar selectedMetaOrigin = this.getOriginInfo(arrayPath + '._selection.' + group + '.singleSelectedMeta');\n\tif (meta) {\n\t\tvar selectedMetaPeb = new pebble.Pebble();\n\t\tselectedMetaPeb.setRef('.', meta);\n\t\tselectedMetaOrigin.set(selectedMetaPeb, null, false, cb);\n\t} else {\n\t\tselectedMetaOrigin.set(new pebble.Pebble(), null, false, cb);\n\t}\n\n};\n/**\n * @param {string=} arrayPath\n * @return {?string}\n */\npebble.libs.standard.ArrayTreeBase.prototype.getSingleSelectedMeta = function(arrayPath) {\n\tarrayPath = arrayPath || 'model';\n\treturn this.getOriginInfo(arrayPath + '._selection.' + this.getGroup() + '.singleSelectedMeta').getRef();\n};\n\n/**\n * @return {pebble.Pebble}\n */\npebble.libs.standard.ArrayTreeBase.prototype.getSingleSelectedItem = function() {\n\tvar meta = this.getSingleSelectedMeta();\n\tvar array = this.getOriginInfo('model').get();\n\tif (array != null && meta != null) {\n\t\treturn array.get(meta);\n\t} else {\n\t\treturn null;\n\t}\n};\n\npebble.libs.standard.ArrayTreeBase.prototype.deSelectAny = function() {\n\tvar that = this;\n\tvar meta = this.getSingleSelectedMeta();\n\tif (meta != null) {\n\t\tthis.setIsSelected('model', meta, false);\n\t}\n\tthis.setSelectedMeta('model', null, 'default', function() {\n\n\t});\n};\n\n\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/ArrayTreeBase.js"},{"key":"ext","val":"js"},{"key":"testCode","val":"\nvar topApp, ctrl1, originInfo;\n\ndescribe('testArrayTreeBase', function () {\n\n\tbeforeEach(function() {\n\n\t\tvar ready = false;\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\ttopApp && topApp.kill();\n\t\t\t\ttopApp = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top');\n\t\t\t\ttopApp.load(function() {\n\t\t\t\t\tready = true;\t\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn ready;\n\t\t}, 'wait for deployment and testAppControl', 300);\n\n\t\truns(function() {\n\n\t\t\tvar bindPoint = 'model.testEmbItems';\n\t\t\tvar innerMarkup = new pebble.Pebble();\n\n\t\t\tvar ctrl1 = new pebble.Pebble();\n\t\t\tctrl1.setRef('.', 'standard:ArrayTreeBase');\n\t\t\tctrl1.setRef('model._bind', bindPoint);\n\t\t\t//ctrl1.setRef('onSelected.exec', 'this.save');\n\n\t\t\tvar div1 = new pebble.Pebble('div');\n\t\t\tdiv1.set('control', ctrl1);\n\n\t\t\tinnerMarkup.add('.', div1);\n\n\t\t\tvar ctrl2 = new pebble.Pebble();\n\t\t\tctrl2.setRef('.', 'standard:ArrayTreeBase');\n\t\t\tctrl2.setRef('model._bind', bindPoint);\n\t\t\t\n\t\t\tvar embData = new pebble.Pebble();\n\t\t\tembData.setValue('a0.text', 'embData1');\n\t\t\tembData.setValue('a1.text', 'embData2');\n\n\t\t\tctrl2.set('model', embData);\n\n\t\t\tvar div2 = new pebble.Pebble('div');\n\t\t\tdiv2.set('control', ctrl2);\n\n\t\t\tinnerMarkup.add('.', div2);\n\t\t\tvar dm = topApp.item;\n\n\t\t\tdm.set('innerMarkup', innerMarkup);\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\tctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\toriginInfo = ctrl1.getOriginInfo('model');\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\t});\n\n\n\tit ('arrayEmbedded', function() {\n\n\t\texpect(originInfo.getThisType().getRef('arrayFormId').split('.').pop()).toEqual('testItem');\n\t\t\n\t});\n\t\n\tit ('with embedded data should push to origin, even if the origin has data', function() {\n\n\t\texpect(originInfo.get().getRecords('.').length).toEqual(2);\n\n\t});\n\t\n\tit ('can create and remove an item', function() {\n\n\t\tvar returned = false;\n\t\truns(function() {\n\t\t\tvar obj = new pebble.Pebble();\n\t\t\tvar params = obj.getParams();\n\t\t\tobj.setCallback(function() { returned = true; });\n\t\t\tctrl1.createArrayItem(obj);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'createArrayItem should have returned', 300);\n\n\t\truns(function() {\n\t\t\tvar array = originInfo.get();\n\t\t\texpect(array.getRecords('.').length).toEqual(3);//2 exist from push \n\t\t\t\n\t\t\treturned = false;\n\t\t\t\n\t\t\tctrl1.removeArrayItem('a2', function() { returned = true; });\n\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'removeArrayItem should have returned', 300);\n\t\t\n\t\truns(function() {\n\t\t\n\t\t\tvar array = originInfo.get();\n\t\t\tvar recs = array.getRecords('.');\n\t\t\texpect(recs.length).toEqual(2); //now 2 recs\n\n\t\t});\n\t});\n\n\tit ('can create an item withData', function() {\n\n\t\tvar returned = false;\n\t\truns(function() {\n\t\t\tvar obj = new pebble.Pebble();\n\t\t\tvar params = obj.getParams();\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('text', 'text1');\n\t\t\tparams.set('withData', data);\n\t\t\tobj.setCallback(function() { returned = true; });\n\t\t\tctrl1.createArrayItem(obj);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'createArrayItem should have returned', 300);\n\n\t\truns(function() {\n\t\t\tvar array = originInfo.get();\n\t\t\tvar recs = array.getRecords('.');\n\t\t\texpect(recs.length).toEqual(3); \n\t\t\texpect(recs[2].getValue('text')).toEqual('text1');\n\t\t});\n\t});\n\t\t\n\tit ('can create an item with its own tag name', function() {\n\n\t\tvar returned = false;\n\t\truns(function() {\n\t\t\tvar obj = new pebble.Pebble();\n\t\t\tvar params = obj.getParams();\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('key_', 'myname');\n\t\t\tparams.setFull('withData', data);\n\t\t\tobj.setCallback(function() { returned = true; });\n\t\t\tctrl1.createArrayItem(obj);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'createArrayItem should have returned', 300);\n\n\t\truns(function() {\n\t\t\tvar array = originInfo.get();\n\t\t\tvar recs = array.getRecords('.');\n\t\t\texpect(recs.length).toEqual(3); //now 2 recs\n\t\t\texpect(recs[2].getTagName()).toEqual('myname');\n\t\t});\n\t});\n\n\tit ('can update an item', function() {\n\n\t\t//no different than save, only here to express CRUD\n\t\tvar updateItem = new pebble.Pebble();\n\t\tupdateItem.setValue('text', 'updatedText');\n\n\t\tvar mynameOrigin = ctrl1.getOriginInfo('model.myname');\n\t\tmynameOrigin.set(updateItem, null, true);//just set silent keep simple\n\n\t\tvar array = originInfo.get();\n\t\tvar myname = array.get('myname');\n\t\texpect(myname.getValue('text')).toEqual('updatedText');\n\n\t});\n\n\tit ('can add multiple items at once', function() {\n\n\t\tvar returned = false;\n\t\truns(function() {\n\t\t\t\n\t\t\tspyOn(ctrl1, 'onArrayItemsAdded').andCallThrough();\n\n\t\t\tvar items = new pebble.Pebble();\n\t\t\titems.setValue('newItem1.text', 'new text 1');\n\t\t\titems.setValue('newItem2.text', 'new text 2');\n\n\t\t\tobj = new pebble.Pebble();\n\t\t\tvar params = obj.getParams();\n\t\t\tparams.setRef('.', 'this.addItems');\n\t\t\tparams.set('withItems', items);\n\t\t\tobj.setCallback(function() {\n\t\t\t\treturned = true;\n\t\t\t});\n\t\t\tctrl1.resolve(obj);\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'ctx did not load', 300);\n\t\t\n\t\truns(function() {\n\n\t\t\texpect(ctrl1.onArrayItemsAdded).toHaveBeenCalled();\n\t\t\texpect(ctrl1.onArrayItemsAdded.calls.length).toEqual(1);\n\n\t\t\texpect(ctrl1.origin.getRecords().length).toEqual(4);\n\t\t\t\n\t\t});\n\t});\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/controls/ArrayTreeBase.js"}]},{"key":"Audio","val":[{"key":"devCode","val":"\n/**\n * <audio/> attributes: autoplay autobuffer controls loop preload src/or use source element inside\n * \n * EVENTS\n * abort\tThis event is generated when playback is aborted.\ncanplay\tThis event is generated when enough data is available that the media can be played.\nended\tThis event is generated when playback completes.\nerror\tThis event is generated when an error occurs.\nloadeddata\tThis event is generated when the first frame of the media has finished loading.\nloadstart\tThis event is generated when loading of the media begins.\npause\tThis event is generated when playback is paused.\nplay\tThis event is generated when playback starts or resumes.\nprogress\tThis event is generated periodically to inform the progress of the downloading the media.\nratechange\tThis event is generated when the playback speed changes.\nseeked\tThis event is generated when a seek operation completes.\nseeking\tThis event is generated when a seek operation begins.\nsuspend\tThis event is generated when loading of the media is suspended.\nvolumechange\tThis event is generated when the audio volume changes.\nwaiting\tThis event is generated when the requested operation (such as playback) is delayed pending the completion of another operation (such as a seek).\n */\n/**\n * @constructor\n * @extends{pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.Audio = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.Audio, pebble.libs.standard.ClientControl);\n/**\n * @override\n */\npebble.libs.standard.Audio.prototype.onReady = function () {\n\tthis.audio = document.createElement('audio');\n\tvar autoplay = this.getOriginInfo('autoplay').getBool();\n\tif (autoplay) {\n\t\tthis.audio.autoplay = true;\n\t}\n\tvar autobuffer = this.getOriginInfo('autobuffer').getBool();\n\tif (autobuffer) {\n\t\tthis.audio.autobuffer = true;\n\t}\n\tvar controls = this.getOriginInfo('controls').getBool();\n\tif (controls) {\n\t\tthis.audio.controls = true;\n\t}\n\tvar loop = this.getOriginInfo('loop').getBool();\n\tif (loop) {\n\t\tthis.audio.loop = true;\n\t}\n\tvar preload = this.getOriginInfo('preload').getBool();\n\tif (preload) {\n\t\tthis.audio.preload = true;\n\t}\n\n\tthis.source1 = document.createElement('source');\n\tthis.audio.appendChild(this.source1);\n\n\tthis.source2 = document.createElement('source');\n\tthis.audio.appendChild(this.source2);\n\n\t//audio is source for duration\n\tvar that = this;\n\tthis.audio.addEventListener('durationchange', function() {\n\t\tvar data = new pebble.Pebble();\n\t\tdata.setValue('.', that.audio.duration);\n\t\tthat.getOriginInfo('duration').set(data, that, false);\n\t}, false);\n\t//canplay\n\tthis.audio.addEventListener('canplay', function() {\n\t\tvar data = new pebble.Pebble();\n\t\tdata.setTrue('.');\n\t\tthat.getOriginInfo('canplay').set(data, that, false);\n\t}, false);\n\t//download progress\n\tthis.audio.addEventListener('progress', function() {\n\t\tvar data = new pebble.Pebble();\n\t\tdata.setValue('.', that.audio.progress);\n\t\tthat.getOriginInfo('progress').set(data, that, false);\n\t}, false);\n\n\t//download progress\n\tthis.audio.addEventListener('play', function() {\n\t\tvar data = new pebble.Pebble();\n\t\tdata.setTrue('.');\n\t\tthat.getOriginInfo('playPause').set(data, that, false);\n\t}, false);\n\n\t//download progress\n\tthis.audio.addEventListener('pause', function() {\n\t\tvar data = new pebble.Pebble();\n\t\tdata.setValue('.', 'false');\n\t\tthat.getOriginInfo('playPause').set(data, that, false);\n\t}, false);\n\n\t//volumechange\n\tthis.audio.addEventListener('volumechange', function() {\n\t\tvar data = new pebble.Pebble();\n\t\tdata.setValue('.', that.audio.volume);\n\t\tthat.getOriginInfo('volume').set(data, that, false);\n\t}, false);\n\n\tthis.element.appendChild(this.audio);\n\n\tthis.setControl();\n\tthis.setLoaded();\n};\npebble.libs.standard.Audio.prototype.setControl = function() {\n\n\t//this.audio.canPlayType('audio/ogg');  could do it this way\n\n\tvar src1 = this.getOriginInfo('source1').getValue();\n\tvar startTime = this.getOriginInfo('startTime').getInt();\n\tvar endTime = this.getOriginInfo('endTime').getInt();\n\n\tif (src1 != null) {\n\t\tif (startTime != null && endTime != null) {\n\t\t\tsrc1 += '#t=' + startTime + ',' + endTime;\n\t\t}\n\t\tif (src1.indexOf('ogg') != -1) {\n\t\t\tthis.source1.setAttribute('type', 'audio/ogg');\n\t\t}\n\t\tif (src1.indexOf('wav') != -1) {\n\t\t\tthis.source1.setAttribute('type', 'audio/wav');\n\t\t}\n\t\tif (src1.indexOf('mp3') != -1) {\n\t\t\tthis.source1.setAttribute('type', 'audio/mp3');\n\t\t}\n\t\tthis.source1.src = src1; //fragment range add #t=10,20\n\t}\n\tvar src2 = this.getOriginInfo('source2').getValue();\n\tif (src2 != null) {\n\t\tif (startTime != null && endTime != null) {\n\t\t\tsrc1 += '#t=' + startTime + ',' + endTime;\n\t\t}\n\t\tif (src2.indexOf('ogg') != -1) {\n\t\t\tthis.source2.setAttribute('type', 'audio/ogg');\n\t\t}\n\t\tif (src2.indexOf('wav') != -1) {\n\t\t\tthis.source2.setAttribute('type', 'audio/wav');\n\t\t}\n\t\tif (src2.indexOf('mp3') != -1) {\n\t\t\tthis.source2.setAttribute('type', 'audio/mp3');\n\t\t}\n\t\tthis.source2.src = src2; //fragment range add #t=10,20\n\t}\n};\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {string} field\n * @param {string} relPath\n * @param {Function} cb\n * @return {boolean}\n * @override\n */\npebble.libs.standard.Audio.prototype.onDataModelChanged = function(source, field, relPath, cb) {\n\tif (this != source && field == 'model') {\n\t\tthis.setControl();\n\t} else if (field == 'playPause') {\n\t\t//bool\n\t\tif (this.getOriginInfo('playPause').getBool()) {\n\t\t\tthis.audio.play();\n\t\t} else {\n\t\t\tthis.audio.pause();\n\t\t}\n\t} else if (field == 'volume') {\n\t\tthis.audio.volume = this.getOriginInfo('volume').getValue();\n\t} else if (field == 'seek') {\n\t\tthis.audio.currentTime = this.getOriginInfo('seek').getInt();\n\t} else if (field == 'muted') {\n\t\tthis.audio.muted = this.getOriginInfo('muted').getBool();\n\t} \n\tcb();\n\treturn false;\n};\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/Audio.js"},{"key":"ext","val":"js"}]},{"key":"CheckBox","val":[{"key":"devCode","val":"/**\n * Handle type='checkbox|radio'\n * @constructor\n * @extends{pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.CheckBox = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.CheckBox, pebble.libs.standard.ClientControl);\n/**\n * @override\n */\npebble.libs.standard.CheckBox.prototype.onReady = function () {\n\n\tvar val = this.getOriginInfo('model').getBool();\n\tthis.element.checked = val;\n\tthis.setLoaded();\n};\n/**\n * @override\n */\npebble.libs.standard.CheckBox.prototype.onDataModelChanged = function(source, path, relPath, cb) {\n\tif (this != source && path == 'model') {\n\t\tthis.element.checked = this.getOriginInfo('model').getBool();\n\t} \n\tcb();\n\treturn false;\n};\n/**\n * @param {boolean} setSilent\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.CheckBox.prototype.setControlDataToModel = function(setSilent, cb) {\n\tvar data = new pebble.Pebble();\n\tdata.setValue('.', this.element.checked);\n\tthis.getOriginInfo('model').set(data, this, setSilent, cb);\n};\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/CheckBox.js"},{"key":"ext","val":"js"}]},{"key":"ClientControl","val":[{"key":"devCode","val":"\n//(function() {\n\n\n/**\n * @constructor\n * @param {pebble.libs.standard.interfaces.ModuleAccess} moduleAccess\n * @param {pebble.Pebble} dm\n * @param {boolean} isLoadTop\n * @extends {pebble.Pebble}\n * @implements{pebble.libs.standard.interfaces.DataChangable}\n * @implements{pebble.libs.standard.interfaces.ControlAccess}\n */\npebble.libs.standard.ClientControl = function(moduleAccess, dm, isLoadTop) {\n\tpebble.Pebble.call(this, dm);\n\n\t//to help see what the control is when debugging \n\tvar controlPath = this.getRef('.');\n\tif (controlPath != null) {\n\t\tvar elements = this.getRef('.').split('.');\n\t\tvar name = elements.pop();\n\t\telements.pop();\n\t\tvar lib = elements.pop();\n\t\tthis.aaTypeRef = lib + ':' + name + ' (' + moduleAccess.getId() + ')';\n\t}\n\n\n\t/**\n\t * @type {boolean}\n\t */\n\tthis.isArrayBase = false;\n\t/**\n\t * @type {boolean}\n\t */\n\tthis.isArrayDisplayBase = false;\n\n\t/**\n\t * inner modules (item: only one, container: child wins)\n\t * @type {Object.<pebble.libs.standard.interfaces.ModuleAccess>}\n\t */\n\tthis.modules = {}; \n\n\t/**\n\t * reference to parent Module\n\t * @type {pebble.libs.standard.interfaces.ModuleAccess}\n\t */\n\tthis.moduleAccess = moduleAccess;\n\n\tthis.originItemsManager = new pebble.libs.standard.OriginItemsManager(this);\n\t\n\tthis.loadManager = new pebble.libs.standard.LoadManager(this);\n\t/**\n\t * @type {pebble.libs.standard.InnerMarkupManager}\n\t */\n\tthis.innerMarkupManager = new pebble.libs.standard.InnerMarkupManager(this);\n\t\t\n\tthis.expressionManager = new pebble.libs.standard.tags.Xp(this);\n\n\tthis.element = this.moduleAccess.getDisplay();\n\n\t/**\n\t * @type {pebble.libs.standard.ClientControl}\n\t */\n\tthis.pCM = this.moduleAccess.getParentContext();\n\t\n\t//register\n\tthis.loadManager.registerChildContext(this.moduleAccess.getId());\n\t\n\tthis.executionManager\t= new pebble.libs.standard.ExecutionManager(this);\n\n\t/**\n\t * @type {Function}\n\t * @private\n\t */\n\tthis.loadCb = null;\n\n\t/**\n\t * @type {?number}\n\t * @private\n\t */\n\tthis.execOnLoadCount = null;\n\n\t/**\n\t * @type {boolean}\n\t */\n\tthis.isLoadTop = isLoadTop;\n\n\tthis.setFixedData();\n\n\tthis.originItemsManager.bindControl();\n\t/**\n\t * calls to getOriginInfo must be done after bindControl()\n\t * @type {boolean}\n\t */\n\tthis.isListContainer = this.getOriginInfo('isListContainer').getBool();\n\n\tthis.dragDropManager = new pebble.libs.standard.DragDropManager(this);\n\t\n\tthis.mouseEventsManager = new pebble.libs.standard.MouseEventsManager(this);\n\t\n\tthis.saveManager = new pebble.libs.standard.SaveManager(this);\n\t\n\n};\n\npebble.inherits(pebble.libs.standard.ClientControl, pebble.Pebble);\n\n/**\n * @private\n */\npebble.libs.standard.ClientControl.prototype.setFixedData = function() {\n\tvar form = pebble.libs.standard.Module.topMod.deployment.getTypeDocument(this.getRef('.'));\n\n\tvar fixedData = form.get('fixedData');\n\tif (fixedData != null) {\n\tvar recs = fixedData.getRecords('.');\n\t\tfor (var i = 0; i < recs.length; i++) {\n\t\t\tvar rec = recs[i];\n\t\t\tvar recOriginInfo = this.getOriginInfo(rec.getTagName());\n\t\t\trecOriginInfo.setSilent(rec); //or local only?\n\t\t}\n\t}\n};\n\n/**\n * roll out the item\n * @param {Function} cb\n */\npebble.libs.standard.ClientControl.prototype.roll = function(cb) {\n\tthis.loadCb = cb;\n\tvar that = this;\n\tthis.exec('beforeload', null, function() {\n\n\t\tthat.instWins();\n\t\tthat.loadManager.checkOnReady();\n\n\t}); \n};\n/**\n * default roll out for item which should have one module on load containers\n * will usually override this\n */\npebble.libs.standard.ClientControl.prototype.instWins = function() {\n\n\tvar innerMarkupPeb = this.getLayout();\n\tif (innerMarkupPeb != null){\n\t\tvar component = this.innerMarkupManager._hookInnerHtml(innerMarkupPeb, this.element);\n\t\tif (component.childMods != null) {\n\t\t\tvar firstLevelModCount = Object.keys(component.childMods).length;\n\t\t\tthis.loadManager.initChildModsCount(firstLevelModCount);\n\n\t\t\t//if listContainer add to load top\n\t\t\tif (this.isListContainer) {\n\t\t\t\tthis.loadManager.increaseRegisterTopChildModsCount(firstLevelModCount);\n\t\t\t}\n\n\t\t\tfor (var key in component.childMods) {\n\t\t\t\tvar childModSpec = component.childMods[key];\n\t\t\t\tvar edm = new pebble.Pebble(key);\n\t\t\t\tvar dm = new pebble.Pebble(childModSpec.dm);\n\t\t\t\tedm.set('control', dm);\n\n\t\t\t\tvar mod = this.createModuleWithEdm(edm, childModSpec.element);\n\t\t\t\tvar item = edm.get('control');\n\t\t\t\tif (item != null) {\n\t\t\t\t\tmod.rollItem(item, false, function() {});\n\t\t\t\t} \n\t\t\t}\n\t\t} else {\n\n\t\t\tthis.loadManager.setAllChildrenLoaded(true);\n\n\t\t}\n\t\tfor (var path in component.initPaths) {\n\t\t\t//need to bind\n\t\t\tthis.innerMarkupManager.bindInnerHtmlControl(path, this);\n\t\t\tthis.innerMarkupManager.setInnerHtmlControl(path, this);\n\t\t}\n\t} \n};\n/**\n * @return {pebble.Pebble}\n */\npebble.libs.standard.ClientControl.prototype.getLayout = function() {\n\tvar embeddedLayout = this.get('innerMarkup');\n\tif (!embeddedLayout) {\n\t\t//note which controls are appControls\n\t\tvar c = this.getRef('.');\n\t\tvar form = pebble.libs.standard.Module.topMod.deployment.getTypeDocument(c);\n\t\treturn form.get('innerMarkup'); \n\t} else {\n\t\t//embedded layout\n\t\treturn embeddedLayout;\n\t}\n};\n/**\n * create module with edm\n * @param {pebble.Pebble} slot\n * @param {?Element} childModEle\n * @return {pebble.libs.standard.interfaces.ModuleAccess}\n */\npebble.libs.standard.ClientControl.prototype.createModuleWithEdm = function(slot, childModEle) {\n\tvar pCM;\n\tif (!this.isListContainer) {\n\t\tpCM = this;\n\t} else {\n\t\tpCM = this.pCM;\n\t}\n\tvar pfId = this.moduleAccess.getId() + '-' + slot.getTagName();\n\tvar mod = this.moduleAccess.getNewInstance(this, pCM, childModEle, pfId, slot);\n\tthis.modules[slot.getTagName()] = mod;\n\treturn mod;\n\n};\n/**\n * override to tell when data and inner ctrls ready\n */\npebble.libs.standard.ClientControl.prototype.onReady = function() {\n\tvar retrieve = this.getOriginInfo('crudObject.retrieve').get();\n\tif (retrieve != null) {\n\n    var originInfo = this.getOriginInfo('model');\n\t\t//external (need this case for references that don't bind back to server origin)\n\t\t//loadQuery is the params part of request\n\t\tvar obj = new pebble.Pebble();\n\t\tretrieve.setRef('clientInstance', this.getRef('.'));\n\t\tretrieve.setRef('arrayControlId', this.moduleAccess.getId());\n\t\tobj.setParams(retrieve);\n\t\tobj.setCallback(function(fetchedData) {\n\n      console.log(fetchedData.toString());\n      originInfo.set(fetchedData, this, false, function() {\n        //that.setLoaded();\n      });\n\n\t\t}); \n\t\tthis.resolve(obj);\n\t} \n\n\tthis.setLoaded();\n};\n/**\n * control call this to reports to its pCM (to check if all other children\n * are in) except if this is the loadTop where we dont want to trigger\n * anything above (could do a onChildChange but dont need it yet)\n * \n */\npebble.libs.standard.ClientControl.prototype.setLoaded = function() {\n\t\n\tvar topLoaded = this.loadManager.setLoaded(this.moduleAccess.getId());\n\tif (topLoaded) {\n\t\tvar ctxs = this.getChildCtxs([], 'bot2Top', true, true);\n\t\tthis.execOnLoadCount = ctxs.length;\n\t\tif (this.execOnLoadCount > 0) {\n\t\t\tvar that = this;\n\t\t\tfor (var i = 0; i < ctxs.length; i++) {\n\t\t\t\tvar ctx = ctxs[i];\n\t\t\t\tctx.execOnLoad( function() {\n\t\t\t\t\tthat.finishTopLoad();\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.execOnLoadCount = 1;\n\t\t\tthis.finishTopLoad();\n\t\t}\n\t}\n};\n/**\n * items can override to add other stuff on (while still calling this superclass.execOnLoad)\n * @param {Function} cb\n */\npebble.libs.standard.ClientControl.prototype.execOnLoad = function(cb) {\n\tcb();\n};\n/**\n * @private\n */\npebble.libs.standard.ClientControl.prototype.finishTopLoad = function() {\n\tthis.execOnLoadCount -= 1;\n\tif (this.execOnLoadCount == 0) {\n\t\t// exec top item as well because it does not know its the top item\n\t\t// (ex. dynItemCtrl)\n\t\tvar that = this;\n\t\tthis.execOnLoad( function() {\n\t\t\tpebble.shared.logger.log('INFO', 'TOP LOADED: ' + that.getRef('.') + ' --- ' + that.moduleAccess.pfId);\n\n\t\t\t// 3rd final pass or all UI onLoads\n\t\t\tvar ctxs = that.getChildCtxs([], 'bot2Top', true, true);\n\t\t\tthat.execOnLoadCount = ctxs.length;\n\t\t\tif (that.execOnLoadCount > 0) {\n\t\t\t\tfor (var i = 0; i < ctxs.length; i++) {\n\t\t\t\t\tvar ctx = ctxs[i];\n\t\t\t\t\tctx.exec('afterload', null, function(data) {\n\n\t\t\t\t\t\tthat.doFinalUserSettableTop();\n\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthat.execOnLoadCount = 1;\n\t\t\t\tthat.doFinalUserSettableTop();\n\t\t\t}\n\t\t});\n\t}\n};\npebble.libs.standard.ClientControl.prototype.doFinalUserSettableTop = function() {\n\tthis.execOnLoadCount -= 1;\n\tif (this.execOnLoadCount == 0) {\n\t\tvar that = this;\n\t\tthis.exec('afterload', null, function(data) {\n\t\t\tthat.isLoadTop = false;\n\t\t\tif (that.loadCb != null) {\n\t\t\t\tthat.loadCb(null);\n\t\t\t}\n\t\t});\n\t}\n};\npebble.libs.standard.ClientControl.prototype.clearChildren = function() {\n\tif (this.modules != null) {\n\t\tfor (var key in this.modules){\n\t\t\tvar mod = this.modules[key];\n\t\t\tmod.kill();\n\t\t\tmod = null;\n\t\t\tthis.modules[key] = null\n\t\t}\n\t\tthis.modules = {};\n\t}\n};\n/**\n * kills item (usually only called by module)\n */\npebble.libs.standard.ClientControl.prototype.kill = function() {\n\n\tthis.clearChildren();\n\tthis.modules = null;\n\tthis.originItemsManager.unbindControl();\n\n};\n\n/**\n * subclasses override\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {string} path\n * @param {string} relPath\n * @param {Function} cb\n * @return {boolean}\n */\npebble.libs.standard.ClientControl.prototype.onDataModelChanged = function(source, path, relPath, cb) {\n\tif (relPath != '.') {\n\t\tpath = path + '.' + relPath;\n\t}\n\n\t//child markup components\n\t//if (this != source) {\n\t\tif (this.innerMarkupManager.component) {\n\t\t\t//this.innerMarkupManager.setInnerHtmlControl('ctx:' + path, this);\n\t\t\tfor (var ppath in this.innerMarkupManager.component.initPaths) {\n\t\t\t\tthis.innerMarkupManager.setInnerHtmlControl(ppath, this);\n\t\t\t}\n\t\t}\n\t//} \n\n\t//change logic\t\n\tvar onDataChangeLogic = this.getOriginInfo('onDataChangedLogic').get();\n\tif (onDataChangeLogic != null) {\n\t\tthis.exec('onDataChangedLogic'); \n\t}\n\n\tif (path.indexOf('triggers.') == 0) {\n\t\tvar functions = this.getOriginInfo('triggers').get();\n\t\tvar elements = path.split('.');\n\t\telements.shift(); //functions\n\t\tvar funcName = elements.shift();\n\t\tvar func = functions.get(funcName);\n\n\t\tvar funcObj = new pebble.Pebble();\n\t\tfuncObj.set('_generate', func);\n\t\tvar that = this;\n\t\tfuncObj.setCallback(function (data) {\n\n\n\t\t});\n\t\tvar params = funcObj.getParams();\n\t\tparams.setValue('caller', this.getId()); // the caller can be retrieved by getCaller(genObj)\n\t\tthis.resolve(funcObj);\n\t} else {\n\t\t//default expression behavior\n\t\tvar xp = this.getValue(path + '._xp');\n\t\tif (xp != null) {\n\t\t\tvar val = this.expressionManager.evaluate(xp);\n\t\t\tvar originInfo = this.getOriginInfo(path);\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('.', val);\n\t\t\tif (this != source) {\n\t\t\t\toriginInfo.set(data, this, false, function() {});\n\t\t\t}\n\t\t}\n\t}\n\t\n\tcb();\n\treturn false;\n};\n\n/**\n * @param {string} member\n * @return {pebble.libs.standard.OriginInfo}\n */\npebble.libs.standard.ClientControl.prototype.getOriginInfo = function(member) {\n\treturn this.originItemsManager.getOriginInfo(member);\n};\n\n/**\n * this needs to be here where _xp resides\n * @param {string} path\n * @return {?string}\n */\npebble.libs.standard.ClientControl.prototype.getExpressionValue = function(path) {\n\tvar xp = this.getValue(path + '._xp');\n\tif (xp != null) {\n\t\treturn this.expressionManager.evaluate(xp);\n\t} else {\n\t\treturn this.getOriginInfo(path).getValue();\n\t}\n};\n\n/**\n * subclasses override\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {string} field\n * @param {Function} cb\n */\npebble.libs.standard.ClientControl.prototype.onDataModelChangedExact = function(source, field, cb) {\n\tcb();\n};\n\n\n//------------------------- EVENT EXECUTION (start) -----------------------------\n/**\n * Gets client side instance of object\n * \n * @param {string} wRef\n * @return {pebble.libs.standard.interfaces.ModuleAccess}\n */\npebble.libs.standard.ClientControl.prototype.getObjectReference = function (wRef) {\n\n\tif (wRef == 'ctx') {\n\n\t\treturn this.pCM.moduleAccess;\n\n\t} else if (wRef == 'this') {\n\n\t\treturn this.moduleAccess;\n\n\t} else if (wRef == 'app') {\n\n\t\treturn pebble.libs.standard.Module.topMod;\n\n\t} else if (wRef.indexOf('arrayItemCtrl') == 0) {\n\n\t\treturn this.eventCtrl.moduleAccess;\n\n\t} else {\n\t\n\t\treturn this.pCM.getModById(wRef);\n\n\t} \n};\n/**\n * exec is for functions embedded in dm (mainly because it will correct the\n * scope of cr functions as well) other functions that need to be executed\n * should use directly pebble.voidFunc2ReturnFunc(func).resolve(ctrlRef)\n * note: this will not change scope and it will not set the top caller void\n * func as done here\n * @param {string} path\n * @param {pebble.Pebble=} data\n * @param {Function=} cb\n */\npebble.libs.standard.ClientControl.prototype.exec = function(path, data, cb) {\n\t\n\t// if the function/command is binded then we want to execute in the scope that it was defined\n\tvar originInfo = this.getOriginInfo(path);\n\tvar functionObj = originInfo.get();\n\tif (functionObj != null) {\n\t\tvar executingCtrl = originInfo.getControl();\n\n\t\t// set data\n\t\tdata = data || new pebble.Pebble();\n\n\t\t//for funcs defined on ArrayControl.displayControl execute in array control context\n\t\tif (executingCtrl.pCM && executingCtrl.pCM instanceof pebble.libs.standard.ArrayControl ) {\n\n\t\t\texecutingCtrl.pCM.clickedMeta = executingCtrl.getId().split('-').pop();\n\t\t\texecutingCtrl.pCM._execListOfVoidRg(executingCtrl.pCM, functionObj.getRecords('.'), 0, data, cb);\n\t\t\treturn;\n\n\t\t} \n\n\t\tthis._execListOfVoidRg(executingCtrl, functionObj.getRecords('.'), 0, data, cb);\n\t} else {\n\t  cb && cb();\n\t}\t\n};\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} executingCtrl\n * @param {Array.<pebble.Pebble>} functionList\n * @param {number} executingIndex\n * @param {pebble.Pebble} data\n * @param {Function=} cb\n */\npebble.libs.standard.ClientControl.prototype._execListOfVoidRg = function(executingCtrl, functionList, executingIndex, data, cb) {\n\tif (executingIndex < functionList.length && functionList[executingIndex] != null) {\n\t\tvar funcObj = new pebble.Pebble();\n\t\tfuncObj.setFull('_generate', functionList[executingIndex]);\n\t\tfuncObj.set('_event.data', data); \n\t\tvar that = this;\n\t\tfuncObj.setCallback(function (data) {\n\n\t\t\tthat._execListOfVoidRg(executingCtrl, functionList, executingIndex + 1, data, cb);\n\n\t\t});\n\t\tvar params = funcObj.getParams();\n\t\tparams.setValue('caller', executingCtrl.getId()); // the caller can be retrieved by getCaller(genObj)\n\t\texecutingCtrl.resolve(funcObj);\n\t} else {\n\t\t// when there is no more do callback\n\t\tcb && cb(null);\n\t}\n};\n/**\n * @param {pebble.Pebble} obj\n * @override\n */\npebble.libs.standard.ClientControl.prototype.resolve = function (obj) {\n\tthis.executionManager.resolve(obj);\n\n};\n//------------------------- EVENT EXECUTION (end) -----------------------------\n\n//------------------------- UTILS (start) -----------------------------\n\n/**\n * formatText replaces expressions in a string, usually an html template, with the evaluated value.\n * This is for quick replacement, no binding, used by ArrayControl, etc.\n * @param {pebble.Pebble} item\n * @param {string} recStr\n */\npebble.libs.standard.ClientControl.prototype.formatText = function(item, recStr) {\n\tvar startIndex  = 0;\n\tvar isDone = false;\n\tvar outputStr = '';\n\tvar remStr = recStr;\n\twhile (!isDone) {\n\t\tstartIndex = remStr.indexOf('{{');\n\t\tif (startIndex >= 0) {\n\t\t\toutputStr += remStr.substring(0, startIndex);\n\t\t\tstartIndex += 2;       \n\t\t\tremStr = remStr.substring(startIndex);\n\n\t\t\tvar xp = remStr.substring(0, remStr.indexOf('}}'));\n\t\t\tremStr = remStr.substring(remStr.indexOf('}}') + 2);\n\n\t\t\toutputStr += this.expressionManager.resolveExpression(xp, item) || '';\n\n\t\t} else {\n\t\t\toutputStr += remStr;  //add remainder\n\t\t\tisDone = true;\n\t\t}\n\t}\n\treturn outputStr;\n};\n\n/**\n * @param {boolean} setSilent\n * @param {Function} cb\n * @protected\n */\npebble.libs.standard.ClientControl.prototype.setControlDataToModel = function(setSilent, cb) {\n\t\tcb();\n};\n\n/**\n * @param {Function} cb\n * @protected\n */\npebble.libs.standard.ClientControl.prototype.validate = function(cb) {\n\tvar validators = this.getOriginInfo('validators').get();\n\tif (validators != null) {\n\n\t\tthis.executeValidators(validators.getRecords('.'), 0, cb);\n\n\t} else {\n\t\n\t\tcb({isValid:true});\n\n\t}\n};\n\n/**\n * @param {Array.<pebble.Pebble>} validators\n * @param {number} executingIndex\n * @param {Function=} cb\n */\npebble.libs.standard.ClientControl.prototype.executeValidators = function(validators, executingIndex, cb) {\n\tif (executingIndex < validators.length && validators[executingIndex] != null) {\n\t\t//has validators left\n\t\tvar validator = validators[executingIndex];\n\t\tvar filter = validator.get('filter');\n\n\t\tvar that = this;\n\t\t//switch (exp, _generate, reference)\n\t\tif (filter.get('_generate') != null) {\n\n\t\t\t//var xp = this.getValue(path + '._xp');\n\t\t\t//if (xp != null) {\n\t\t\t\t//var val = this.expressionManager.evaluate(xp);\n\t\t\t\t//var originInfo = this.getOriginInfo(path);\n\t\t\t\t//var data = new pebble.Pebble();\n\t\t\t\t//data.setValue('.', val);\n\t\t\t\t//if (this != source) {\n\t\t\t\t\t//originInfo.set(data, this, false, function() {});\n\t\t\t\t//}\n\t\t\t//}\n\t\t\tfilter.setCallback(function () {\n\n\t\t\t\tvar isValid = filter.getBool('.');\n\t\t\t\tthat.executeValidatorsCont(isValid, validators, executingIndex, validator, cb);\n\n\t\t\t});\n\t\t\tvar params = filter.getParams();\n\t\t\tparams.setValue('caller', this.getId()); // the caller can be retrieved by getCaller(genObj)\n\t\t\tthis.resolve(filter);\n\n\t\t} else if (filter.getRef('.') != null) {\n\t\t\t//reference > lookup\n\t\t\tvar refComponents = filter.getRef('.').split(':');\n\t\t\tvar lib = refComponents.shift();\n\t\t\tvar vdator = refComponents.shift();\n\t\t\n\t\t\tpebble.libs[lib].validation[vdator](this.getOriginInfo('model').get(), function(isValid) {\n\t\t\t\t\n\t\t\t\tthat.executeValidatorsCont(isValid, validators, executingIndex, validator, cb);\n\t\t\t\t\n\t\t\t});\n\t\t\t\n\t\t} else {\n\t\t\t//expression\n\t\t\tvar xp = filter.getValue('.');\n\t\t\tif (xp != null) {\n\t\t\t\tvar isValid = this.expressionManager.evaluate(xp);\n\n\t\t\t\tthis.executeValidatorsCont(isValid, validators, executingIndex, validator, cb);\n\n\t\t\t} else {\n\t\t\t\n\t\t\t\tthis.executeValidators(validators, executingIndex + 1, cb);\n\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// when there is no more do callback\n\t\tcb && cb({isValid:true});\n\t}\n};\n/**\n * @param {boolean} isValid\n * @param {Array.<pebble.Pebble>} validators\n * @param {number} executingIndex\n * @param {pebble.Pebble} validator\n * @param {Function=} cb\n */\npebble.libs.standard.ClientControl.prototype.executeValidatorsCont = function(isValid, validators, executingIndex, validator, cb) {\n\n\tthis.setValidationReport(isValid, validator, function() {\n\t\t\n\t}); \n\t//doesn't need to wait for status to be set, if valid continue on\n\tif (isValid) {\n\t\tthis.executeValidators(validators, executingIndex + 1, cb);\n\t} else {\n\t\tcb && cb({isValid:false});\n\t}\n};\n/**\n * @param {boolean} isValid\n * @param {pebble.Pebble} validator\n * @param {Function} cb\n */\npebble.libs.standard.ClientControl.prototype.setValidationReport = function(isValid, validator, cb) {\n\tvar validationReport = new pebble.Pebble();\n\tif (!isValid) {\n\t\t//put failure on control\n\t\tvalidationReport.set('status', validator.get('status'));\t\n\t\tvalidationReport.set('message', validator.get('message'));\t\n\t} else {\n\t\t//put success on control\n\t\tvalidationReport.setValue('status', 'success');\t\n\t}\n\tthis.getOriginInfo('model._validation').set(validationReport, this, false, cb); \n};\n/**\n * @param {string} id\n * @return {pebble.libs.standard.interfaces.ModuleAccess}\n */\npebble.libs.standard.ClientControl.prototype.getModById = function(id) {\n\tfor (var key in this.modules) {\n\t\tvar win = this.modules[key];\n\t\tif (win != null) {\n\t\t\tif (win.item.getAttribute('.', 'id') == id) {\n\t\t\t\treturn win;\n\t\t\t}\n\t\t\tvar item = win.getClientControl();\n\t\t\tif (item != null && item.isListContainer) {\n\t\t\t\tvar match = item.getModById(id);\n\t\t\t\tif (match != null) {\n\t\t\t\t\treturn match;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n\n/**\n * @return {Object.<pebble.libs.standard.interfaces.ModuleAccess>}\n */\npebble.libs.standard.ClientControl.prototype.getModules = function() {\n\treturn this.modules;\n};\n/**\n * @param {Array.<pebble.libs.standard.ClientControl>} list\n * @param {string} sequence\n * @param {boolean} allTheWayDown\n * @param {boolean} includeContainers\n * @return {Array.<pebble.libs.standard.ClientControl>}\n */\npebble.libs.standard.ClientControl.prototype.getChildCtxs = function(list, sequence, allTheWayDown, includeContainers) {\n\tfor (var key in this.modules) {\n\t\tvar win = this.modules[key];\n\t\tif (win != null) {\n\t\t\tvar item = win.getClientControl();\n\t\t\tif (item != null) { // when items are loading (dynamic) they dont exist\n\t\t\t\tif (sequence == 'top2Bot') {\n\t\t\t\t\tif (item != null && (!(item.isListContainer) || includeContainers)) {\n\t\t\t\t\t\tlist.push(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (item.isListContainer || allTheWayDown) {\n\t\t\t\t\tlist = item.getChildCtxs(list, sequence, allTheWayDown, includeContainers);\n\t\t\t\t}\n\t\t\t\tif (sequence == 'bot2Top') {\n\t\t\t\t\tif (item != null && (!(item.isListContainer) || includeContainers)) {\n\t\t\t\t\t\tlist.push(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn list;\n};\n/**\n * @return {string}\n * @override\n */\npebble.libs.standard.ClientControl.prototype.getId = function() {\n\treturn this.moduleAccess.getId();\n};\n/**\n * get upper context \n * @param {string} type\n * @return {pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.ClientControl.prototype.getUpperModuleByType = function(type) {\n\tif (this.getRef('.') == type) {\n\t\treturn this;\n\t} else {\n\t\tif (this.pCM != null) {\n\t\t\treturn this.pCM.getUpperModuleByType(type);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n};\n/**\n * @return {pebble.libs.standard.ArrayControl}\n */\npebble.libs.standard.ClientControl.prototype.getUpperArrayControl = function() {\n\tif (this instanceof pebble.libs.standard.ArrayControl) {\n\t\treturn /** @type {pebble.libs.standard.ArrayControl} */ ( this );\n\t} else {\n\t\tif (this.pCM != null) {\n\t\t\treturn this.pCM.getUpperArrayControl();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n};\n/**\n * @return {pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.ClientControl.prototype.getCollectionDocControl = function() {\n\tif (this.get('crudObject') != null || (this.pCM instanceof pebble.libs.standard.ArrayControl && this.pCM.isCollection)){\n\t\treturn this;\n\t}\n\treturn this.pCM.getCollectionDocControl();\n};\n/**\n * @param {pebble.libs.standard.ClientControl} ctrl\n * @return {boolean}\n */\npebble.libs.standard.ClientControl.prototype.isAncestor = function(ctrl) {\n\tvar parent = this.moduleAccess.getParentControl();\n\tif (parent == null) {\n\t\treturn false;\n\t} else if (parent == ctrl) {\n\t\treturn true;\n\t} else {\n\t\treturn parent.isAncestor(ctrl);\n\t}\n};\n/**\n * @param {string} id\n * @return {pebble.libs.standard.interfaces.ControlAccess}\n */\npebble.libs.standard.ClientControl.prototype.getGlobalControlAccess = function(id) {\n\tvar item = this.moduleAccess.getGlobalModule(id).getClientControl();\n\treturn item;\n};\n/**\n * @param {string} id\n * @return {pebble.libs.standard.interfaces.DataChangable}\n */\npebble.libs.standard.ClientControl.prototype.getGlobalDataChangable = function(id) {\n\tvar mod = this.moduleAccess.getGlobalModule(id);\n\tif (mod != null) {\n\t\treturn mod.getClientControl();\n\n\t} else {\n\t\treturn null;\n\t}\n};\n/**\n * @return {string}\n * @override\n */\npebble.libs.standard.ClientControl.prototype.toString = function() {\n\tvar elements = this.getRef('.').split('.');\n\treturn elements[elements.length - 1];// this.getRef('.');\n};\n//Service Layer\n/**\n * @param {string} funcName\n * @param {pebble.Pebble} obj\n * @return {number}\n */\npebble.libs.standard.ClientControl.prototype.executeMethod = function(funcName, obj) {\n\tvar ret = 1;\n\t// list all ui public methods\n\tif (funcName == 'getData') {\n\t\tthis.getData(obj);\n\t} else if (funcName == 'setData') {\n\t\tthis.setData(obj);\n\t} else if (funcName == 'getBindPath') {\n\t\tthis.getBindPath(obj);\n\t} else if (funcName == 'getAsReference') {\n\t\tthis.getAsReference(obj);\n\t} else if (funcName == 'toggle') {\n\t\tthis.toggle(obj);\n\t} else if (funcName == 'loadControl') {\n\t\tthis.loadControl(obj);\n\t} else if (funcName == 'setClass') {\n\t\tthis.setClass(obj);\n\t} else if (funcName == 'setStyleProperty') {\n\t\tthis.setStyleProperty(obj);\n\t} else if (funcName == 'setControlDataToModel') {\n\n\t\tthis.setControlDataToModel(obj.getParams().getBool('setSilent'), obj.getCallback());\n\n\t} else if (funcName == 'save') {\n\t\tthis.saveManager.save(obj.getCallback());\n\t} else if (funcName == 'saveThru') {\n\t\tthis.saveManager.saveThru(obj.getCallback());\n\t} else if (funcName == 'validate') {\n\t\tthis.saveManager.validate(true, obj.getCallback());\n\t} else if (funcName == 'if') {\n\t\tthis.execIf(obj);\n\t} else if (funcName == 'execFunction') {\n\t\tthis.execFunction(obj);\n\t} else if (funcName == 'execFunctionMultipleControls') {\n\t\tthis.execFunctionMultipleControls(obj);\n\t} else if (funcName == 'loadExternal') {\n\t\tthis.loadExternal(obj);\n\t} else if (funcName == 'copyModel') {\n\t\tthis.copyModel(obj);\n\t} else if (funcName == 'kill') {\n\t\tthis._kill(obj);\n\t} else if (funcName == 'alert') {\n\t\tthis.showAlert(obj);\n\t} else if (funcName == 'reload') {\n\t\tthis.reload(obj);\n\t} else if (funcName == 'login'){\n\t\tthis.login(obj);\n\t} else if (funcName == 'logout') {\n\t\tthis.logout(obj);\n\t} else if (funcName == 'getSelectedItemFromTop') {\n\t\tthis.getSelectedItemFromTop(obj);\n\t} else if (funcName == 'getSelectedItemMetaFromTop') {\n\t\tthis.getSelectedItemMetaFromTop(obj);\n\t}\n\treturn ret;\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ClientControl.prototype.getSelectedItemFromTop = function (obj) {\n\tvar params = obj.getParams();\n\tvar path = params.getRef('path');\n\tvar relPath = params.getRef('relPath') || '.';\n\tvar ctrl = this._getArrayCtrlFromTop(path);\n\tif (ctrl != null) {\n\t\t\tvar meta = ctrl.getSingleSelectedMeta();\n\t\t\tvar item = ctrl.getOriginInfo(ctrl.getMainPath() + '.' + meta).get();\n\t\t\tobj.set('.', item.get(relPath));\n\t\t\tobj.callback();\n\t} else {\n\t\tobj.callback();\n\t}\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ClientControl.prototype.getSelectedItemMetaFromTop = function (obj) {\n\tvar params = obj.getParams();\n\tvar path = params.getRef('path');\n\tif (path != null) {\n\n\t\tvar useRelPath = params.getBool('useRelPath');\n\t\tvar meta = this._getSelectedItemMetaFromTop(path, useRelPath);\n\t\tif (meta != null) {\n\n\t\t\tobj.setRef('.', meta);\n\n\t\t} else {\n\t\t\tthrow new Error('ClientControl:getSelectedItemMetaFromTop() no meta selected');\n\t\t}\n\n\t} else {\n\t\t\tthrow new Error('ClientControl:getSelectedItemMetaFromTop() no path specified');\n\t}\n\tobj.callback();\n};\n\n/**\n * @param {string} path\n * @param {boolean} useRelPath\n */\npebble.libs.standard.ClientControl.prototype._getSelectedItemMetaFromTop = function (path, useRelPath) {\n\tvar ctrl = this._getArrayCtrlFromTop(path);\n\tif (ctrl != null) {\n\t\tif (useRelPath) {\n\t\t\tvar meta = ctrl.getSingleSelectedMeta();\n\t\t\treturn meta;\n\t\t} else {\n\n\t\t\tvar topApp = pebble.libs.standard.Module.topMod.item;\n\t\t\tvar originInfo = topApp.getOriginInfo(path);\n\t\t\tvar basePath = originInfo.getBasePath();\n\t\t\tvar meta = ctrl.getSingleSelectedMeta();\n\t\t\treturn basePath + '.' + meta;\n\t\t}\n\t}\n\treturn null;\n};\n\npebble.libs.standard.ClientControl.prototype._getArrayCtrlFromTop = function (path) {\n\tvar topApp = pebble.libs.standard.Module.topMod.item;\n\tvar originInfo = topApp.getOriginInfo(path);\n\tfor (var key in originInfo.bindedControls) {\n\t\tvar ctrl = this.getGlobalControlAccess(key);\n\t\tif (ctrl instanceof pebble.libs.standard.ArrayTreeBase ) {\n\t\t\treturn ctrl;\n\t\t}\n\t}\n\treturn null;\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ClientControl.prototype.getData = function(obj) {\n\tvar params = obj.getParams();\n\tvar path = params.getRef('path');\n\tif (path != null) { \n\t\tvar aaa = this.getOriginInfo(path).get();\n\t\tobj.set('.', aaa); // recs only\n\t} else {\n\t\tthrow new Error('ClientControl: getData() requires path');\n\t}\n\n\tobj.callback();\n};\n\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ClientControl.prototype.setData = function(obj) {\n\tvar params = obj.getParams();\n\tvar path = params.getRef('path');\n\tif (path != null) {\n\t\tthis.getOriginInfo(path).set(params.get('data'), this);\n\t}\n\tobj.callback();\n};\n/**\n * update basePath.relPath for data in model\n * @param {string} relPath\n * @param {boolean} setSilent\n * @param {Function} cb \n */\npebble.libs.standard.ClientControl.prototype.updateCrudItem = function(relPath, setSilent, cb) {\n\tvar that = this;\n\n  //when collection item, the new indexItem is passed back from the submit\n  var obj = new pebble.Pebble();\n  \n  var originInfo = this.getOriginInfo('model');\n  var collectionPath = originInfo.getBasePath();\n  var params = this.getOriginInfo('crudObject.update').get();\n  if (params) {\n    params.setRef('collection', collectionPath);\n    params.setRef('relPath', relPath);\n    var item = originInfo.get();\n    var data;\n    if (relPath) {\n      data = item.get(relPath);\n    } else {\n      data = item;\n    }\n    params.set('data', data);\n    params.setAttribute('data', 'noresolve', 'once');\n    obj.setFull('_generate', params);\n    obj.setCallback(function(data) {\n      that._updateCrudItem(data, setSilent, cb);\n    });\n    this.resolve(obj);\n  } else {\n    //update ui\n    this._updateCrudItem(data, setSilent, cb);\n  }\n};\n/**\n * @param {pebble.Pebble} data \n * @param {boolean} setSilent\n * @param {Function} cb \n */\npebble.libs.standard.ClientControl.prototype._updateCrudItem = function(data, setSilent, cb) {\n\tvar originInfo = this.getOriginInfo('model');\n  originInfo.set(data, this, setSilent, cb);\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ClientControl.prototype.getBindPath = function(obj) {\n\tvar params = obj.getParams();\n\tvar path = params.getRef('path') || 'model';\n\tvar originInfo = this.getOriginInfo(path);\n\tvar basePath = originInfo.getBasePath();\n\tobj.setRef('.', basePath);\n\tobj.callback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ClientControl.prototype.getAsReference = function(obj) {\n\tvar params = obj.getParams();\n\tvar path = params.getRef('path') || 'model';\n\tvar useRelPath = params.getBool('useRelPath');\n\tvar originInfo = this.getOriginInfo(path);\n\tvar basePath = originInfo.getBasePath();\n\tif (useRelPath) {\n\t\tvar meta = basePath.split('.').pop();\n\t\tobj.setRef('.', meta);\n\n\t} else {\n\n\t\tobj.setRef('.', basePath);\n\t}\n\tobj.callback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ClientControl.prototype.toggle = function(obj) {\n\tvar params = obj.getParams();\n\tvar path = params.getRef('path');\n\tif (path != null) {\n\t\tvar originInfo = this.getOriginInfo(path);\n\t\tvar current = originInfo.getBool();\n\t\tvar data = new pebble.Pebble();\n\t\tdata.setValue('.', (!current).toString());\n\t\toriginInfo.set(data, null, false, obj.getCallback());\n\t} else {\n\t\tobj.callback();\n\t}\n};\n\n/**\n * @param {pebble.Pebble} obj\n * @private\n */\npebble.libs.standard.ClientControl.prototype.loadControl = function(obj) {\n\tvar control = obj.getParams().get('control');\n\n\tif (control.getRef('.') != null) {\n\t\tthis.moduleAccess.getItem(control, function() {\n\t\t\tobj.callback();\n\t\t});\n\t} else {\n\t\tobj.callback();\n\t}\n};\n/**\n * @param {pebble.Pebble} obj\n * @private\n */\npebble.libs.standard.ClientControl.prototype.setClass = function(obj) {\n\tvar params = obj.getParams();\n\tvar classes = params.getValue('class');\n\tif (classes != null) {\n\t\tthis.element.className = classes;\n\t}\n\n\tobj.callback();\n};\n/**\n * @param {pebble.Pebble} obj\n * @private\n */\npebble.libs.standard.ClientControl.prototype.setStyleProperty = function(obj) {\n\tvar params = obj.getParams();\n\tvar prop = params.getValue('property');\n\tvar val = params.getValue('value');\n\tif (prop != null && val != null) {\n\t\tthis.element.style[prop]= val;\n\t}\n\n\tobj.callback();\n};\n/**\n * This takes care of old task flow\n * Usually the copy toControl will be in a hidden panel, stack panel\n * returning value would require (save, copyModel) back\n * canceling is just clear, hide\n * @param {pebble.Pebble} obj\n * @private\n */\npebble.libs.standard.ClientControl.prototype.copyModel = function(obj) {\n\tvar params = obj.getParams();\n\tvar toControl = params.getRef('toControl');\n\t//var path = params.getRef('path');\n\tvar data = this.getOriginInfo('model').getCreateOnNull();\n\n\t//copy data\n\tif (toControl != null) {// && path != null) {\n\t\tvar toControlMod = this.getObjectReference(toControl);\n\t\tvar toControlItem = toControlMod.item;\n\t\ttoControlItem.set('model', data);\n\t\t\n\t\tvar toControlOrigin = toControlItem.getOriginInfo('model');\n\t\tvar that = this;\n\t\ttoControlOrigin.set(data, null, false, function(){\n\t\t\t\t\n\t\t\t//reloadControl\n\n\t\t\t//that.moduleAccess.getItem(dc, function(data) {\n\n\t\t\t\tobj.callback();\n\n\t\t\t//});\n\n\t\t});\n\t\t\n\t} else {\n\t\tthrow new Error('ClientControl: copyModel() requires path');\n\t}\n};\n\n/**\n * @param {pebble.Pebble} obj\n * @private\n */\npebble.libs.standard.ClientControl.prototype.execFunction = function(obj) {\n\tvar params = obj.getParams();\n\tvar path = params.getRef('path');\n\tif (path != null) {\n\t\tthis.exec(path, this.getOriginInfo('model').get(), obj.getCallback());\n\t} else {\n\t\tthrow new Error('ClientControl: execFunction() requires path');\n\t}\n};\n/**\n * @param {pebble.Pebble} obj\n * @private\n */\npebble.libs.standard.ClientControl.prototype.execFunctionMultipleControls = function(obj) {\n\t//var params = obj.getParams();\n\t//var control = params.getRef('control');\n\t//var func = params.getRef('func');\n\t//var paramsData = params.getRef('paramsData');\n\t//var ctxs = this.getChildCtxs([], 'bot2Top', true, true);\n\t\t\t//that.execOnLoadCount = ctxs.length;\n\t\t\t//if (that.execOnLoadCount > 0) {\n\t\t\t\t//for (var i = 0; i < ctxs.length; i++) {\n\t\t\t\t\t//var ctx = ctxs[i];\n\t\t\t\t\t//ctx.exec('afterload', null, function(data) {\n\n\t\t\t\t\t\t//that.doFinalUserSettableTop();\n\n\t\t\t\t\t//});\n\t\t\t\t//}\n\t\t\t//} else {\n\t\t\t\t//that.execOnLoadCount = 1;\n\t\t\t\t////that.doFinalUserSettableTop();\n\t\t\t//}\n\n\t//if (path != null) {\n\t\t//this.exec(path, this.getOriginInfo('model').get(), obj.getCallback());\n\t//} else {\n\t\t//throw new Error('ClientControl: execFunction() requires path');\n\t//}\n};\n/**\n * @param {pebble.Pebble} obj\n * @private\n */\npebble.libs.standard.ClientControl.prototype.execIf = function(obj) {\n\t// return func\n\tvar params = obj.getParams();\n\tif (params.getBool('condition')) {\n\t\tvar funcObj = params.voidFunc2ReturnFunc('ontrue');\n\t\tfuncObj.setCallback(function(data) {\n\n\t\t\tobj.set('.', funcObj);\n\t\t\tobj.callback();\n\n\t\t});\n\t\tthis.resolve(funcObj);\n\t} else {\n\t\tvar elseFunc = params.get('onfalse');\n\t\tif (elseFunc != null) {\n\t\t\tvar elseFuncObj = elseFunc.voidFunc2ReturnFunc('.');\n\t\t\telseFuncObj.setCallback(function(data) {\n\n\t\t\t\tobj.set('.', elseFuncObj);\n\t\t\t\tobj.callback();\n\n\t\t\t});\n\t\t\tthis.resolve(elseFuncObj);\n\t\t}\n\t}\n};\n\n/**\n * for each item in array exec func(item) when condFunc(item) is true could\n * do a walk function too ..\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ClientControl.prototype.execForEachItem = function(obj) {\n\tvar params = obj.getParams();\n\tvar items = params.getRecords('array');\n\tvar condFunc = params.get('condFunc');\n\tvar hasCond = false;\n\tif (condFunc != null) {\n\t\thasCond = true;\n\t}\n//\tfor (var i = 0; i < items.length; i++) {\n//\tvar item = items[i];\n//\tif (hasCond) {\n//\tcondFunc.set('item', item);\n//\t}\n//\tvar pass = true;\n//\tif (hasCond) {\n//\tcondFunc.resolve(this);\n//\tpass = condFunc.getBool('.');\n//\t}\n//\tif (pass) {\n//\tvar funcObj = params.voidFunc2ReturnFunc('func');\n//\tvar funcObjParams = funcObj.getParams();\n//\tfuncObjParams.set('item', item);\n//\tfuncObj.resolve(this);\n//\t}\n//\t}\n};\n\n//------not tested\n\n\n/**\n * global logout\n * @param {pebble.Pebble} obj1\n * @private\n */\npebble.libs.standard.ClientControl.prototype.logout = function(obj1) {\n\tvar obj = new pebble.Pebble();\n\tvar params = obj.getParams();\n\tparams.setRef('.', 'SERVER.logoutServer'); //server environments override this\n\tparams.setValue('returnToUrl', window.location.href);\n\tparams.setRef('clientInstance', this.getRef('.'));\n\tvar that = this;\n\tobj.setCallback(function(data) {\n\t\tvar redirectUrl = data.getValue('redirectUrl');\n\n\t\tthat.changeLocation(redirectUrl, false);\n\t\tobj1.callback();\n\n\t});\n\tthis.resolve(obj);\n};\n/**\n * global login\n * @param {pebble.Pebble} obj1\n * @private\n */\npebble.libs.standard.ClientControl.prototype.login = function(obj1) {\n\tvar obj = new pebble.Pebble();\n\tvar params = obj.getParams();\n\tparams.setRef('.', 'SERVER.loginServer'); //server environments override this\n\tparams.setValue('returnToUrl', window.location.href);\n\tparams.setRef('clientInstance', this.getRef('.'));\n\tvar that = this;\n\tobj.setCallback(function (data) {\n\t\tvar redirectUrl = data.getValue('redirectUrl');\n\t\tif (redirectUrl != null) {\n\t\t\tthat.changeLocation(redirectUrl, false);\n\t\t}\n\t\tobj1.callback();\n\t});\n\tthis.resolve(obj);\n\n};\n/**\n * @param {pebble.Pebble} obj\n * @private\n */\npebble.libs.standard.ClientControl.prototype.loadExternal = function(obj) {\n\tvar params = obj.getParams();\n\tvar confirmMessage = params.getValue('confirmMessage');\n\tvar newWindow = params.getBool('newWindow');\n\tvar url = params.getValue('url');\n\tif (url) {\n\t\tthis.changeLocation(url, newWindow);\n\t}\n\tobj.callback();\n};\n/**\n * @param {string} url\n * @param {boolean} newWindow\n */\npebble.libs.standard.ClientControl.prototype.changeLocation = function(url, newWindow) {\n\tif (newWindow) {\n\t\twindow.open(url, '_blank');\n\t} else {\n\t\twindow.location.assign(url);\n\t}\n};\n/**\n * @param {pebble.Pebble} obj\n * @private\n */\npebble.libs.standard.ClientControl.prototype.submit = function(obj) {\n\tvar that = this;\n\tthis.saveManager.save(function() {\n\n\t\tthat._submit(that.getOriginInfo('model').get(),\tfunction() {\n\t\t\tobj.callback();\n\t\t});\n\n\t});\n};\n\n/**\n * @param {pebble.Pebble} obj\n * @private\n */\npebble.libs.standard.ClientControl.prototype._kill = function(obj) {\n\tthis.moduleAccess.kill();\n\tobj.callback();\n};\n/**\n * item is the put in rg and resolved results will show errors, next page\n * \n * @param {pebble.Pebble} item\n * @param {Function} cb\n */\npebble.libs.standard.ClientControl.prototype._submit = function(item, cb) {\n\tvar obj = new pebble.Pebble();\n\tvar params = obj.getParams();\n\tparams.set('.', item);\n\n\tobj.setCallback(function(data) {\n/*\n\t\tvar error = data.getValue('error');\n\t\tif (error != null) {\n\t\t\t// get status panel\n\t\t\t// showError(error);\n\t\t}\n\t\tvar confirmation = data.getValue('confirmation');\n\t\tif (confirmation != null) {\n\t\t\t// showConfirmation(confirmation);\n\t\t}\n\t\tif (data.get('appIndexItem') != null) {\n\t\t\t// if trigger sets a new renderAddress we just go there\n\t\t\tvar appIndexItem = data.get('appIndexItem');\n\t\t}\n\t\t*/\n\t\tcb(data);\n\n\t});\n\tthis.resolve(obj);\n};\n/**\n * @param {pebble.Pebble} obj\n * @private\n */\npebble.libs.standard.ClientControl.prototype.showAlert = function(obj) {\n\tvar params = obj.getParams();\n\twindow.alert(params.getValue('message'));\n\tobj.callback();\n};\n/**\n * @param {pebble.Pebble} obj\n * @private\n */\npebble.libs.standard.ClientControl.prototype.reload = function(obj) {\n\tvar params = obj.getParams();\n\twindow.location.reload();\n\tobj.callback();\n};\n\n\n\n//})();\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/ClientControl.js"},{"key":"ext","val":"js"}]},{"key":"ColorInput","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends{pebble.libs.standard.TextInputBase}\n */\npebble.libs.standard.ColorInput = function(moduleAccess, dm, isLoadTop){\n\tpebble.libs.standard.TextInputBase.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.ColorInput, pebble.libs.standard.TextInputBase);\n\npebble.libs.standard.ColorInput.prototype.onReady = function () {\n\tpebble.libs.standard.ColorInput.superClass_.onReady.call(this)\n\tthis.setLoaded();\n};\n\n/**\n * @param {boolean} setSilent\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.ColorInput.prototype.setControlDataToModel = function(setSilent, cb) {\n\tvar data = new pebble.Pebble();\n\tdata.setValue('.', this.element.value);\n\tthis.getOriginInfo('model').set(data, this, setSilent, cb);\n};\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/ColorInput.js"},{"key":"ext","val":"js"}]},{"key":"DateInput","val":[{"key":"devCode","val":"\n/**\n * @constructor\n * @extends{pebble.libs.standard.TextInputBase}\n */\npebble.libs.standard.DateInput = function(moduleAccess, dm, isLoadTop){\n\tpebble.libs.standard.TextInputBase.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.DateInput, pebble.libs.standard.TextInputBase);\n\npebble.libs.standard.DateInput.prototype.onReady = function () {\n\tpebble.libs.standard.DateInput.superClass_.onReady.call(this)\n\tthis.element.type = 'date';\n\tthis.setLoaded();\n};\n/**\n * @param {boolean} setSilent\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.DateInput.prototype.setControlDataToModel = function(setSilent, cb) {\n\tvar data = new pebble.Pebble();\n\tdata.setValue('.', this.element.value);\n\tthis.getOriginInfo('model').set(data, this, setSilent, cb);\n};\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/DateInput.js"},{"key":"ext","val":"js"}]},{"key":"DateShow","val":[{"key":"devCode","val":"\n/**\n * Roll on patterns or use com.google.gwt.i18n.shared.DateTimeFormat (very nice, robust) in a DateBase class ...\n * Still left below the usage, but need calls to proxy .. easy to do\n * @constructor\n * @extends {pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.DateShow = function(moduleAccess, dm, isLoadTop){\n\tpebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.DateShow, pebble.libs.standard.ClientControl);\n\npebble.libs.standard.DateShow.prototype.onReady = function () {\n\tthis.tn = document.createTextNode('');\n\tthis.element.appendChild(this.tn);\n\n\tvar dateStr = this.getOriginInfo('model').getValue();\n\tif (dateStr != null) {\n\t\tthis.setDate(dateStr);\n\t} \n\n\tthis.setLoaded();\n};\n\npebble.libs.standard.DateShow.prototype.setDate = function(dateStr) {\n\n//\tvar date;\n//\tif (dateStr == null) {\n//\tdate = new Date();\n//\t} else {\n//\tdate = new Date(dateStr);\n//\t}\n\n////\tDateTimeFormat activeFormat = DateTimeFormat.getFormat(PredefinedFormat.DATE_TIME_FULL);\n\n//\tvar formatPeb = this.getData('format');\n//\tif (formatPeb != null) {\n//\tvar format = formatPeb.getValue('.');\n//\tif (format == 'fullDateTime'){\n////\tactiveFormat = DateTimeFormat.getFormat(PredefinedFormat.DATE_TIME_FULL);\n//\t} else if (format.equals('longDateTime')){\n////\tactiveFormat = DateTimeFormat.getFormat(PredefinedFormat.DATE_TIME_LONG);\n//\t} else if (format.equals('custom')) {\n//\tvar patternPeb = this.getData('pattern');\n//\tvar pattern = patternPeb.getValue('.');\n////\tactiveFormat = DateTimeFormat.getFormat(pattern);\n//\t}\n////\ttext = activeFormat.format(date);\n//\t}\n\n\tthis.tn.nodeValue = dateStr; //this.formatDate();\n}\n/**\n* @override\n */\npebble.libs.standard.DateShow.prototype.onDataModelChanged = function(source, path, relPath, cb) {\n\tif (this != source && path == 'model') {\n\t\tvar text = '';\n\t\tvar peb = this.getOriginInfo('model').get();\n\t\tif (peb != null) {\n\t\t\ttext = peb.getValue('.');\n\t\t}\n\t\tthis.setDate(text);\n\t} \n\tcb();\n\treturn false;\n}\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/DateShow.js"},{"key":"ext","val":"js"}]},{"key":"Download","val":[{"key":"devCode","val":"/**\n * Give user ability to download data in your app (contact, workspace, etc)\n * Unit is a document on the server\n */\n/**\n * @constructor\n * @extends{pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.Download = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.Download, pebble.libs.standard.ClientControl);\n\n/**\n * @override\n */\npebble.libs.standard.Download.prototype.onReady = function () {\n\n\t//this also works??? as pop up but might need to be own mime\n//\tvar str = 'name,age\\r\\nryan,43\\r\\nmiyuki,40';\n//\twindow.open( 'data:text/pebble;charset=utf-8,' + escape(str));\n\n\tvar that = this;\n\n\tvar text = this.getOriginInfo('text').getValue() || 'download';\n\tvar tn = document.createTextNode(text);\n\tthis.element.appendChild(tn); \n\t\n\tthis.element.href = '#';\n\tvar filename = this.getOriginInfo('fileName').getValue() || text;\n\tthis.element.setAttribute('download', filename);\n\tvar title = this.getOriginInfo('title').get();\n\tif (title != null) {\n\t\tthis.element.title = title.getValue('.') || '';\n\t}\n\t\n\tthis.element.addEventListener('click', function() {\n\n\t\tvar useBindPath = that.getOriginInfo('useBindPath').getBool();\n\n\t\tif (useBindPath) {\n\t\t\tvar originInfo = that.getOriginInfo('model');\n\t\t\tvar basePath = originInfo.getBasePath();\n\n\t\t\talert('download: useBindPath!');\n\t\t\tvar obj1 = new pebble.Pebble();\n\t\t\tvar params = obj1.getParams();\n\t\t\tparams.setRef('.', 'CW.getDs');\n\n\t\t\tparams.setRef('path', basePath);\n\t\t\tparams.setRef('clientInstance', that.getRef('.'));\n\n\t\t\tobj1.setCallback(function (item) {\n\n\t\t\t\tvar docName = basePath.split('.').pop();\n\t\t\t\tvar namedItem = new pebble.Pebble(docName);\n\t\t\t\tnamedItem.set('.', item);\n\t\t\n\t\t\t\tthat._setFileData(namedItem, function() {\n\n\t\t\t\t\tthat.exec('onClick', null, function(data) {\n\t\t\t\t\t\t//user needs to call setFileData\n\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t});\n\t\t\tthat.resolve(obj1);    \t\n\t\t} else {\n\n\t\t\tthat.exec('onClick', null, function(data) {\n\t\t\t\t//user needs to call setFileData\n\n\t\t\t});\n\t\t}\n\n\n\t}, false);\n\n\tthis.setLoaded();\n};\n\n/**\n * ArrayControl knows that it has child elements with controls\n * @param {string} funcName\n * @param {pebble.Pebble} obj\n * @return {number}\n * @override\n */\npebble.libs.standard.Download.prototype.executeMethod = function(funcName, obj) {\n\tvar ret = 1;\n\t//list all ui public methods\n\tif (funcName == 'setFileData') {\n\t\tthis.setFileData(obj);\n\t} else {\n\t\treturn pebble.libs.standard.Download.superClass_.executeMethod.call(this, funcName, obj);\n\t}\n\treturn ret;\n};\n/**\n * users sets fileData or specifies useBindPath\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.Download.prototype.setFileData = function(obj) {\n\tvar params = obj.getParams();\n\t\t\t\t\t\t\n\tvar fileData = params.get('fileData');\n\tthis._setFileData(fileData, obj.getCallback());\n};\n/**\n * @param {pebble.Pebble} item\n * @param {Function} cb\n */\npebble.libs.standard.Download.prototype._setFileData = function(item, cb) {\n\tvar dataStr = item.toString();\t\n\t\t\t\t\t\t\n\tvar blob = new Blob([vkbeautify.xmlmin(dataStr)]);\n\n\tthis.element.href = window.URL.createObjectURL(blob);\n\t\n\tcb();\n};\n\npebble.libs.standard.Download.prototype.destroy = function() {\n\t//window.URL.revokeObjectURL(blobURL);\n};\n\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/Download.js"},{"key":"ext","val":"js"}]},{"key":"DropFiles","val":[{"key":"devCode","val":"\n/**\n * @constructor\n * @extends{pebble.libs.standard.ClientControl}\n */\npebble.libs.pebbleDev.DropFiles = function(moduleAccess, dm, isLoadTop) {\n  pebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n   \n};\n\npebble.inherits(pebble.libs.pebbleDev.DropFiles, pebble.libs.standard.ClientControl);\n\n/**\n * @override\n */\npebble.libs.pebbleDev.DropFiles.prototype.onReady = function () {\n\n  var pxml = this.getOriginInfo('model').getCreateOnNull();\n \n\tthis.setLoaded();\n};\n  \t\n  \t\n /**\n  * @constructor\n  */\n var BuildRemira = function() {\n    this.counter = 0;\n  }\n \t\n BuildRemira.prototype.build = function(ds, dir, directoryPath) {\n\tvar that = this;\n\tdirectoryPath = directoryPath || '';\n\tvar dirReader = dir.createReader();\n\tdirReader.readEntries(function(entries) {\n\t\t//first pass\n\t\tfor (var i = 0; i < entries.length; i++) {\n\t\t\tvar entry = entries[i];\n\t\t\tif (entry.isFile) {\n\t\t\t\t// Get file\n\t \t \t    entry.file(function(file) {\n\t \t\t \t    that.counter += 1;\n\t \t \t      \tvar reader = new FileReader();\n\t\t \t \t    reader.onload = (function(path, fileName, c){\n\t\t \t\t\t\treturn function(theFile) {\n\t\t \t\t\t\t\n\t\t \t\t\t\t\tvar o = new pebble.Pebble(this.result);\t\n\t\t \t\t\t\t\t\t\n\t\t \t\t\t\t\tfileName = fileName.replace('.Config', '');\n\t\t \t\t\t\t\t\n\t\t \t\t\t\t\tif (fileName == 'theInstance') {\n\t\t \t\t\t\t\t\tpath = 'theApp.theControlApp.appInstances';\n\t\t \t\t\t\t\t} else {\n\t\t \t\t\t\t\t\tpath = path.replace('/theInstance/', '');\n\t\t \t\t\t\t\t}\n\t\t \t\t\t\t\t\n\t\t \t\t\t\t\tds.create(path, o, null, null);\n\t\t \t \t    \t\tconsole.log('INFO', c + ' files processed');\n\t\t \t \t    \t\tthat.counter -= 1;\n\t\t \t \t    \t\tif (that.counter == 0) {\n\t\t \t \t    \t\t\tvar dsStr = ds.toString();\n\t\t \t \t    \t\t\tconsole.log('INFO', dsStr);\n\t\t \t \t    \t\t\tconsole.log('SUCCSSS', 'done');\n\t\t \t \t    \t\t\t\n\t\t \t \t    \t\t\tvar blob = new Blob([dsStr]);\n\t\t\t \t \t    \t\tvar download = document.getElementById('getWorkspace');\n\t\t\t \t \t    \t\tdownload.href =  window.URL.createObjectURL(blob);\n\t\t\t \t \t    \t\tdownload.setAttribute('download', 'workspace.xml');\n\t\t\t \t \t    \t\tdownload.innerHTML = 'workspace.xml';\n\t\t\t \t \t    \t\tdownload.title = 'download workspace file';\n\t\t\t \t \t    \t\t\n\t\t \t \t    \t\t}\n\t\t \t \t    \t };\n\t \t\t\t\t})(directoryPath, file.name, that.counter);\n\t \t\t\t\t\n\t \t\t \t// \n\t \t\t\t\treader.readAsText(file, 'UTF-8');\n\t \t\t \t});\n\t \t\t} \n\t \t}\n\t\t\n\t \tfor (var i = 0; i < entries.length; i++) {\n\t \t\tvar entry = entries[i];\n\t \t\tif (entry.isDirectory){\n\t \t\t\t that.build(ds, entry, entry.fullPath);\n\t \t\t\t\n\t \t\t}\n\t \t}\n\t});\n \n \n};\n \n\n\n \n var ds;\n \n function load() {\n\t\t//drop folder\n\t\tvar drop = document.getElementById('log'); \n\t\t\n\t\tdrop.addEventListener('dragenter', function() {\n\t\t\tvar i =1;\n\t\t}, false)\n\t\t  drop.addEventListener('dragover', function(e) {\n\t\t\t  e.stopPropagation();\n\t\t\t\te.preventDefault();\n\t\t  }, false);\n\t\tdrop.addEventListener('drop', function(e) {\n\t\t\te.stopPropagation();\n\t\t\te.preventDefault();\n\t\t\tvar items = event.dataTransfer.items;\n\t\t\t  for (var i=0; i<items.length; i++) {\n\t\t\t    // webkitGetAsEntry is where the magic happens\n\t\t\t    var item = items[i].webkitGetAsEntry();\n\t\t\t    if (item) {\n\t\t\t    \tds = new pebble.shared.ServerDataImpl_Xml();\n\t\t\t    \t\n\t\t\t      \tvar buildRemira = new BuildRemira();\n\t\t\t      \tbuildRemira.build(ds, item);\n\t\t\t    }\n\t\t\t  }\n\t\t\t\n\t\t\t  \n\t\t\t// possible to Copy the DirectoryEntry over to our local filesystem, build a IServerData around that...\n\t\t\t/*\n\t\t\tif (entry.isDirectory) {\n\t\t\t   entry.copyTo(fs.root, null, function(copiedEntry) {\n\t\t\t        // ...\n\t\t\t    }, onError);\n\t\t\t}\n\t\t\t*/\n\t\t\t\n\t\t}, false);\n\t\t\n\t\t\n\t\n\t//factory set user (receive query params userId, dev...)\n\tpebble.Pebble.setDataSourceFactory(new PebbleDataSourceImpl_BrowserDom());\n\t\n\tdocument.getElementById('clearWorkspace').addEventListener('click', function() {\n\t\t\n\t\tlocalStorage.clear()\n\t \n\t}, false);\n\t\n\tdocument.getElementById('setWorkspace').addEventListener('click', function() {\n\t\t \n\t\t\n\t\t//vkbeautify\n\t\t localStorage.setItem('workspace', ds.toString());\n\t\t \n\t\t var indexData = new pebble.shared.ServerDataImpl_Xml();\n\t\t BuildRemira.buildIndexServer(ds, indexData);\n\t\t localStorage.setItem('indexServer', indexData.toString());\n\t\t \n\t\t//window.location.reload();\n\t \n\t}, false);\n\t\n }\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/DropFiles.js"},{"key":"ext","val":"js"}]},{"key":"DropzoneCSV","val":[{"key":"devCode","val":"/**\n * Binds to array\n * Maps from/to (if null keep the same)\n */\n/**\n * @constructor\n * @extends{pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.DropzoneClientDatasource = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.DropzoneClientDatasource, pebble.libs.standard.ClientControl);\n\n/**\n * @override\n */\npebble.libs.standard.DropzoneClientDatasource.prototype.onReady = function () {\n\tvar that = this;\n\tvar input = document.createElement('div');\n\tinput.setAttribute('style', 'height:30px;background-color: pink;');\n\tinput.addEventListener('dragover', function(evt) {\n\t\tevt.stopPropagation();\n\t\tevt.preventDefault();\n\t\tevt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.\n\t}, false);\n\n\tinput.addEventListener('drop', function (evt) {\n\t\tevt.stopPropagation();\n\t\tevt.preventDefault();\n\t\tvar files = evt.dataTransfer.files; // FileList object.\n\t\tvar f = files[0];\n\t\tthat.parseCsv(f);\n\t}, false);\n\n\tthis.element.appendChild(input);\n\n\tthis.setLoaded();\n}; \n\npebble.libs.standard.DropzoneClientDatasource.prototype.parseCsv = function(f) {\n\tvar peb = new pebble.Pebble();\n\n\tvar reader = new FileReader();\n\n\treader.onload = function(theFile) {\n\t\tvar csv = this.result;\n\n\t\t//Seperate file by line breaks\n\t\tvar allTextLines = csv.split(/\\r\\n|\\n/);\n\n\t\t//Set Key equal to the first row\n\t\tvar headers = allTextLines[0].split(',');\n\n\t\t//loop through each line\n\t\tfor (var i = 1; i < allTextLines.length; i++) {\n\t\t\t//Seperate line by comma\n\t\t\tvar data = allTextLines[i].split(',');\n\n\t\t\t//Create associated array for each line\n\t\t\tif (data.length == headers.length) {\n\n\t\t\t\t//Loop through values\n\t\t\t\tfor (var j=0; j < data.length; j++) {\n\t\t\t\t\t//Set header to Key\n\t\t\t\t\tvar key = headers[j];\n\n\t\t\t\t\t//Set data to value\n\t\t\t\t\tvar value = data[j];\n\n\t\t\t\t\tpeb.setValue('a' + i + '.' + key, value);\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\t//set peb to model or import\n\t\tpebble.shared.logger.log('INFO', peb.toString());\n\t};\n\n\t// Read in the image file as a data URL.\n\treader.readAsText(f, 'UTF-8');\n\n\t//set peb to model or import\n\tpebble.shared.logger.log('INFO', peb.toString());\n};\n//create csv\n//application/octet-stream\n//need to encode?\npebble.libs.standard.DropzoneClientDatasource.prototype.createCsv = function() {\n\tvar s = ''; //header\n\tvar array = this.getOriginInfo('model').get();\n\tif (array != null) {\n\t\tvar recs = array.getRecords('.');\n\t\tfor (var i = 0; i < recs.length; i++) {\n\n\t\t\t//for fields  \n\n\t\t\ts += '\\r\\n';\n\t\t}\n\t}\n\n\t//window.open( 'data:text/csv;charset=utf-8,' + escape(str))\n};\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/DropzoneCSV.js"},{"key":"ext","val":"js"}]},{"key":"DynControl","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends {pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.DynControl = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n\n\t/**\n\t * @type {?string}\n\t */\n\tthis.itemInQuestion = '';\n\tvar originInfo = this.getOriginInfo('model');\n\tthis.type = originInfo.getThisType();\n\n};\n\npebble.inherits(pebble.libs.standard.DynControl, pebble.libs.standard.ClientControl);\n\n/**\n * @override\n */\npebble.libs.standard.DynControl.prototype.onReady = function () {\n\n\tthis.displayControlFilters = this.getOriginInfo('displayControlFilters').get();\n\tthis.setLoaded();\n\n\t//do after setLoaded\n\tthis.renderLayout();\n};\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {string} path\n * @param {string} relPath\n * @param {Function} cb\n * @return {boolean}\n * @override\n */\npebble.libs.standard.DynControl.prototype.onDataModelChanged = function(source, path, relPath, cb) {\n\t//one case source comes in as null it on rebind/selectedItemChanges of arrayDisplaySingleControl's item\n\tif (source != null) {\n\t\tif (this != source && source.getId().indexOf(this.moduleAccess.getId()) != 0) { //source cannot be inside this (same as this triggering the data change)\n\t\t\tthis.renderLayout();\n\t\t}\n\t\tcb();\n\t\treturn true; //don't want any inner controls onDataModelChanged to be triggered\n\t} else {\n\t\tcb();\n\t\treturn false;\n\t}\n};\n/**\n * @private\n */\npebble.libs.standard.DynControl.prototype.renderLayout = function() {\n\n\tthis.clearChildren();\n\tvar that = this;\n\tthis.setItemInQuestion(function(fields) {\n\n\t\tif (that.itemInQuestion != null) {\n\t\t\t//essentially roll\n\t\t\tvar pxml = null;\n\t\t\t//bypass to inner model\n\t\t\tvar model = that.getOriginInfo('model').get();\n\t\t\tif (model != null) {\n\t\t\t\tpxml = that._getAutoLayout(that.itemInQuestion, fields, 'model', model, true); \n\t\t\t\twindow.console.log('INFO', 'DYN-LAY: ' + pxml.toString());\n\t\t\t}\n\t\t\tif (pxml != null) { \n\t\t\t\t//essentially instWins wo/getLayout\n\t\t\t\tthat.isLoadTop = true;\n\t\t\t\tthat.set('innerMarkup', pxml);\n\t\t\t\tthat.instWins();\n\t\t\t}\n\t\t}\n\t});\n};\n/**\n * set itemInQuestion and pulls require SimpleCache\n * @param {Function} cb\n */\npebble.libs.standard.DynControl.prototype.setItemInQuestion = function(cb) {\n\tvar originInfo = this.getOriginInfo('model');\n\tvar model = originInfo.getCreateOnNull();\n\tvar embType = originInfo.getThisType();\n\tthis.itemInQuestion = null;\n\tvar fieldsPath;\n\tif (embType != null && embType.getRef('.') == pebble.shared.TypeReferences.REFERENCE) {\n\n\t\tfieldsPath = embType.getRef('configFieldsPath') || 'fields';\n\t\tvar itemPath = embType.getRef('itemPath');\n\t\tvar reference = model.getRef('.');\n\t\tif (itemPath && reference) {\n\t\t\tthis.itemInQuestion = itemPath + '.' + reference;\n\t\t} else {\n\t\t\t//full ref specified\n\t\t\tthis.itemInQuestion = reference;\n\t\t}\n\n\t} else {\n\t\t\n\t\tfieldsPath = 'fields';\n\t\tif (embType != null) { \n\t\t\t//when type is not reference (quick way to get/set data dynamically) \n\t\t\t//not a configged reference\n\t\t\tthis.itemInQuestion = embType.getRef('.');//model.getRef('.');//embTypeId;\n\t\t} else {\n\n\t\t\t//this is the case where a array control is using dynControl to display it's items\n\t\t\tvar upperArrayCtrl = this.getUpperArrayControl();\n\t\t\tvar arrayCtrlOrigin = upperArrayCtrl.getOriginInfo('model');\n\t\t\tvar type = arrayCtrlOrigin.getThisType();\n\t\t\tthis.itemInQuestion = type.getRef('arrayFormId');\n\t\t\n\t\t}\n\t}\n\n\tif (this.itemInQuestion != null) { \n\t\tvar serverKey = this.getOriginInfo('serverKey').getRef() || 'SERVER';\n\t\tvar obj = new pebble.Pebble();\n\t\tvar params = obj.getParams();\n\t\tparams.setRef('.', serverKey + '.getFields');\n\t\tparams.setRef('typeId', this.itemInQuestion);\n\t\tparams.setRef('fieldsPath', fieldsPath);\n\t\tobj.setCallback(function (fields) {\n\t\t\t//set referenceConfiggedFields so client side getInnerField can access\n\t\t\tvar recs = fields.getRecords('.');\n\t\t\tfor (var i = 0; i < recs.length; i++) {\n\t\t\t\tvar field = recs[i];\n\t\t\t\tvar typeRef = field.getRef('type');\n\t\t\t\tif (typeRef != null) {\n\t\t\t\t\tif (typeRef == pebble.shared.TypeReferences.ARRAY || typeRef == pebble.shared.TypeReferences.COLLECTION) {\n\t\t\t\t\t\tvar arrayFormId = field.getRef('type.arrayFormId');\n\t\t\t\t\t\tif (arrayFormId != null) {\n\t\t\t\t\t\t\tfield.setRef('type.arrayFormId', arrayFormId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfield.setRef('type', typeRef);\n\t\t\t\t}\n\t\t\t}\t\n\n\t\t\tvar basePath = originInfo.getBasePath();\n\t\t\tif (basePath != null) {\n\t\t\t\tbasePath = basePath.replace('theModel', 'model');\n\t\t\t\tpebble.libs.standard.Module.topMod.referenceConfiggedFields[basePath] = fields;\n\t\t\t}\n\n\t\t\tcb(fields);\n\n\t\t});\n\t\tthis.resolve(obj);    \t\t\n\t} else {\n\t\tcb(null);\n\t}\n};\n/**\n *\treturn win item\n * @param {string} typeId\n * @param {pebble.Pebble} fieldsPeb\n * @param {string} metaPrefix\n * @param {pebble.Pebble} instance\n * @param {boolean} ignoreFirst\n */\npebble.libs.standard.DynControl.prototype._getAutoLayout = function(typeId, fieldsPeb, metaPrefix, instance, ignoreFirst) {\n\tvar ret = null;\n\tvar displayControl = this.getDefaultDisplayControl(typeId, instance);\n\tif (displayControl != null && !ignoreFirst) {\n\n\t\tdisplayControl.setRef('control.model._bind', metaPrefix);\n\t\tret = displayControl;\n\n\t} else {\n\n\t\tret = new pebble.Pebble('div');\n\n\t\tvar fields = fieldsPeb.getRecords('.');\n\t\t//if complex and no default dc\n\t\tfor (var i = 0; i < fields.length; i++) {\n\t\t\tvar field = fields[i];\n\t\t\tvar type = field.get('type');\n\t\t\tvar typeRef = type.getRef('.');\n\t\t\tif (typeRef !== null) {\n\t\t\t\t//complex types using listContent with field at on top row and the recursive item on the next row\n\t\t\t\tvar childType = pebble.libs.standard.Module.topMod.deployment.getTypeDocument(typeRef);\n\t\t\t\tif (childType != null) {\n\n\t\t\t\t\t\tvar composite = this._getAutoLayout(typeRef, childType.getFields(), metaPrefix + '.' + field.getTagName(), type, false);\n\t\t\t\t\t\tret.add('.', composite);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} \n\treturn ret;\n};\n/**\n * @param {string} defId\n * @param {pebble.Pebble} instance\n * @return {pebble.Pebble}\n */\npebble.libs.standard.DynControl.prototype.getDefaultDisplayControl = function(defId, instance) {\n\n\tif (this.displayControlFilters != null) {\n\t\tvar actionFilter = this.expressionManager.doFilterCase(instance, this.displayControlFilters);\n\t\tif (actionFilter != null) {\n\t\t\tvar innerMarkup = actionFilter.get('displayControl.innerMarkup');\n\t\t\treturn innerMarkup.getRecords('.')[0].getCopy('.');\n\t\t} \n\t} \n\treturn null;\n};\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/DynControl.js"},{"key":"ext","val":"js"},{"key":"testCode","val":"\nvar topApp;\n\ndescribe('testDynControl', function () {\n\n\tfunction getBaseInnerMarkup() {\n\t\tvar ctrl = new pebble.Pebble();\n\t\tctrl.setRef('.', 'standard:DynControl');\n\t\tctrl.setRef('model._bind', 'testItem');\n\n\t\t\t\t\t\t\t\t\t//<displayControlFilters>\n                    //<a1>\n                        //<filter>item.ref_ == 'theModel.libs.standard.types.text'</filter>\n                        //<displayControl>\n                            //<innerMarkup>\n                                //<input type='text'>\n                                    //<control ref='standard:TextInput'>\n                                        //<dummy/>\n                                    //</control>\n                                //</input>\n                            //</innerMarkup>\n                        //</displayControl>\n                    //</a1>\n                //</displayControlFilters>\t\n\t\t\n\t\tvar dcf = new pebble.Pebble();\n\t\tdcf.setValue('filter', '(item.ref_).indexOf(\"text\") != -1');\n\t\t\n\t\tvar control = new pebble.Pebble();\n\t\tcontrol.setRef('.', 'standard:TextInput');\n\n\t\tvar displayControl = new pebble.Pebble();\n\t\tdisplayControl.setAttribute('innerMarkup.input', 'type', 'text');\n\t\tdisplayControl.set('innerMarkup.input.control', control);\n\n\t\tdcf.set('displayControl', displayControl);\n\t\t\n\t\tvar displayControlFilters = new pebble.Pebble();\n\t\tdisplayControlFilters.set('a0', dcf);\n\n\t\tctrl.set('displayControlFilters', displayControlFilters);\n\n\t\t//ctrl.setRef('onSelected.exec', 'this.save');\n\n\t\tvar div1 = new pebble.Pebble('div');\n\t\tdiv1.set('control', ctrl);\n\n\t\tvar innerMarkup = new pebble.Pebble();\n\t\tinnerMarkup.add('.', div1);\n\t\treturn innerMarkup;\n\t}\n\n\tit ('requires deployment and testAppControl', function() {\n\t\tvar ready = false;\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\ttopApp && topApp.kill();\n\t\t\t\ttopApp = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top');\n\t\t\t\ttopApp.load(function() {\n\t\t\t\t\tready = true;\t\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn ready;\n\t\t}, 'wait for deployment and testAppControl', 300);\n\n\t});\n\n\tit ('should be able to render and any item (not a reference)', function() {\n\n\t\tvar innerMarkup = getBaseInnerMarkup();\t\n\t\tvar dm = topApp.item;\n\n\t\tdm.set('innerMarkup', innerMarkup);\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;// && topApp.item.modules['childmod0'] && topApp.item.modules['childmod0'].item.modules['childmod0'];\n\t\t}, 'Reference should load embedded references.  Reference should select if exists.', 3000);\n\n\t\truns(function() {\n\n\t\t\tvar dynControl = topApp.item.modules['childmod0'].item;\t\n\t\t\texpect(dynControl.getRef('.').split('.').pop()).toEqual('DynControl');\n\t\t\tvar textInput = dynControl.modules['childmod0'].item;\n\t\t\texpect(textInput.element.tagName.toUpperCase()).toEqual('INPUT');\n\t\t\texpect(textInput.getRef('model._bind')).toEqual('model.text');\n\n\t\t});\n\t});\n\n\tit ('should be able to save and any item (not a reference)', function() {\n\n\t\truns(function() {\n\t\t\tvar dynControl = topApp.item.modules['childmod0'].item;\t\n\t\t\tvar textInput = dynControl.modules['childmod0'].item;\n\t\t\ttextInput.element.value = 'hello';\n\t\t\ttopApp.item.saveManager.save(function() {});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\t\treturn topApp.item.saveManager.isValidSave;\n\t\t}, 'Reference should load embedded references.  Reference should select if exists.', 3000);\n\n\t\truns(function() {\n\t\t\texpect(topApp.item.getValue('testItem.text')).toEqual('hello');\n\t\t});\n\t});\n\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/controls/DynControl.js"}]},{"key":"FileInputBase","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends{pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.FileInputBase = function(moduleAccess, dm, isLoadTop){\n\tpebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n}\n\npebble.inherits(pebble.libs.standard.FileInputBase, pebble.libs.standard.ClientControl);\n\n/**\n * @override\n */\npebble.libs.standard.FileInputBase.prototype.onReady = function () {\n\t//this.inputEl = document.createElement('input');\n\tthis.element.type = 'file';\n\tvar that = this;\n\tthis.element.addEventListener('change', function (evt) {\n\n\t\tvar files = evt.target.files; // FileList object\n\t\tvar f = files[0];\n\n\t\t//f.name, f.size, f.lastModifiedDate (f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString())\n\n\t\tthat.parseFile(f, function() {\n\t\t\t//set to model is forced behavior (is there a case where it wouldn't be?)\n\t\t\t\t//that.setControlDataToModel(false, function() {\n\t\t\tvar useBindPath = that.getOriginInfo('useBindPath').getBool();\n\n\t\t\tif (useBindPath) {\n\t\t\t\tvar obj1 = new pebble.Pebble();\n\t\t\t\tvar params = obj1.getParams();\n\t\t\t\tparams.setRef('.', 'SERVER.replaceDs');\n\n\t\t\t\tvar originInfo = that.getOriginInfo('model');\n\t\t\t\tvar basePath = originInfo.getBasePath();\n\t\t\t\tif (basePath === 'theModel') {\n\t\t\t\t\t//entire ds\n\t\t\t\t\tbasePath = '*';\n\n\t\t\t\t} else {\n\n\t\t\t\t}\n\t\t\t\tparams.setRef('path', basePath);\n\n\t\t\t\tvar fileData = that.getOriginInfo('fileData').get();\n\n\t\t\t\tparams.set('app', fileData);\n\t\t\t\tparams.setAttribute('app', 'noresolve', 'true');\n\t\t\t\t//params.setRef('clientInstance', that.getRef('.'));\n\n\t\t\t\tobj1.setCallback(function (item) {\n\n\t\t\t\t\tthat.exec('onChange', null, function(data) {\n\n\n\t\t\t\t\t});\n\n\t\t\t\t});\n\t\t\t\tthat.resolve(obj1);\n\n\t\t\t} else {\n\n\t\t\t\tthat.exec('onChange', null, function(data) {\n\n\n\t\t\t\t});\n\t\t\t}\n\t\t\t\t//});\n\t\t});\n\n\n\n\t}, false);\n\n this.setLoaded();\n}\n\n/**\n * @param {boolean} setSilent\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.FileInputBase.prototype.setControlDataToModel = function(setSilent, cb) {\n\n\t//fileData is equivalent to the controlData\n\tvar fileData = this.getOriginInfo('fileData').get();\n\n\tthis.getOriginInfo('model').set(fileData, this, setSilent, cb);\n\n}\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/FileInputBase.js"},{"key":"ext","val":"js"}]},{"key":"FileInputCSV","val":[{"key":"devCode","val":"/**\n * CSV is transformed into Pebble \n * \n * -replace / append records\n */\n/**\n * @constructor\n * @extends{pebble.libs.standard.FileInputBase}\n */\npebble.libs.standard.FileInputCSV = function(moduleAccess, dm, isLoadTop){\n\tpebble.libs.standard.FileInputBase.call(this, moduleAccess, dm, isLoadTop);\n}\n\npebble.inherits(pebble.libs.standard.FileInputCSV, pebble.libs.standard.FileInputBase);\n\npebble.libs.standard.FileInputCSV.prototype.parseFile = function(f, cb) {\n\tvar peb = new pebble.Pebble();\n\n\tvar reader = new FileReader();\n\tvar that = this;\n\treader.onload = function(theFile) {\n\t\tvar csv = this.result;\n\n\t\t//Seperate file by line breaks\n\t\tvar allTextLines = csv.split(/\\r\\n|\\n/);\n\n\t\t//Set Key equal to the first row\n\t\tvar headers = allTextLines[0].split(',');\n\n\t\t//loop through each line\n\t\tfor (var i = 1; i < allTextLines.length; i++) {\n\t\t\t//Seperate line by comma\n\t\t\tvar data = allTextLines[i].split(',');\n\n\t\t\t//Create associated array for each line\n\t\t\tif (data.length == headers.length) {\n\n\t\t\t\t//Loop through values\n\t\t\t\tfor (var j = 0; j < data.length; j++) {\n\t\t\t\t\t//Set header to Key\n\t\t\t\t\tvar key = headers[j];\n\n\t\t\t\t\t//Set data to value\n\t\t\t\t\tvar value = data[j];\n\n\t\t\t\t\tpeb.setValue('a' + i + '.' + key, value);\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\n\t\t//set peb to model or import\n\t\tthat.data = peb;\n\t\tcb();\n\t};\n\n\t// Read in the image file as a data URL.\n\treader.readAsText(f, 'UTF-8');\n\n}\n//create csv\n//application/octet-stream\n//need to encode?\npebble.libs.standard.FileInputCSV.prototype.createCsv = function() {\n\tvar s = ''; //header\n\tvar array = this.getOriginInfo('model').get();\n\tif (array != null) {\n\t\tvar recs = array.getRecords('.');\n\t\tfor (var i = 0; i < recs.length; i++) {\n\n\t\t\t//for fields  \n\n\t\t\ts += '\\r\\n';\n\t\t}\n\t}\n\n\t//window.open( 'data:text/csv;charset=utf-8,' + escape(str))\n}\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/FileInputCSV.js"},{"key":"ext","val":"js"}]},{"key":"FileInputImage","val":[{"key":"devCode","val":"/**\n * Embedded Image is model, in display similar to other client side controls\n * Filename, etc. is other data you can bind to, but not main\n */\n/**\n * @constructor\n * @extends{pebble.libs.standard.FileInputBase}\n */\npebble.libs.standard.FileInputImage = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.FileInputBase.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.FileInputImage, pebble.libs.standard.FileInputBase);\n\npebble.libs.standard.FileInputImage.prototype.parseFile = function(f, cb) {\n\n\tvar reader = new FileReader();\n\n\tvar that = this;\n \treader.onload = function(theFile) { \n\t\tvar data = new pebble.Pebble();\n\n//data:[<mime type>][;charset=<charset>][;base64],<encoded data>\n\t\t//this.result includes to protocol part. such as 'data:image/jpeg;base64,'\n\t\t//which is available for <img src to use\n\n\t\tdata.setValue('.', this.result); \n\t\tthat.data = data; \n\t\tcb();\n\n\t};\n\n\t// Read in the image file as a data URL.\n\treader.readAsDataURL(f);\n};\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/FileInputImage.js"},{"key":"ext","val":"js"}]},{"key":"FileInputPebble","val":[{"key":"devCode","val":"\n/**\n * Pebble is a document (server-side)\n * Set to model will update the server\n */\n/**\n * @constructor\n * @extends{pebble.libs.standard.FileInputBase}\n */\npebble.libs.standard.FileInputPebble = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.FileInputBase.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.FileInputPebble, pebble.libs.standard.FileInputBase);\n\npebble.libs.standard.FileInputPebble.prototype.parseFile = function(f, cb) {\n\n\tvar reader = new FileReader();\n\n\tvar that = this;\n\treader.onload = function(theFile) {\n\t\tvar data = new pebble.Pebble(this.result);\n\t\tvar originInfo = that.getOriginInfo('fileData');\n    //set will loose the tag name\n    data.setRef('tagName_', data.getTagName());\n\t\toriginInfo.set(data, that, true, function(){});\n\t\tcb();\n\t};\n\n\t// Read in the image file as a data URL.\n\treader.readAsText(f, 'UTF-8');\n\n};\n\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/FileInputPebble.js"},{"key":"ext","val":"js"}]},{"key":"FileInputText","val":[{"key":"devCode","val":"/**\n * Text is model, in display similar to other client side controls\n * Filename, etc. is other data you can bind to, but not main\n */\n/**\n * @constructor\n * @extends{pebble.libs.standard.FileInputBase}\n */\npebble.libs.standard.FileInputText = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.FileInputBase.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.FileInputText, pebble.libs.standard.FileInputBase);\n\npebble.libs.standard.FileInputText.prototype.parseFile = function(f, cb) {\n\n\tvar reader = new FileReader();\n\n\tvar that = this;\n\treader.onload = function(theFile) {\n\t\tvar data = new pebble.Pebble();\n\t\tdata.setValue('.', this.result);\n\t\tthat.data = data;\n\t\tcb();\n\t};\n\n\treader.readAsText(f, 'UTF-8');\n\n};\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/FileInputText.js"},{"key":"ext","val":"js"}]},{"key":"Markup","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends{pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.Markup = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.Markup, pebble.libs.standard.ClientControl);\n/**\n * @override\n */\npebble.libs.standard.Markup.prototype.onReady = function () {\n\n\tvar text = '';\n\tvar originInfo = this.getOriginInfo('model');\n\tvar peb = originInfo.get();\n\tif (peb != null) {\n\t\ttext = peb.getValue('.') || '';\n\t}\n\n\tthis.setText(text);\n\n\tthis.setLoaded();\n};\n/**\n * @param {string} text\n */\npebble.libs.standard.Markup.prototype.setText = function(text) {\n\n\tvar appendText = this.getOriginInfo('appendText').get();\n\tif (appendText != null) {\n\t\ttext = text + (appendText.getValue('.') || '');\n\t}\n\n\tvar prependText = this.getOriginInfo('prependText').get();\n\tif (prependText != null) {\n\t\ttext = (prependText.getValue('.') || '') + text;\n\t}\n\tthis.element.innerHTML = text;\n\n};\n\n/**\n * @override\n */\npebble.libs.standard.Markup.prototype.onDataModelChanged = function(source, path, relPath, cb) {\n\tif (this != source && path == 'model') {\n\t\tvar text = '';\n\t\tvar peb = this.getOriginInfo('model').get();\n\t\tif (peb != null) {\n\t\t\ttext = peb.getValue('.') || '';\n\t\t}\n\t\tthis.setText(text);\n\t} \n\tcb();\n\treturn false;\n};\n\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/Markup.js"},{"key":"ext","val":"js"}]},{"key":"NumberInput","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends{pebble.libs.standard.TextInputBase}\n */\npebble.libs.standard.NumberInput = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.TextInputBase.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.NumberInput, pebble.libs.standard.TextInputBase);\n\npebble.libs.standard.NumberInput.prototype.onReady = function () {\n\tpebble.libs.standard.NumberInput.superClass_.onReady.call(this)\n\n\tvar that = this;\n\tif (this.getOriginInfo('setModelOnChange').get() != null) {\n\t\tthis.element.addEventListener('change' , function(e) {\n\t\t\tthat.setControlDataToModel(false, function() {});\n\t\t}, false); //true?\n\n\t}\n\n\n\tthis.setLoaded();\n};\n\n/**\n * @param {boolean} setSilent\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.NumberInput.prototype.setControlDataToModel = function(setSilent, cb) {\n\tvar data = new pebble.Pebble();\n\tdata.setValue('.', this.element.value);\n\tthis.getOriginInfo('model').set(data, this, setSilent, cb);\n};\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/NumberInput.js"},{"key":"ext","val":"js"}]},{"key":"PasswordInput","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends{standard.TextInputBase}\n */\npebble.libs.standard.PasswordInput = function(moduleAccess, dm, isLoadTop) {\n\tstandard.TextInputBase.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.PasswordInput, pebble.libs.standard.TextInputBase);\n\npebble.libs.standard.PasswordInput.prototype.onReady = function () {\n\tpebble.libs.pebble.libs.standard.PasswordInput.superClass_.onReady.call(this)\n\tthis.textBox.type = 'password';\n\tthis.setLoaded();\n};\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/PasswordInput.js"},{"key":"ext","val":"js"}]},{"key":"PeerConnectionBase","val":[{"key":"devCode","val":"var mediaConstraints = {'mandatory': {'OfferToReceiveAudio':true, 'OfferToReceiveVideo':true}};\n/**\n * @constructor\n * @extends{pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.PeerConnectionBase = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.PeerConnectionBase, pebble.libs.standard.ClientControl)\n\n/**\n * @override\n */\npebble.libs.standard.PeerConnectionBase.prototype.onReady = function () {\n\tthis.isInitiator = false;\n\n//\tif (this.localstream.videoTracks.length > 0)\n//\tconsole.log('Using Video device: ' + this.localstream.videoTracks[0].label);  \n//\tif (localstream.audioTracks.length > 0)\n//\tconsole.log('Using Audio device: ' + this.localstream.audioTracks[0].label);\n\n//\tthis.video = document.createElement('video');\n//\tthis.video.setAttribute('autoplay', 'true');\n\n//\tthis.element.appendChild(this.video);\n\n\tthis.setPeerConnection();\n\n\tthis.setLoaded();\n};\n/**\n * @suppress {checkTypes} because some of this is not in official specs yet\n */\npebble.libs.standard.PeerConnectionBase.prototype.setPeerConnection = function() {\n\n\tvar servers = {'iceServers': [{'url': 'stun:stun.l.google.com:19302'}]};\n\tthis.pc = new window.webkitRTCPeerConnection(servers);\n\tvar that = this;\n\tthis.pc.onicecandidate = function (event){\n\t\tif (event.candidate) {\n\t\t\t//setModel\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('.', window.JSON.stringify(event.candidate));\n\t\t\tvar originInfo;\n\t\t\tif (that.isInitiator) {\n\t\t\t\toriginInfo = that.getOriginInfo('model.offerCandidate');\n\t\t\t} else {\n\t\t\t\toriginInfo = that.getOriginInfo('model.answerCandidate');\n\t\t\t}\n\t\t\toriginInfo.set(data, that, false);\n\t\t\tthat.saveManager.writeThru(originInfo, false, function() {});\n\t\t}\n\t}; \n//\tif (false) { //(isSource) {\n//\tthis.pc.addStream(this.localstream);\n//\t}\n\n\tthis.pc.onaddstream = function (e){\n\n\t\tvar url = window.webkitURL.createObjectURL(e.stream);\n\t\tvar data = new pebble.Pebble();\n\t\tdata.setValue('.', url);\n\n\t\tvar originInfo = that.getOriginInfo('_remoteStream');\n\t\toriginInfo.set(data, that, false);\n\t}; \n};\n/**\n * @param {string} funcName\n * @param {pebble.Pebble} obj\n * @return {number}\n * @override\n */\npebble.libs.standard.PeerConnectionBase.prototype.executeMethod = function(funcName, obj) {\n\tvar ret = 1;\n\t//list all ui public methods\n\tif (funcName == 'makeOffer') {\n\t\tthis.makeOffer(obj);\n\t} else if (funcName == 'hangup') {\n\t\tthis.hangup(obj);\n\t} else {\n\t\treturn pebble.libs.standard.PeerConnectionBase.superClass_.executeMethod.call(this, funcName, obj);\n\t}\n\treturn ret;\n};\n/**\n * @suppress {checkTypes} because some of this is not in official specs yet\n */\npebble.libs.standard.PeerConnectionBase.prototype.makeOffer = function(obj) {\n\n\tthis.isInitiator = true;\n\tvar that = this;\n\n\n\tnavigator.webkitGetUserMedia({audio:true, video:true}, function(stream) {\n\t\tvar url = window.webkitURL.createObjectURL(stream);\n\t\tvar data = new pebble.Pebble();\n\t\tdata.setValue('.', url);\n\n\t\tvar originInfo = that.getOriginInfo('_localStream');\n\t\toriginInfo.set(data, that, false);\n\n\t\tthat.localstream = stream;\n//\t\tthat.video.src = url\n\t\tthat.pc.addStream(that.localstream);\n\n\t\tthat.pc.createOffer( function (desc){\n\t\t\tthat.pc.setLocalDescription(desc);\n\t\t\tpebble.shared.logger.log('INFO', 'Offer from pc1 \\n' + desc.sdp);\n\n\t\t\t//setModel to communicate\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setMarkup('.', window.JSON.stringify(desc));\n\t\t\tvar originInfo = that.getOriginInfo('model.offer');\n\t\t\toriginInfo.set(data, that, false);\n\t\t\tthat.saveManager.writeThru(originInfo, false, function() {});\n\t\t}, null, mediaConstraints);\t  \n\n\t}, function() {});\n\n\n\n\n};\n/**\n * @suppress {checkTypes} because some of this is not in official specs yet\n */\npebble.libs.standard.PeerConnectionBase.prototype.makeAnswer = function(desc) {\n\tpebble.shared.logger.log('INFO', window.JSON.stringify(desc));\n\tthis.pc.setRemoteDescription(desc);\n\tvar that = this;\n\tthis.pc.createAnswer( function (desc){\n\t\tthat.pc.setLocalDescription(desc);\n\t\t//console.log('Answer from pc2 \\n' + desc.sdp);\n\n\t\t//setModel\n\t\tvar data = new pebble.Pebble();\n\t\tdata.setValue('.', window.JSON.stringify(desc));\n\t\tvar originInfo = that.getOriginInfo('model.answer');\n\t\toriginInfo.set(data, that, false);\n\t\tthat.saveManager.writeThru(originInfo, false, function() {});\n\t}, null, mediaConstraints);\n};\n/**\n * @suppress {checkTypes} because some of this is not in official specs yet\n */\npebble.libs.standard.PeerConnectionBase.prototype.hangup = function(obj) {\n\tthis.pc.close(); \n\tthis.pc = null;\n\t//setModel\n\tvar data = new pebble.Pebble();\n\tdata.setTrue('.');\n\tvar originInfo = this.getOriginInfo('model.cancelled');\n\toriginInfo.set(data, this, false);\n\tthis.saveManager.writeThru(originInfo, false, function() {});\n};\n/**\n * @suppress {checkTypes} because some of this is not in official specs yet\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {string} field\n * @param {string} relPath\n * @param {Function} cb\n * @return {boolean}\n * @override\n */\npebble.libs.standard.PeerConnectionBase.prototype.onDataModelChanged = function(source, field, relPath, cb) {\n\tif (this != source) {\n\t\tif (relPath == 'offer') {\n\n\t\t\tvar s = this.getOriginInfo('model.offer').getValue();\n\t\t\tthis.makeAnswer(window.JSON.parse(s));\n\n\t\t} else if (relPath == 'answer') {\n\n\t\t\tvar s = this.getOriginInfo('model.answer').getValue();\n\t\t\tthis.setRemoteDescription(window.JSON.parse(s));\n\n\t\t} else if (relPath == 'offerCandidate') {\n\n\t\t\tvar s = this.getOriginInfo('model.offerCandidate').getValue();\n\t\t\tthis.pc.addIceCandidate(new window.RTCIceCandidate(window.JSON.parse(s)));\n\n\t\t} else if (relPath == 'answerCandidate') {\n\n\t\t\tvar s = this.getOriginInfo('model.answerCandidate').getValue();\n\t\t\tthis.pc.addIceCandidate(new window.RTCIceCandidate(window.JSON.parse(s)));\n\n\t\t} else if (relPath == 'cancelled') {\n\n\t\t\tthis.pc.close();\n\t\t\tthis.pc = null;\n\n\t\t}\n\t}\n\tcb();\n\treturn false;\n};\n\n\n\n\n//set up data channels\n// PeerConnection setup and offer-answer exchange omitted  \n//var dc1 = pc1.createDataChannel('mylabel');  // create the sending DataChannel (reliable mode)\n//var dc2 = pc2.createDataChannel('mylabel');  // create the receiving DataChannel (reliable mode)\n\n//// append received DataChannel messages to a textarea\n//var receiveTextarea = document.querySelector('textarea#receive');\n//dc2.onmessage = function(event) { \n//receiveTextarea.value += event.data;\n//};  \n\n//var sendInput = document.querySelector('input#send');\n//// send message over the DataChannel\n//function onSend() {\n//dc1.send(sendInput.value); \n//}\n\n\n\nfunction dataURItoBlob(dataURI) {\n\t// convert base64 to raw binary data held in a string\n\t// doesn't handle URLEncoded DataURIs\n\tvar byteString = window.atob(dataURI.split(',')[1]);\n\n\t//use this for url encode stuff\n\t// convert base64/URLEncoded data component to raw binary data held in a string\n//\tvar byteString;\n//\tif (dataURI.split(',')[0].indexOf('base64') >= 0)\n//\tbyteString = atob(dataURI.split(',')[1]);\n//\telse\n//\tbyteString = unescape(dataURI.split(',')[1]);\n\n\n\t// separate out the mime component\n\tvar mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]\n\n\t// write the bytes of the string to an ArrayBuffer\n\tvar ab = new ArrayBuffer(byteString.length);\n\tvar ia = new Uint8Array(ab);\n\tfor (var i = 0; i < byteString.length; i++) {\n\t\tia[i] = byteString.charCodeAt(i);\n\t}\n\n\t// write the ArrayBuffer to a blob, and you're done\n\tvar bb = new BlobBuilder();\n\tbb.append(ab);\n\treturn bb.getBlob(mimeString);\n\n\n\n//\tvar dataURL = canvas.toDataURL('image/jpeg', 0.5);\n//\tvar blob = dataURItoBlob(dataURL);\n//\tvar fd = new FormData(document.forms[0]);\n//\tfd.append('canvasImage', blob);\n}\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/PeerConnectionBase.js"},{"key":"ext","val":"js"}]},{"key":"Progress","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends{pebble.client.ClientControl}\n */\npebble.libs.standard.Progress = function(moduleAccess, dm, isLoadTop) {\n\tpebble.client.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.Progress, pebble.libs.standard.ClientControl);\n\n/**\n * @override\n */\npebble.libs.standard.Progress.prototype.onReady = function () {\n\tthis.tn = document.createElement('progress');\n\tthis.tn.max = this.getOriginInfo('max').getInt() || 100;\n\tthis.element.appendChild(this.tn);\n\n\tthis.setControl();\n\tthis.setLoaded();\n};\npebble.libs.standard.Progress.prototype.setControl = function() {\n\tvar val = this.getOriginInfo('model').getInt();\n\tif (val == null) {\n\t\tval = 0;\n\t} \n\tthis.tn.value = val;\n};\n/**\n * @param {pebble.client.interfaces.DataChangable} source\n * @param {string} field\n * @return {boolean}\n * @override\n */\npebble.libs.standard.Progress.prototype.onDataModelChanged = function(source, field) {\n\tif (this != source && field == 'model') {\n\t\tthis.setControl();\n\t} \n\treturn false;\n};\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/Progress.js"},{"key":"ext","val":"js"}]},{"key":"Reference","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends {pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.Reference = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n\n};\n\npebble.inherits(pebble.libs.standard.Reference, pebble.libs.standard.ClientControl);\n\n/**\n * @override\n */\npebble.libs.standard.Reference.prototype.onReady = function() {\n\t\n\t//register to source itself (normally you don't), might not need this now as everything is passed to inner container\n\tvar innerArrayOrigin = this.getOriginInfo('innerArray');\n\tinnerArrayOrigin.subscribe(this.moduleAccess.getId(), 'innerArray', true);\n\n\tvar innerMarkup = this.getOriginInfo('innerArrayControl.innerMarkup').get();\n\tvar topItem = innerMarkup.getRecords('.')[0];\n\tvar containerEle = this.getArrayItemElement(topItem);\n\tthis.element.appendChild(containerEle);\n  var dm = topItem.get('control');\t\n\tdm.setRef('model._bind', 'innerArray'); //need\n\n\t//put as child module\n\tvar id = 'innerArrayControl';\n\tvar win = this.modules[id] = this.moduleAccess.getNewInstance(this, this, containerEle, this.getId() + '-' + id);\n\n\tvar that = this;\n\twin.getItem(dm, function() {\n\t\t\n\t\tvar originInfo = that.getOriginInfo('model');\n\t\tvar nodeType = originInfo.getThisType();\n\t\t\n\t\tvar data = nodeType.get('relArray');\n\t\tif (data != null) {\n\n\t\t\tinnerArrayOrigin.set(data, that, false);\n\n\t\t}\n\n\t\t//var itemPath = nodeType.getRef('itemPath'); \n\t\tthat.innerArrayControl = win.item;\n\t\tthat.selectReference();\n\t\tthat.setLoaded();\n\n\t});\n};\n\n/**\n * @private\n */\npebble.libs.standard.Reference.prototype.getArrayItemElement = function(topItem) {\n\n\tvar containerEle = document.createElement(topItem.getTagName());\n\tvar attributes = topItem.getAttributes('.');\n\tfor (var key in attributes) {\n\t\tcontainerEle.setAttribute(key, attributes[key]);\n\t}\n\treturn containerEle;\n};\n/**\n * @private\n */\npebble.libs.standard.Reference.prototype.selectReference = function() {\n\n\tvar ref = this.getOriginInfo('model').getRef();\n\tif (ref != null) {\n\t\tvar innerArrayOrigin = this.getOriginInfo('innerArray');\n\t\tthis.innerArrayControl.setSelectedItem(ref);//we need a way to force source=null!!! not sure if this will work\n\t}\n};\n\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {string} field\n * @param {string} relPath\n * @param {Function} cb\n * @return {boolean}\n * @override\n */\npebble.libs.standard.Reference.prototype.onDataModelChanged = function(source, field, relPath, cb) {\n\n\tif (this != source) {\n\t\tif (field == 'model') {\n\t\t\tthis.selectReference();\n\t\t} else if (field == 'triggerPoint') {\n\t\t\tvar triggerItem = this.getOriginInfo('triggerItem').get();\n\t\t\tif (triggerItem != null) {\n\t\t\t\tvar pathToRef = triggerItem.getRef('pathToRef');\n\t\t\t\tvar appendMeta = triggerItem.getRef('appendMeta');\n\n\t\t\t\tvar item = this.innerArrayControl.getSingleSelectedItem();\n\t\t\t\tvar path = item.getRef(pathToRef);\n\t\t\t\tif (appendMeta != null) {\n\t\t\t\t\tpath += '.' + appendMeta;\n\t\t\t\t}\n\n\t\t\t\tvar controlItem = this.getOriginInfo('model').get();\n\t\t\t\tcontrolItem.setRef('_nodeInfo.type.itemPath', path);\n\n\t\t\t\t//reload inner array control\n\t\t\t\tvar itemPathCollection = pebble.libs.standard.Module.topMod.deployment.getPathAnalyzer(path);\n\t\t\t\tvar data = itemPathCollection.getLastFieldType();\n\n\n\t\t\t\tvar innerArrayOrigin = this.getOriginInfo('innerArray');\n\t\t\t\tvar that = this;\n\n\t\t\t\tvar query = new pebble.Pebble();\n\t\t\t\tquery.setRef('from.path', path);\n\n\t\t\t\tvar obj = new pebble.Pebble();\n\t\t\t\tvar params = obj.getParams();\n\t\t\t\tparams.setRef('.', 'SERVER.doQuery');\n\t\t\t\tparams.set('query', query);\n\t\t\t\tparams.setRef('clientInstance', this.innerArrayControl.getRef('.'));\n\t\t\t\tobj.setCallback(function(fetchedData) {\n\n\t\t\t\t\tinnerArrayOrigin.set(fetchedData, that);\n\t\t\t\t\tthat.selectReference();\n\n\t\t\t\t});\n\t\t\t\tthis.resolve(obj);\n\n\t\t\t} else {\n\t\t\t\tvar triggerMeta = this.getOriginInfo('triggerMeta').get();\n\t\t\t}\n\t\t} else if (field == 'innerArray') {\n\n\t\t\tvar model = this.getOriginInfo('innerArray').getCreateOnNull();\n\t\t\tvar elements = relPath.split('.');\n\t\t\tif (relPath.indexOf('selected') > 0 && elements.length == 4 ){\t//not collections with/in collections\n\t\t\t\telements.pop();//selected\n\t\t\t\tvar group = elements.pop();//group\n\t\t\t\telements.pop();//selection\n\t\t\t\tvar relMeta = elements.pop();\n\t\t\n\t\t\n\t\t\t\t//right now we let the user be in control of when to set to model, just execute onSelected\n\t\t\t\tthis.exec('onSelected', null, null);\n\n\t\t\t\t//this.setControlDataToModel(false, new Callback()); \n\t\t\t}\t\n\t\t}\n\t}\n\tcb();\n\treturn false;\n};\n\n/**\n * @param {boolean} setSilent\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.Reference.prototype.setControlDataToModel = function (setSilent, cb) {\n\n\tvar ref = this.innerArrayControl.getSingleSelectedMeta();\n\n\tif (ref == null) {\n\t\tref = '';//???\n\t}\n\tvar originInfo = this.getOriginInfo('model');\n\tvar data = originInfo.get(); //might be configged so need the inner data\n\tdata.setRef('.', ref);\t\t\t//only put ref on\n\n\tthis.getOriginInfo('model').set(data, this, setSilent);\n\tcb();\n};\n\n/**\n * @param {string} funcName\n * @param {pebble.Pebble} obj\n * @return {number}\n * @override\n */\npebble.libs.standard.Reference.prototype.executeMethod = function(funcName, obj) {\n\tvar ret = 1;\n\t//list all ui public methods\n\tif (funcName == 'setItemPath') {\n\t\tthis.setItemPath(obj);\n\t} else {\n\t\treturn pebble.libs.standard.Reference.superClass_.executeMethod.call(this, funcName, obj);\n\t}\n\treturn ret;\n};\n/**\n * @param {pebble.Pebble} obj1\n */\npebble.libs.standard.Reference.prototype.setItemPath = function(obj1) {\n\tvar path =  obj1.getParams().get('path');\n\n\n\tvar controlItem = this.getOriginInfo('model').get();\n\tcontrolItem.set('_nodeInfo.type.itemPath', path);\n\n\t//reload inner array control\n\tvar itemPathCollection = pebble.libs.standard.Module.topMod.deployment.getPathAnalyzer(path.getRef('.'));\n\tvar data = itemPathCollection.getLastFieldType();\n\n\tvar innerArrayOrigin = this.getOriginInfo('innerArray');\n\tvar that = this;\n\n};\n\n\n\n/**\n * need to know filters, etc...\n * @param {pebble.Pebble} filter\n */\n//pebble.libs.standard.OriginInfo.prototype.setTopNodeInfo = function (filter) {\n//\t\tvar elements = this.path.split('.');\n//\n//\t\tvar enteredReferenceArraySpecialCase = false;\n//\t\tif (this.control instanceof pebble.libs.standard.ReferenceArray) {\n//\t\t\t//inner refs trying to get their type\n//\t\t\tvar refArrayOriginInfo = this.control.getOriginInfo('model');\n//\t\t\tvar node = refArrayOriginInfo.getNode();\n//\t\t\tif (node != null) {\n//\t\t\t\tvar arrayTypeWithRef = node.getNodeType();\n//\t\t\t\tif (this.path.indexOf('innerArray.') == 0){\n//\t\t\t\t\t//ie .innerArray.a0.toGroup\n//\t\t\t\t\tenteredReferenceArraySpecialCase = true;\n//\t\t\t\t\tvar relPath = '';\n//\t\t\t\t\tfor (var i = 3; i < elements.length; i++) {\n//\t\t\t\t\t\trelPath += '.' + elements[i];\n//\t\t\t\t\t}\n//\t\t\t\t\tvar configgedType = arrayTypeWithRef.getRef('arrayFormId.configgedType');\n//\t\t\t\t\tif (configgedType.indexOf('$reference') != 0){\n//\t\t\t\t\t\tvar innerArray = this.control.getOriginInfo('innerArray').get();\n//\t\t\t\t\t\tvar arrayItem = innerArray.get(elements[1]);\n//\t\t\t\t\t\tvar xxx = arrayItem.get('_config');\n//\t\t\t\t\t\tvar relPathForInnerArrayItem = this.path.replace('innerArray.' + elements[1] + '.' + '_config', '');\n//\t\t\t\t\t\tvar instanceRefs = pebble.shared.PebbleUtils.getInstanceRefs(xxx, relPathForInnerArrayItem);\n//\n//\t\t\t\t\t\tpebble.shared.logger.log('ERROR', 'REQUIRING TYPE (REF-ARRAY): ' + configgedType + ' relPath: ' + relPath);\n//\n//\t\t\t\t\t\tvar obj = new pebble.shared.ItemType(configgedType);\n//\t\t\t\t\t\tvar data = obj.getInnerType(relPath, instanceRefs);\n//\t\t\t\t\t\titem.setNodeType(data);\n//\t\t\t\t\t\treturn data;\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t}\n//\t\t}\n//\t\tif (!enteredReferenceArraySpecialCase) {\n//\t\t\t//set node type (but when dynControl is pCM we cannot inspect it (getInnerField) thus we must find dynControl's originItem and look at dynControl.model\n//\n//\t\t\t//build the instance for the control with ONLY the first member data on it (we dont know its other fields and they are not in question here)\n//\t\t\tvar firstMemberData = this.control.getOriginInfo(elements[0]).get();\n//\t\t\tvar dataForControl = new pebble.Pebble();\n//\t\t\tdataForControl.set(firstMemberData.getTagName(), firstMemberData); \n//\n//\t\t\tpebble.shared.logger.log('ERROR', 'REQUIRING TYPE: ' + this.control.getRef('.') + ' relPath: ' + this.path);\n//\n//\t\t\tvar instanceRefs = pebble.shared.PebbleUtils.getInstanceRefs(dataForControl, this.path);\n//\t\t\tvar obj = new pebble.shared.ItemType(this.control.getRef('.'));\n//\t\t\tvar data = obj.getInnerType(this.path, instanceRefs);\n//\t\t\titem.setNodeType(data);\n//\t\t\treturn data;\n//\n//\t\t}\n//\t}\n//}\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/Reference.js"},{"key":"ext","val":"js"},{"key":"testCode","val":"\nvar topApp;\n\ndescribe('testReference', function () {\n\n\tfunction getBaseInnerMarkup(bindPoint) {\n\t\tvar ref = new pebble.Pebble();\n\t\tref.setRef('.', 'standard:Reference');\n\t\tref.setRef('model._bind', bindPoint);\n\t\t\n\t\tref.setRef('onSelected.exec', 'this.save');\n\n\t\tvar arraySelect = new pebble.Pebble();\n\t\tarraySelect.setRef('.', 'standard:ArraySelect');\n\n\t\tif (bindPoint == 'testItem.referenceExternal') {\n\t\t\tarraySelect.setRef('loadQuery', 'SERVER.testItems');\n\t\t}\n\n\t\tarraySelect.set('childElement.option', new pebble.Pebble());\n\t\tarraySelect.setRef('displayControl.innerMarkup.control', 'standard:Text');\n\t\tarraySelect.set('displayControl.innerMarkup.control.dummy', new pebble.Pebble());\n\n\t\tref.set('innerArrayControl.innerMarkup.select.control', arraySelect);\n\t\t\n\t\tvar div1 = new pebble.Pebble('div');\n\t\tdiv1.set('control', ref);\n\n\t\tvar innerMarkup = new pebble.Pebble();\n\t\tinnerMarkup.add('.', div1);\n\n\t\tvar div2 = new pebble.Pebble('div');\n\t\tvar refTextBox = new pebble.Pebble();\n\t\trefTextBox.setRef('.', 'standard:ReferenceTextInput');\n\t\trefTextBox.setRef('model._bind', 'testItem.referenceEmbedded');\n\t\tdiv2.set('control', refTextBox);\n\n\t\tinnerMarkup.add('.', div2);\n\n\t\treturn innerMarkup;\n\t}\n\n\tit ('requires deployment and testAppControl', function() {\n\t\tvar ready = false;\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\ttopApp && topApp.kill();\n\t\t\t\ttopApp = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top');\n\t\t\t\ttopApp.load(function() {\n\t\t\t\t\tready = true;\t\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn ready;\n\t\t}, 'wait for deployment and testAppControl', 300);\n\n\t});\n\n\tit ('referenceEmbedded', function() {\n\n\t\tvar innerMarkup = getBaseInnerMarkup('testItem.referenceEmbedded');\t\n\t\tvar dm = topApp.item;\n\n\t\tdm.set('innerMarkup', innerMarkup);\n\t\tdm.setRef('testItem.referenceEmbedded', 'a3');\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\tvar loaded = false;\n\t\truns(function() {\n\t\t\tvar ctrl = topApp.item.modules['childmod0'].item; \n\t\t\tvar refTextBox = topApp.item.modules['childmod1'].item; \n\t\t\texpect(ctrl.getRecords('innerArray').length).toEqual(5);\n\t\t\texpect(ctrl.getBool('innerArray.a3._selection.default.selected')).toEqual(true);\n\n\t\t\tctrl.innerArrayControl.element.selectedIndex = 4;\n\n\t\t\tsetTimeout(function() {\n\t\t\t\tloaded = true;\n\t\t\t}, 100);\n\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn loaded;\t \n\t\t}, 'ctx did not load', 300);\n\t\t\n\t\truns(function() {\n\t\t\tvar ctrl = topApp.item.modules['childmod0'].item; \n\t\t\tvar refTextBox = topApp.item.modules['childmod1'].item; \n\t\t\texpect(ctrl.getOriginInfo('model').getRef()).toEqual('a3');\n\t\t\texpect(refTextBox.getOriginInfo('model').getRef()).toEqual('a3');\n\t\t});\n\t});\n\n\tit ('referenceExternal', function() {\n\n\t\tvar innerMarkup = getBaseInnerMarkup('testItem.referenceExternal');\t\n\t\tvar dm = topApp.item;\n\t\tdm.set('innerMarkup', innerMarkup);\n\t\tdm.setRef('testItem.referenceExternal', 'a1');\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\tvar ctrl = topApp.item.modules['childmod0'].item; \n\t\t\t//expect(ctrl.getRecords('innerArray').length).toEqual(10);\n\t\t\texpect(ctrl.getBool('innerArray.a1._selection.default.selected')).toEqual(true);\n\t\t});\n\t});\n\n\tit ('referenceExternalDynControl', function() {\n\n\t\tvar innerMarkup = getBaseInnerMarkup('testItem.referenceExternal');\t\n\n\t\tvar div = new pebble.Pebble('div');\n\t\tvar dynControl = new pebble.Pebble();\n\t\tdynControl.setRef('.', 'standard:DynControl');\n\t\tdynControl.setRef('model._bind', 'testItem.referenceExternal');\n\t\tdiv.set('control', dynControl);\n\n\t\tinnerMarkup.add('.', div);\n\n\t\tvar dm = topApp.item;\n\t\tdm.set('innerMarkup', innerMarkup);\n\t\tdm.setRef('testItem.referenceExternal', 'a1');\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\tvar ctrl = topApp.item.modules['childmod0'].item; \n\t\t\t//expect(ctrl.getRecords('innerArray').length).toEqual(10);\n\t\t\texpect(ctrl.getBool('innerArray.a1._selection.default.selected')).toEqual(true);\n\t\t});\n\t});\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/controls/Reference.js"}]},{"key":"ReferenceArray","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends {pebble.libs.standard.ArrayTreeBase}\n */\npebble.libs.standard.ReferenceArray = function(moduleAccess, dm, isLoadTop) {\n\n\tpebble.libs.standard.ArrayTreeBase.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.ReferenceArray, pebble.libs.standard.ArrayTreeBase);\n\npebble.libs.standard.ReferenceArray.prototype.onReady = function() {\n\t//setLoaded so that inner controls don't load this again\n\tthis.setLoaded();\n\t//this.loadInnerControls(arrayFormId);\n};\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {string} path\n * @param {string} relPath\n * @param {Function} cb\n * @return {boolean}\n * @override\n */\npebble.libs.standard.ReferenceArray.prototype.onDataModelChanged = function(source, path, relPath, cb) {\n\tif (path.indexOf('itemPath') != -1) {\n\n\t\tvar itemPath = this.getOriginInfo('itemPath').getRef();\n\t\tvar appendMeta = this.getOriginInfo('appendMeta').getRef();\n\t\tif (appendMeta != null) {\n\t\t\titemPath += '.' + appendMeta;\n\t\t}\n\n\t}\n\tcb();\n\treturn false;\n};\n/**\n * @param {pebble.Pebble} arrayFormId\n * @private\n */\npebble.libs.standard.ReferenceArray.prototype.loadInnerControls = function(arrayFormId) {\n\tvar that = this;\n\tvar data = null;\n\tvar ra = arrayFormId.get('relArray');\n\tif (ra != null) {\n\t\tdata = new pebble.Pebble(ra);\n\n\t\t\n\t} else {\n\t\tvar itemPath = arrayFormId.getRef('itemPath'); \n\t\tif (itemPath != null) {\n\n\t\t\t//query path for type to create nodeInfo then have getItemPath return itemPath for top\n\t\t\tdata = new pebble.Pebble();\n\n\n\t\t}\n\t}\n\n\tvar innerArrayController = that.getOriginInfo('innerArray');\n\tinnerArrayController.setSilent(data); //still no array items, just the node\n\n\n\t//if requires all\n\tvar requiresAll = that.getOriginInfo('requiresAll');\n\t//innerArrayController.setRequiresAllSelected(requiresAll.getBool());\n\n\n\t//var controlItem = innerArrayController.getNode();\n\t//if (controlItem != null) {\n\t\t//var nodeInfo = controlItem.getNodeInfo();\n\t\t//innerArrayController.getNodeChildren(nodeInfo, function(data) {\n\n\t\t\t////\t\t\t\tif (data != null) {\n\t\t\t//controlItem.set('.', data);\n\t\t\t//innerArrayController.set(controlItem, that); //notify all controls\n\t\t\t////\t\t\t\t}\n\n\t\t//});\n\t//}\n};\n//called from inner control\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ReferenceArray.prototype.onSelected = function(obj) {\n\t//this.exec('onSelected', null, null);\n\tobj.callback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ReferenceArray.prototype.onDeSelected = function(obj) {\n\n};\n/**\n * @param {string} funcName\n * @param {pebble.Pebble} obj\n * @return {number}\n * @override\n */\npebble.libs.standard.ReferenceArray.prototype.executeMethod = function(funcName, obj) {\n\tvar ret = 1;\n\t//list all ui public methods\n\tif (funcName == 'setItemPath') {\n\t\tthis.setItemPath(obj);\n\t} else {\n\t\treturn pebble.libs.standard.ReferenceArray.superClass_.executeMethod.call(this, funcName, obj);\n\t}\n\treturn ret;\n};\n/**\n * @param {pebble.Pebble} obj1\n */\npebble.libs.standard.ReferenceArray.prototype.setItemPath = function(obj1) {\n\tvar path =  obj1.getParams().get('path');\n//\tif (path != null && path.getRef('.') != null && path.getRef('.').contains('null')) {\n\tvar controlItem = this.getOriginInfo('model').get();\n\tcontrolItem.set('_nodeInfo.type.arrayFormId.itemPath', path);\n\tvar arrayFormId = controlItem.get('_nodeInfo.type.arrayFormId');\n\tthis.loadInnerControls(arrayFormId);\n//\t}\n\tobj1.callback();\n};\n/**\n * @param {boolean} setSilent\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.ReferenceArray.prototype.setControlDataToModel = function (setSilent, cb) {\n\n\n\t//var data = new pebble.Pebble();\n\t//var innerArrayOriginInfo = this.getOriginInfo('innerArray');\n\t//var map = innerArrayOriginInfo.getSelectedSet();\n\t//var innerArray = innerArrayOriginInfo.get();\n\t//var basePath = innerArrayOriginInfo.getBasePath();\n\t////requires all\n\t//for (var key in map) {\n\t\t//var rec = map[key];\n\t\t//data.set(rec.getTagName(), rec.get('_config'));\n\t\t//data.setRef(rec.getTagName(), basePath + '.' + rec.getTagName());\n\t//}\n\n\t//this.getOriginInfo('model').set(data, this, setSilent);\n\tcb();\n};\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/ReferenceArray.js"},{"key":"ext","val":"js"}]},{"key":"ReferenceTextInput","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends{pebble.libs.standard.TextInputBase}\n */\npebble.libs.standard.ReferenceTextInput = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.TextInputBase.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.ReferenceTextInput, pebble.libs.standard.TextInputBase);\n/**\n * @override\n */\npebble.libs.standard.ReferenceTextInput.prototype.onReady = function () {\n\t\n\tthis.element.type = 'text';\n\tthis.element.placeholder = 'path.to.data';\n\tthis.setControl();\n\tthis.setLoaded();\n\n};\n\npebble.libs.standard.ReferenceTextInput.prototype.setControl = function() {\n\tvar text = this.getOriginInfo('model').getRef();\n\tif (text == null) {\n\t\ttext = '';\n\t}\n\n\tthis.element.value = text;\n};\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {string} path\n * @param {string} relPath\n * @return {boolean}\n * @override\n */\npebble.libs.standard.ReferenceTextInput.prototype.onDataModelChanged = function(source, path, relPath, cb) {\n\tif (this != source && path == 'model') {\n\t\tthis.setControl();\n\t} \n\tcb();\n\treturn false;\n};\n/**\n * @param {boolean} setSilent\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.ReferenceTextInput.prototype.setControlDataToModel = function(setSilent, cb) {\n\tvar data = new pebble.Pebble();\n\tdata.setRef('.', this.element.value);\n\tthis.getOriginInfo('model').set(data, this, setSilent, cb);\n};\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/ReferenceTextInput.js"},{"key":"ext","val":"js"}]},{"key":"RichTextEditor","val":[{"key":"devCode","val":"/**\n * see http://code.google.com/p/google-web-toolkit/source/search?q=richtextarea&origq=richtextarea&btnG=Search+Trunk\n * https://developer.mozilla.org/en-US/docs/Rich-Text_Editing_in_Mozilla\n * http://msdn.microsoft.com/en-us/library/ms537834(VS.85).aspx\n * @constructor\n * @extends {pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.RichTextEditor = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n\n\t/**\n\t * Holds a cached copy of any user setHTML/setText/setEnabled actions until\n\t * the real text area is fully initialized.  Becomes <code>null</code> after\n\t * init.\n\t * @type {Element}\n\t */\n\tthis.beforeInitPlaceholder = document.createElement('div');\n\n\t/**\n\t * Set to true when the RichTextArea is attached to the page and\n\t * initElement() is called.  If the RichTextArea is detached\n\t * before onElementInitialized() is called, this will be set to\n\t * false.  See issue 1897 for details.\n\t * @type {boolean}\n\t */\n\tthis.initializing;\n\n\t/**\n\t * Indicates that the text area should be focused as soon as it is loaded.\n\t * @type {boolean}\n\t */\n\tthis.isPendingFocus;\n\n\t/**\n\t * True when the element has been attached.\n\t * @type {boolean}\n\t */\n\tthis.isReady = false;\n\n\t//Dynamically create an iframe and place the editable content within that iframe's document\n\tthis.elem = document.createElement('iframe');\n\tthis.elem.setAttribute('style', 'height: 400px;');\n\n\tthis.elem.setAttribute('tabindex', '0');\n\tthis.elem.setAttribute('class', 'pebble-form');\n\tthis.element.appendChild(this.elem);\n\t// Most browsers don't like setting designMode until slightly _after_\n\t// the iframe becomes attached to the DOM. Any non-zero timeout will do\n\t// just fine.\n\tvar that = this;\n\tthis.onElementInitializing();\n\tsetTimeout(function() {\n\t\t// Turn on design mode.\n\t\tif (that.elem.contentEditable) {\n\t\t\tthat.elem.contentEditable = true;\n\t\t} \n\n\t\tthat.elem.contentWindow.document.designMode = 'On';\n\n\t\t// Send notification that the iframe has reached design mode.\n\t\tthat.setLoaded();\n\t}, 100);\n};\n\npebble.inherits(pebble.libs.standard.RichTextEditor, pebble.libs.standard.ClientControl);\n\n/**\n * @override\n */\npebble.libs.standard.RichTextEditor.prototype.onReady = function () {\n\n//\tkeydown, keyup, keypress, mousedown, mouseup, mousemove, mouseover, mouseout, click, focus, blur\n\n\tvar that = this;\n//\tthis.elem.contentWindow.addEventListener('keyup' , function(e) {\n//\tthat.exec('onKeyUp', null, null);\n//\t}, false); //true?\n//\tthis.elem.contentWindow.addEventListener('focus' , function(e) {\n//\tif (that.isFocused) {\n//\t//do nothing\n//\t} else {\n//\t//do something\n\n\n//\tthat.isFocused = true;\n//\t}\n\n//\t}, false); //true?\n//\tthis.elem.contentWindow.addEventListener('blur' , function(e) {\n//\tif (!that.isFocused) {\n//\t//do nothing\n//\t} else {\n//\t//do something \n\n//\tthat.isFocused = false;\n//\t}\n//\t}, false); //true?\n\n\n\tvar text = this.getOriginInfo('model').getValue();\n\tif (text == null) {\n\t\ttext = '';\n\t}\n\tthis.setHTML(text);\n\tthis.setLoaded();\n};\npebble.libs.standard.RichTextEditor.prototype.onElementInitialized = function() {\n\t// Issue 1897: This method is called after a timeout, during which time the\n\t// element might by detached.\n\tif (!this.initializing) {\n\t\treturn;\n\t}\n\tthis.initializing = false;\n\tthis.isReady = true;\n\n\t// When the iframe is ready, ensure cached content is set.\n\tif (this.beforeInitPlaceholder != null) {\n\t\tthis.setHTMLImpl(this.beforeInitPlaceholder.innerHTML);\n\t\tthis.setEnabledImpl(this.isEnabled());\n\t\tthis.beforeInitPlaceholder = null;\n\t}\n\n\t//super.onElementInitialized();\n\n\t// Focus on the element now that it is initialized\n\tif (this.isPendingFocus) {\n\t\tthis.isPendingFocus = false;\n\t\tthis.setFocus(true);\n\t}\n};\n\npebble.libs.standard.RichTextEditor.prototype.onElementInitializing = function() {\n\tthis.initializing = true;\n\tthis.isPendingFocus = false;\n};\n\npebble.libs.standard.RichTextEditor.prototype.uninitElement = function() {\n\tthis.isReady = false;\n\n\t// Issue 1897: initElement uses a timeout, so its possible to call this\n\t// method after calling initElement, but before the event system is in\n\t// place.\n\tif (this.initializing) {\n\t\tthis.initializing = false;\n\t\treturn;\n\t}\n\n\t// Unhook all custom event handlers when the element is detached.\n\t//this.unhookEvents();\n\n\t// Recreate the placeholder element and store the iframe's contents and the\n\t// enabled status in it. This is necessary because some browsers will wipe\n\t// the iframe's contents when it is removed from the DOM.\n\tvar html = this.getHTML();\n\tvar enabled = this.isEnabled();\n\tthis.beforeInitPlaceholder = document.createElement('div');\n\tthis.beforeInitPlaceholder.innerHTML = html;\n\tthis.setEnabled(enabled);\n};\n\n/**\n * @return {string}\n */\npebble.libs.standard.RichTextEditor.prototype.getHTMLImpl = function() {\n\treturn this.elem.contentWindow.document.body.innerHTML;\n};\n/**\n * @return {string}\n */\npebble.libs.standard.RichTextEditor.prototype.getTextImpl = function() {\n\treturn this.elem.contentWindow.document.body.textContent;\n};\n\n/**\n * @return {boolean}\n */\npebble.libs.standard.RichTextEditor.prototype.isEnabledImpl = function() {\n\treturn this.elem.contentWindow.document.designMode.toUpperCase() == 'ON';\n};\n\npebble.libs.standard.RichTextEditor.prototype.setEnabledImpl = function(enabled) {\n\tthis.elem.contentWindow.document.designMode = enabled ? 'On' : 'Off';\n};\n\n/**\n * @param {boolean} focused\n */\npebble.libs.standard.RichTextEditor.prototype.setFocusImpl = function(focused) {\n\tif (focused) {\n\t\tthis.elem.contentWindow.focus();\n\t} else {\n\t\tthis.elem.contentWindow.blur();\n\t}\n};\n\n/**\n * @param {string} html\n */\npebble.libs.standard.RichTextEditor.prototype.setHTMLImpl = function(html) {\n\tthis.elem.contentWindow.document.body.innerHTML = html;\n};\n/**\n * @param {string} text\n */\npebble.libs.standard.RichTextEditor.prototype.setTextImpl = function(text) {\n\tthis.elem.contentWindow.document.body.textContent = text;\n};\n\n/**\n * @param {string} cmd\n * @return {boolean}\n */\npebble.libs.standard.RichTextEditor.prototype.queryCommandState = function(cmd) {\n\tif (this.isReady) {\n\t\t// When executing a command, focus the iframe first, since some commands\n\t\t// don't take properly when it's not focused.\n\t\tthis.setFocus(true);\n\t\ttry {\n\t\t\treturn this.queryCommandStateAssumingFocus(cmd);\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn false;\n};\n\n/**\n * @param {string} cmd\n * @return {boolean}\n */\npebble.libs.standard.RichTextEditor.prototype.queryCommandStateAssumingFocus = function(cmd) {\n\treturn !!this.elem.contentWindow.document.queryCommandState(cmd);\n};\n\n/**\n * @param {string} cmd\n * @return {string}\n */\npebble.libs.standard.RichTextEditor.prototype.queryCommandValue = function(cmd) {\n\tif (this.isReady) {\n\t\t// When executing a command, focus the iframe first, since some commands\n\t\t// don't take properly when it's not focused.\n\t\tthis.setFocus(true);\n\t\ttry {\n\t\t\treturn this.queryCommandValueAssumingFocus(cmd);\n\t\t} catch (e) {\n\t\t\treturn '';\n\t\t}\n\t}\n\treturn '';\n};\n\n/**\n * @param {string} cmd\n * @return {string}\n */\npebble.libs.standard.RichTextEditor.prototype.queryCommandValueAssumingFocus = function(cmd) {\n\treturn this.elem.contentWindow.document.queryCommandValue(cmd);\n};\n\n/**\n * @return {string}\n */\npebble.libs.standard.RichTextEditor.prototype.getHTML = function() {\n\treturn this.beforeInitPlaceholder == null ? this.getHTMLImpl() : this.beforeInitPlaceholder.innerHTML;\n};\n/**\n * @return {string}\n */\npebble.libs.standard.RichTextEditor.prototype.getText = function() {\n\treturn this.beforeInitPlaceholder == null ? this.getTextImpl() : this.beforeInitPlaceholder.textContent; //text???\n};\n\n\n/**\n * @return {boolean}\n */\npebble.libs.standard.RichTextEditor.prototype.isEnabled = function() {\n\treturn this.beforeInitPlaceholder == null ? this.isEnabledImpl() : !this.beforeInitPlaceholder.disabled;\n};\n\n/**\n * @param {boolean} enabled\n */\npebble.libs.standard.RichTextEditor.prototype.setEnabled = function(enabled) {\n\tif (this.beforeInitPlaceholder == null) {\n\t\tthis.setEnabledImpl(enabled);\n\t} else {\n\t\tthis.beforeInitPlaceholder.disabled = !enabled;\n\t}\n};\n\n/**\n * @param {boolean} focused\n */\npebble.libs.standard.RichTextEditor.prototype.setFocus = function(focused) {\n\tif (this.initializing) {\n\t\t// Issue 3503: if we focus before the iframe is in design mode, the text\n\t\t// caret will not appear.\n\t\tthis.isPendingFocus = focused;\n\t} else {\n\t\tthis.setFocusImpl(focused);\n\t}\n};\n\n/**\n * @param {string} html\n */\npebble.libs.standard.RichTextEditor.prototype.setHTML = function(html) {\n\tif (this.beforeInitPlaceholder == null) {\n\t\tthis.setHTMLImpl(html);\n\t} else {\n\t\tthis.beforeInitPlaceholder.innerHTML = html;\n\t}\n};\n\n/**\n * @param {string} text\n */\npebble.libs.standard.RichTextEditor.prototype.setText = function(text) {\n\tif (this.beforeInitPlaceholder == null) {\n\t\tthis.setTextImpl(text);\n\t} else {\n\t\tthis.beforeInitPlaceholder.text = text; //???\n\t}\n};\n/**\n * @param {string} funcName\n * @param {pebble.Pebble} obj\n * @return {number}\n * @override\n */\npebble.libs.standard.RichTextEditor.prototype.executeMethod = function(funcName, obj) {\n\tvar ret = 1;\n\t//list all ui public methods\n\tif (funcName == 'setBackColor') {\n\t\tthis.setBackColor(obj);\n\t} else if (funcName == 'setForeColor') {\n\t\tthis.setForeColor(obj);\n\t} else if (funcName == 'toggleBold') {\n\t\tthis.toggleBold(obj);\n\t} else if (funcName == 'toggleItalic') {\n\t\tthis.toggleItalic(obj);\n\t} else if (funcName == 'toggleUnderline') {\n\t\tthis.toggleUnderline(obj);\n\t} else if (funcName == 'toggleSubscript') {\n\t\tthis.toggleSubscript(obj);\n\t} else if (funcName == 'toggleSuperscript') {\n\t\tthis.toggleSuperscript(obj);\n\t} else if (funcName == 'toggleStrikethrough') {\n\t\tthis.toggleStrikethrough(obj);\n\t} else if (funcName == 'setLeftJustification') {\n\t\tthis.setLeftJustification(obj);\n\t} else if (funcName == 'setCenterJustification') {\n\t\tthis.setCenterJustification(obj);\n\t} else if (funcName == 'setRightJustification') {\n\t\tthis.setRightJustification(obj);\n\t} else if (funcName == 'undo') {\n\t\tthis.undo(obj);\n\t} else if (funcName == 'redo') {\n\t\tthis.redo(obj);\n\t} else if (funcName == 'indentLeft') {\n\t\tthis.indentLeft(obj);\n\t} else if (funcName == 'indentRight') {\n\t\tthis.indentRight(obj);\n\t} else if (funcName == 'insertHorizontalRule') {\n\t\tthis.insertHorizontalRule(obj);\n\t} else if (funcName == 'insertImage') {\n\t\tthis.insertImage(obj);\n\t} else if (funcName == 'insertOrderedList') {\n\t\tthis.insertOrderedList(obj);\n\t} else if (funcName == 'insertUnorderedList') {\n\t\tthis.insertUnorderedList(obj);\n\t} else if (funcName == 'insertHTML') {\n\t\tthis.insertHTML(obj);\n\t} else if (funcName == 'insertCustomHTML') {\n\t\tthis.insertCustomHTML(obj);\n\t} else {\n\t\treturn pebble.libs.standard.RichTextEditor.superClass_.executeMethod.call(this, funcName, obj);\n\t}\n\treturn ret;\n};\n\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.setBackColor = function(obj) {\n\tvar params = obj.getParams();\n\tthis.execCommand('BackColor', params.getValue('backColor'));\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.setForeColor = function (obj) {\n\tvar params = obj.getParams();\n\tthis.execCommand('ForeColor', params.getValue('foreColor'));\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.setFontSize = function(obj) {\n\tvar params = obj.getParams();\n\tvar size = params.getRef('fontSize');\n\tthis.execCommand('FontSize', size);\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.setForeName = function(obj) {\n\tvar params = obj.getParams();\n\tthis.execCommand('FontName', params.getRef('fontName'));\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.toggleBold = function (obj) {\n\tthis.execCommand('Bold', 'false');\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.toggleItalic = function(obj) {\n\tthis.execCommand('Italic', 'false');\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.toggleUnderline = function (obj) {\n\tthis.execCommand('Underline', 'False');\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.toggleSubscript = function(obj) {\n\tthis.execCommand('Subscript', 'false');\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.toggleSuperscript = function(obj) {\n\tthis.execCommand('Superscript', 'false');\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.toggleStrikethrough = function(obj) {\n\tthis.execCommand('Strikethrough', 'false');\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.setLeftJustification = function(obj) {\n\tthis.execCommand('JustifyLeft', null);\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.setCenterJustification = function(obj) {\n\tthis.execCommand('JustifyCenter', null);\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.setRightJustification = function(obj) {\n\tthis.execCommand('JustifyRight', null);\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.setFullJustification = function(obj) {\n\tthis.execCommand('JustifyFull', null);\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.indentLeft = function(obj) {\n\tthis.execCommand('Outdent', null);\n\tobj.getCallback();\n};\npebble.libs.standard.RichTextEditor.prototype.indentRight = function(obj) {\n\tthis.execCommand('Indent', null);\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.insertHorizontalRule = function(obj) {\n\tthis.execCommand('InsertHorizontalRule', null);\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.insertImage = function(obj) {\n\tvar params = obj.getParams();\n\tthis.execCommand('InsertImage', params.getValue('url'));\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\t \t\t\npebble.libs.standard.RichTextEditor.prototype.insertOrderedList = function(obj) {\n\tthis.execCommand('InsertOrderedList', null);\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.insertUnorderedList = function(obj) {\n\tthis.execCommand('InsertUnorderedList', null);\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.undo = function(obj) {\n\tthis.execCommand('Undo', 'false');\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.redo = function(obj) {\n\tthis.execCommand('Redo', 'false');\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.createLink = function(obj) {\n\tvar params = obj.getParams();\n\n\tthis.execCommand('CreateLink', params.getValue('url'));\n\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.removeLink = function(obj) {\n\tvar params = obj.getParams();\n\tthis.execCommand('Unlink', 'false');\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.removeFormat = function(obj) {\n\tvar params = obj.getParams();\n\tthis.execCommand('RemoveFormat', null);\n\tobj.getCallback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.insertHTML = function(obj) {\n\tvar params = obj.getParams();\n\n\tthis.execCommand('InsertHTML', '<table width=\"100%\" border=\"1\"><tr><td><b>great my own html</b></td><td width=\"400px\"></td></tr><tr><td><b>blah blah</b></td><td width=\"400px\"></td></tr></table>');\n\n\n\tobj.getCallback();\n};\n/**\n * This allow you to set predefined templates using eventData to set the item\n * ex. getOverlay() with control to get item you need.  That control needs a onSetFunc that is where insertCustomHTML can be called here using eventData \n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.RichTextEditor.prototype.insertCustomHTML = function(obj) {\n\tvar params = obj.getParams();\n\tvar htmlTemplate = params.getValue('template') || '';\n\tvar item = params.get('item');\n\tvar html = this.formatText(item, htmlTemplate);\n\n\tthis.execCommand('InsertHTML', '<table width=\"100%\" border=\"1\"><tr><td><b>great my own html</b></td><td width=\"400px\"></td></tr><tr><td><b>blah blah</b></td><td width=\"400px\"></td></tr></table>');\n\n\tobj.getCallback();\n};\n/**\n * @param {string} cmd\n * @param {?string} param\n */\npebble.libs.standard.RichTextEditor.prototype.execCommand = function (cmd, param) {\n\t// When executing a command, focus the iframe first, since some commands\n\t// don't take properly when it's not focused.\n\tthis.setFocus(true);\n\ttry {\n\t\tthis.elem.contentWindow.document.execCommand(cmd, false, param);\n\n\t} catch (e) {\n\t\t// In mozilla, editing throws a JS exception if the iframe is\n\t\t// *hidden, but attached*.\n\t}\n};\npebble.libs.standard.RichTextEditor.prototype.selectAll = function() {\n\tthis.execCommand('SelectAll', null);\n};\n/**\n * @return {string}\n */\npebble.libs.standard.RichTextEditor.prototype.getBackColor = function() {\n\treturn this.queryCommandValue('BackColor');\n};\n/**\n * @return {string}\n */\npebble.libs.standard.RichTextEditor.prototype.getForeColor = function() {\n\treturn this.queryCommandValue('ForeColor');\n};\n/**\n * @return {boolean}\n */\npebble.libs.standard.RichTextEditor.prototype.isBold = function() {\n\treturn this.queryCommandState('Bold');\n};\n/**\n * @return {boolean}\n */\npebble.libs.standard.RichTextEditor.prototype.isItalic = function() {\n\treturn this.queryCommandState('Italic');\n};\n/**\n * @return {boolean}\n */\npebble.libs.standard.RichTextEditor.prototype.isStrikethrough = function() {\n\treturn this.queryCommandState('Strikethrough');\n};\n/**\n * @return {boolean}\n */\npebble.libs.standard.RichTextEditor.prototype.isSubscript = function() {\n\treturn this.queryCommandState('Subscript');\n};\n/**\n * @return {boolean}\n */\npebble.libs.standard.RichTextEditor.prototype.isSuperscript = function() {\n\treturn this.queryCommandState('Superscript');\n};\n/**\n * @return {boolean}\n */\npebble.libs.standard.RichTextEditor.prototype.isUnderlined = function() {\n\treturn this.queryCommandState('Underline');\n};\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {string} field\n * @param {string} relPath\n * @param {Function} cb\n * @return {boolean}\n * @override\n */\npebble.libs.standard.RichTextEditor.prototype.onDataModelChanged = function(source, field, relPath, cb) {\n\tif (this != source ) {\n\t\tif (field == 'model') {\n\t\t\tthis.setHTML(this.getOriginInfo('model').get().getValue('.') || '');\n\t\t} else if (field == 'isBold') {\n\t\t\tthis.execCommand('Bold', 'false');\n\t\t} else if (field == 'isItalic') {\n\t\t\tthis.execCommand('Italic', 'false');\n\t\t} else if (field == 'isUnderline') {\n\t\t\tthis.execCommand('Underline', 'false');\n\t\t} else if (field == 'isSubscript') {\n\t\t\tthis.execCommand('Subscript', 'false');\n\t\t} else if (field == 'isSuperscript') {\n\t\t\tthis.execCommand('Superscript', 'false');\n\t\t} else if (field == 'isStrikethrough') {\n\t\t\tthis.execCommand('Strikethrough', 'false');\n\t\t} \n\n\t}\n\tcb();\n\treturn false;\n};\n/**\n * @param {boolean} setSilent\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.RichTextEditor.prototype.setControlDataToModel = function(setSilent, cb) {\n\tvar data = new pebble.Pebble();\n\tdata.setValue('.', this.getHTML());\n\tthis.getOriginInfo('model').set(data, this, setSilent, cb);\n};\n\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/RichTextEditor.js"},{"key":"ext","val":"js"}]},{"key":"SearchInput","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends{standard.TextInputBase}\n */\npebble.libs.standard.SearchInput = function(moduleAccess, dm, isLoadTop) {\n\tstandard.TextInputBase.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.SearchInput, pebble.libs.standard.TextInputBase);\n\npebble.libs.standard.SearchInput.prototype.onReady = function () {\n\tpebble.libs.pebble.libs.standard.SearchInput.superClass_.onReady.call(this)\n\tthis.textBox.type = 'search';\n\tthis.setLoaded();\n};\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/SearchInput.js"},{"key":"ext","val":"js"}]},{"key":"StackPanel","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends {pebble.libs.standard.ArrayTreeBase}\n */\npebble.libs.standard.StackPanel = function(moduleAccess, dm, isLoadTop) {\n\n\tpebble.libs.standard.ArrayTreeBase.call(this, moduleAccess, dm, isLoadTop);\n\n\t/**\n\t * @type {boolean}\n\t */\n\tthis.isListContainer = true;\n\tthis.currentMeta = null; //must manage its own currentMeta because when it is notified the origin meta has already changed\n\t\n\t//bind to self so that evaluateHistory and other stuff can call you direct\t\n\tvar originInfo = this.getOriginInfo('model');\n\toriginInfo.subscribe(this.moduleAccess.getId(), 'model', true);\n\n};\n\npebble.inherits(pebble.libs.standard.StackPanel, pebble.libs.standard.ArrayTreeBase);\n\n/**\n * @override\n */\npebble.libs.standard.StackPanel.prototype.onReady = function() {\n\n\tthis.setLoaded();\t\n\n};\n/**\n * instWins loads all slots (w/wins) and renders item in page \n * @override\n */\npebble.libs.standard.StackPanel.prototype.instWins = function () {\n  var that = this;\n  this.preload(function() {\n    that._instWins();\n  });\n};\npebble.libs.standard.StackPanel.prototype.preload = function (cb) {\n  if (this.preloaded) {\n    cb();\n  } else {\n    this.preloaded = true;\n    var originInfo = this.getOriginInfo('model');\n    var slots = originInfo.getRecords();\n    var count = slots.length;\n    if (count > 0) {\n      for (var i = 0; i < slots.length; i++) {\n        var slot = slots[i];\n        var preload = slot.get('preload');\n        if (preload) {\n          var async = preload.getBool('async');\n          if (async) {\n\n            this.getModuleIfNotCreated_Roll(slot.getTagName(), true, false, function() { });\n            cb();\n\n          } else {\n            var that = this;\n            this.getModuleIfNotCreated_Roll(slot.getTagName(), true, false, function() {\n              count -= 1;                               \n              if (count == 0) {\n                cb();\n              }\n            });\n          }\n        } else {\n          count -= 1;\n          if (count == 0) {\n            cb();\n          }\n        }\n      }\n    } else {\n      cb();\n    }\n  }\n};\npebble.libs.standard.StackPanel.prototype._instWins = function () {\n  var originInfo = this.getOriginInfo('model');\n  var slotsPeb = originInfo.get();\n\n\tvar initModule = this.getOriginInfo('initModule').getRef();\n\t//var meta = this.getSingleSelectedMeta();\n\tif (initModule != null) {// && meta == null) {\n\t\t//add 1 to load top\n\t\tthis.loadManager.increaseRegisterTopChildModsCount(1);\n\n\t\t//usually tabs will put their model in the origin, but if they are not\n\t\t//rendered yet, or won't be then put this model in as silent.  If there are\n\t\t//tabs it will just clobber \n\t\tif (slotsPeb == null) {\n\t\t\t\n\t\t\toriginInfo.set(this.get('model'), this, true);\n\t\t\tslotsPeb = originInfo.get();\n\n\t\t}\n\n\t\tif (slotsPeb != null) {\n\t\t\tvar slot = slotsPeb.get(initModule);\n\t\t\tthis.currentMeta = initModule;\n\t\t\tthis.getModuleIfNotCreated_Roll(initModule, false, true, null);\n\t\t\tthis.setSelectedItem(initModule); //setSilent is better???\n\t\t}\n\t}\n};\n/**\n * @param {string} relativeMeta\n * @param {boolean} isLoadTop\n * @param {Function} cb\n */\npebble.libs.standard.StackPanel.prototype.getModuleIfNotCreated_Roll = function(relativeMeta, isLoadTop, useLoadEvent, cb) {\n  var that = this;\n  this.preload(function() {\n    that._getModuleIfNotCreated_Roll(relativeMeta, isLoadTop, useLoadEvent, cb);\n  });\n};\npebble.libs.standard.StackPanel.prototype._getModuleIfNotCreated_Roll = function(relativeMeta, isLoadTop, useLoadEvent, cb) {\n\n  //layoutStateManager uses loadEvent{\n  if (useLoadEvent) {\n    this.loadEvent = new pebble.libs.standard.Event();\n  }\n\n\tvar slots = this.get('model');\n\tvar slot = slots.get(relativeMeta);\n\t\n\tvar panelCtrl = new pebble.Pebble();\n\tpanelCtrl.setRef('.', pebble.shared.TypeReferences.ControlBase.CONTROL_BASE);\n\tvar innerMarkup = slot.get('innerMarkup');\n\tpanelCtrl.set('innerMarkup', innerMarkup);\n\tpanelCtrl.setRef('model._bind', 'model');\n\tpanelCtrl.setTrue('isListContainer');//not a stackpanel\n\n\tvar ss = new pebble.Pebble(slot.getTagName());\n\tss.set('control', panelCtrl);\n\n\tvar mod = this.modules[relativeMeta];\n\tif (mod == null) {\n\n\t\tvar containerEle = document.createElement('div');\n\t\tthis.element.appendChild(containerEle);\n\n\t\tmod = this.createModuleWithEdm(ss, containerEle);\n\t}\n\n\tif (mod.getClientControl() == null) {\n\t\tvar that = this;\n\t\tmod.rollItem(panelCtrl, isLoadTop, function() {\n\t\t\tcb && cb();\n      if (useLoadEvent) {\n        that.loadEvent.fire(null);\n        that.loadEvent = null;\n      }\n\t\t});\n\t} else {\n\t\tcb && cb();\n    if (useLoadEvent) {\n      this.loadEvent.fire(null);\n      this.loadEvent = null;\n    }\n\t}\n};\n\n//Service Layer\n\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {string} field\n * @param {string} relPath\n * @param {Function} cb\n * @return {boolean}\n * @override\n */\npebble.libs.standard.StackPanel.prototype.onDataModelChanged = function(source, field, relPath, cb) {\n\tvar that = this;\n\tpebble.libs.standard.StackPanel.superClass_.onDataModelChanged.call(this, source, field, relPath, function() {\n\t\tvar model = that.getOriginInfo('model').getCreateOnNull()\n\t\tif (relPath.indexOf('singleSelectedMeta') != -1 && relPath.split('.').length == 3 ){\t//not collections with/in collections\n\t\t\tvar relMeta = model.getRef(relPath);\n\t\t\tif (relMeta != null) {\n\t\t\t\t\t\n\t\t\t\t//stack panel must also bring the selected module to the front\n\t\t\t\tthat.getModuleIfNotCreated_Roll(relMeta, true, true, function(){\n\t\t\t\n\t\t\t\t\tif (relMeta != null) {\t\n\t\t\t\t\t\tthat.showElement(relMeta);\n\t\t\t\t\t\tthat.currentMeta = relMeta;\n\t\t\t\t\t}\n\t\t\t\t\tcb();\n\t\t\t\t});\n\n\t\t\t} else {\n\t\t\t\tcb();\n\t\t\t}\n\t\t} else {\n\t\t\tcb();\n\t\t}\n\t});\n\treturn false;\n};\n/**\n * override this\n * @param {string} relMeta\n */\npebble.libs.standard.StackPanel.prototype.showElement = function(relMeta) {\n\n\tif (this.getOriginInfo('autoHeight').getBool()) {\n\n\t\tif (this.currentMeta != null) {\n\n\t\t\tthis.modules[this.currentMeta].element.style.display = 'none';\n\n\t\t}\n\t\tif (relMeta != null) {\n\t\t\tvar mod = this.getModules()[relMeta];\n\t\t\tmod.element.style.display = 'block';\n\t\t}\n\n\t} else {\t\n\t\tif (this.currentMeta != null) {\n\n\t\t\tthis.modules[this.currentMeta].element.className = 'listStackPanelhide';\n\t\t\tthis.modules[this.currentMeta].element.style.zIndex = 0; //done because aceEditor was poping thru settings its own z-index\n\n\t\t}\n\t\tif (relMeta != null) {\n\t\t\tvar mod = this.getModules()[relMeta];\n\t\t\tmod.element.className = 'listStackPanelshow';\n\t\t\tmod.element.style.zIndex = 10;\n\t\t}\n\t}\n};\n\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/StackPanel.js"},{"key":"ext","val":"js"},{"key":"testCode","val":"\nvar topApp;\n\ndescribe('testStackPanel', function () {\n\n\tfunction getBaseInnerMarkup() {\n\t\tvar text1 = new pebble.Pebble();\n\t\ttext1.setRef('.', 'standard:Text');\n\t\ttext1.set('dummy', new pebble.Pebble());\n\n\t\tvar text2 = new pebble.Pebble();\n\t\ttext2.setRef('.', 'standard:Text');\n\t\ttext2.set('dummy', new pebble.Pebble());\n\n\t\tvar sp = new pebble.Pebble();\n\t\tsp.setRef('.', 'standard:StackPanel');\n\t\tsp.set('model.text1.innerMarkup.div.control', text1);\n\t\tsp.set('model.text2.innerMarkup.div.control', text2);\n\n\t\tvar innerMarkup = new pebble.Pebble();\n\t\tinnerMarkup.set('control', sp);\n\n\t\treturn innerMarkup;\n\t}\n\n\tfunction getNestedStackPanel() {\n\t\tvar text1 = new pebble.Pebble();\n\t\ttext1.setRef('.', 'standard:Text');\n\t\ttext1.set('dummy', new pebble.Pebble());\n\n\t\tvar text2 = new pebble.Pebble();\n\t\ttext2.setRef('.', 'standard:Text');\n\t\ttext2.set('dummy', new pebble.Pebble());\n\n\t\tvar sp = new pebble.Pebble();\n\t\tsp.setRef('.', 'standard:StackPanel');\n\t\tsp.set('model.text1.innerMarkup.div.control', text1);\n\t\tsp.set('model.text2.innerMarkup.div.control', text2);\n\t\t\n\t\tvar topSp = new pebble.Pebble();\n\t\ttopSp.setRef('.', 'standard:StackPanel');\n\t\ttopSp.set('model.sp.innerMarkup.div.control', sp);\n\n\t\tvar innerMarkup = new pebble.Pebble();\n\t\tinnerMarkup.set('control', topSp);\n\n\t\treturn innerMarkup;\n\t}\n\n\n\tit ('requires deployment and testAppControl', function() {\n\t\tvar ready = false;\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\ttopApp && topApp.kill();\n\t\t\t\ttopApp = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top');\n\t\t\t\ttopApp.load(function() {\n\t\t\t\t\tready = true;\t\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn ready;\n\t\t}, 'wait for deployment and testAppControl', 300);\n\n\t});\n\n\tit ('should not load it children unless specified to', function() {\n\n\t\tvar innerMarkup = getBaseInnerMarkup();\t\n\t\tvar dm = topApp.item;\n\t\tdm.set('innerMarkup', innerMarkup);\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\tvar stackPanel = topApp.item.modules['childmod0'].item; \n\t\t\texpect(Object.keys(topApp.item.loadManager.cCMs).length).toEqual(1); //all mods should report to top\n\t\t\texpect(Object.keys(stackPanel.modules).length).toEqual(0); \n\n\t\t\tvar ctxs = topApp.item.getChildCtxs([], 'bot2Top', true, true);\n\t\t\texpect(ctxs.length).toEqual(1);\n\t\t\tvar ctxs = topApp.item.getChildCtxs([], 'bot2Top', true, false);\n\t\t\texpect(ctxs.length).toEqual(0);\n\t\t});\n\t});\n\n\tit ('should load child specified by initModule', function() {\n\n\t\tvar innerMarkup = getBaseInnerMarkup();\t\n\t\tinnerMarkup.setRef('control.initModule', 'text2');\n\n\t\tvar dm = topApp.item;\n\t\tdm.set('innerMarkup', innerMarkup);\n\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\tvar stackPanel = topApp.item.modules['childmod0'].item;//auto created list container \n\t\t\texpect(Object.keys(topApp.item.loadManager.cCMs).length).toEqual(3); //all mods should report to top\n\t\t\texpect(Object.keys(stackPanel.modules).length).toEqual(1); \n\n\t\t\tvar ctxs = topApp.item.getChildCtxs([], 'bot2Top', true, true);\n\t\t\texpect(ctxs.length).toEqual(3);\n\t\t\tvar ctxs = topApp.item.getChildCtxs([], 'bot2Top', true, false);\n\t\t\texpect(ctxs.length).toEqual(1);\n\t\t});\n\t});\n\n\tit ('should load child by setSelectedItem as top', function() {\n\n\t\tvar stackPanel = topApp.item.modules['childmod0'].item; \n\t\truns(function() {\n\t\t\tstackPanel.setSelectedItem('text1');\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn stackPanel.modules['text1'] && stackPanel.modules['text1'].item && stackPanel.modules['text1'].item.loadManager.ctxLoaded;\n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\texpect(Object.keys(stackPanel.modules).length).toEqual(2); \n\n\t\t\t//the top now has 3 child ctx\n\t\t\tvar ctxs = topApp.item.getChildCtxs([], 'bot2Top', true, true);\n\t\t\texpect(ctxs.length).toEqual(5);\n\t\t\n\t\t});\n\t});\n\t//it ('should not load it children unless specified to (nestedStackPanel)', function() {\n\n\t\t//var innerMarkup = getNestedStackPanel();\t\n\t\t//var dm = topApp.item;\n\t\t//dm.set('innerMarkup', innerMarkup);\n\n\t\t//runs(function() {\n\t\t\t//topApp.item.loadManager.ctxLoaded = false;\n\t\t\t//topApp.getItem(dm);\n\t\t//});\n\n\t\t//waitsFor(function() {\n\t\t\t//return topApp.item.loadManager.ctxLoaded;\t \n\t\t//}, 'ctx did not load', 300);\n\n\t\t//runs(function() {\n\t\t\t//expect(Object.keys(topApp.item.loadManager.cCMs).length).toEqual(1); //only top sp should be there\n\t\t\t//var topStackPanel = topApp.item.modules['childmod0'].item; \n\t\t\t//expect(Object.keys(topStackPanel.modules).length).toEqual(0); \n\n\t\t\t//topStackPanel.setSelectedItem('sp', function() {\n\t\t\t\t\n\t\t\t\t//var stackPanel = topStackPanel.modules['sp'];\n\t\t\t\t//expect(Object.keys(stackPanel.modules).length).toEqual(0); \n\t\t\t\t//expect(Object.keys(topStackPanel.cCMs).length).toEqual(1);  //note the child sp does not register to pCM but rather topStackPanel (via proxyToContainerLoadTop)\n\t\t\t//});\n\t\t//});\n\t//});\n\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/controls/StackPanel.js"}]},{"key":"Text","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends{pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.Text = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.Text, pebble.libs.standard.ClientControl);\n\n/**\n * @override\n */\npebble.libs.standard.Text.prototype.onReady = function () {\n\tthis.tn = document.createTextNode('');\n\n\tthis.element.appendChild(this.tn);\n\n\tvar that = this;\n\tif (this.getOriginInfo('onClick').get() != null) {\n\t\tthis.tn.addEventListener('click', function(event) {\n\t\t\tthat.exec('onClick', null, null);\n\t\t}, false);\n\t}\n\n\tthis.setText();\n\n\tthis.setLoaded();\n};\n\npebble.libs.standard.Text.prototype.setText = function() {\n\tvar text = this.getExpressionValue('model');\n\tif (text == null) {\n\t\ttext = '';\n\t} \n\tthis.tn.nodeValue = text;\n};\n\n/**\n * @override\n */\npebble.libs.standard.Text.prototype.onDataModelChanged = function(source, field, relPath, cb) {\n\tvar that = this;\n\tpebble.libs.standard.ArrayControl.superClass_.onDataModelChanged.call(this, source, field, relPath, function() {\n\n\t\tif (that != source && field == 'model') {\n\t\t\tthat.setText();\n\t\t} \n\t\tcb();\n\n\t});\n\treturn false;\n};\n\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/Text.js"},{"key":"ext","val":"js"}]},{"key":"TextArea","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends{pebble.libs.standard.TextInputBase}\n */\npebble.libs.standard.TextArea = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.TextInputBase.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.TextArea, pebble.libs.standard.TextInputBase);\n\npebble.libs.standard.TextArea.prototype.onReady = function () {\n\tpebble.libs.standard.TextArea.superClass_.onReady.call(this)\n\n\tthis.setLoaded();\n};\n\n/**\n * @param {boolean} setSilent\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.TextArea.prototype.setControlDataToModel = function(setSilent, cb) {\n\tvar data = new pebble.Pebble();\n\tdata.setMarkup('.', this.element.value);\n\tthis.getOriginInfo('model').set(data, this, setSilent);\n\tcb();\n\n};\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/TextArea.js"},{"key":"ext","val":"js"}]},{"key":"TextInput","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends{pebble.libs.standard.TextInputBase}\n */\npebble.libs.standard.TextInput = function(moduleAccess, dm, isLoadTop){\n\tpebble.libs.standard.TextInputBase.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.TextInput, pebble.libs.standard.TextInputBase);\n\npebble.libs.standard.TextInput.prototype.onReady = function () {\n\tpebble.libs.standard.TextInput.superClass_.onReady.call(this)\n\tthis.element.type = 'text';\n\n\tthis.setLoaded();\n};\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/TextInput.js"},{"key":"ext","val":"js"}]},{"key":"TextInputBase","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends{pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.TextInputBase = function(moduleAccess, dm, isLoadTop) {\n\tpebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.TextInputBase, pebble.libs.standard.ClientControl);\n\n/**\n * @override\n */\npebble.libs.standard.TextInputBase.prototype.onReady = function () {\n\n\n\n\tthis.setControl();\n\n\tvar that = this;\n\tif (this.getOriginInfo('onKeyUp').get() != null) {\n\t\tthis.element.addEventListener('keyup' , function(e) {\n\t\t\tthat.exec('onKeyUp', null, null);\n\t\t}, false); //true?\n\n\t}\n\n\t//if (this.getOriginInfo('onFocus').get() != null) {\n\tthis.element.addEventListener('focus' , function(e) {\n\t\tthat.placeholder = '';\n\t\tthat.exec('onFocus', null, null);\n\t}, false); //true?\n\t//}\n\n\tthis.element.addEventListener('blur' , function(e) {\n\t\tthat.exec('onBlur', null, null);\n\t}, false); //true?\n\n};\n\npebble.libs.standard.TextInputBase.prototype.setControl = function() {\n\tvar text = this.getOriginInfo('model').getValue();\n\tif (text == null) {\n\t\ttext = '';\n\t}\n\tthis.element.value = text;\n};\n/**\n * @override\n */\npebble.libs.standard.TextInputBase.prototype.onDataModelChanged = function(source, path, relPath, cb) {\n\tif (this != source && path == 'model') {\n\t\tthis.setControl();\n\t} \n\tcb();\n\treturn false;\n};\n/**\n * @param {string} funcName\n * @param {pebble.Pebble} obj\n * @return {number}\n * @override\n */\npebble.libs.standard.TextInputBase.prototype.executeMethod = function(funcName, obj) {\n\tvar ret = 1;\n\t//list all ui public methods\n\tif (funcName == 'setValue') {\n\t\tthis._setValue(obj);\n\t} else if (funcName == 'getText') {\n\t\tthis._getText(obj);\n\t} else if (funcName == 'setEnabled') {\n\t\tthis._setEnabled(obj);\n\t} else if (funcName == 'setDisabled') {\n\t\tthis._setDisabled(obj);\n\t} else {\n\t\treturn pebble.libs.standard.TextInputBase.superClass_.executeMethod.call(this, funcName, obj);\n\t}\n\treturn ret;\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.TextInputBase.prototype._setValue = function(obj) {\n\n\tvar params = obj.getParams();\n\tvar val = params.getValue('text');\n\tif (val != null) {\n\t\tthis.element.value = val;\n\t} \n\tobj.callback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.TextInputBase.prototype._getText = function(obj) {\n\tobj.setValue('.', this.element.value);\n\tobj.callback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.TextInputBase.prototype._setEnabled = function(obj) {\n\tthis.element.disabled = false;\n\tobj.callback();\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.TextInputBase.prototype._setDisabled = function(obj) {\n\tthis.element.disabled = false;\n\tobj.callback();\n};\n/**\n * @param {boolean} setSilent\n * @param {Function} cb\n * @override\n */\npebble.libs.standard.TextInputBase.prototype.setControlDataToModel = function(setSilent, cb) {\n\tvar data = new pebble.Pebble();\n\tdata.setValue('.', this.element.value);\n\tthis.getOriginInfo('model').set(data, this, setSilent, cb);\n};\n\n\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/TextInputBase.js"},{"key":"ext","val":"js"}]},{"key":"VideoExternal","val":[{"key":"devCode","val":"/**\n *  <video  width='300' height='200' controls autoplay>\n       <source src='/html5/foo.ogg' type='video/ogg' />\n       <source src='/html5/foo.mp4' type='video/mp4' />\n       Your browser does not support the <video> element.\n   </video>\n */\n/**\n * @constructor\n * @extends{pebble.client.ClientControl}\n */\npebble.libs.standard.VideoExternal = function(moduleAccess, dm, isLoadTop) {\n\tpebble.client.ClientControl.call(this, moduleAccess, dm, isLoadTop);\n};\n\npebble.inherits(pebble.libs.standard.VideoExternal, pebble.libs.standard.ClientControl);\n\npebble.libs.standard.VideoExternal.prototype.onReady = function () {\n\n\tthis.embVideo = document.createElement('video');\n\tthis.embVideo.setAttribute('autoplay', 'true');\n\n//\tthis.embVideo = document.createElement('div');\n//\tthis.embVideo.setAttribute('style', 'height: 390px; width: 640px');\n////\tString html = '<object style='height: 390px; width: 640px'>';\n////\thtml += '<param name='movie' value='http://www.youtube.com/v/gFbxUsihSEI?version=3'>';\n////\thtml += '<param name='allowFullScreen' value='true'>';\n////\thtml += '<param name='allowScriptAccess' value='always'>';\n////\thtml += '<embed src='http://www.youtube.com/v/gFbxUsihSEI?version=3' type='application/x-shockwave-flash' allowfullscreen='true' allowScriptAccess='always' width='640' height='390'></object>';\n////\tthis.embVideo.innerHTML = html;\n\tthis.element.appendChild(this.embVideo);\n\n\n\n\tthis.setUrl();\n\n\tthis.setLoaded();\n};\n/**\n * @param {pebble.client.interfaces.DataChangable} source\n * @param {string} field\n * @return {boolean}\n * @override\n */\npebble.libs.standard.VideoExternal.prototype.onDataModelChanged = function(source, field) {\n\tif (this != source && field == 'model') {\n\t\tthis.setUrl();\n\t} \n\treturn false;\n};\npebble.libs.standard.VideoExternal.prototype.setUrl = function() {\n\tvar url = this.getOriginInfo('model').getValue();\n\tif (url != null) {\n//\t\tthis._setUrl(url);\n\t\tthis.embVideo.src = url;\n\t}\n};\n\npebble.libs.standard.VideoExternal.prototype._setUrl = function(url) {\n\n\tvar html = '<object style=\"height: 390px; width: 640px\">';\n\thtml += '<param name=\"movie\" value=\"##url##\">';\n\thtml += '<param name=\"allowFullScreen\" value=\"true\">';\n\thtml += '<param name=\"allowScriptAccess\" value=\"always\">';\n\thtml += '<embed src=\"##url##\" type=\"application/x-shockwave-flash\" allowfullscreen=\"true\" allowScriptAccess=\"always\" width=\"640\" height=\"390\"></object>';\n\n\thtml = html.replace(/##url##/, url);\n\tthis.embVideo.innerHTML = html;\n\n\n\t//\t\tthis.video = new Video(url);\n\t//\t\tthis.video.setSize('200px', '200px');\n\t//\t\tthis.win.outputObj.addWidget(this.video);\n};\n"},{"key":"codePath","val":"frontend/src/lib/client/controls/VideoExternal.js"},{"key":"ext","val":"js"}]},{"key":"dragDropManager","val":[{"key":"devCode","val":"\n(function() {\n\n\t//'use strict';\n\t\n\n\n//---------------- drag drop\n//Container is the handler so that all dd items for container can just register one handler\n//effectsAllowed: none, copy, move, link, copymove, copylink, linkmove, all\n//dropEffect: none, copy, move, link\n  \nfunction setDrag (ctx) {\n\n\tctx.element.draggable = true;\n\tctx.element.addEventListener('dragstart', function(e) {\n\t\t\n\t\t//DRAG must do the following\n\t\t//-set widget element to draggable (Element.DRAGGABLE_TRUE)\n\t\t//-add DragStart Handler\n\t\t//-set data in Drag Start Handler\n\t\t//\n\n\t\tvar target = e.currentTarget;\n\t\t//target.setAttribute('style', opacity = '0.4';\n\n\t\t//data\n\t\tif (e.dataTranser) {\n\t\t\tvar dataTransfer = e.dataTransfer;\n\n\t\t\t//e.dataTransfer['text'] = meta;\n\t\t\t//\t\tdataTransfer.dragEffect = 'copy'; //none, copy, move, link, copylink, copymove, linkmove\n\t\t}\n\n\t\t//\tdataTransfer.setData('text', meta);\n\t\t//\tvar dragImage = mod.getDisplay();\n\t\t//dragImage.setClassName('not-droppable'); // ends up setting the base\n\t\t//\tdataTransfer.setDragImage(dragImage, 0, 0);\n\n\t\thandleDragStart(ctx);\n\n\n\t}, false);\n\n\n\tctx.element.addEventListener('dragend', function (e) {\n\n\t\tvar target = e.currentTarget; //=this\n\n\t\thandleDragEnd(ctx);\n\t\t\n\t}, false);\n}\n\nfunction setDrop (ctx) {\n\tctx.element.addEventListener('dragenter', function (e) {\n\t\t\n\t\tvar dataTransfer = e.dataTransfer;\n\t\t/*\n\t\t\t var items = dataTransfer.items;\n\t\t\t if (items != null && items.length > 0) {\n\t\t\t var item = items[0];\n\t\t\t if (item.kind == 'file') {\n\t\t//var f = item.getAsFile(); doesn't work, cannot access file data (filename ...)\n\n\t\t//accept as file\n\t\t}\n\t\t}\n\t\t*/\n\n\t\te.preventDefault();\n\t\tvar target = e.currentTarget;\n\n\t\thandleDragEnter(ctx);\n\t\t\n\t}, false);\n\n\n\tctx.element.addEventListener('dragover', function (e) {\n\t\t\n\t\te.preventDefault();\n\t\tvar target = e.currentTarget;\n\n\t\tvar x = e.clientX || 0;\n\t\tvar y = e.clientY || 0;\n\n\t\thandleDragOver(ctx, x,y);\n\n\t}, false);\n\n\n\tctx.element.addEventListener('dragleave', function (e) {\n\t\t\n\t\te.preventDefault();\n\t\te.stopPropagation(); // Stops some browsers from redirecting.\n\n\t\tvar target = e.currentTarget;\n\t\thandleDragLeave(ctx);\n\n\t}, false);\n\n\n\tctx.element.addEventListener('drop', function (e) {\n\t\t\n\t\tvar dataTransfer = e.dataTransfer;\n\t\tvar files = dataTransfer.files;\n\t\tfor (var i = 0, f; f = files[i]; i++) {\n\t\t\t// Read the File objects in this FileList.\n\t\t\tvar fileName = f.fileName;\n\t\t}\n\n\t\te.preventDefault();\n\t\tvar target = e.currentTarget;\n\n\t\t\t//if (dataTransfer != null) {\n\n\t\t\t//e.dataTransfer['text'] = meta;\n\t\t\t//\t\t\tdataTransfer.dropEffect = 'move'; //none, copy, move, link, copylink, copymove, linkmove\n\n\t\t\t//}\n\t\t\thandleDrop(ctx);\n\n\t}, false);\n}\n\n\n/**\n * @param {pebble.libs.standard.ArrayTreeBase} arrayControl\n * @param {pebble.Pebble} dragItem\n */\nfunction setDragInfo (arrayControl, dragItem) {\n\tpebble.libs.standard.DragDropManager.dragArrayControl = arrayControl;\n\tpebble.libs.standard.DragDropManager.dragItem = dragItem;\n}\n\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n */\nfunction handleDragStart (ctx) {\n\n\tvar container = ctx.moduleAccess.getParentControl();\n\n\tvar arrayControl = /** @type {pebble.libs.standard.ArrayTreeBase}*/(container.isArrayContainer ? container : container.pCM);\n\n\t//set global dd info\n\tvar isDragHandle = ctx.getOriginInfo('isDragHandle').getBool();\n\tvar ctrl;\n\tif (isDragHandle) {\n\t\tctrl = ctx.pCM;\n\t} else {\n\t\tctrl = ctx;\n\t}\n\tvar originInfo = ctrl.getOriginInfo('model');\n\n//\tvar dragging = new pebble.Pebble();\n//\tdragging.setTrue('.');\n//\toriginInfo.set(dragging,)\n\tsetDragInfo(arrayControl, ctrl.getOriginInfo('model').get());\n}\n\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n */\nfunction handleDragEnd (ctx) {\n\n}\n\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n */\nfunction handleDragEnter (ctx) {\n\tvar container = ctx.moduleAccess.getParentControl();\n\n\tif (isValidDrop(container, ctx)) {\n\t\tvar actionFilters = ctx.getOriginInfo('dragDrop.dropFilters').get();\n\n\t\tpebble.libs.standard.DragDropManager.droppable = true;\n\n\t} else {\n\t\tpebble.libs.standard.DragDropManager.droppable = false;\n\t}\n\n}\n\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n * @param {number} x\n * @param {number} y\n */\nfunction handleDragOver (ctx, x, y) {\n\n\tvar container = ctx.moduleAccess.getParentControl();\n\n\tvar overProxySide = doDrag(x, y, container.participateInBeforeAfterDD, container.ddDirection);\n\n\tif (overProxySide != null) { //droppable\n\t\t//set proxy class (droppable, not-droppable)\n\n//\t\tvar ddOrigin = ctx.getOriginInfo('model._ddSide');\n//\t\tvar dd = ddOrigin.getCreateOnNull();\n//\t\tdd.setValue('.', overProxySide);\n//\t\tddOrigin.set(dd, null, false);\n\n\t\tctx.element.classList.add('overProxySide_' + overProxySide);\n\n\n\t\tvar base = container.getUpperArrayControl();\n\n\t\t//TODO: need to set item\n\t\t//base.eventCtrl = overInfo.getModule().item;\n\t\tbase.exec('onArrayItemDraggedOver', null, function() {\n\n\t\t});\n\n\t} else {\n\t\t//clear\n\t\tctx.element.className = '';\n\t\t//set proxy class (not-droppable, droppable)\n\t}\n}\n\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n */\nfunction handleDragLeave (ctx) {\n\t//TODO: set proxy class (not-droppable, droppable)\n\t//reset style\n\t//pebble.libs.standard.impl.ModuleDisplayImpl.clearOverProxySide(event.currentTarget);\n\n//\tvar ddOrigin = this.getOriginInfo('model._ddSide');\n//\tddOrigin.set(new pebble.Pebble(), null, false);\n\n\tctx.element.className = '';\n}\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n */\nfunction handleDrop (ctx) {\n\n\tvar container = ctx.moduleAccess.getParentControl();\n\n\tif (isValidDrop(container, ctx)) {\n\n\t\tvar actionFilters = ctx.getOriginInfo('dragDrop.dropFilters').get();\n\n\t\tvar arrayControl = /** @type {pebble.libs.standard.ArrayTreeBase} */(container.isArrayContainer ? container : ctx.pCM);\n\n\n\t\t//check just in case\n\t\tvar actionFilter = ctx.expressionManager.doFilterCase(arrayControl, pebble.libs.standard.DragDropManager.dragItem, actionFilters);\n\t\tif (actionFilter != null) {\n\t\t\tpebble.libs.standard.DragDropManager.droppable = true;\n\t\t\treturn actionFilter.get('dragDropActionType');\n\t\t} else {\n\t\t\tpebble.libs.standard.DragDropManager.droppable = false;\n\t\t}\n\t\t//if (actionFilter != null){\n\t\t\t//case actionFilter == 'reorder' ....\n\t\t//}\n\n\n\t\t//if (allowFileDrop) { //allow file drop\n\t\t\t//var files = evt.dataTransfer.files; // FileList object.\n\t\t\t//var f = files[0];\n//\t\t\tthat.parseCsv(f);\n\t\t//}\n\n\t}\n\n\tctx.element.className = '';\n}\n\n\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} overModule\n * @param {pebble.libs.standard.interfaces.ControlAccess} dragModule \n * @return {boolean}\n */\nfunction isValidDrop (overModule, dragModule) {\n\tif (dragModule != null) {\n\t\tif (overModule.isAncestor(dragModule)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t} else {\n\t\t//it may be valid\n\t\treturn true;\n\t}\n}\n\n/**\n * @param {pebble.libs.standard.ArrayControl} arrayCtrl\n * @param {pebble.libs.standard.Module} targetMod\n * @param {string} ddDirection\n * @param {boolean} participateInBeforeAfterDD\n * @return {number} \n */\nfunction getDropIndex (arrayCtrl, targetMod, ddDirection, participateInBeforeAfterDD) {\n\tvar slots = arrayCtrl.getOriginInfo('model').getCreateOnNull();\n\tvar targetModIndex = slots.getIndex('.', targetMod.getTagName());\n\tvar spliceIndex;\n\tif (!participateInBeforeAfterDD) {\n\t\tspliceIndex = targetModIndex; // or 0\n\t} else {\n\t\tvar isNext = false;\n\t\tif (ddDirection == 'vertical') {\n\t\t\tisNext = pebble.libs.standard.DragDropManager.overProxySide == 'BOT';\n\t\t} else {\n\t\t\tisNext = pebble.libs.standard.DragDropManager.overProxySide == 'RIGHT';\n\t\t}\n\t\tspliceIndex = (isNext) ? targetModIndex + 1 : targetModIndex;\n\t}\n\treturn spliceIndex;\n}\n/**\n * Util func to pick up direction of drag\n * @param {number} x\n * @param {number} y\n * @param {boolean} participateInBeforeAfterDD\n * @param {string} ddDirection\n * @return {?string} direction of drag (null if not droppable)\n */\nfunction doDrag (x, y, participateInBeforeAfterDD, ddDirection) {\n//\tLog.info('x: ' + x + ' y:' + y);\n\n\t//note: cursorStop is not of much help because we are usually stopped when we want to drop \n\t//could be used for speed mechanism ...\n\t//this.dragInfo.cursorStop = (Math.abs(y - this.dragInfo.lastY) < 2 && Math.abs(x - this.dragInfo.lastX) < 2);\n\n\t// Keep track of the direction of the drag for use during onDragOver\n\tif (y != pebble.libs.standard.DragDropManager.lastY) { //if its the same keep it at whatever it was (the expectation of the user), they are usually equal when the user drops\n\t\tpebble.libs.standard.DragDropManager.goingUp = y < pebble.libs.standard.DragDropManager.lastY;\n\t\tpebble.libs.standard.DragDropManager.lastY = y;\n\t}\n//\tLog.info('DD goingUp: ' + goingUp);\n\n\tif (x != pebble.libs.standard.DragDropManager.lastX) {//if its the same keep it at whatever it was (the expectation of the user), they are usually equal when the user drops\n\t\tpebble.libs.standard.DragDropManager.goingRight = x > pebble.libs.standard.DragDropManager.lastX;\n\t\tpebble.libs.standard.DragDropManager.lastX = x;\n\t}\n//\tLog.info('DD goingRight: ' + goingRight);\n\n\tif (pebble.libs.standard.DragDropManager.droppable) {\n\t\t//set proxy class (droppable, not-droppable)\n\n\t\tif (!participateInBeforeAfterDD) {\n\t\t\tpebble.libs.standard.DragDropManager.overProxySide = 'INNER';\n\t\t} else {\n\t\t\tif (ddDirection == 'vertical') {\n\t\t\t\tpebble.libs.standard.DragDropManager.overProxySide = pebble.libs.standard.DragDropManager.overProxySide.goingUp ? 'TOP' : 'BOT';\n\t\t\t} else {\n\t\t\t\tpebble.libs.standard.DragDropManager.overProxySide = pebble.libs.standard.DragDropManager.overProxySide.goingRight ? 'RIGHT' : 'LEFT';\n\t\t\t}\n\t\t}\n\n\t\treturn pebble.libs.standard.DragDropManager.overProxySide;\n\t} else {\n\t\treturn null;\n\t}\n\n}\n\n\n\n/**\n * @constructor\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n */\npebble.libs.standard.DragDropManager = function(ctx){ \n\t//ddEvents-----\n\tvar ddEvents = ctx.getOriginInfo('dragDrop').get();\n\tif (ddEvents != null) {\n\t\tif (ddEvents.getBool('draggable') && ddEvents.get('dropFilters') != null) {\n\t\t\t//both drag and drop\n\t\t\tthis.setDrag(ctx);\n\t\t\tthis.setDrop(ctx);\n\n\t\t} else if (ddEvents.getBool('draggable')) {\n\t\t\t//drag only\n\t\t\tthis.setDrag(ctx);\n\n\t\t} else if (ddEvents.get('dropFilters') != null) {\n\t\t\t//drop only\n\t\t\tthis.setDrop(ctx);\n\t\t}\n\t} \n}\n\n/**\n * @type {boolean}\n */\npebble.libs.standard.DragDropManager.droppable = false;\n\n/**\n * @type {boolean}\n * @private\n */\npebble.libs.standard.DragDropManager.goingUp = false;\n/**\n * @type {boolean}\n * @private\n */\npebble.libs.standard.DragDropManager.goingRight = false;\n/**\n * @type {number}\n * @private\n */\npebble.libs.standard.DragDropManager.lastX = 0;\n/**\n * @type {number}\n * @private\n */\npebble.libs.standard.DragDropManager.lastY = 0;\n/**\n * @type {string}\n */\npebble.libs.standard.DragDropManager.overProxySide = '';\n/**\n * @type {pebble.libs.standard.ArrayTreeBase}\n * @private\n */\npebble.libs.standard.DragDropManager.dragArrayControl = null;\n/**\n * @type {pebble.Pebble}\n * @private\n */\npebble.libs.standard.DragDropManager.dragItem = null;\n\n\npebble.libs.standard.DragDropManager.prototype.setDrag = setDrag;\npebble.libs.standard.DragDropManager.prototype.setDrop = setDrop;\n\n\n})();\n"},{"key":"codePath","val":"frontend/src/lib/client/dragDropManager.js"},{"key":"ext","val":"js"}]},{"key":"event","val":[{"key":"devCode","val":"/**\n * @constructor\n */\npebble.libs.standard.Event = function() {\n\n\t/**\n\t * @type {Array.<Function>}\n\t */\n\tthis.subscribers = [];\n};\n/**\n * @param {pebble.Pebble} data\n */\npebble.libs.standard.Event.prototype.fire = function(data) {\n\tfor (var i = 0; i < this.subscribers.length; i++) {\n\t\tvar cb = this.subscribers[i];\n\t\tcb(data);\n\t}\n};\n/**\n * @param {Function} cb\n */\npebble.libs.standard.Event.prototype.subscribe = function(cb) {\n\tthis.subscribers.push(cb);\n};\n\npebble.libs.standard.Event.prototype.unsubscribeAll = function() {\n\tthis.subscribers = [];\n};\n\n\n\n"},{"key":"codePath","val":"frontend/src/lib/client/event.js"},{"key":"ext","val":"js"}]},{"key":"executionManager","val":[{"key":"devCode","val":"\n(function() {\n\n\t//'use strict';\n\t\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n * @param {pebble.Pebble} fields\n * @param {pebble.Pebble} params : resolves all VALUES, getValue('.'), not inner objects, or could decompose because we know the types ...\n */\nfunction resolveParams (ctx, fields, params) {\n\tvar recs = params.getRecords('.');\n\tfor (var i = 0; i < recs.length; i++) {\n\t\tvar rec = recs[i];\n\n\t\tvar field = fields.get(rec.getTagName());\n\t\tvar value = rec.getValue('.');\n\t\tif (value != null && value.indexOf('{{') != -1 && field != null) {\n\t\t\trec.set('.', resolveParam(ctx, field, rec));\n\n\t\t} else {\n\t\t\tpebble.shared.logger.log('INFO', 'function doesn\\'t have param ' + rec.getTagName());\n\t\t}\n\t}\n\treturn params;\n\n};\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n * @param {pebble.Pebble} field \n * @param {pebble.Pebble} rec\n */\nfunction resolveParam (ctx, field, rec) {\n\n\tvar expression = rec.getValue('.');\n\tif (expression != null) {\n\t\tvar result = ctx.expressionManager.evaluate(expression);\n\t\t\n\t\tvar paramType = field.getRef('type');//what the result type is \n\t\tswitch (paramType) {\n\n\t\t\tcase pebble.shared.TypeReferences.REFERENCE:\n\t\t\t\trec.setRef('.', result);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\t \n\t\t\t\trec.setValue('.', result);\t\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn rec;\n}\n\n/**\n * @param {pebble.Pebble} obj\n */\nfunction tryExecution (obj) {\n\tvar rgForm = obj.getRef('_generate');\n\tif (rgForm == null) {\n\t\tpebble.shared.logger.log('ERROR', 'no request reference');\n\t\treturn;\n\t}\n\tvar elements = rgForm.split('.');\n\tvar __winRef = elements[0];\n\tvar funcName = elements.pop();\n\tvar params = obj.getParams();\n\tvar topMod = pebble.libs.standard.Module.topMod;\n\tif ((/\\b([A-Z]{2,})\\b/).test(__winRef)) {\n\t\t//server\n\t\t//var serverPath = topMod.theControlApp.getRef('.') + '.servers.' + __winRef;\n\t\t//var server = topMod.deployment.getTypeDocument(serverPath);\n\t\t//var functions = server.getFunctions();\n\n\n\t\tfor (var key in pebble.serverProxies) {\n\t\t\tif (__winRef === key) {\n\n\t\t\t\tpebble.serverProxies[__winRef].handleRequest(obj);\n\t\t\t\treturn;\n\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error('ExecutionManager: tryExecution() requires serverProxy');\n\t\n\t} else {\n\n\t\tvar mod = this.ctx.getObjectReference(__winRef);\n\t\tif (mod == null) {\n\t\t\tpebble.shared.logger.log('ERROR', 'getObjectReference ( ' + __winRef + ' ) > not found');\n\t\t\treturn;\n\t\t} else {\n\t\t\tvar item = mod.getClientControl();\n\t\t\tvar clientInstance = params.getRef('clientInstance');\n\t\t\tif (clientInstance == null) {\n\t\t\t\tclientInstance = item.getRef('.');\n\t\t\t\tparams.setRef('clientInstance', clientInstance);\n\t\t\t}\n\t\t\tvar control = topMod.deployment.getTypeDocument(clientInstance);\n\t\t\tvar functions = control.getFunctions();\n\t\t\tvar func = functions.get(funcName);\n\n\t\t\t//if (func == null) alert(funcName); \n\t\t\tvar paramsStr = params.toString();\n\t\t\tif (func != null && paramsStr.indexOf('{{') != -1) {\n\t\t\t\tparams.set('.', resolveParams(this.ctx, func.get('fields'), params));\n\t\t\t}\n\n\t\t\tif (item.executeMethod(funcName, obj) == -1) {\n\t\t\t\tpebble.shared.logger.log('INFO', 'no client function: ' + rgForm); \n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @constructor\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n */\npebble.libs.standard.ExecutionManager = function(ctx){ \n\tthis.ctx = ctx;\n};\n\npebble.libs.standard.ExecutionManager.prototype.tryExecution = tryExecution;\n\n\n/**\n * @param {pebble.Pebble} requestPebble\n */\npebble.libs.standard.ExecutionManager.prototype.resolve = function(requestPebble) {\n\n\tvar resolver = new Resolver(this);\n\tresolver._resolve(requestPebble, true)\n\n};\n\n/**\n * @param {pebble.libs.standard.ExecutionManager} executioner\n * @constructor\n */\nfunction Resolver(executioner) {\n\n\tthis.executioner = executioner;\n\n\t/**\n\t * @type {number}\n\t */\n\tthis.membersCount;\n\n\t/**\n\t * @type {pebble.Pebble}\n\t * @private\n\t */\n\tthis.requestPebble = null;\n}\n/**\n * @param {pebble.Pebble} requestPebble\n * @param {boolean} isTop\n * @private\n */\nResolver.prototype._resolve = function(requestPebble, isTop) {\n\tthis.requestPebble = requestPebble;\n\tvar generate = requestPebble.get('_generate');\n\n\tif (generate == null) {\n\n\t\tvar nextChildren = requestPebble.getRecords('.');\n\t\tthis.membersCount = nextChildren.length;\n\t\tif (this.membersCount == 0) {\n\n\t\t\tthis.checkAndResolve();\n\n\t\t} else {\n\t\t\tfor (var k = 0; k < nextChildren.length; k++) {\n\t\t\t\tvar child = nextChildren[k];\n\t\t\t\tthis.resolveChild(child);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t\n\t\tvar childMembers = generate.getRecords('.');\n\t\tthis.membersCount = childMembers.length;\n\t\tif (this.membersCount == 0) {\n\n\t\t\tthis.checkAndResolve();\n\n\t\t} else {\n\t\t\tfor (var k = 0; k < childMembers.length; k++) {\n\t\t\t\tvar child = childMembers[k];\n\t\t\t\tthis.resolveChild(child);\n\t\t\t}\n\t\t}\n\t}\n};\n/**\n * @param {pebble.Pebble} child\n * @private\n */\nResolver.prototype.resolveChild = function(child) {\n\n\tvar noResolve = child.getAttribute('.', 'noresolve');\n\tif (noResolve == null && child.getTagName() !== 'innerMarkup') {\n\n\t\tvar childResolver = this.getInstance();\n\t\tvar that = this;\n\t\tchild.setCallback( function() {\n\n\t\t\tthat.decrement();\n\n\t\t});\n\t\tchildResolver._resolve(child, false);\n\n\t} else {\n\t\tif (noResolve === 'once') {\n\t\t\tchild.removeAttribute('.', 'noresolve');\n\t\t}\n\t\tthis.decrement();\n\t}\n};\n/**\n * @private\n */\nResolver.prototype.decrement = function() {\n\tthis.membersCount -= 1;\n\tif (this.membersCount == 0) {\n\t\tthis.checkAndResolve();\n\t}\n};\n/**\n * @private\n */\nResolver.prototype.checkAndResolve = function() {\n\t\n\tvar funcRef = this.requestPebble.getRef('_generate');\n\tif (funcRef == null) {\n\t\tthis.requestPebble.callback();\t\n\t} else {\n\t\tthis.executioner.tryExecution(this.requestPebble);\n\t}\n\n\tthis.requestPebble.remove('_generate');\n};\n\n/**\n * @return {Resolver}\n */\nResolver.prototype.getInstance = function() {\n\treturn new Resolver(this.executioner);\n};\n\n\n\n\n\n})();\n"},{"key":"codePath","val":"frontend/src/lib/client/executionManager.js"},{"key":"ext","val":"js"}]},{"key":"expressionManager","val":[{"key":"devCode","val":"\n(function() {\n\n/**\n * @param {string} expression \n * @param {pebble.Pebble=} item : if item is not present item: specifier is left alone\n */\nfunction evaluate(expression, item) {\n\n\treturn this.evaluateExpression(this.resolveExpression(expression, item));\n\t\t\t\n};\n\n/**\n * eval here is temporary for a function that will only deal with one parameter scopr would find operators and eval by execution\n * also, with knowing the type this should be possible making the input of the expression simple\n * ex.  this.aa.bb > 5\n * ex.  this.abc == 'hello'\n * ex.  pctx.abc + 'hello'\n * ex.  win1.abc + 5   //thus the replacer should return text as text  'hello' wo/having to write expression '@win1.abc' + 'hello'\n * @param {string} recStr\n */\nfunction evaluateExpression(recStr) {\n\tvar parseFn = parser(recStr);\n\treturn parseFn({});\n}\n/**\n * @param {string} expression \n * @param {?pebble.Pebble} item : if item is not present item: specifier is left alone\n */\nfunction resolveExpression(expression, item) {\n\n\texpression = expression.replace(/({{|}})/g, '');\n\t//match this.aa.bb ctx.aa.bb mod2.aa.bb, item.@, item.@aa.bb, etc\n\tvar patt = /\\w+\\.\\w+(\\.\\w+)*/g;\t\n\tvar that = this;\n\tvar out = expression.replace(patt, function(token) {\n\t\t\n\t\tvar parts = token.split('.');\n\t\tvar specifier = parts.shift();\n\n\t\tif (specifier == 'item' && !item ) {\n\t\t\t//leave item:path as is, to be resolved later\n\t\t\treturn token;\n\n\t\t} else {\n\t\t\tvar last = parts.pop();\n\n\t\t\tvar path = parts.join('.');\n\t\t\t//if in string methods\n\t\t\tif (last != 'indexOf' && last != 'toString' || last != 'split' || last != 'pop') {\n\n\t\t\t\tpath += path === '' ? last : '.' + last;\n\t\t\t\treturn getReplacement(that.ctrl, specifier, path, item);\n\n\t\t\t} else {\n\n\t\t\t\treturn getReplacement(that.ctrl, specifier, path, item) + '.' + last;\n\n\t\t\t}\n\t\t}\n\n\t});\n\treturn out;\n}\n\n/**\n * replaces path items\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctrl\n * @param {string} specifier\n * @param {string} path\n * @param {?pebble.Pebble} item\n */\nfunction getReplacement(ctrl, specifier, path, item) {\n\tvar out = '';\n\n\tif (specifier == 'item') {\n\t\tif (path == 'key_') {\n\t\t\tout += item.getTagName() ;\n\t\t} else if (path == 'ref_') {\n\t\t\tout += '\\'' + item.getRef('.') + '\\'';\n\t\t} else {\n\t\t\tout += item.getValue(path);\n\t\t}\n\t} else {\n\t\tvar mod = ctrl.getObjectReference(specifier);\n\t\tif (mod != null) {\n\t\t\tvar originInfo = mod.item.getOriginInfo(path);\n\t\t\tvar type = originInfo.getThisType();\n\t\t\tif (type != null) {\n\n\t\t\t\tvar typeRef = type.getRef('.') || pebble.shared.TypeReferences.TEXT;\n\n\t\t\t\tif (typeRef == pebble.shared.TypeReferences.REFERENCE) {\n\n\t\t\t\t\tvar val = originInfo.getRef();\n\t\t\t\t\tout += val == null ? 'null' : '\"' + val + '\"';\n\n\t\t\t\t} else if (typeRef == pebble.shared.TypeReferences.BOOL || typeRef == pebble.shared.TypeReferences.NUMBER) {\n\n\t\t\t\t\tout += originInfo.getValue();\n\n\t\t\t\t} else if (typeRef == pebble.shared.TypeReferences.DATE || typeRef == pebble.shared.TypeReferences.TEXT) {\n\n\t\t\t\t\tvar val = originInfo.getValue();\n\t\t\t\t\tout += val == null ? 'null' : '\"' + val + '\"';\n\n\t\t\t\t} else if (path.split('.').pop() == 'key_') {\n\t\t\t\t\t\n\t\t\t\t\tout += '\"' + originInfo.getCreateOnNull().getTagName() + '\"';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar val = originInfo.getValue();\n\t\t\t\t\tout += val == null ? 'null' : '\"' + typeRef + '\"';\n\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t//_selection, _global, _field\n\t\t\t\tif (path.split('.').pop() == 'singleSelectedMeta') {\n\n\t\t\t\t\tvar val = originInfo.getRef();\n\t\t\t\t\tout += val == null ? 'null' : '\"' + val + '\"';\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar val = originInfo.getValue();\n\t\t\t\t\tout += val == null ? 'null' : '\"' + val + '\"';\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\treturn out;\n}\n\n/**\n * filters are often as an array of items each with a filter so that when the filter is caught it does something\n * select the FIRST match, if none match returns null\n * these items should always have the meta name 'filter'\n * @param {pebble.Pebble} item \n * @param {pebble.Pebble} arrayWithFilters \n */\nfunction doFilterCase (item, arrayWithFilters) {\n\n\tif (arrayWithFilters != null) {\n\t\tvar actionFilters = arrayWithFilters.getRecords('.');\n\t\tfor (var i = 0; i < actionFilters.length; i++) {\n\t\t\tvar actionFilter = actionFilters[i];\n\t\t\t//passing the filter means it was caught (like a switch case)\n\t\t\tvar expression = actionFilter.getValue('filter');\n\t\t\tif (expression != null) {\n\t\t\t\tvar resolvedExpression = resolveExpression(expression, item);\n\t\t\t\tif (evaluateExpression(resolvedExpression)) {\n\t\t\t\t\treturn actionFilter;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn null; \n}\n/**\n * @param {string} expression \n * @return {Object}\n */\nfunction getBinds(expression) {\n\n\tvar ret = {};\n\t//take out spaces\n\texpression = expression.replace(/(\\s)/g, '');\n\tvar patt = /\\w+\\.\\w+(\\.\\w+)*/g;\t\n\tvar tokens = expression.match(patt);\n\tif (tokens != null) {\n\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\tvar token = tokens[i];\n\t\t\tvar elements = token.split('.');\n\t\t\tvar specifier = elements.shift();\n\t\t\tvar path = elements.join('.');\n\n\t\t\tif (specifier == 'item') {\n\t\t\t\t//leave item:path as is, to be resolved later\n\n\t\t\t} else {\n\t\t\t\t//out += this.getReplacement(specifier, path, item);\n\t\t\t\tret[token] = {specifier: specifier, path: path};\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;\n}\n\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctrl\n * @param {string} pathOnCtrl\n * @override\n */\nfunction onChange(ctrl, pathOnCtrl) {\n\n\t//var originInfo = ctrl.getOriginInfo(pathOnCtrl);\n\t//var xp = originInfo.getValue();\n\n\t//var result = ctrl.expressionManager.evaluate(xp);\n\n\t////set\n\t//var data = new pebble.Pebble();\n\t//data.setValue('.', result);\n\t//originInfo.set(data);\n}\n\n/**\n * @param {pebble.Pebble} child\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctrl\n * @param {string} pathOnCtrl\n * @override\n */\nfunction onSimpleMarkupBind(child, ctrl, pathOnCtrl) {\n\t\n}\n\n/**\n * @param {pebble.Pebble} child\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctrl\n * @param {string} pathOnCtrl\n * @override\n */\nfunction onExecution(child, ctrl, pathOnCtrl) {\n\t\n}\n\n\n\n\npebble.libs.standard.tags = pebble.libs.standard.tags || {};\n\n\n/**\n * @constructor\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctrl\n */\npebble.libs.standard.tags.Xp = function(ctrl) {\n\n\t/**\n\t * @type {pebble.libs.standard.interfaces.ControlAccess}\n\t */\n\tthis.ctrl = ctrl;\n\n}\n\npebble.libs.standard.tags.Xp.prototype.evaluate = evaluate;\npebble.libs.standard.tags.Xp.prototype.onChange = onChange;\npebble.libs.standard.tags.Xp.prototype.onSimpleMarkupBind = onSimpleMarkupBind;\npebble.libs.standard.tags.Xp.prototype.onExecution = onExecution;\npebble.libs.standard.tags.Xp.prototype.resolveExpression = resolveExpression;\npebble.libs.standard.tags.Xp.prototype.evaluateExpression = evaluateExpression;\npebble.libs.standard.tags.Xp.prototype.doFilterCase = doFilterCase;\npebble.libs.standard.tags.Xp.prototype.getBinds = getBinds;\n\n})();\n"},{"key":"codePath","val":"frontend/src/lib/client/expressionManager.js"},{"key":"ext","val":"js"}]},{"key":"externs","val":[{"key":"devCode","val":"\nvar less = function() {};\nvar exports = function() {};\n\n\n//function XMLSerializer(){}; \n//function Error(){};\n//function DOMParser(){};\n//function ActiveXObject(){};\n//function Node(){};\n//function Math(){};\n//function XMLHttpRequest(){};\n//function Element() {};\n//function Date(){};\n//function parseInt(){};\n//function parseFloat(){};\n//var document = {};\n\n\n//Anything that libraries might override on their own and is called from core\n//if libraries wont ever override then can make it an export\n\n\n\n"},{"key":"codePath","val":"frontend/src/lib/shared/externs.js"},{"key":"ext","val":"js"}]},{"key":"comm","val":[{"key":"devCode","val":"/**\n * @constructor\n */\npebble.libs.standard.impl.Comm = function(host) {\n\tthis.host = host;\n};\n/**\n * @param {string} method\n * @param {string} url\n * @param {string} postData\n * @param {Function} cb\n */\npebble.libs.standard.impl.Comm.prototype.request = function(method, url, postData, cb) {\n\n\tvar xmlhttp = new XMLHttpRequest();\n\txmlhttp.onreadystatechange = function() {\n\t\tif (xmlhttp.readyState==4 && xmlhttp.status==200){\n\t\t\t//success\n\t\t\tcb(xmlhttp.responseText);\n\t\t} \n\t};\n\n\t//avoid cached result\n//\tvar time = \"t=\" + Math.random();\n\n\txmlhttp.open(method, url, true);\n\tif (method == \"GET\") {\n\t\txmlhttp.send();\n\t} else if (method == \"POST\"){\n\t\txmlhttp.open(\"POST\", url, true);\n\t\txmlhttp.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\n\t\tvar data = postData.split(\"xml=\")[1];\n\t\tpostData = \"xml=\" + encodeURIComponent(data);\n\t\txmlhttp.send(postData);\n\t}\n};\n/**\n * @param {string} postData\n * @param {Function} cb\n */\npebble.libs.standard.impl.Comm.prototype.requestData = function(postData, cb) {\n\tvar uri = this.host != null ? this.host + \"/data\" : \"/data\";\n\tthis.request(\"POST\", uri, \"xml=\" + postData, cb);\n};\n/**\n * @param {pebble.Pebble} global\n */\npebble.libs.standard.impl.Comm.prototype.setFormFactor = function (global) {\n\tvar fullFormFactor;\n\n\t//Look for the formfactor as a url argument.\n\tvar args = location.search;\n\tvar start = args.indexOf(\"formfactor\");\n\tif (start >= 0) {\n\t\tvar value = args.substring(start);\n\t\tvar begin = value.indexOf(\"=\") + 1;\n\t\tvar end = value.indexOf(\"&\");\n\t\tif (end == -1) {\n\t\t\tend = value.length;\n\t\t}\n\t\tfullFormFactor = value.substring(begin, end); //clientEnv-formfactor\n\t} else {\n\n\t\t// Look for formfactor set by client (phonegap, etc. (gadget, facebook also?)\n\t\tvar clientEnv; \n\t\tif (fullFormFactor === \"phonegap\") {\n\t\t\tclientEnv = \"phonegap\";\n\t\t} else {\n\t\t\t//default\n\t\t\tclientEnv = \"browser\"; \n\t\t}\n\n\t\tvar ff;\n\t\t// Assume browser, detect form factor from user agent.\n\t\tvar ua = navigator.userAgent.toLowerCase();\n\n\t\tif (ua.indexOf(\"iphone\") != -1 || ua.indexOf(\"ipod\") != -1) {\n\t\t\t// iphone and ipod.\n\t\t\tff = \"mobile\";\n\t\t} else if (ua.indexOf(\"ipad\") != -1) {\n\t\t\t// ipad.\n\t\t\tff = \"tablet\";\n\t\t} else if (ua.indexOf(\"android\") != -1 || ua.indexOf(\"mobile\") != -1) {\n\n\t\t\t// Android - determine the form factor of android devices based on the diagonal screen\n\t\t\t// size. Anything under six inches is a phone, anything over six inches is a tablet.\n\n\t\t\t//var dpi = 160; //we need a way to get this desity ???\n\t\t\tvar dpi = 220;\n\t\t\t//var dpi = 260;\n\t\t\tvar width = screen.width / dpi;\n\t\t\tvar height = screen.height / dpi;\n\t\t\tvar size = Math.sqrt(width*width + height*height);\n\t\t\tff = (size < 6) ? \"mobile\" : \"tablet\";\n\t\t} else {\n\t\t\tff = \"desktop\";\n\t\t}\n\n\t\tfullFormFactor = clientEnv + \"-\" + ff;\n\n\t}\n\n\tglobal.setRef(\"simpleFormFactor\", fullFormFactor);\n};\n\n"},{"key":"codePath","val":"frontend/src/lib/client/impl/comm.js"},{"key":"ext","val":"js"}]},{"key":"commClientSideImpl","val":[{"key":"devCode","val":"\n/**\n * Shared communication implementation used in client side servers, jasmine.html and karma tests\n */\n/**\n * @constructor\n */\npebble.libs.standard.impl.CommClientSideImpl = function(server) {\n\tthis.server = server;\n};\n\npebble.libs.standard.impl.CommClientSideImpl.prototype.httpRequest = function(o) {\n\n\tvar rg = o.request.getRef(\"_generate\");\n\tvar funcName = rg.substring(rg.lastIndexOf(\".\") + 1);\n\tthis.server.executeMethod(funcName, o.request, o.deployment);\n\to.success(o.request);\n\n};\n\n"},{"key":"codePath","val":"frontend/src/lib/client/impl/commClientSideImpl.js"},{"key":"ext","val":"js"}]},{"key":"impl","val":[{"key":"devCode","val":"/**\n * @namespace\n */\npebble.libs.standard.impl = {};\n"},{"key":"codePath","val":"frontend/src/lib/client/impl/impl.js"},{"key":"ext","val":"js"}]},{"key":"serverDataImpl_IndexedDB","val":[{"key":"devCode","val":"\n/**\n * @constructor\n * @param {string | pebble.Pebble} o\n * @implements {pebble.shared.interfaces.IServerData}\n */\npebble.shared.ServerDataImpl_IndexedDB = function(o) {\n\t// indexeddb\n\twindow.indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.msIndexedDB;\n\twindow.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction;\n\twindow.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange;\n\n\tif (o instanceof pebble.Pebble){\n//\t\tthis.ds = o;\n\t} else if (typeof(o) == 'string') {\n\t\t//path\n//\t\tthis.ds.loadFile(o);\n\t} else {\n//\t\tthis.ds = new pebble.Pebble();\n\t}\n\n\tthis.open();\n};\n\npebble.shared.ServerDataImpl_IndexedDB.prototype.open = function() {\n\t// you must increment the version by +1 in order to get the 'onupgradeneeded' event called\n\t// ONLY there you can modify the db itself e.g create new object stores and etc.\n\t// Hard to manage versions in order to add another collection dynamically so just have one big table\n\n\t//or, could open, check objectStoreNames, if doesn't exist update version ... but still need to keep track of it ...\n\n\n\tvar version = 1;\n\tvar request = window.indexedDB.open('pebbledb', version);\n\n\tvar that = this;\n\n\trequest.onupgradeneeded = function(e) {\n\t\tthat.db = e.target.result;\n\n\t\tif(!that.db.objectStoreNames.contains('bigTable')){\n\t\t\t//autoIncrement will auto generate when not present so we still can pass our own\n\t\t\tvar objectStore = that.db.createObjectStore('bigTable', {keyPath: 'id', autoIncrement: true});\n\n\t\t\tobjectStore.createIndex('collection', 'collection', { unique: false });\n\t\t}\n\t};\n\n\trequest.onsuccess = function(e) {\n\t\tthat.db = e.target.result;\n\n\t};\n};\n/**\n * @param {string} collection\n * @param {pebble.Pebble} peb\n * @return {pebble.Pebble}\n * @override\n */\npebble.shared.ServerDataImpl_IndexedDB.prototype.create = function(collection, peb, cb) {\n\n\tvar trans = this.db.transaction(['bigTable'], 'readwrite'); //IDBTransaction.READ_WRITE\n\tvar store = trans.objectStore('bigTable');\n\n\tvar that = this;\n\tvar request;\n\tvar isAutoGen = false;\n\tvar uniqueName = peb.getTagName();\n\n\tif (uniqueName != 'i') {\n\n\t\trequest = store.put({\n\t\t\t'uniqueName' : uniqueName,\n\t\t\t'collection' : collection,\n\t\t\t'xml': peb.toString()\n\t\t});\n\n\t} else {\n\n\t\tisAutoGen = true;\n\t\trequest = store.add({\n\t\t\t'collection' : collection,\n\t\t\t'xml': peb.toString()\n\t\t});\n\n\t}\n\n\trequest.onsuccess = function(e) {\n\t  var id = e.target.result;\t\n\t\tvar retrieveRequest = store.get(id);\n\t\tretrieveRequest.onsuccess = function(evt) {\n\t\t\tvar result = retrieveRequest.result;\n\t\t\tvar uniqueName = 'a' + id;\n\t\t\tvar oo = new pebble.Pebble(uniqueName);\n\t\t\tvar o = new pebble.Pebble(result.xml);\n\t\t\too.set('.', o);\n\t\t\tif (isAutoGen) {\n\t\t\t\tresult.xml = oo.toString();\n\t\t\t\tstore.uniqueName = uniqueName;\n\t\t\t\tstore.put(result);\n\t\t\t}\n\t\t\tcb && cb(o);\n\t\t};\n\t};\n\n\trequest.onerror = function(e) {\n\t\t//console.log(e.value);\n\t};\n\n};\n/**\n * @param {string} collection\n * @param {string} uniqueName\n * @return {pebble.Pebble}\n * @override\n */\npebble.shared.ServerDataImpl_IndexedDB.prototype.retrieve = function(collection, uniqueName, cb) {\n\tvar path = collection + '.' + uniqueName;\n\n\tvar trans = this.db.transaction(['bigTable'], 'readwrite');\n\tvar store = trans.objectStore('bigTable');\n\n\tvar index = store.index('collection');\n\tvar singleKeyRange = IDBKeyRange.only(collection);\n\tindex.openCursor(singleKeyRange).onsuccess = function(event) {\n\t\tvar cursor = event.target.result;\n\t\tif (cursor) {\n\t\t\t// cursor.key is a name, like 'Bill', and cursor.value is the whole object.\n\t\t\tif (cursor.value.uniqueName == uniqueName) {\n\n\t\t\t\tcb && cb(new pebble.Pebble(cursor.value.xml));\n\t\t\t\treturn; \n\t\t\t}\n\t\t\tcursor.continue();\n\t\t}\n\t};\n};\n\n/**\n * @param {string} collection\n * @param {string} meta\n * @param {pebble.Pebble} doc\n * @override\n */\npebble.shared.ServerDataImpl_IndexedDB.prototype.update = function(collection, meta, doc) {\n\n\tvar that = this;\n\tthis.retrieve(collection, meta, function(o) {\n\n\t\tvar trans = that.db.transaction(['bigTable'], 'readwrite');\n\t\tvar store = trans.objectStore('bigTable');\n\n\t\to.xml = doc.toString();\n\n\t\tvar request = store.put(o);\n\n\t\trequest.onsuccess = function(evt) {\n\n\t\t}\n\t});\n};\n\n/**\n * @param {string} collection\n * @param {string} name\n * @override\n */\npebble.shared.ServerDataImpl_IndexedDB.prototype.deleteItem = function(collection, name) {\n\tvar that = this;\n\tthis.retrieve(collection, name, function(o) {\n\n\t\tvar trans = that.db.transaction(['bigTable'], 'readwrite');\n\t\tvar store = trans.objectStore('bigTable');\n\n\t\tvar request = store.delete(o.id);\n\n\t\trequest.onsuccess = function(evt) {\n\n\t\t}\n\t});\n};\n\n/**\n * @param {Array.<string>} list\n * @override\n */\npebble.shared.ServerDataImpl_IndexedDB.prototype.deleteCollections = function(list) {\n\t//var trans = this.db.transaction(['bigTable'], 'readwrite');\n\t//var store = trans.objectStore('bigTable');\n\n\t//for (var i = 0; i < list.length; i++) {\n\t\t//var collection = list[i];\n\t\t\n\t\t//var singleKeyRange = IDBKeyRange.only(containerKey);\n\t\t//var cursorRequest = index.openCursor(singleKeyRange);\n\t\t//cursorRequest.onsuccess = function(event) {\n\t\t\t//var cursor = event.target.result;\n\t\t\t//if (cursor) {\n\t\t\t\t//store.delete(cursor.value.id);\n\t\t\t\t//cursor.continue();\n\t\t\t//}\n\t\t//};\n\t//}\n};\n\n/**\n * @param {pebble.Pebble} queryPeb\n * @return {Array.<pebble.Pebble>}\n * @override\n */\npebble.shared.ServerDataImpl_IndexedDB.prototype.doQuery = function(queryPeb, cb) {\n\tvar path = queryPeb.get('path');\n\n\tvar containerKey = path.getRef('.');\n\n\t// Get everything in the store;\n\tvar trans = this.db.transaction(['bigTable'], 'readwrite');\n\tvar store = trans.objectStore('bigTable');\n\n\tvar ret = [];\n\tvar index = store.index('collection');\n\tvar singleKeyRange = IDBKeyRange.only(containerKey);\n\tvar cursorRequest = index.openCursor(singleKeyRange);\n\tcursorRequest.onsuccess = function(event) {\n\t\tvar cursor = event.target.result;\n\t\tif (cursor) {\n\t\t\t// cursor.key is a name, like 'Bill', and cursor.value is the whole object.\n\t\t\tret.push(new pebble.Pebble(cursor.value.xml));\n\t\t\tcursor.continue();\n\t\t}\n\t\tcb && cb(ret);\n\t};\n\n\n\tcursorRequest.onerror = function() {\n\t\t//\n\t}\n\n\treturn ret;       \n\n};\n\n\n\n"},{"key":"codePath","val":"frontend/src/lib/client/impl/serverDataImpl_IndexedDB.js"},{"key":"ext","val":"js"}]},{"key":"serverDataImpl_WebSql","val":[{"key":"devCode","val":"\n/**\n * @constructor\n * @param {string | pebble.Pebble} o\n * @implements {pebble.shared.interfaces.IServerData}\n */\npebble.shared.ServerDataImpl_WebSql = function(o) {\n\n\tif (o instanceof pebble.Pebble){\n//\t\tthis.ds = o;\n\t} else if (typeof(o) == \"string\") {\n\t\t//path\n//\t\tthis.ds.loadFile(o);\n\t} else {\n//\t\tthis.ds = new pebble.Pebble();\n\t}\n\n};\n\npebble.shared.ServerDataImpl_WebSql.prototype.open = function() {\n\tthis.db = openDatabase('pebbledb', '1.0', 'test pebble db', 2 * 1024 * 1024);\n\n\tif (this.db) {\n\t\tthis.db.transaction(function(tx) {\n\n\t\t\ttx.executeSql(\"CREATE TABLE IF NOT EXISTS bigTable (id REAL UNIQUE, text TEXT)\", []);\n\n\t\t});\n\t}\n};\n/**\n * @param {string} collection\n * @param {pebble.Pebble} peb\n * @return {pebble.Pebble}\n * @override\n */\npebble.shared.ServerDataImpl_WebSql.prototype.create = function(collection, peb, cb) {\n\n this.db.transaction(function(tx) {\n    tx.executeSql('INSERT INTO bigTable (id, text) values (?, ?)', [task.id, peb.toString()]);\n  });\n};\n/**\n * @param {string} collection\n * @param {string} uniqueName\n * @return {pebble.Pebble}\n * @override\n */\npebble.shared.ServerDataImpl_WebSql.prototype.retrieve = function(collection, uniqueName, cb) {\n\n};\n\n/**\n * @param {string} collection\n * @param {string} meta\n * @param {pebble.Pebble} doc\n * @override\n */\npebble.shared.ServerDataImpl_WebSql.prototype.update = function(collection, meta, doc) {\n\n\tvar that = this;\n\t\n\tdatabase.transaction(function(tx) {\n\n\t\ttx.executeSql('UPDATE bigTable WHERE collection=? and id=?', [collection, name]);\n\n\t});\n};\n\n/**\n * @param {string} collection\n * @param {string} name\n * @override\n */\npebble.shared.ServerDataImpl_WebSql.prototype.deleteItem = function(collection, name) {\n\tvar that = this;\n\n\tdatabase.transaction(function(tx) {\n\t\ttx.executeSql('DELETE FROM bigTable WHERE collection=? and id=?', [collection, name]);\n\t});\n\t\n};\n\n/**\n * @param {Array.<string>} list\n * @override\n */\npebble.shared.ServerDataImpl_WebSql.prototype.deleteCollections = function(list) {\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar collection = list[i];\n\t\t\n\t}\n};\n\n/**\n * @param {pebble.Pebble} queryPeb\n * @return {Array.<pebble.Pebble>}\n * @override\n */\npebble.shared.ServerDataImpl_WebSql.prototype.doQuery = function(queryPeb, cb) {\n\tvar path = queryPeb.get(\"path\");\n\n\tvar containerKey = path.getRef(\".\");\n\n\tdatabase.transaction(function(tx) {\n\t\ttx.executeSql('SELECT * FROM tasks', [], function (tx, results) {\n\t\t\tvar len = results.rows.length;\n\t\t\t\n\t\t\tfor (var i = 0; i < len; i++) {\n\t\t\t\tvar item = results.rows.item(i);\n\t\t\t\tvar id = item.id;\n\t\t\t\tvar xml = item.xml;\n\t\t\t\tvar peb = new pebble.Pebble(xml);\n\t\t\t}\n\n\t\t});\n\t});\n};\n\n\n\n"},{"key":"codePath","val":"frontend/src/lib/client/impl/serverDataImpl_WebSql.js"},{"key":"ext","val":"js"}]},{"key":"webSocketClientSideImpl","val":[{"key":"devCode","val":"/**\n * Shared communication implementation used in client side servers, jasmine.html and karma tests\n */\n\n/**\n * @constructor\n */\npebble.libs.standard.impl.WebSocketClientSideImpl = function(server) {\n\tthis.server = server;\n};\n\npebble.libs.standard.impl.WebSocketClientSideImpl.prototype.sendToServer = function(obj) {\n    \n\t//we pass this to testServer so it can call sendToClient\n\tthis.server.wss.message(this, obj);\n\n};\n\npebble.libs.standard.impl.WebSocketClientSideImpl.prototype.setOnMessage = function(fn) {\n\t\n\tthis.fn = fn;\n\n};\n\n/**\n * @override\n */\npebble.libs.standard.impl.WebSocketClientSideImpl.prototype.sendToClient = function(message) {\n\n\tthis.fn(message);\n\n};\n"},{"key":"codePath","val":"frontend/src/lib/client/impl/webSocketClientSideImpl.js"},{"key":"ext","val":"js"}]},{"key":"webSocketServerClientSideImpl","val":[{"key":"devCode","val":"\n/**\n * Shared communication implementation used in client side servers, jasmine.html and karma tests\n */\n/**\n * @constructor\n */\npebble.libs.standard.impl.WebSocketServerClientSideImpl = function () {  }\n\npebble.libs.standard.impl.WebSocketServerClientSideImpl.prototype.setOnMessage = function (fn) {\n\n\tthis.fn = fn;\n\n};\n//callable by proxy which allows it to set itself as web socket\npebble.libs.standard.impl.WebSocketServerClientSideImpl.prototype.message = function(ws, message) {\n\t//this lets servercontrol set socket to session\n\tthis.fn(ws, message);\n};\n"},{"key":"codePath","val":"frontend/src/lib/client/impl/webSocketServerClientSideImpl.js"},{"key":"ext","val":"js"}]},{"key":"innerMarkupManager","val":[{"key":"devCode","val":"\n(function() {\n\n\t//'use strict';\n\n/**\n * @param {pebble.Pebble} innerMarkupPeb\n * @param {Element} parentEle\n */\nfunction hookInnerHtml(innerMarkupPeb, parentEle) {\n\n\tthis.component = {\n\t\tchildMods : {},\n\t\tinitPaths : {},\n\t\tinputs : {},\n\t\tpoints : {},\n\t\tlastUniqueId : 0,\n\t\telements : {}\n\t};\n\n\tvar recs = innerMarkupPeb.getRecords('.');\n\n\tif (recs.length == 0) {\n\t\t//hanldes value or expression with no markup tags\n\t\tprocessInnerText(innerMarkupPeb.getValue('.'), this.component, parentEle);\n\n\t} else {\n\t\tfor (var i = 0; i < recs.length; i++) {\n\t\t\tvar rec = recs[i];\n\t\t\t_hookInnerHtml(rec, parentEle, this.component);\n\t\t}\n\t}\n\treturn this.component;\n};\n\n/**\n * @param {pebble.Pebble} peb\n * @param {Element} parentEle\n * @param {Object} component\n */\nfunction _hookInnerHtml(peb, parentEle, component) {\n\n\tvar tagName = peb.getTagName();\n\tif (tagName != 'control') {\n\t\t//create DOM, expand\n\t\tvar ele = document.createElement(tagName);\n\t\t//create attributes\n\t\tvar attributes = peb.getAttributes('.');\n\t\tvar isManaged = false;\n\t\tfor (var prop in attributes) {\n\t\t\tvar propTemplate = attributes[prop];\n\t\t\tif (propTemplate.indexOf('{{') != -1) {\n\t\t\t\tisManaged = true;\t\n\t\t\t\tvar inElements = propTemplate.split(/({{|}})/);\n\t\t\t\t//set points, inputs\n\t\t\t\tfor (var j = 0; j < inElements.length; j++) {\n\t\t\t\t\tvar innerPart = inElements[j];\n\t\t\t\t\tif (innerPart == '{{' && inElements[j + 2] == '}}') {\n\t\t\t\t\t\tvar path = inElements[j + 1]; //ex. ctx:aa.bb\n\t\t\t\t\t\tif (component.points[path] == null) {\n\t\t\t\t\t\t\tcomponent.points[path] = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//if there are multiple binds w/in a property then either will trigger the rewrite\n\t\t\t\t\t\tcomponent.points[path].push(component.lastUniqueId.toString() + '/' + prop + '/' + propTemplate);\n\n\t\t\t\t\t\t//advance\n\t\t\t\t\t\tj += 2;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcomponent.initPaths[path] = 1;\n\n\t\t\t} else {\n\t\t\t\tele.setAttribute(prop, propTemplate);\n\t\t\t}\n\t\t}\n\n\t\tparentEle.appendChild(ele);\n\n\t\tvar innerValue = peb.getValue('.');\n\t\tif (innerValue != null && innerValue.indexOf('{{') != -1) {\n\t\t\tisManaged = true;\n\t\t}\n\n\t\tif (isManaged) {\n\t\t\t//managed\n\t\t\tcomponent.elements[component.lastUniqueId.toString()] = ele;\n\t\t\tcomponent.lastUniqueId += 1;\n\t\t} \n\n\t\tvar recs = peb.getRecords('.');\n\t\tif (recs.length == 0) {\n\n\t\t\t\tprocessInnerText(peb.getValue('.'), component, ele);\n\n\t\t} else {\n\t\t\tfor (var i = 0; i < recs.length; i++) {\n\n\t\t\t\t_hookInnerHtml(recs[i], ele, component);\n\n\t\t\t}\n\t\t}\n\t} else {\n\n\t\t//control \n\t\tvar id = 'childmod' + component.lastUniqueId;\n\t\tcomponent.lastUniqueId += 1;\n\t\tcomponent.childMods[id] = {};\n\t\tcomponent.childMods[id].dm = peb;\n\t\tcomponent.childMods[id].element = parentEle;\n\n\t}\n}\n/**\n * @param {?string} innerText\n * @param {Object} component\n * @param {Element} ele\n */\nfunction processInnerText(innerText, component, ele) {\n\tif (innerText != null) {\n\t\tvar outerElements = innerText.split(/({{|}})/);\n\t\tfor (var k = 0; k < outerElements.length; k++) {\n\n\t\t\tvar outerPart = outerElements[k];\n\t\t\tif (outerPart !== '') {\n\t\t\t\tif (outerPart == '{{' && outerElements[k + 2] == '}}') {\n\t\t\t\t\tvar path = outerElements[k + 1];\n\t\t\t\t\tcomponent.initPaths[path] = 1;\n\t\t\t\t\tif (component.points[path] == null) {\n\t\t\t\t\t\tcomponent.points[path] = [];\n\t\t\t\t\t}\n\t\t\t\t\t//all inner content will have prop=innerContent and let control decide what to do\n\t\t\t\t\tcomponent.points[path].push(component.lastUniqueId + '/innerContent/' + innerText);\n\t\t\t\t\tvar el = document.createElement('span');\n\t\t\t\t\tcomponent.elements[component.lastUniqueId.toString()] = el;\n\t\t\t\t\tele.appendChild(el);\n\n\t\t\t\t\tcomponent.lastUniqueId += 1;\n\t\t\t\t\t//advance\n\t\t\t\t\tk += 2;\n\t\t\t\t} else {\n\t\t\t\t\t//add as is\n\t\t\t\t\tvar tn = document.createTextNode(outerPart);\n\t\t\t\t\tif (ele != null) {\n\t\t\t\t\t\tele.appendChild(tn);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * @param {string} actualPath : the init paths, everything between {{}}\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctrl\n */\nfunction bindInnerHtmlControl(actualPath, ctrl) {\n\tif (this.component) {\n\t\tvar a_points = this.component.points[actualPath];\n\t\tif (a_points != null) {\n\t\t\t\n\t\t\tvar parts = actualPath.split('.');\n\t\t\tvar specifier = parts.shift();\n\t\t\tvar path = parts.join('.');\n\t\t\t\n\t\t\tfor (var i = 0; i < a_points.length; i++) {\n\t\t\t\tvar elements = a_points[i].split('/');\n\t\t\t\tvar id = elements[0];\n\t\t\t\tvar prop = elements[1];\n\t\t\t\tvar propTemplate = elements[2];\n\t\t\t\tif (prop.indexOf('on') == 0) {\n\n\t\t\t\t\t//no binding events?\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar innerElements = propTemplate.split(/({{|}})/);\n\t\t\t\t\tfor (var j = 0; j < innerElements.length; j++) {\n\t\t\t\t\t\tvar innerPart = innerElements[j];\n\t\t\t\t\t\tif (innerPart == '{{' && innerElements[j + 2] == '}}') {\n\t\t\t\t\t\t\tvar p = innerElements[j + 1];\n\t\t\t\t\t\t\tvar binds = this.ctx.expressionManager.getBinds(p);\n\t\t\t\t\t\t\tfor (var token in binds) {\n\t\t\t\t\t\t\t\tvar bind = binds[token];\n\t\t\t\t\t\t\t\tvar mod = this.ctx.getObjectReference(bind.specifier);\n\t\t\t\t\t\t\t\tif (mod != null && mod.item) {\t\n\t\t\t\t\t\t\t\t\tvar ctx = mod.item;\n\t\t\t\t\t\t\t\t\t//one way bind, purposely DONT put on this.originItems\n\t\t\t\t\t\t\t\t\tvar originItem = ctx.originItemsManager.getOriginInfo(bind.path);\n\t\t\t\t\t\t\t\t\toriginItem.subscribe(this.ctx.moduleAccess.getId(), p, false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//advance\n\t\t\t\t\t\t\tj += 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n/**\n * @param {string} actualPath : the init paths, everything between {{}}\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctrl\n */\nfunction setInnerHtmlControl(actualPath, ctrl) {\n\tif (this.component) {\n\t\tvar a_points = this.component.points[actualPath];\n\t\tif (a_points != null) {\n\t\t\t\n\t\t\tvar parts = actualPath.split('.');\n\t\t\tvar specifier = parts.shift();\n\t\t\tvar path = parts.join('.');\n\t\t\t\n\t\t\tvar fnParamsStr = '';\n\t\t\tif (path.indexOf('(') != -1) {\n\t\t\t\t//event\n\t\t\t\tfnParamsStr = path.substring(path.indexOf('(') + 1, path.indexOf(')'));\n\t\t\t\tpath = path.substring(0, path.indexOf('('));\n\t\t\t}\n\n\t\t\t//var originInfo = ctrl.getOriginInfo(path);\n\t\t\t//var field = originInfo.getInnerField();\n\t\t\t//var typeRef = field ? field.getRef('type') : pebble.shared.TypeReferences.TEXT;\n\t\t\tfor (var i = 0; i < a_points.length; i++) {\n\t\t\t\tvar elements = a_points[i].split('/');\n\t\t\t\tvar id = elements[0];\n\t\t\t\tvar prop = elements[1];\n\t\t\t\tvar propTemplate = elements[2];\n\t\t\t\tif (prop.indexOf('on') == 0) {\n\n\t\t\t\t\thookSingleEvent(this.component, id, specifier, path, prop, ctrl, fnParamsStr);\n\n\t\t\t\t} else {\n\t\t\t\t\t//var value = ctrl.expressionManager.evaluate(propTemplate);\n\t\t\t\t\tvar\tvalue = getPropertyValue(propTemplate, ctrl);\n\t\t\t\t\tif (prop === 'innerContent') {\n\t\t\t\t\t\t//if (typeRef === pebble.shared.TypeReferences.MARKUP) {\n\t\t\t\t\t\t\t//prop = 'innerHTML';\n\t\t\t\t\t\t//} else {\n\t\t\t\t\t\t\tprop = 'textContent'; //display will determine whether to make innerText or not\n\t\t\t\t\t\t//}\n\t\t\t\t\t}\n\t\t\t\t\tsetInnerHtmlProperty(this.component, id, prop, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n/**\n * @param {Object} component\n * @param {string} id\n * @param {string} prop\n * @param {string} val\n */\nfunction setInnerHtmlProperty (component, id, prop, val) {\n\tswitch (prop) {\n\t\tcase 'textContent':\n\t\t\t//if ie\n\t\t\t//document.getElementById(id).innerText/textContent = val;\n\t\t\tcomponent.elements[id][prop] = val;\n\t\t\tbreak;\n\t\tcase 'class':\n\t\t\tcomponent.elements[id].className = val;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcomponent.elements[id].setAttribute(prop,val);\n\t\t\t//component.elements[id][prop] = val;\n\t}\n}\n\n/**\n * expose single binded event\n * @param {Object} component\n * @param {string} id\n * @param {string} specifier\n * @param {string} actualPath\n * @param {string} prop\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctrl\n * @param {string} fnParamsStr\n */\nfunction hookSingleEvent(component, id, specifier, actualPath, prop, ctrl, fnParamsStr) {\n\tvar ele = component.elements[id];\n\tvar etype = prop.substring(2);//strip 'on'\n\t//keyup, blur, focus, change\n\tele.addEventListener(etype, function(e) {\n\n\t\te.stopPropagation();\n\t\te.preventDefault();\n\n\t\tvar mod = ctrl.pCM.getModById(specifier);\n\t\tif (mod != null) {\n\t\t\tctrl = mod.item;\n\t\t}\n\n\t\tif (fnParamsStr && fnParamsStr.trim()) {\n\n\t\t\t//function instance\n\t\t\tvar obj = new pebble.Pebble();\n\t\t\tvar params = obj.getParams();\n\t\t\tparams.setRef('.', 'this.' + actualPath);\n\t\t\tvar elements = fnParamsStr.split(',');\n\t\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\t\tvar paramPair = elements[i].split('=');\n\t\t\t\tvar name = paramPair[0];\n\t\t\t\tvar val = paramPair[1];\n\t\t\t\tif (name.indexOf('@') != -1) {\n\t\t\t\t\t//ref\n\t\t\t\t\tname = name.replace('@', '');\n\t\t\t\t\tparams.setRef(name, val);\n\t\t\t\t} else {\n\t\t\t\t\tparams.setValue(name, val);\n\t\t\t\t}\n\t\t\t}\n\t\t\tctrl.resolve(obj);\n\t\t} else {\n\n\t\t\tif (ctrl.isListContainer) {\n\t\t\t\tctrl.pCM.exec(actualPath, null, null);\n\n\t\t\t} else {\n\t\t\t\tctrl.exec(actualPath, null, null);\n\t\t\t}\n\t\t}\n\n\t}, false); \n}\n\n/**\n * @param {string} id\n * @param {string} prop\n */\n//function getInnerHtmlProperty (id, prop) {\n\t//if (prop === 'textContent') {\n\t\t////if ie\n\t\t////document.getElementById(id).innerText = val;\n\t\t//return this.component.elements[id].textContent;\n\t//} else {\n\t\t//return this.component.elements[id][prop];\n\t//}\n//}\n\n/**\n * @param {string} inner\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctrl\n */\nfunction getPropertyValue (inner, ctrl) {\n\tvar innerElements = inner.split(/({{|}})/);\n\tvar s = '';\n\tfor (var j = 0; j < innerElements.length; j++) {\n\t\tvar innerPart = innerElements[j];\n\t\tif (innerPart == '{{' && innerElements[j + 2] == '}}') {\n\t\t\tvar path = innerElements[j + 1];\n\t\t\t//replace\n\t\t\tvar val = ctrl.expressionManager.evaluate(path);\n\t\t\tif (val != null) {\n\t\t\t\ts += val;\n\t\t\t}\n\t\t\t//advance\n\t\t\tj += 2;\n\t\t} else {\n\t\t\t//add as is\n\t\t\ts += innerPart;\n\t\t}\n\t}\n\treturn s;\n}\n/**\n * @constructor\n */\npebble.libs.standard.InnerMarkupManager = function(ctx){\n\tthis.ctx = ctx;\n}\n\npebble.libs.standard.InnerMarkupManager.prototype._hookInnerHtml = hookInnerHtml;\npebble.libs.standard.InnerMarkupManager.prototype.setInnerHtmlControl = setInnerHtmlControl;\npebble.libs.standard.InnerMarkupManager.prototype.bindInnerHtmlControl = bindInnerHtmlControl;\n\n\n})();\n"},{"key":"codePath","val":"frontend/src/lib/client/innerMarkupManager.js"},{"key":"ext","val":"js"}]},{"key":"controlAccess","val":[{"key":"devCode","val":"/**\n * @interface\n */\npebble.libs.standard.interfaces.ControlAccess = function() {};\n\n\n/**\n * @param {string} id\n * @return {pebble.libs.standard.interfaces.ControlAccess}\n */\npebble.libs.standard.interfaces.ControlAccess.prototype.getGlobalControlAccess = function(id){};\n\n/**\n * @param {string} id\n * @return {pebble.libs.standard.interfaces.DataChangable}\n */\npebble.libs.standard.interfaces.ControlAccess.prototype.getGlobalDataChangable = function(id){};\n\n/**\n * @return {string}\n */\npebble.libs.standard.interfaces.ControlAccess.prototype.getId = function(){};\n\n\n/**\n * @param {string} path\n * @return {?pebble.Pebble}\n */\npebble.libs.standard.interfaces.ControlAccess.prototype.get = function(path){};\n\n/**\n * @param {string} path\n * @param {pebble.Pebble} data\n */\npebble.libs.standard.interfaces.ControlAccess.prototype.set = function(path, data){};\n\n/**\n * @param {string} path\n * @param {pebble.Pebble} data\n */\npebble.libs.standard.interfaces.ControlAccess.prototype.setFull = function(path, data){};\n\n/**\n * @param {string} path\n */\npebble.libs.standard.interfaces.ControlAccess.prototype.setTrue = function(path) { };\n/**\n * @param {string} path\n * @return {pebble.Pebble}\n */\npebble.libs.standard.interfaces.ControlAccess.prototype.getCreateOnNull = function(path){};\n\n/**\n * @param {string} path\n * @return {?string}\n */\npebble.libs.standard.interfaces.ControlAccess.prototype.getValue = function(path){};\n\n/**\n * @param {string} path\n * @return {?string}\n */\npebble.libs.standard.interfaces.ControlAccess.prototype.getRef = function(path){};\n\n/**\n * @param {string} path\n * @return {boolean}\n */\npebble.libs.standard.interfaces.ControlAccess.prototype.getBool = function(path){};\n\n/**\n * @param {string} path\n * @return {?number}\n */\npebble.libs.standard.interfaces.ControlAccess.prototype.getInt = function(path){};\n\n/**\n * @param {string} path\n * @return {Array.<pebble.Pebble>}\n */\npebble.libs.standard.interfaces.ControlAccess.prototype.getRecords = function(path){};\n\n/**\n * @param {string} path\n * @return {pebble.libs.standard.OriginInfo}\n */\npebble.libs.standard.interfaces.ControlAccess.prototype.getOriginInfo = function(path){};\n\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.interfaces.ControlAccess.prototype.resolve = function(obj){};\n\n\n"},{"key":"codePath","val":"frontend/src/lib/client/interfaces/controlAccess.js"},{"key":"ext","val":"js"}]},{"key":"dataChangable","val":[{"key":"devCode","val":"/**\n * @interface\n */\npebble.libs.standard.interfaces.DataChangable = function() {};\n\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {string} path\n * @param {string} relPath\n * @param {Function} cb\n * @return {boolean}\n */\npebble.libs.standard.interfaces.DataChangable.prototype.onDataModelChanged = function (source, path, relPath, cb){};\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {string} path\n * @param {Function} cb\n */\npebble.libs.standard.interfaces.DataChangable.prototype.onDataModelChangedExact = function (source, path, cb){};\n\n/**\n * @return {string}\n */\npebble.libs.standard.interfaces.DataChangable.prototype.getId = function(){};\n\n/**\n * @param {string} path\n * @param {?string} value\n */\npebble.libs.standard.interfaces.DataChangable.prototype.setRef = function(path, value){};\n\n"},{"key":"codePath","val":"frontend/src/lib/client/interfaces/dataChangable.js"},{"key":"ext","val":"js"}]},{"key":"moduleAccess","val":[{"key":"devCode","val":"/**\n * @interface\n */\npebble.libs.standard.interfaces.ModuleAccess = function() {};\n\n/**\n * @return {string}\n */\npebble.libs.standard.interfaces.ModuleAccess.prototype.getId = function(){};\n\n/**\n * @return {pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.interfaces.ModuleAccess.prototype.getParentContext = function(){};\n\n/**\n * @return {pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.interfaces.ModuleAccess.prototype.getParentControl = function(){};\n\n/**\n * @return {pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.interfaces.ModuleAccess.prototype.getClientControl = function(){};\n\npebble.libs.standard.interfaces.ModuleAccess.prototype.kill = function(){}; //??? give controls ability to kill entire module\n\n/**\n * @return {string}\n */\npebble.libs.standard.interfaces.ModuleAccess.prototype.getTagName = function(){};\n\n/**\n * @param {pebble.Pebble} dm\n * @param {boolean} isLoadTop\n * @param {Function} cb\n */\npebble.libs.standard.interfaces.ModuleAccess.prototype.rollItem = function(dm, isLoadTop, cb){};\n\n/**\n * @param {pebble.Pebble} winItem\n * @param {Function} cb\n */\npebble.libs.standard.interfaces.ModuleAccess.prototype.getItem = function(winItem, cb){};\n\n/**\n * @param {?string} id\n * @return {pebble.libs.standard.interfaces.ModuleAccess}\n */\npebble.libs.standard.interfaces.ModuleAccess.prototype.getGlobalModule = function(id){};\n \n/**\n * @return {Element}\n */\npebble.libs.standard.interfaces.ModuleAccess.prototype.getDisplay = function(){}; //\n\n"},{"key":"codePath","val":"frontend/src/lib/client/interfaces/moduleAccess.js"},{"key":"ext","val":"js"}]},{"key":"layoutStateManager","val":[{"key":"devCode","val":"\n(function() {\n\n\t//'use strict';\nvar layoutStates = null;\nvar layoutStatesPeb = null;\nvar globalSearchPath = null;\n\n\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n */\nfunction startHistoryWatch (ctx) {\n\n\tvar form = pebble.libs.standard.Module.topMod.deployment.getTypeDocument(ctx.getRef('.'));\n\n\t// set private global layoutStates\n\tlayoutStatesPeb = form.get('routes.layoutStates');\n\tglobalSearchPath = form.getRef('routes.globalSearchPath');\n\tlayoutStates = form.getRecords('routes.layoutStates');\n\n  if (layoutStates.length > 0) {\n\n    var hash = window.location.hash;\n    if (!hash) {\n      window.location.hash = '/';\n      hash = window.location.hash;\n    }\n\n    evaluateHistoryFromHash(ctx, hash.substring(1));\n\n\n    window.addEventListener('hashchange', function() {\n      var requiresClear = hash.length > window.location.hash.length && hash.indexOf(window.location.hash) == 0;\n      hash = window.location.hash;\n      if (hash) {\n        evaluateHistoryFromHash(ctx, hash.substring(1));\n      }\n    }, false);\n\n  }\n}\n\n/**\n * evaluate what is in the address bar\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n * @param {string} hash\n */\nfunction evaluateHistoryFromHash (ctx, hash) {\n\n\thash = hash.replace(/\\//g, '.');\n\tvar layoutState = getLayoutStateFromUrl(hash);\n\tvar url = layoutState.getValue('url').replace(/\\//g, '.');\n\t\n\tvar data = getDataFromPath(url, hash);\n\tvar layoutPaths = layoutState.getRecords('layoutPaths');\n\tfor (var i = 0; i < layoutPaths.length; i++) {\n\t\tvar layoutPath = layoutPaths[i];\n\t\tvar path = layoutPath.getRef('.');\n\t\tvar filledPath = setPathFromData(path, data);\n\t\t//grab params from url\n\t\tevaluateHistory(ctx, filledPath.replace(/\\./g, '/'));\n\t}\n\n\tvar dataPath = layoutState.getRef('dataPath');\n\tif (dataPath != null) {\n\t\tvar filledDataPath = setPathFromData(dataPath, data);\n\t\tsetGlobalIndexItem(filledDataPath);\n\t}\n}\n\n/**\n * does something\n */\nfunction getGlobalIndexItemsControl() {\n\n\tvar topApp = pebble.libs.standard.Module.topMod.item;\n\tvar globalIndexItemOrigin = topApp.getOriginInfo(globalSearchPath);\n\t//need to get a control bound to globalIndexItems in order to selected it, what if there are no controls on it???\n\tfor (var ctrlId in globalIndexItemOrigin.bindedControls){\n\t\tvar control = topApp.getGlobalControlAccess(ctrlId);\n\t\tif (control instanceof pebble.libs.standard.ArrayTreeBase) {\n\t\t\treturn control;\n\t\t}\n\t}\n\treturn null;\n}\n\n/**\n * setHash figures out the selected ui path via getBaseurlHash and appends relMeta\n * @param {string} dataPath\n */\nfunction setGlobalIndexItem (dataPath) {\n\n\tvar control = getGlobalIndexItemsControl();\n\tif (control != null) {\n\n\t\tvar globalIndexItemOrigin = control.getOriginInfo(globalSearchPath);\n\t\tvar globalIndexItemsPeb = globalIndexItemOrigin.getCreateOnNull();\n\t\tvar recs = globalIndexItemsPeb.getRecords('.');\n\t\tfor (var i = 0; i < recs.length; i++) {\n\t\t\tvar rec = recs[i];\n\t\t\tif (rec.getRef('dataPath') == dataPath) {\n\t\t\t\tcontrol.setSelectedItem(rec.getTagName());\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} \n}\n\n/**\n * @param {string} hash\n * @return {pebble.Pebble}\n */\nfunction getLayoutStateFromUrl (hash) {\n\n\tfor (var i = 0; i < layoutStates.length; i++) {\n\t\tvar layoutState = layoutStates[i];\n\t\tvar url = layoutState.getValue('url').replace(/\\//g, '.');\n\t\tif (matchUrl(url, hash)) {\n\t\t\treturn layoutState;\n\t\t}\n\t}\n\treturn null;\n}\n\n/**\n * @param {string} path\n * @param {string} actualPath\n */\nfunction matchUrl (path, actualPath) {\n\n\tvar pathElements = path.split('.');\n\tvar actualPathElements = actualPath.split('.');\n\n\tif (pathElements.length == actualPathElements.length) {\n\n\t\tfor (var i = 0; i < pathElements.length; i++) {\n\t\t\tvar pathElement = pathElements[i];\n\t\t\tvar actualPathElement = actualPathElements[i];\n\t\t\tif (pathElement != actualPathElement && pathElement.indexOf('{{') == -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n * @param {string} dataPath\n */\nfunction setLayoutStateByDataPath(dataPath) {\n\n\tsetHash(getLayoutStateFromDataPath(dataPath));\n\n}\n\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n * @param {string} meta\n * @param {boolean} byDataPath\n * @param {pebble.Pebble} dataPathParams\n * @param {?string} layoutStateRef\n * @param {string} dataPath\n * @return {boolean} : return whether handled by setting has or not\n */\nfunction checkLayoutState(ctx, meta, byDataPath, dataPathParams, layoutStateRef, dataPath) {\n\t\n\tvar originInfo = ctx.getOriginInfo('model');\n\tvar basePath = originInfo.getBasePath();\n\n\t//this is the case when an array control bound to globalIndexItems selects (other cases usually setLayoutStateByDataPath)\n\tif (basePath != null && basePath.split('.').pop() == 'globalIndexItems') {\n\n\t\tvar selectedItem = originInfo.getCreateOnNull().get(meta);\n\t\treturn setHash(getLayoutStateFromDataPath(selectedItem.getRef('dataPath')));\n\n\t} else {\n\n\t\tif (ctx.getBool('enableUrlBind')) {\n\t\t\t\n\t\t\tvar baseHash = getBaseUrlHash(ctx.moduleAccess.getParentControl(), '');\n\n\t\t\tvar hash = baseHash != '' ? baseHash + '/' + meta : meta;\n\n\t\t\t//get matching layout state\n\t\t\t//check this layout path \n\t\t\tvar layoutStateObj = null;\n\t\t\tif (!byDataPath) {\n\t\t\t\tlayoutStateObj = getLayoutStateFromLayoutPath(hash.replace(/\\//g, '.'));\n\t\t\t} else {\n\t\t\t\t//if none check by data path\n\t\t\n\t\t\t\tif (layoutStateRef) {\n\n\t\t\t\t\t//when multiple layout paths exist for the same data path\n\t\t\t\t\tvar layoutState = layoutStatesPeb.get(layoutStateRef);\t\n\t\t\t\t\tvar path = layoutState.getRef('dataPath');\n\t\t\t\t\tvar data = getDataFromPath(path, dataPath);\n\t\t\t\t\tlayoutStateObj = {data:data, layoutState:layoutState};\n\t\t\t\t} else {\n\n\t\t\t\t\t//take first layout state to match dataPath\n\t\t\t\t\tlayoutStateObj = getLayoutStateFromDataPath(dataPath);\n\t\t\t\t}\n\n\t\t\t\t//augment\n\t\t\t\tif (dataPathParams) {\n\t\t\t\t\tvar params = dataPathParams.getRecords('.');\n\t\t\t\t\tfor (var i = 0; i < params.length; i++) {\n\t\t\t\t\t\tvar param = params[i];\n\t\t\t\t\t\tlayoutStateObj.data[param.getTagName()] = param.getRef('.');\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn setHash(layoutStateObj);\n\t\t} \n\t}\n\treturn false;\n}\n\n/**\n * @param {Object} layoutStateObj\n */\nfunction setHash(layoutStateObj) {\n\tif (layoutStateObj != null) {\n\n\t\tvar data = layoutStateObj.data;\n\t\tvar layoutState = layoutStateObj.layoutState;\n\t\tvar url = setPathFromData(layoutState.getValue('url'), data);\n\t\twindow.location.hash = url;\n\t\treturn true;\n\n\t} \n\treturn false;\n}\n\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n * @param {string} hash\n * @return {string}\n */\nfunction getBaseUrlHash (ctx, hash) {\n\tvar type = ctx.getRef('.');\n\tif (ctx.getOriginInfo('enableUrlBind').getBool() && (type.indexOf('StackPanel') != -1 || type.indexOf('ArrayStackControl') != -1 || type.indexOf('ArraySingleControl') != -1)) {\n\t\tvar meta = ctx.getSingleSelectedMeta();\n\t\tif (meta != null) {\n\t\t\tif (meta.indexOf('.') != -1) {\n\t\t\t\tmeta = meta.substring(meta.lastIndexOf('.') + 1);\n\t\t\t}\n\t\t\thash = '/' + meta + hash;\n\t\t}\n\t} \n\n\tvar parent = ctx.moduleAccess.getParentControl();\n\tif (parent != null) {\n\t\treturn getBaseUrlHash(parent, hash);\n\t} else {\n\t\tif (hash.indexOf('/') != -1) {\n\t\t\thash = hash.substring(1);\n\t\t}\n\t\treturn hash;\n\t}\n}\n\n/**\n * @param {string} layoutPath\n * @return {Object}\n */\nfunction getLayoutStateFromLayoutPath (layoutPath) {\n\n\tfor (var i = 0; i < layoutStates.length; i++) {\n\t\tvar layoutState = layoutStates[i];\n\t\tvar paths = layoutState.getRecords('layoutPaths');\n\t\tfor (var j = 0; j < paths.length; j++) {\n\t\t\tvar path = paths[j].getRef('.');\n\t\t\tif (path != null && matchUrl(path, layoutPath)) {\n\t\t\t\tvar data = getDataFromPath(path, layoutPath);\n\t\t\t\treturn {data: data, layoutState:layoutState};\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}\n/**\n * @param {?string} dataPath\n * @return {Object}\n */\nfunction getLayoutStateFromDataPath (dataPath) {\n\tif (dataPath != null) {\n\t\tfor (var i = 0; i < layoutStates.length; i++) {\n\t\t\tvar layoutState = layoutStates[i];\n\t\t\tvar path = layoutState.getRef('dataPath');\n\t\t\tif (path) {\n\t\t\t\tif (matchUrl(path, dataPath)) {\n\t\t\t\t\tvar data = getDataFromPath(path, dataPath);\n\t\t\t\t\treturn {data:data, layoutState:layoutState};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}\n/**\n * @param {string} path\n * @param {string} actualPath\n * @return {Object}\n */\nfunction getDataFromPath (path, actualPath) {\n\n\tvar ret = {};\n\tvar pathParts = path.split('.');\n\tvar actualPathParts = actualPath.split('.');\n\tfor (var i = 0; i < pathParts.length; i++) {\n\t\tvar pathPart = pathParts[i];\n\t\tvar actualPathPart = actualPathParts[i];\n\t\tif (pathPart.indexOf('{{') != -1) {\n\t\t\tvar field = pathPart.replace(/\\{\\{/, '').replace(/\\}\\}/, '');\n\t\t\tret[field] = actualPathPart;\n\t\t}\t\n\t}\n\treturn ret;\n}\n/**\n * @param {?string} path\n * @param {Object} data\n * @return {string}\n */\nfunction setPathFromData (path, data) {\n\tvar ret = '';\n\tif (path != null) {\n\t\tvar elements = path.split(/({{|}})/);\n\t\t//set points, inputs\n\t\tfor (var j = 0; j < elements.length; j++) {\n\t\t\tvar innerPart = elements[j];\n\t\t\tif (innerPart == '{{' && elements[j + 2] == '}}') {\n\t\t\t\tvar member = elements[j + 1];\n\t\t\t\tret += data[member];\n\t\t\t\t//advance\n\t\t\t\tj += 2;\n\t\t\t} else {\n\t\t\t\tret += elements[j];\n\t\t\t}\n\t\t}\n\t} else {\n\t\tthrow new Error('LayoutStateManager: setPathFromData() requires path');\n\t}\n\treturn ret;\n}\n/**\n * get child contexts stopping at stackPanels with urlBind\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n * @param {Array.<pebble.libs.standard.ClientControl>} list\n * @return {Array.<pebble.libs.standard.ClientControl>}\n */\nfunction getChildCtxs_UrlEnabled (ctx, list) {\n\tfor (var key in ctx.modules) {\n\t\tvar win = ctx.modules[key];\n\t\tif (win != null) {\n\t\t\tvar item = win.getClientControl();\n\t\t\tif (item != null) { // when items are loading (dynamic) they dont exist\n\t\t\t\tvar enableUrlBind = item.getBool('enableUrlBind');\n\t\t\t\tif (item != null && enableUrlBind) {\n\t\t\t\t\tlist.push(item);\n\t\t\t\t}\n\t\t\t\t//if url bind we don't want to go further\n\t\t\t\tif (item.isListContainer && !enableUrlBind) {\n\t\t\t\t\tlist = getChildCtxs_UrlEnabled(item, list);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn list;\n}\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n * @param {string} hash\n */\nfunction evaluateHistory (ctx, hash) {\n\tvar tokens = hash.split('/');\n\tvar currentToken = tokens.shift();\n\tvar found = false;\n\tif (currentToken != '') {\n\t\t//go inward finding stack panels with urlBind enabled\n\t\t//stack panel must be in top ctx\n\t\tvar list = getChildCtxs_UrlEnabled(ctx, []);\n\t\t//check for stackPanel first (because it would be in same ctx as arrayStackPanel)\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tvar ctrl = list[i];\n\t\t\tif (ctrl.getRef('.').indexOf('StackPanel') != -1){\n\t\t\t\t//check signature (that it has that meta)\n\t\t\t\tfound = ctrl.get('model.' + currentToken) != null;\n\n\t\t\t\tif (found) {\n\t\t\t\t\t_evalHistStackPanel(tokens, currentToken, ctrl);\n\t\t\t\t\tfound = true;\n\t\t\t\t\t//break;// purposely no break so linked stack panels all get set\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//if no stackPanel check for arrayStackPanel\n\t\tif (!found) {\n\t\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\t\tvar ctrl = list[i];\n\t\t\t\tvar ctrlRef = ctrl.getRef('.');\t\n\t\t\t\tif ((ctrlRef.indexOf('ArrayStackControl') != -1 || ctrlRef.indexOf('ArraySingleControl') != -1) && ctrl.getOriginInfo('enableUrlBind').getBool()){\n\t\t\t\t\t_evalHistArrayStackPanel(tokens, currentToken, ctrl);\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t//if not found do on all children\t> dont need this, it is required that full layout path is specified. > need this for child panel of stack panel\n\t\tif (!found) {\n\t\t\tvar fullList = ctx.getChildCtxs([],'top2Bot', false, false);\n\t\t\tfor (var i = 0; i < fullList.length; i++) {\n\t\t\t\tvar ctrl = fullList[i];\n\t\t\t\tfound = evaluateHistory(ctrl, hash);\n\t\t\t\tif (found) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn found;\n}\n/**\n * @param {Array} tokens\n * @param {string} currentToken\n * @param {pebble.libs.standard.ClientControl} stackPanel\n */\nfunction _evalHistStackPanel (tokens, currentToken, stackPanel) {\n\tvar originInfo = stackPanel.getOriginInfo('model');\n\tvar meta = stackPanel.getSingleSelectedMeta();\n\n\tif (currentToken != meta) {\n\n\t\tstackPanel.setSelectedItem(currentToken, function() {\n\n\t\t\tevaluateHistory(stackPanel.modules[currentToken].getClientControl(), tokens.join('/'));\n\n\t\t});\n\n\t} else {\n\t\t//does nothing at this stack panel, moves on to next\n\t\tif (tokens.length > 0) {\n\t\t\tif (stackPanel.loadEvent) {\n\t\t\t\tstackPanel.loadEvent.subscribe(function() {\n\t\t\t\t\t\n\t\t\t\t\tevaluateHistory(stackPanel.modules[currentToken].getClientControl(), tokens.join('/'));\n\n\t\t\t\t});\n\n\t\t\t} else {\n\n\t\t\t\tevaluateHistory(stackPanel.modules[currentToken].getClientControl(), tokens.join('/'));\n\n\t\t\t}\n\t\t} \n\t}\n}\n/**\n * @param {Array} tokens\n * @param {string} currentToken\n * @param {pebble.libs.standard.ClientControl} arrayStackControl\n */\nfunction _evalHistArrayStackPanel (tokens, currentToken, arrayStackControl) {\n\tvar originInfo = arrayStackControl.getOriginInfo('model');\n\tvar meta = arrayStackControl.getSingleSelectedMeta();\n\n\tif (currentToken != meta) {\n\t\t\n\t\t//arrayStackPanel\n\t\tarrayStackControl.setSelectedItem(currentToken, function() {\n\t\t\t//next\n\t\t\tvar ctrlRef = arrayStackControl.getRef('.');\n\t\t\tvar mod;\n\t\t\tif (ctrlRef.indexOf('ArraySingleControl') != -1) {\n\n\t\t\t\tmod = arrayStackControl.module;\n\n\t\t\t} else {\n\n\t\t\t\tmod = arrayStackControl.modules[currentToken];\n\n\t\t\t}\n\t\t\tevaluateHistory(mod.getClientControl(), tokens.join('/'));\n\n\t\t});\n\t\t\n\t} else {\n\t\t//does nothing at this array stack panel, moves on to next\n\t\tif (tokens.length > 0) { \n\t\t\t\n\t\t\t//must make sure arrayStackControl is not loading selected item currently\n\t\t\tif (arrayStackControl.loadEvent) {\n\t\t\t\tarrayStackControl.loadEvent.subscribe(function() {\n\t\t\t\t\t\n\t\t\t\t\tvar mod = arrayStackControl.modules[currentToken];\n\t\t\t\t\tevaluateHistory(mod.getClientControl(), tokens.join('/'));\n\n\t\t\t\t});\n\n\t\t\t} else {\n\n\t\t\t\tvar mod = arrayStackControl.modules[currentToken];\n\t\t\t\tevaluateHistory(mod.getClientControl(), tokens.join('/'));\n\n\t\t\t}\n\t\t} \n\t}\n}\n\n/**\n * @constructor\n */\npebble.libs.standard.LayoutStateManager = function(){ }\n\npebble.libs.standard.LayoutStateManager.prototype.startHistoryWatch = startHistoryWatch;\npebble.libs.standard.LayoutStateManager.prototype.checkLayoutState = checkLayoutState;\npebble.libs.standard.LayoutStateManager.prototype.setLayoutStateByDataPath = setLayoutStateByDataPath;\n\n\n})();\n"},{"key":"codePath","val":"frontend/src/lib/client/layoutStateManager.js"},{"key":"ext","val":"js"}]},{"key":"libs","val":[{"key":"devCode","val":"/**\n * @namespace\n */\npebble.libs = {}\n\n/**\n * @namespace\n */\npebble.libs.standard = {}\n"},{"key":"codePath","val":"frontend/src/lib/client/libs.js"},{"key":"ext","val":"js"}]},{"key":"loadManager","val":[{"key":"devCode","val":"\n(function() {\n\n\t//'use strict';\n\t\n/**\n * @param {string} id\n */\nfunction registerChildContext (id) {\n\tif (!this.ctx.isLoadTop && this.ctx.pCM != null) {\n\t\tgetRegisterTop(this.ctx).loadManager.cCMs[id] = false;\n\t}\n}\n\n/**\n * @param {number} initCount\n */\nfunction initChildModsCount (initCount) {\n\tthis.childModsCount = initCount;\n}\n\n/**\n * @param {boolean} loaded\n */\nfunction setAllChildrenLoaded (loaded) {\n\tthis.allChildrenLoaded = loaded;\n}\n\n/**\n * @return {boolean}\n * @private\n */\nfunction innerCtrlsReady () {\n\treturn this.allChildrenLoaded || this.childModsCount == 0;\n}\n/**\n * called from child modules when setLoaded to check if all children loaded\n * @param {string} childId\n */\nfunction checkChildrenLoaded (childId) {\n\t// sets child as loaded\n\tthis.cCMs[childId] = true;\n\t// if not allChildrenLoaded then check again\n\tif (!this.allChildrenLoaded && Object.keys(this.cCMs).length >= this.childModsCount) {  \n\t\t// true until one is false\n\t\tthis.allChildrenLoaded = true;\n\t\tfor (var key in this.cCMs) {\n\t\t\tif (!this.cCMs[key]) {\n\t\t\t\tthis.allChildrenLoaded = false;\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.checkOnReady();\n\t}\n}\n\n/**\n * for onReady to be trigger, the folloing must be ready -inner controls\n * (for container we consider no inner controls, they are created in\n * instWins) note: this means container load even if there wins are not\n * loaded yet\n * @private\n */\nfunction checkOnReady () {\n\n\t//if (!this.ctxLoaded\t&& (this.isListContainer || this.innerCtrlsReady())) {\n\tif (!this.ctxLoaded\t&& ((this.ctx.isListContainer && !this.ctx.isLoadTop) || this.innerCtrlsReady())) {\n\t\tthis.ctx.onReady();\n\n\t\t// could call localCtxLoaded on all children\n//\t\tList<Item> ctxs = this.getChildCtxs(new ArrayList<Item>(), 'bot2Top', false, true);\n//\t\tfor (Item ctx : ctxs) {\n//\t\tctx.execLocalCtxLoaded(new Callback() {\n//\t\t});\n//\t\t}\n\t}\n}\n\n/**\n * control call this to reports to its pCM (to check if all other children\n * are in) except if this is the loadTop where we dont want to trigger\n * anything above (could do a onChildChange but dont need it yet)\n * @param {string} id\n * @return {boolean} return true when isLoadTop \n */\nfunction setLoaded (id) {\n\t// dont want it to loaded again once loaded\n\tif (!this.ctxLoaded) {\n\t\tthis.ctxLoaded = true;\n\n\t\tif (!this.ctx.isLoadTop) {\n\t\t\tgetRegisterTop(this.ctx).loadManager.checkChildrenLoaded(id);\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Usually children register to pCM but when the top is a listContainer it must register there\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n */\nfunction getRegisterTop (ctx) {\n\n\tvar pctx = ctx.moduleAccess.parent;\n\tif (pctx == null) {\n\t\treturn null;\n\t} else {\n\t\tif (pctx.isLoadTop || pctx == ctx.pCM) {\n\t\t\treturn pctx;\n\t\t} else {\n\t\t\treturn getRegisterTop(pctx); \n\t\t}\n\t}\n}\n\n/**\n * @param {number} x\n */\nfunction increaseRegisterTopChildModsCount(x) {\n\n\tvar regTop = getRegisterTop(this.ctx);\n\tif (regTop) {\n\t\tregTop.loadManager.childModsCount += x;\n\t}\n}\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n * @constructor\n */\npebble.libs.standard.LoadManager = function(ctx){ \n\n\tthis.ctx = ctx;\n\t/**\n\t * cache to check if all the children are loaded\n\t * note: after load cCMs is not used\n\t * @type {boolean}\n\t * @protected\n\t */\n\tthis.allChildrenLoaded = false; \n\n\t/**\n\t * implemented so stop from assuming loaded but it doesn't look at the inner container mods thus doesn't represent total context child mods\n\t * a poor man's check, should look for more complete way\n\t * @type {number}\n\t */\n\tthis.childModsCount = 0; \n\t/**\n\t * assoc array of objs where obj = {ref, loaded} where ref win, loaded means it AND ITS CHILDCTXS are loaded\n\t * @type {Object.<boolean>} \n\t */\n\tthis.cCMs = {};\n\t/**\n\t * set by ctx in setLoaded (it doesnt check whether its children are loaded)\n\t * @type {boolean}\n\t */\n\tthis.ctxLoaded = false; \n\n}\npebble.libs.standard.LoadManager.prototype.registerChildContext = registerChildContext;\npebble.libs.standard.LoadManager.prototype.innerCtrlsReady = innerCtrlsReady;\npebble.libs.standard.LoadManager.prototype.checkChildrenLoaded = checkChildrenLoaded;\npebble.libs.standard.LoadManager.prototype.checkOnReady = checkOnReady;\npebble.libs.standard.LoadManager.prototype.setLoaded = setLoaded;\npebble.libs.standard.LoadManager.prototype.initChildModsCount = initChildModsCount;\npebble.libs.standard.LoadManager.prototype.setAllChildrenLoaded = setAllChildrenLoaded;\npebble.libs.standard.LoadManager.prototype.increaseRegisterTopChildModsCount = increaseRegisterTopChildModsCount;\n\n\n})();\n"},{"key":"codePath","val":"frontend/src/lib/client/loadManager.js"},{"key":"ext","val":"js"}]},{"key":"module","val":[{"key":"devCode","val":"\n(function() {\n\n\n\n/**\n * Module is the container for item.  It can hold state between item switching\n * @constructor\n * @extends {pebble.Pebble}\n * @param {?pebble.libs.standard.ClientControl} parent\n * @param {?pebble.libs.standard.ClientControl} pCM\n * @param {?Element} ele\n * @param {string} id\n * @param {pebble.Pebble=} slot\n * @implements {pebble.libs.standard.interfaces.ModuleAccess}\n */\npebble.libs.standard.Module = function(parent, pCM, ele, id, slot) {\n\n\tif (slot) {\n\t\t//w/slot\n\t\tpebble.Pebble.call(this, slot);\n\t} else {\n\t\t//top, generic, popup or overlay\n\t\tpebble.Pebble.call(this);\n\t} \n\n\t/**\n\t * @type {pebble.libs.standard.ClientControl}\n\t */\n\tthis.parent = parent;\n\t/**\n\t * @type {pebble.libs.standard.ClientControl}\n\t */\n\tthis.pCM = pCM;\n\t/**\n\t * @type {string}\n\t */\n\tthis.pfId = id || 'NO_ID';\n\t/**\n\t * @type {Element}\n\t */\n\tthis.element = ele;\n\t/**\n\t * @type {pebble.libs.standard.ClientControl}\n\t */\n\tthis.item = null;\n\t\n\tif (pebble.libs.standard.Module.objs[this.pfId] != null) {\n\t\tthrow new Error('module exists: ' + this.pfId);\n\t}\n\tpebble.libs.standard.Module.objs[this.pfId] = this;\n\n};\n\npebble.inherits(pebble.libs.standard.Module, pebble.Pebble);\n\n/**\n * @param {pebble.Pebble} dm\n * @param {boolean} isLoadTop\n * @return {pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.Module.prototype.getControlBase = function(dm, isLoadTop) {\n\n\tvar ret = null;\n\n\tvar type = dm.getRef('.');\n\tif (type.indexOf(':') != -1) {\n\t\t//abbreviated version\n\t\tvar\telements = type.split(':');\t\n\t\tvar collection = elements[0];\n\t\tvar name = elements[1];\n\t\ttype = 'theModel.libs.' + collection + '.controls.' + name;\n\t\tdm.setRef('.', type);\n\t}\n\n\treturn this.getInheritChain(type, dm, isLoadTop);\n\t\n};\n/**\n * @param {string} type\n * @param {pebble.Pebble} dm\n * @param {boolean} isLoadTop\n * @return {pebble.libs.standard.ClientControl}\n */\npebble.libs.standard.Module.prototype.getInheritChain = function(type, dm, isLoadTop) {\n\tvar elements = type.split('.');\n\tvar collection, name;\n\n\tname = elements.pop();\n\telements.pop();\n\tcollection = elements.pop();\n\n\tvar o = pebble.libs[collection][name];\n\tif (o != null) {\n\t\t//see if has coded widget\n\t\treturn new o(this, dm, isLoadTop);\n\t} else {\n\n\t\t//inherit chain\n\t\tvar control = pebble.libs.standard.Module.topMod.deployment.getTypeDocument(type);\n\t\tvar inherits = control.getRef('inherits');\n\t\tif (inherits != null) {\n\t\t\treturn this.getInheritChain(inherits, dm, isLoadTop);\n\t\t} else {\n\t\t\tthrow new Error('Module: getInheritChain() no inherits references for ' + type);\n\t\t}\n\t}\n};\n/**\n * load top item \n * @param {pebble.Pebble} winItem\n * @param {Function} cb\n */\npebble.libs.standard.Module.prototype.getItem = function (winItem, cb) {\n\tthis.rollItem(winItem, true, cb);\n};\n/**\n * @param {pebble.Pebble} dm\n * @param {boolean} isLoadTop\n * @param {Function} cb\n */\npebble.libs.standard.Module.prototype.rollItem = function(dm, isLoadTop, cb) {\n\tthis.clearItem();\n\n\tvar controlType = dm.getRef('.');\n\tif (controlType != null) {\n\n\t\tthis.item = this.getControlBase(dm, isLoadTop);\n\n\t\tthis.item.roll(cb); // we dont roll in init so that bottom ctrls recognize upper ctrls when instatiating\n\n\t} else {\n\t\tthrow 'Item.loadItem: no type: ' + controlType;\n\t}\n};\n\n/**\n * @private\n */\npebble.libs.standard.Module.prototype.clearItem = function() {\n\tif (this.item != null) {\n\t\tthis.item.kill();\n\t\tthis.item = null;\n\t}\n\tthis.remove('control');\n};\n/**\n * @private\n */\npebble.libs.standard.Module.prototype.kill = function() {\n\n\tif (this.item != null) {\n\t\tthis.item.kill();\n\t\tthis.item = null;\n\t}\n\n\tvar id = this.pfId;\n\n\tif (this.element.parentNode) {\n\t\tthis.element.parentNode.removeChild(this.element);\n\t}\n\t\n\tif (this.parent != null) {\n\t\tvar meta = id.substring(id.lastIndexOf('-') + 1);\n\t\tdelete this.parent.modules[meta];\n\t}\n\tdelete pebble.libs.standard.Module.objs[id];\n\n};\n/**\n * @return {string}\n */\npebble.libs.standard.Module.prototype.toString = function() {\n\treturn this.getTagName();\n};\n/**\n * @override\n */\npebble.libs.standard.Module.prototype.getId = function() {\n\treturn this.pfId;\n};\n/**\n * @override\n */\npebble.libs.standard.Module.prototype.getParentContext = function() {\n\treturn this.pCM;\n};\n/**\n * @override\n */\npebble.libs.standard.Module.prototype.getParentControl = function() {\n\treturn this.parent;\n};\n/**\n * @override\n */\npebble.libs.standard.Module.prototype.getClientControl = function() {\n\treturn this.item;\n};\n/**\n * @param {pebble.libs.standard.ClientControl} parent\n * @param {pebble.libs.standard.ClientControl} pCM\n * @param {?Element} ele\n * @param {string} id\n * @param {pebble.Pebble=} slot\n * @return {pebble.libs.standard.interfaces.ModuleAccess}\n */\npebble.libs.standard.Module.prototype.getNewInstance = function(parent, pCM, ele, id, slot) {\n\n\treturn new pebble.libs.standard.Module(parent, pCM, ele, id, slot);\n};\n/**\n * @override\n */\npebble.libs.standard.Module.prototype.getGlobalModule = function(pfId) {\n\tif (pfId) {\n\t\treturn pebble.libs.standard.Module.objs[pfId];\n\t} else {\n\t\treturn null;\n\t}\n};\n/**\n * @override\n */\npebble.libs.standard.Module.prototype.getDisplay = function() {\n\treturn this.element;\n};\n\n\n/**\n * @type {pebble.libs.standard.Module}\n */\npebble.libs.standard.Module.topMod = null;\n/**\n * @type {Object} \n */\npebble.libs.standard.Module.objs = {};\n\n\n})();\n"},{"key":"codePath","val":"frontend/src/lib/client/module.js"},{"key":"ext","val":"js"}]},{"key":"mouseEventsManager","val":[{"key":"devCode","val":"\n(function() {\n\n\t//'use strict';\n\t\n  //manage which keys are down  (don't use keypress as that is only for ascii chars, makes it confusing)\n  window.addEventListener(\"keydown\", keysPressed, false);\n  window.addEventListener(\"keyup\", keysReleased, false);\n   \n  var keys = [];\n   \n  function keysPressed(e) {\n        // store an entry for every key pressed\n    keys[e.keyCode.toString()] = true;\n\n    addShortCuts(e, true);\n  }\n\n  //this does not happen for ctrl + 5, etc.!!!\n  function keysReleased(e) {\n    // mark keys that were released\n    keys[e.keyCode.toString()] = false;\n    addShortCuts(e, false);\n  }\n\n  function addShortCuts(e, val) {\n\n    keys['ctrlKey'] = !!e.ctrlKey;\n    keys['altKey'] = !!e.altKey;\n    keys['shiftKey'] = !!e.shiftKey;\n    keys['metaKey'] = !!e.metaKey;\n    switch(e.keyCode) {\n      case 37:\n        keys['left'] = val;\n        break;\n      case 38:\n        keys['up'] = val;\n        break;\n      case 39:\n        keys['right'] = val;\n        break;\n      case 40:\n        keys['down'] = val;\n        break;  \n      case 53://5\n        keys['a5'] = val;\n        break;  \n    }   \n  }\n\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n */\nfunction handleEvent (ctx, e) {\n\t\tvar mouseEvents = ctx.getOriginInfo('mouseEvents').get();\n    var events = mouseEvents.getRecords('.');\n    for (var i = 0; i < events.length; i++) {\n      var ev = events[i];\n      var etype = ev.getTagName();\n\t\t\n      var keyConditions = ev.getRecords('_keyConditions'); //other types of conditions?\n      for (var i = 0; i < keyConditions.length; i++) {\n        var keyCondition = keyConditions[i];\n        var keyCode = keyCondition.getTagName();\n        if (!keys[keyCode.toString()]) {\n          return;\n        }\n      }\n\n      switch (etype) {\n\n        case 'click':\n          if (!ctx.pCM.mouseEventsManager.usingClick) {//ArrayControl will take over for better performace\n\n            handleClick(ctx, e);\n\n          }\n          break;\n\n        case 'change':\n\n          var target = e.currentTarget;\n\n          ctx.exec('mouseEvents.change', null, null);\n          break;\n\n        case 'mouseover':\n          if (!ctx.pCM.mouseEventsManager.usingMouseOver) {//ArrayControl will take over for better performace\n\n            var target = e.currentTarget;\n            var x = e.clientX || 0;\n            var y = e.clientY || 0;\n            handleMouseOver(ctx, x, y);\n          }\n          break;\n\n        default:\n          var genObj = new pebble.Pebble(ev).voidFunc2ReturnFunc('.');\n          ctx.resolve(genObj);\n\n      }\n\n      if (!ev.getBool('exec.propagate')) {\n        e.stopPropagation();\n      }\n      if (!ev.getBool('exec.default')) {\n        e.preventDefault();\n      }\n      \n    }\n}\n\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n * @param {Object} e\n */\nfunction handleClick (ctx, e) {\n\n\tvar target = e.currentTarget;\n\n\tvar isControlKeyDown = !!e.ctrlKey;\n\tvar isShiftKeyDown = !!e.shiftKey;\n\tctx.exec('mouseEvents.click', null, null);\n}\n\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n * @param {number} x\n * @param {number} y \n */\nfunction handleMouseOver (ctx, x, y) {\n\t\n\tctx.exec('mouseEvents.mouseover', null, null);\n}\n\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n * @param {string} ev : 'click', 'mouseover', etc\n */\nfunction hasMouseEvent (ctx, ev) { \n\n\tvar found = false;\n\tvar mouseEvents = ctx.getOriginInfo('displayControl.mouseEvents.' + ev).get();\n\tif (mouseEvents == null) {\n\t\tvar prependControls = ctx.getOriginInfo('prependControls').getRecords();\n\t\tfor (var i = 0; i < prependControls.length; i++) {\n\t\t\tvar prependControl = prependControls[i];\n\t\t\tif (prependControl.get('mouseEvents.' + ev) != null) {\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (!found) {\n\t\t\tvar appendControls = ctx.getOriginInfo('appendControls').getRecords();\n\t\t\tfor (var i = 0; i < appendControls.length; i++) {\n\t\t\t\tvar appendControl = appendControls[i];\n\t\t\t\tif (appendControl.get('mouseEvents.' + ev) != null) {\n\t\t\t\t\tfound = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfound = true;\n\t}\n\treturn found;\n}\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n */\nfunction _applySelectionPolicyClick (ctx) { \n\n  var that = this;\t\n\tthis.usingClick = true;\n\n\tctx.element.addEventListener('click', function(e) {\n\n\t\tvar target = e.srcElement;//currentTarget;\n\t\tvar found = false;\n\t\twhile(!found && target && target != ctx.element) { //dont let it go above container element\n\t\t\tvar meta = target.getAttribute('pebble.meta');\n\t\t\tctx.clickedMeta = meta;\n\t\t\tif (meta) {\n\t\t\t\tfound = true;\n\t\t\t\tvar control;\n\t\t\t\tif (meta.indexOf('prepend') == 0) {\n\t\t\t\t\tvar index = parseInt(meta.replace('prepend', ''), 10);\t\n\t\t\t\t\tcontrol = ctx.prependItems[index];\n\t\t\t\t} else if (meta.indexOf('append') == 0) {\n\t\t\t\t\tvar index = parseInt(meta.replace('append', ''), 10);\t\n\t\t\t\t\tcontrol = ctx.appendItems[index];\n\t\t\t\t} else {\n\t\t\t\t\tcontrol = ctx.getOriginInfo('displayControl').get();\n\t\t\t\t}\n\t\t\t\tvar click = control.get('mouseEvents.click');\n\n\t\t\t\t//its been found, stop propagation\n\t\t\t\tif (!click.getBool('exec.propagate')) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}\n\t\t\t\tif (!click.getBool('exec.default')) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (meta.indexOf('append') == 0 || meta.indexOf('prepend') == 0) {\n\n\t\t\t\t\tif (ctx.isAppendPrependSimpleMarkup(control)) {\n\n\t\t\t\t\t\t//because there is no module\n\t\t\t\t\t\tctx._execListOfVoidRg(ctx, click.getRecords('.'), 0, null, function() {});\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\thandleClick(ctx.modules[meta].item, e);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\tif (ctx.isSimpleMarkup) {\n\n\t\t\t\t\t\t//because there is no module\n\t\t\t\t\t\tctx._execListOfVoidRg(ctx, click.getRecords('.'), 0, null, function() {});\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\thandleClick(ctx.modules[meta].item, e);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttarget = target.parentNode;\t\n\t\t\t}\n\t\t}\n\t}, false);\n}\n\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n */\nfunction _applySelectionPolicyMouseOver (ctx) { \n\n  var that = this;\t\n\tthis.usingMouseOver = true;\n\n\tctx.element.addEventListener('mouseover' , function(e) {\n\n\t\tvar target = e.srcElement;//currentTarget;\n\t\tvar found = false;\n\t\twhile(!found && target && target != ctx.element) { //dont let it go above container element\n\t\t\tvar meta = target.getAttribute('pebble.meta');\n\t\t\tctx.overMeta = meta;\n\t\t\tif (meta) {\n\t\t\t\tfound = true;\n\t\t\t\tvar control;\n\t\t\t\tif (meta.indexOf('prepend') == 0) {\n\t\t\t\t\tvar index = parseInt(meta.replace('prepend', ''), 10);\t\n\t\t\t\t\tcontrol = ctx.prependItems[index];\n\t\t\t\t} else if (meta.indexOf('append') == 0) {\n\t\t\t\t\tvar index = parseInt(meta.replace('append', ''), 10);\t\n\t\t\t\t\tcontrol = ctx.appendItems[index];\n\t\t\t\t} else {\n\t\t\t\t\tcontrol = ctx.getOriginInfo('displayControl').get();\n\t\t\t\t}\n\t\t\t\tvar mouseover = control.get('mouseEvents.mouseover');\n\n\t\t\t\t//its been found, stop propagation\n\t\t\t\tif (!mouseover.getBool('exec.propagate')) {\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}\n\t\t\t\tif (!mouseover.getBool('exec.default')) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t}\n\n\t\t\t\tvar x = e.clientX || 0;\n\t\t\t\tvar y = e.clientY || 0;\n\t\t\t\tif (meta.indexOf('append') == 0 || meta.indexOf('prepend') == 0) {\n\n\t\t\t\t\tif (ctx.isAppendPrependSimpleMarkup(control)) {\n\n\t\t\t\t\t\t//because there is no module\n\t\t\t\t\t\tctx._execListOfVoidRg(ctx, mouseover.getRecords('.'), 0, null, function() {});\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\thandleMouseOver(ctx.modules[meta].item, x, y);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\n\t\t\t\t\tif (ctx.isSimpleMarkup) {\n\n\t\t\t\t\t\t//because there is no module\n\t\t\t\t\t\tctx._execListOfVoidRg(ctx, mouseover.getRecords('.'), 0, null, function() {});\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\thandleMouseOver(ctx.modules[meta].item, x, y);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttarget = target.parentNode;\t\n\t\t\t}\n\t\t}\n\n\t}, false);\n\n}\n/**\n * handles mouseEvents for clientControl and displayControl.mouseEvents, appendPrependCotrol.mouseEvents\n * <click>\n *  <keyConditions>\n *    <ctrlKey>true</ctrlKey>\n *  </keyConditions>\n * </click>\n * <keydown>\n *  <keyConditions>\n *    <ctrlKey>true</ctrlKey>\n *    <55>true</55>\n *  </keyConditions>\n * </keydown> \n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n * @constructor\n */\npebble.libs.standard.MouseEventsManager = function(ctx){ \n\n\tif (ctx.isArrayControl) {\n\t\t//apply selection policy\n\t\n\t\tif (hasMouseEvent(ctx, 'click')) {\n\t\t\t_applySelectionPolicyClick(ctx);\n\t\t}\n\t\tif (hasMouseEvent(ctx, 'mouseover')) {\n\t\t\t_applySelectionPolicyMouseOver(ctx);\n\t\t}\n\n\t} else {\n\n\t\tvar mouseEvents = ctx.getOriginInfo('mouseEvents').get();\n    if (mouseEvents) {\n      var events = mouseEvents.getRecords('.');\n      var handledEvents = {};\n      for (var i = 0; i < events.length; i++) {\n        var ev = events[i];\n        var etype = ev.getTagName();\n        //just need one handler, keyup, blur, focus, change\n        if (!handledEvents[etype]) {\n          ctx.element.addEventListener(etype, function(ev) {\n            return function(e) {\n              addShortCuts(e, true);\n              handleEvent(ctx, e);\n\n            }\n\n          }(ev), false); \n        }\n        handledEvents[etype] = true;\n      }\n    }\n\t}\n}\n\n})();\n"},{"key":"codePath","val":"frontend/src/lib/client/mouseEventsManager.js"},{"key":"ext","val":"js"}]},{"key":"originInfo","val":[{"key":"devCode","val":"\n(function() {\n\t//'use strict';\n\t\n/**\n * \n * When the DataModel is contacted that data changed it must call all items that are registered to it, including all items that are registered to the data's children\n * Ex.  A change to schedule must fire onDataModelChanged for 'schedule' and any others that start w/'schedule' ('schedule.dateStart', 'schedule.dataEnd')\n * If there were a control that handles 'schedule' it would be to be alerted when details such as 'schedule.dateStart' and 'schedule.dateEnd' change.\n * -right now we don't handle these (no controls like that yet, possible GoogleMap if location is a composite)\n * -if we did implement it, it would incur a lot of updating to the upper composite objects that would by default just do nothing\n * -another possibility if need arises is to bind the details, 'schedule.dateStart' and 'schedule.dateEnd', in that control and then it will be notified\n * \n * Arrays are done completely different.  The array controls handle the updating where the array item is the unit.\n * @author Ryan Tsunoda\n *\n */\n\n/**\n * @constructor\n */\nfunction ItemMapPair (itemId, map){\n\n\t/**\n\t * @type {string}\n\t */\n\tthis.itemId = itemId;\n\t/**\n\t * @type {Object.<Object.<number>>} \n\t */\n\tthis.map = map;\n}\n\n/**\n * @constructor\n * @param {string} pathToCreateOriginInfo\n * @param {string} ctrlId\n * @param {Object.<number>} pathToRegister\n */\nfunction NewSubscriberList (pathToCreateOriginInfo, ctrlId, pathToRegister){\n\n\t/**\n\t * @type {string}\n\t */\n\tthis.pathToCreateOriginInfo = pathToCreateOriginInfo;\n\n\t/**\n\t * @type {string}  \n\t */\n\tthis.ctrlId = ctrlId;\n\n\t/**\n\t * @type {Object.<number>}\n\t */\n\tthis.pathToRegister = pathToRegister;\n}\n\n/**\n * order top to bot so top controls can override\n * @param {Object.<Object.<Object.<number>>>} hash\n * @return {Array.<ItemMapPair>}\n * @private\n */\nfunction orderItems (hash) {\n\tvar list = [];\n\tfor (var itemId in hash) {\n\t\tvar added = false;\n\t\tfor (var i = list.length - 1; i >= 0; i--) {\n\t\t\tvar sortedItem = list[i];\n\t\t\tif (itemId.indexOf(sortedItem.itemId) == 0) {\n\t\t\t\t//after\n\t\t\t\tlist.splice(i + 1, 0, new ItemMapPair(itemId, hash[itemId]));\n\t\t\t\tadded = true;\n\t\t\t\tbreak;\n\t\t\t} \n\t\t}\n\t\tif (!added) {\n\t\t\tlist.splice(0, 0, new ItemMapPair(itemId, hash[itemId]));\n\t\t}\n\t}\n\treturn list;\n}\n/**\n * this is the opposite of getRelaventControls because we look downward\n * @param {Object.<pebble.libs.standard.OriginInfo>} controllers\n * @param {string} path\n * @param {pebble.libs.standard.interfaces.DataChangable} requestingCtrl\n * @return {Object.<Object.<Object.<number>>>}  \n */\nfunction getAllRelevantConrolsInward (controllers, path, requestingCtrl) {\n\tvar fullMap = {};\n\tfor (var key in controllers){\n\t\tvar controller = controllers[key];\n\t\tif (controller.path.indexOf(path) == 0) { \n\t\t\tfor (var itemId in controller.bindedControls){\n\t\t\t\tvar reqCtrlId = requestingCtrl.getId();\n\t\t\t\tif (itemId.indexOf(reqCtrlId) == 0){\n\t\t\t\t\tvar hash1;\n\t\t\t\t\tif (itemId in fullMap){\n\t\t\t\t\t\thash1 = fullMap[itemId];\n\t\t\t\t\t} else {\n\t\t\t\t\t\thash1 = {};\n\t\t\t\t\t}\n\t\t\t\t\thash1[key] = controller.bindedControls[itemId];\n\t\t\t\t\tfullMap[itemId] = hash1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn fullMap;\n}\n/**\n * @param {Object.<pebble.libs.standard.OriginInfo>} controllers\n * @param {string} path\n * @param {pebble.libs.standard.interfaces.DataChangable} requestingCtrl\n * @return {Object.<Object.<Object.<number>>>}  \n */\nfunction getAllRelevantConrolsOutward (controllers, path, requestingCtrl) {\n\tvar fullMap = {};\n\tfor (var key in controllers){\n\t\tvar controller = controllers[key];\n\t\tif (controller.path.indexOf(path) == 0) { \n\t\t\tfor (var itemId in controller.bindedControls){\n\t\t\t\tif (itemId.indexOf(requestingCtrl.getId()) != 0){\n\t\t\t\t\tvar hash1;\n\t\t\t\t\tif (itemId in fullMap){\n\t\t\t\t\t\thash1 = fullMap[itemId];\n\t\t\t\t\t} else {\n\t\t\t\t\t\thash1 = {};\n\t\t\t\t\t}\n\t\t\t\t\thash1[key] = controller.bindedControls[itemId];\n\t\t\t\t\tfullMap[itemId] = hash1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn fullMap;\n}\n/**\n * @param {Object.<pebble.libs.standard.OriginInfo>} controllers\n * @param {string} path\n * get all relevant controls that that encompass this controller's data\n * @return {Object.<Object.<Object.<number>>>}  \n */\nfunction getAllRelaventControls (controllers, path) {\n\tvar fullMap = {};\n\tfor (var key in controllers){\n\t\t//if (path.indexOf(key) == 0 || key.indexOf(path) == 0) { //because we want to update items dependent on any part of this item or reverse(ie. schedule, schedule.dateStart, scheduleDateEnd)\n\t\tif (path.indexOf(key) == 0) { \n\t\t\tvar control = controllers[key];\n\t\t\tfor (var itemId in control.bindedControls) {\n\t\t\t\tvar hash1;\n\t\t\t\tif (itemId in fullMap){\n\t\t\t\t\thash1 = fullMap[itemId];\n\t\t\t\t} else {\n\t\t\t\t\thash1 = {};\n\t\t\t\t}\n\t\t\t\thash1[key] = control.bindedControls[itemId];\n\t\t\t\tfullMap[itemId] = hash1;\n\t\t\t}\n\t\t}\n\t}\n\treturn fullMap;\n}\n\n/**\n * @constructor\n * @param {pebble.libs.standard.interfaces.ControlAccess} topControl\n * @param {string} path\n */\npebble.libs.standard.OriginInfo = function(topControl, path) {\n\n\t/**\n\t * the items/controls registered to this model, where Item is the key\n\t * @type {Object.<Object.<number>>}  \n\t */\n\tthis.bindedControls = {};\n\t/**\n\t * the top bind control\n\t * @type {pebble.libs.standard.interfaces.ControlAccess}\n\t */\n\tthis.control = topControl;\n\t/**\n\t * path in the top bind control to the data\n\t * @type {string}\n\t */\n\tthis.path = path;\n\n\tif (this.path.indexOf('_field') != -1) {\n\t\tvar pathToItem = this.path.substring(0, this.path.lastIndexOf('._field'));\n\t\tvar field = this.getThisField();\n\t\tthis.control.set(pathToItem + '._field', field);\n\t}\n\t/**\n\t * @type {number}\n\t */\n\tthis.addedCount = -1;\n\t/**\n\t * @type {number}\n\t */\n\tthis.updatedCount = -1;\n\t/**\n\t * @type {number}\n\t */\n\tthis.deletedCount = -1;\n\n\t/**\n\t * @type {Object}\n\t */\n\tthis.notifyChangeCb = null;\n\tthis.changeTransaction = 0;\n\t/**\n\t * @type {Object}\n\t */\n\tthis.notifyExactChangeCb = null;\n\n};\n\n/**\n * @return {?pebble.Pebble}\n */\npebble.libs.standard.OriginInfo.prototype.get = function() {\n  return this.control.get(this.path);\n};\n/**\n * @return {pebble.Pebble}\n */\npebble.libs.standard.OriginInfo.prototype.getCreateOnNull = function() {\n\treturn this.control.getCreateOnNull(this.path);\n};\n/**\n * @return {Array.<pebble.Pebble>}\n */\npebble.libs.standard.OriginInfo.prototype.getRecords = function() {\n\treturn this.control.getRecords(this.path);\n};\n/**\n * @return {boolean}\n */\npebble.libs.standard.OriginInfo.prototype.getBool = function() {\n\treturn this.control.getBool(this.path);\n};\n/**\n * @return {?number}\n */\npebble.libs.standard.OriginInfo.prototype.getInt = function() {\n\treturn this.control.getInt(this.path);\n};\n/**\n * @return {?string}\n */\npebble.libs.standard.OriginInfo.prototype.getValue = function() {\n\tvar elements = this.path.split('.');\n\tif (elements.pop() == 'key_') {\n\t\tvar o = this.control.get(elements.join('.'));\n\t\treturn o.getTagName();\n\t} else {\n\t\treturn this.control.getValue(this.path);\n\t}\n};\n/**\n * @return {?string}\n */\npebble.libs.standard.OriginInfo.prototype.getRef = function() {\n\treturn this.control.getRef(this.path);\n};\n\n/**\n * set and alert (unless setSilent)\n * @param {pebble.Pebble} data\n * @param {pebble.libs.standard.interfaces.DataChangable} item\n * @param {?boolean=} setSilent\n * @param {Function=} cb\n */\npebble.libs.standard.OriginInfo.prototype.set = function(data, item, setSilent, cb) {\n\n\t//one return on save state (different than error/warning/info filters placed on arrays to highlight)\n\tvar field = this.getInnerField();\n\n\tthis.setSilent(data);\n\tif (setSilent == null || !setSilent) {\n\t\tthis._notifyChangeData(item, orderItems(getAllRelaventControls(this.control.originItemsManager.controllers, this.path)), null, cb);\n\n\t} else {\n\t\tcb && cb();\n\t}\n};\n\n//not used???\npebble.libs.standard.OriginInfo.prototype.notifyServerChange = function() {\n\n\tthis._notifyChangeData(null, orderItems(getAllRelaventControls(this.control.originItemsManager.controllers, this.path)), null);\n};\n\n/**\n * @param {pebble.Pebble} data\n * @param {pebble.libs.standard.interfaces.DataChangable} item\n */\npebble.libs.standard.OriginInfo.prototype.setOutward = function(data, item) {\n\tthis.setSilent(data);\n\tthis._notifyChangeData(item, orderItems(getAllRelevantConrolsOutward(this.control.originItemsManager.controllers, this.path, item)), null);\n};\n/**\n * without alerting the DataModel\n * @param {pebble.Pebble} data\n */\npebble.libs.standard.OriginInfo.prototype.setSilent = function(data) {\n\tthis.control.setFull(this.path, data);\n};\n/**\n * Gets the base path when connected to the app\n * @return {?string}\n */\npebble.libs.standard.OriginInfo.prototype.getBasePath = function() {\n\tif (this.path.indexOf('collection') == 0) {\n\t\t//origin is on array control\n\t\treturn this.control.getOriginInfo(this.path.replace('collection', 'model')).getBasePath();\n\n\t} else {\n\n\t\tvar path = null;\n\n\t\tif (this.control.isAppControlBase && this.path.indexOf('model') == 0) {\n\t\t\t//on app\n\t\t\tpath = 'theModel';\n\t\t\tvar relPath = this.path.replace('model', '');\n\t\t\tif (relPath != '') {\n\t\t\t\tpath += relPath;\n\t\t\t} else {\n\t\t\t\t//field other than model on AppControlBase \n\t\t\t\t//do nothing, anything ok as long as not sent to server\t\n\t\t\t}\n\t\t} else {\n\t\t\t\n\t\t}  \n\t\treturn path;\n\t}\n};\n/**\n * not changing data, rather rebinding requestingCtrl and inner controls, this should be array top\n * @param {pebble.libs.standard.interfaces.DataChangable} requestingCtrl\n * @param {string} oldPath\n * @param {string} newPath\n */\npebble.libs.standard.OriginInfo.prototype.rebindArrayItem = function(requestingCtrl, oldPath, newPath) {\n\tvar newSubscriberList = [];\n\n\t//var base = oldPath.substring(0, oldPath.lastIndexOf('.')); //standard.theControlApp.types, etc.\n\tvar base = this.getBasePath() || 'THENODE';\n\toldPath = base + '.' + oldPath;\n\tnewPath = base + '.' + newPath;\n\n\tfor (var key in this.control.originItemsManager.controllers){\n\n\t\tvar controller = this.control.originItemsManager.controllers[key];\n\t\tvar cp = controller.path;\n\t\tif (controller.path.indexOf(this.path) == 0){ //because were only talking about arrays\n\n\t\t\tvar controllerPath = controller.path.replace(this.path, base); //path from model is same as selectedMeta\n\n\t\t\tif (controllerPath.indexOf(oldPath) == 0) {\n\n\t\t\t\tfor (var ctrlId in controller.bindedControls){\n\n\t\t\t\t\tif (ctrlId.indexOf(requestingCtrl.getId()) == 0){ //any control w/in requesting control\n\t\t\t\t\t\t//change\n\t\t\t\t\t\tvar oldPathAdjusted = oldPath.replace(base, this.path); //make a path on array (not selectedMeta format)\n\n\t\t\t\t\t\tvar newPathAdjusted = newPath.replace(base, this.path);\n\t\t\t\t\t\tvar newFullPath = controller.path.replace(oldPathAdjusted, newPathAdjusted); //change base only\n\n\t\t\t\t\t\tvar pathsHash = controller.bindedControls[ctrlId];\n\t\t\t\t\t\tnewSubscriberList.push(new NewSubscriberList(newFullPath, ctrlId, pathsHash));\n\n\t\t\t\t\t\tfor (key in pathsHash) {\n\t\t\t\t\t\t\tthis.control.getGlobalControlAccess(ctrlId).originItemsManager.removeOriginItem(key);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tdelete controller.bindedControls[ctrlId];\n\t\t\t\t\t\t//controller.unsubscribe(ctrlId); //this is done with it2.remove but its not obvious!!!\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor (var i = 0; i < newSubscriberList.length; i++){\n\t\tvar newSubscriber = newSubscriberList[i];\n\n\t\t//this puts something new on too!!!\n\t\tvar newController = this.control.originItemsManager.getController(newSubscriber.pathToCreateOriginInfo);\n\n\t\t//field on the control doesn't change = control.bindedControls.get(ctrl)\n\t\tvar ctrl = this.control.getGlobalControlAccess(newSubscriber.ctrlId);\n\n\t\tfor (var key in newSubscriber.pathToRegister) {\n\t\t\tnewController.subscribe(newSubscriber.ctrlId, key, false);\n\t\t\n\t\t\tctrl.originItemsManager.originItems[key] = newController;\n\t\t}\n\n\t\t//only the requesting control needs to change the arrayItem or cr because the array is not visible to controls w/in the requesting control, only the item itself\n\t\tif (ctrl == requestingCtrl) {\n\t\t\trequestingCtrl.setRef('model._bind', newSubscriber.pathToCreateOriginInfo); //\n\t\t}\n\n\t}\n};\n/**\n * path represented by this.path\n * @param {pebble.libs.standard.interfaces.DataChangable} requestingCtrl\n */\npebble.libs.standard.OriginInfo.prototype.reloadControl = function(requestingCtrl) {\n\tthis._notifyChangeData(null, orderItems(getAllRelevantConrolsInward(this.control.originItemsManager.controllers, this.path, requestingCtrl)), 'reloadControl');\n};\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} item\n */\npebble.libs.standard.OriginInfo.prototype.notifyChangeData = function(item) {\n\tthis._notifyChangeData(item, orderItems(getAllRelevantConrolsOutward(this.control.originItemsManager.controllers, this.path, item)), null);\n};\n/**\n * @param {pebble.libs.standard.interfaces.DataChangable} source\n * @param {Array.<ItemMapPair>} list\n * @param {?string} cbId\n * @param {Function=} cb\n * @private\n */\npebble.libs.standard.OriginInfo.prototype._notifyChangeData = function(source, list, cbId, cb) {\n\n\tthis.changeTransaction += 1;\n\tvar transaction = this.changeTransaction.toString();\n\t//console.log('changeTransaction STARTED ' + this.path + ' - ' + transaction + ' ===== ' + this.control.getId());\n\tif (this.notifyChangeCb == null) {\n\t\tthis.notifyChangedCb = {};\n\t\tthis.notifyChangedCount = {};\n\t\tthis.notifyChangedRunning = {};\n\t}\n\tthis.notifyChangedCb[transaction] = cb;\n\tthis.notifyChangedCount[transaction] = 0;\n\tthis.notifyChangedRunning[transaction] = true;\n\t\n\n\tvar stopList = [];\n\tvar that = this;\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar pair = list[i];\n\t\tvar item = this.control.getGlobalDataChangable(pair.itemId);\n\t\tif (item != null) {\n\t\t\tvar ignore = false;\n\t\t\tfor (var j = 0; j < stopList.length; j++) {\n\t\t\t\tvar stopId = stopList[j];\n\t\t\t\tif (pair.itemId.indexOf(stopId) == 0) {\n\t\t\t\t\tignore = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!ignore) {// && (ref != item || updateSelf)) { \n\t\t\t\tvar map = pair.map;\n\t\t\t\tfor (var key in map) {\n\t\t\t\t\t//gives parent controls ability to say dont work about my child controls I will take care of them\n\t\t\t\t\tvar relPath = '';\n\t\t\t\t\tif (cbId == 'reloadControl') { //this is the only time cbId is used ... could just pass bool\n\t\t\t\t\t\t//reloadControl is called from the array model but all keys will be like model.a4, thus reload just reloads what was bound\n\t\t\t\t\t\trelPath = '.';\n\t\t\t\t\t} else {\n    \n            if (this.path.indexOf(key) == 0) {\n              //safe replace (consider this.path = 'model' and key = 'mode')\n              var thisPathParts = this.path.split('.');\n              var keyParts = key.split('.');\n              \n              var matches = true;\n              for (var z = 0; z < keyParts.length; z++) {\n                var keyPart = keyParts[z];\n                if (keyPart != thisPathParts[z]) {\n                  matches = false;\n                } \n              }\n              if (matches) {\n                relPath\t= this.path.replace(key, '');\n              }\n            }\n\n\t\t\t\t\t\tif (relPath === '') {\n\t\t\t\t\t\t\trelPath = '.';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (relPath.indexOf('.') == 0) {\n\t\t\t\t\t\t\t\trelPath = relPath.substring(1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//console.log('changeTransaction inner ' + this.notifyChangedCount[transaction] + ' key: ' + key + ' i: ' + i);\n\t\t\t\t\tvar pathsHash = map[key];\n\t\t\t\t\tthis.notifyChangedCount[transaction] += Object.keys(map[key]).length;\n\t\t\t\t\tfor (var keykey in map[key]) {\n            if (\n                //!(item instanceof pebble.libs.standard.DynControl && keykey.indexOf('model') === 0) &&\n                !(item instanceof pebble.libs.standard.ArrayTreeBase && keykey.indexOf('model') === 0) \n                ) {\n              var fullPath = relPath === '.' ? keykey : keykey + '.' + relPath;\n              //dont clobber expressions\n              var itemVal = item.getValue(fullPath);\n              var isExpression = itemVal && typeof(itemVal) == 'string' && itemVal.indexOf('{{') != -1;\n              if (!isExpression) {\n                item.set(fullPath, this.control.get(this.path));\n              }\n            }\n\t\t\t\t\t\tvar stop = item.onDataModelChanged(source, keykey, relPath, function(transaction) {\n\t\t\t\t\t\t\treturn function () {\n\t\t\t\t\t\t\t\tthat.decrementChanged(transaction);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}(transaction)); //pass back the item field\n\t\t\t\t\t\tif (stop) {\n\t\t\t\t\t\t\tstopList.push(pair.itemId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tthis.notifyChangedCount[transaction] += 1;\n\t//console.log('changeTransaction end ' + this.notifyChangedCount[transaction]);\n\tthis.notifyChangedRunning[transaction] = false;\n\tthis.decrementChanged(transaction);\n};\n\n/**\n * @param {string} transaction\n * @private\n */\npebble.libs.standard.OriginInfo.prototype.decrementChanged = function(transaction) {\n\tvar count = this.notifyChangedCount[transaction] -= 1;\n\tvar run = this.notifyChangedRunning[transaction];\n\tvar path = this.path;\n\t\n\t//console.log('changeTransaction ' + this.path + ' - ' + transaction + ' ===== ' + this.control.getId() + ' COUNT: ' + count + ' RUN: ' + run);\n\tif (!this.notifyChangedRunning[transaction] && this.notifyChangedCount[transaction] == 0) {\n\t\t//console.log('changeTransaction HANDLED ' + this.path + ' - ' + transaction + ' ===== ' + this.control.getId());\n\t\tif (this.notifyChangedCb[transaction] != null) {\n\t\t\tthis.notifyChangedCb[transaction]();\n\t\t}\n\t}\n};\n//usage ex. this.getOriginInfo('model._toBeDeletedItems').notifyExact(this)\n//usage ex. this.getOriginInfo('model._addedItems').notifyExact(this)\n//usage ex. this.getOriginInfo('model._updateItems').notifyExact(this)\npebble.libs.standard.OriginInfo.prototype.notifyExact = function(source, cbId, cb) {\n\tif (this.notifyExactChangeCb == null) {\n\t\tthis.notifyExactChangedCb = {};\n\t\tthis.notifyExactChangedCount = {};\n//\t\tthis.notifyExactChangedRunning = {};\n//\t\tthis.notifyExactChangedRunning[cbId] = {};\n\t}\n\tthis.notifyExactChangedCb[cbId] = cb;\n\tthis.notifyExactChangedCount[cbId] = 0;\n\t//this.notifyExactChangedRunning[cbId] = true;\n\n\tvar hash = this.getCurrentControls();\n\n\tthis.notifyExactChangedCount[cbId] = Object.keys(hash).length;\n\tif (this.notifyExactChangedCount[cbId] == 0) {\n\n\t  this.notifyExactChangedCount[cbId] = 1;\n\t\tthis.decrementExactChanged(cbId);\n\t} else {\n\t\tfor (var itemId in hash) {\n\t\t\tvar item = this.control.getGlobalControlAccess(itemId);\n\t\t\tvar map = hash[itemId];\n\t\t\tvar that = this;\n//\t\t\tthis.notifyExactChangedCount[cbId] += 1;\n\t\t\t\n\t\t\tfor (var keykey in map) {\n\t\t\t\titem.onDataModelChangedExact(source, keykey, function() {\n\n\t\t\t\t\tthat.decrementExactChanged(cbId);\n\n\t\t\t\t}); \n\t\t\t}\n\t\t}\n\t\t//this.notifyExactChangedRunning[cbId] = false;\n\t\tthis.decrementExactChanged(cbId);\n\t}\n};\n/**\n * @param {string} cbId\n * @private\n */\npebble.libs.standard.OriginInfo.prototype.decrementExactChanged = function(cbId) {\n\tthis.notifyExactChangedCount[cbId] -= 1;\n\tif (this.notifyExactChangedCount[cbId] == 0) {\n\t//if (!this.notifyExactChangedRunning[cbId] && this.notifyExactChangedCount[cbId] == 0) {\n\t\tif (this.notifyExactChangedCb[cbId] != null) {\n\t\t\tthis.notifyExactChangedCb[cbId]();\n\t\t}\n\t}\n};\n\n//controls may load an item upon selection which causes new controls to be bound, concurrency modification error\n//this creates a new HashMap to avoid the problem\n/**\n * @return {Object.<Object.<Object.<number>>>}\n */\npebble.libs.standard.OriginInfo.prototype.getCurrentControls = function() {\n\tvar hash = {};\n\tfor (var pfId in this.bindedControls) {\n\t\thash[pfId] = this.bindedControls[pfId];\n\t}\n\treturn hash;\n};\n/**\n * @return {Object.<Object.<number>>}\n */\npebble.libs.standard.OriginInfo.prototype.getBindedControls = function() {\n\treturn this.bindedControls;\n};\n/**\n * @return {string}\n */\npebble.libs.standard.OriginInfo.prototype.getPath = function() {\n\treturn this.path;\n};\n/**\n * @return {pebble.libs.standard.interfaces.ControlAccess}\n */\npebble.libs.standard.OriginInfo.prototype.getControl = function() {\n\treturn this.control;\n};\n/**\n * @param {string} pfId\n * @param {string} field\n * @param {boolean} forceSubscribe\n */\npebble.libs.standard.OriginInfo.prototype.subscribe = function(pfId, field, forceSubscribe) {\n\n\t//if (this.control.getId() != pfId || forceSubscribe) { //don't need to subscript to itself\n\t\n\t\tif (!(pfId in this.bindedControls)) {\n\t\t\tthis.bindedControls[pfId] = {};\n\t\t}\n\t\tthis.bindedControls[pfId][field] = 1;\n\t//}\n};\n//called by control when it is destroyed\n/**\n * @param {string} pfId\n */\npebble.libs.standard.OriginInfo.prototype.unsubscribe = function(pfId) {\n\tdelete this.bindedControls[pfId];\n};\n/**\n * @return {pebble.Pebble}\n */\npebble.libs.standard.OriginInfo.prototype.getInnerField = function() {\n\tvar c = pebble.libs.standard.Module.topMod.deployment.getTypeDocument(this.control.getRef('.'));\n\tvar field = this._getInnerField('', c.getFields(), this.path);\n\treturn field;\n};\n/**\n * works in conjuction with dynControl for configged references (fields are set by dynControl)\n * @param {string} basePath\n * @param {pebble.Pebble} fields\n * @param {string} relPath\n */\npebble.libs.standard.OriginInfo.prototype._getInnerField = function(basePath, fields, relPath) {\n\tif (fields) {\n\t\tvar elements = relPath.split('.');\n\t\tvar firstMember = elements[0];\n\t\tvar firstMemberField = fields.get(firstMember);\n\t\tvar topMod = pebble.libs.standard.Module.topMod;\n\t\tif (firstMemberField != null) { \n\t\t\tvar nextType = firstMemberField.get('type');\n\t\t\tif (elements.length > 1 && nextType != null) {\n\t\t\t\t//do again\n\t\t\t\tvar nextTypeStr = nextType.getRef('.');\n\t\t\t\tvar nextRelPath = '';\n\t\t\t\tvar nextBasePath = '';\n\t\t\t\tvar nextFields = null;\t\n\n\t\t\t\t//if this is reference\n\t\t\t\tif (nextTypeStr == pebble.shared.TypeReferences.REFERENCE){\n\t\t\t\t\t//configged\n\t\t\t\t\tnextFields = pebble.libs.standard.Module.topMod.referenceConfiggedFields[basePath + firstMember];\n\t\t\t\t\tnextRelPath = relPath.substring(relPath.indexOf('.') + 1);\n\n\t\t\t\t} else if (nextTypeStr == pebble.shared.TypeReferences.ARRAY || nextTypeStr == pebble.shared.TypeReferences.COLLECTION) {\n\n\t\t\t\t\tvar arrayFormId = firstMemberField.getRef('type.arrayFormId');\n\t\t\t\t\tif (arrayFormId != null) {\n\t\t\t\t\t\tnextRelPath = relPath.substring(relPath.indexOf('.') + 1);\n\t\t\t\t\t\tnextRelPath = nextRelPath.substring(nextRelPath.indexOf('.') + 1); //advance it twice\n\t\t\t\t\t\tnextBasePath = basePath + firstMember + '.' + elements[1] + '.';\n\t\t\t\t\t\tnextTypeStr = arrayFormId;\n\t\t\t\t\t}\n\t\t\t\t\tvar obj = topMod.deployment.getTypeDocument(nextTypeStr);\n\t\t\t\t\tnextFields = obj.getFields();\n\t\t\t\t} else {\n\t\t\t\t\tnextBasePath = basePath + firstMember + '.';\n\t\t\t\t\tnextRelPath = relPath.substring(relPath.indexOf('.') + 1);\n\t\t\t\t\tvar obj = topMod.deployment.getTypeDocument(nextTypeStr);\n\t\t\t\t\tnextFields = obj.getFields();\n\t\t\t\t}\n\n\t\t\t\treturn this._getInnerField(nextBasePath, nextFields, nextRelPath);\n\n\t\t\t} else {\n\t\t\t\t//return type\n\t\t\t\treturn firstMemberField;\n\t\t\t} \n\t\t} else {\n\t\t\t//if not defined field, should show error ...\n\t\t\treturn null;\n\t\t}\n\t} else {\n\t\treturn null;\n\t}\n\n};\n\npebble.libs.standard.OriginInfo.prototype.getThisField = function() {\n\tif (this.path.indexOf('collection') == 0) {\n\t\t//origin is on array control\n\t\treturn this.control.getOriginInfo(this.path.replace('collection', 'model')).getThisField();\n\n\t} else {\n\t\tvar pathToItem = this.path.substring(0, this.path.lastIndexOf('._field'));\n\t\tvar itemOrigin = this.control.originItemsManager.getController(pathToItem);\n\t\tvar field = itemOrigin.getInnerField();\n\t\treturn field;\n\t}\n};\n/**\n * @return {pebble.Pebble}\n */\npebble.libs.standard.OriginInfo.prototype.getThisType = function() {\n\tif (this.path.indexOf('collection') == 0) {\n\t\t//origin is on array control\n\t\treturn this.control.getOriginInfo(this.path.replace('collection', 'model')).getThisType();\n\n\t} else {\n\n\t\tvar c = pebble.libs.standard.Module.topMod.deployment.getTypeDocument(this.control.getRef('.'));\n\t\tvar field = c.getInnerField(this.path);\n\n\t\tvar typePeb = null;\n\t\tif (field != null) {\n\t\t\ttypePeb = field.get('type');\n\t\t\t//TODO: if this.control instanceof Reference && this.path == 'innerArray' ... might not need see if it works without ...\n\t\t}\n\n\t\treturn typePeb;\n\n\t}\n};\n\n\n})();\n"},{"key":"codePath","val":"frontend/src/lib/client/originInfo.js"},{"key":"ext","val":"js"}]},{"key":"originItemsManager","val":[{"key":"devCode","val":"\n(function() {\n\n\t//'use strict';\n\t\n/**\n * bind stuff\n */\nfunction bindControl () {\n\t// normal\n\tvar children = this.ctx.getRecords('.');\n\tif (children.length > 0) {\n\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\tvar child = children[i];\n\t\t\tvar meta = child.getTagName();\n\t\t\tthis.bindInnerChild(meta, child, this.ctx.isListContainer);\n\t\t}\n\t}\n}\n\n/**\n * binds hardwires and expressions (expressions kept at _xp)\n * @param {string} path\n * @param {pebble.Pebble} child\n * @param {boolean} isParentContainer\n */\nfunction bindInnerChild (path, child, isParentContainer) {\n  var cr = child.getRef('_bind');\n  if (cr != null) {\n    //normal\n    if (this.ctx.pCM != null) {\n      if (cr.indexOf(':') != -1) {\n        var elements = cr.split(':');\n        if (elements[0] == 'app') {\n          var topAppPath = elements[1];\t\n          var topApp = pebble.libs.standard.Module.topMod.item;\n          this.originItems[path] = topApp.originItemsManager.getOriginInfo(topAppPath);\n        } else {\n          throw new Error('ClientControl: bindInnerChild() no specifier ' + elements[0]);\n        }\n      } else {\n        this.originItems[path] = this.ctx.pCM.originItemsManager.getOriginInfo(cr);\n      }\n      var originItem = this.getOriginInfo(path);\n      originItem.subscribe(this.ctx.moduleAccess.getId(), path, false);\n      if (\n          !(this.ctx instanceof pebble.libs.standard.DynControl && path.indexOf('model') === 0) &&\n          !(this.ctx instanceof pebble.libs.standard.ArrayTreeBase && path.indexOf('model') === 0) \n         ) {\n           //if (!((this.ctx instanceof pebble.libs.standard.ArrayTreeBase || this.ctx instanceof pebble.libs.standard.DynControl) && path.indexOf('model') === 0)) {\n           //we don't want to clobber _ properties when null\n           var sourceItem = originItem.get() || new pebble.Pebble();\n           this.ctx.set(path, sourceItem);\n         }\n       }\n\n    } else {\n\n\t\tvar tagName = child.getTagName();\t\n\t\tvar val = child.getValue('.');\n\t\tif (val != null && typeof(val) === 'string' && val.indexOf('{{') != -1) {\t\n\t\t\t//expression\n\t\t\tvar binds = this.ctx.expressionManager.getBinds(val);\n\t\t\tfor (var token in binds) {\n\t\t\t\tvar bind = binds[token];\n\t\t\t\tvar mod = this.ctx.getObjectReference(bind.specifier);\n\t\t\t\tif (mod != null && mod.item) {\t\n\t\t\t\t\tvar ctx = mod.item;\n\t\t\t\t\t//one way bind, purposely DONT put on this.originItems\n\t\t\t\t\tvar originItem = ctx.originItemsManager.getOriginInfo(bind.path);\n\t\t\t\t\toriginItem.subscribe(this.ctx.moduleAccess.getId(), path, false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tchild.setValue('_xp', val); //stash because value will get clobbered\n\n\t\t} else if (!(isParentContainer && path == 'model') && tagName != 'innerMarkup' && tagName != 'exec' && tagName != 'validators'){ //dont check children of container and any innerMarkup\n\t\t\tvar nextChildren = child.getRecords('.');\n\t\t\tfor (var i = 0; i < nextChildren.length; i++) {\n\t\t\t\tvar nextChild = nextChildren[i];\n\t\t\t\tthis.bindInnerChild(path + '.' + nextChild.getTagName(), nextChild, false);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * unbind\n */\nfunction unbindControl () {\n\tif (this.originItems != null) {\n\t\tfor (var key in this.originItems) {\n\t\t\tvar originInfo = this.originItems[key];\n\t\t\toriginInfo.unsubscribe(this.ctx.moduleAccess.getId());\n\t\t}\n\t\tthis.originItems = null;\n\t}\n}\n\n/**\n * get controller where this control is the bind top\n * @param {string} path to data here\n * @return {pebble.libs.standard.OriginInfo}\n */\nfunction getController (path) {\n\tif (this.controllers == null) {\n\t\tthis.controllers = {};\n\t}\n\tif (!(path in this.controllers)) { // non binded case, exists in this\n\t\tthis.controllers[path] = new pebble.libs.standard.OriginInfo(this.ctx, path);\n\t}\n\treturn this.controllers[path];\n}\n\n/**\n * @param {string} member\n */\nfunction removeOriginItem (member) {\n\tdelete this.originItems[member];\n}\n\n/**\n * @param {string} member\n * @return {pebble.libs.standard.OriginInfo}\n */\nfunction getOriginInfo (member) {\n\n\tif (member in this.originItems) {\n\t\treturn this.originItems[member];\n\t} else {\n\t\t//look for encompassing member\n\t\tvar originalMember = member;\n\t\tvar relPath = '';\n\t\twhile (member.indexOf('.') != -1) {\n\t\t\t//check\n\t\t\tvar ele = member.substring(member.lastIndexOf('.') + 1);\n\t\t\tmember = member.substring(0, member.lastIndexOf('.'));\n\t\t\trelPath = '.' + ele + relPath;\n\t\t\tif (member in this.originItems) {\n\t\t\t\t//create new\n\t\t\t\tvar originCtrl = this.originItems[member];\n\t\t\t\tif (originCtrl.getControl() != this.ctx) {\n\t\t\t\t\tvar path = originCtrl.getPath() + relPath;\n\t\t\t\t\t//same base control\n\t\t\t\t\tvar newOriginInfo = originCtrl.getControl().originItemsManager.getController(path);\n\t\t\t\t\tthis.originItems[originalMember] = newOriginInfo;\n\t\t\t\t\treturn this.originItems[originalMember];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//if gets here, it hasn't been found on any parent control\n\t\t// in this case because it is itself the path in origin is the path here\n\t\tvar o = this.getController(originalMember);\n\t\to.subscribe(this.ctx.moduleAccess.getId(), originalMember, true); \n\t\tthis.originItems[originalMember] = o;\n\t\treturn this.originItems[originalMember];\n\t}\n}\n\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n * @constructor\n */\npebble.libs.standard.OriginItemsManager = function(ctx){ \n\n\tthis.ctx = ctx;\n\t/**\n\t * @type {Object.<pebble.libs.standard.OriginInfo>}\n\t * @private\n\t */\n\tthis.originItems = {};\t// pointers to originItems for the fields on this control\n\t/**\n\t * @type {Object.<pebble.libs.standard.OriginInfo>}\n\t */\n\tthis.controllers; // originItems that exist here (this is bind point)\n}\n\n\npebble.libs.standard.OriginItemsManager.prototype.bindControl = bindControl;\npebble.libs.standard.OriginItemsManager.prototype.unbindControl = unbindControl;\npebble.libs.standard.OriginItemsManager.prototype.bindInnerChild = bindInnerChild;\npebble.libs.standard.OriginItemsManager.prototype.getController = getController;\npebble.libs.standard.OriginItemsManager.prototype.removeOriginItem = removeOriginItem;\npebble.libs.standard.OriginItemsManager.prototype.getOriginInfo = getOriginInfo;\n\n})();\n"},{"key":"codePath","val":"frontend/src/lib/client/originItemsManager.js"},{"key":"ext","val":"js"}]},{"key":"panel","val":[{"key":"devCode","val":"/**\n * @constructor\n * @extends {pebble.libs.standard.ArrayTreeBase}\n */\npebble.libs.standard.Panel = function(moduleAccess, dm, isLoadTop) {\n\n\tpebble.libs.standard.ArrayTreeBase.call(this, moduleAccess, dm, isLoadTop);\n\n\t/**\n\t * @type {boolean}\n\t */\n\tthis.isListContainer = true;\n\n};\n\npebble.inherits(pebble.libs.standard.Panel, pebble.libs.standard.ArrayTreeBase);\n\n/**\n * @override\n */\npebble.libs.standard.Panel.prototype.onReady = function() {\n\n\tthis.setLoaded();\t\n\n};\n\n/**\n * no roll\n * @override\n */\npebble.libs.standard.Panel.prototype.instWins = function () {\n\tthis.rollPanel(function() {});\n};\n\n/**\n * @param {Function} cb\n */\npebble.libs.standard.Panel.prototype.rollPanel = function(cb) {\n\tvar showPanel = this.getOriginInfo('showPanel').getBool();\n\tif (showPanel) {\n\t\tvar mod = this.modules['main'];\n\t\tif (mod == undefined) {\n\t\t\tvar panelCtrl = new pebble.Pebble();\n\t\t\tpanelCtrl.setRef('.', pebble.shared.TypeReferences.ControlBase.CONTROL_BASE);\n\t\t\tpanelCtrl.set('innerMarkup', this.get('innerMarkup'));\n\t\t\t//panelCtrl.setRef('model._bind', 'model');\n\t\t\tpanelCtrl.setTrue('isListContainer');//not a stackpanel\n\n\t\t\tvar ss = new pebble.Pebble();\n\t\t\tss.set('control', panelCtrl);\n\n\t\t\tmod = this.createModuleWithEdm(ss, this.element);\n\t\t\tmod.rollItem(panelCtrl, true, cb);\n\t\t\tthis.modules['main'] = mod;\n\t\t} else {\n\t\t\tcb && cb();\n\t\t}\n\t\tthis.element.style.display = 'block';\n\t} else {\n\t\tthis.element.style.display = 'none';\n\t\tcb && cb();\n\t}\n};\n\n/**\n * @override\n */\npebble.libs.standard.Panel.prototype.onDataModelChanged = function(source, field, relPath, cb) {\n\tvar that = this;\n\tpebble.libs.standard.Panel.superClass_.onDataModelChanged.call(this, source, field, relPath, function() {\n\t\tvar model = that.getOriginInfo('model').getCreateOnNull()\n\t\tif (field == 'showPanel'){\t//not collections with/in collections\n\t\t\t\t\t\n\t\t\t\tthat.rollPanel(function(){\n\t\t\t\t\tcb();\n\t\t\t\t});\n\n\t\t} else {\n\t\t\tcb();\n\t\t}\n\t});\n\treturn false;\n};\n"},{"key":"codePath","val":"frontend/src/lib/client/panel.js"},{"key":"ext","val":"js"}]},{"key":"saveManager","val":[{"key":"devCode","val":"\n(function() {\n\n\t//'use strict';\n\t\n\n/**\n * @param {Function} cb\n */\nfunction save (cb) {\n\tthis.savedItem = this.ctx.getOriginInfo('model').getCreateOnNull().getCopy('.');\n\tthis.isValidSave = true;\n\tthis._save(true, cb);\n}\n/**\n * @param {Function} cb\n */\nfunction saveThru (cb) {\n\tvar originInfo = this.ctx.getOriginInfo('model');\n\tthis.savedItem = originInfo.getCreateOnNull().getCopy('.');\n\tthis.isValidSave = true;\n\tvar that = this;\n\tthis._save(true, function() {\n\n\t\tthat.writeThru(originInfo, true, cb);\n\t\t\n\t});\n}\n/**\n * @param {boolean} isEditTop\n * @param {Function} cb\n * @private\n */\nfunction _save (isEditTop, cb) {\n\tthis.isEditTop = isEditTop;\n\tvar list = this.ctx.getChildCtxs([],'top2Bot', false, false);\n\tthis.ctxSaveCount = list.length;\n\n\tif (list.length == 0) {\n\t\t// if bottom page updateData\n\t\tthis.ctxSaveCount = 1;\n\t\tthis.saveDecrement(cb);\n\t} else { // continue to go down to btn ctxs\n\t\tvar dpList = [];\n\t\tvar that = this;\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tvar ctx = list[i];\n\t\t\tif (ctx.isArrayBase) {\n\t\t\t\tdpList.push(ctx);\n\t\t\t} else {\n\t\t\t\tctx.saveManager._save(false, function(data) {\n\n\t\t\t\t\tthat.saveDecrement(cb);\n\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t// do dp last\n\t\tfor (var i = 0; i < dpList.length; i++) {\n\t\t\tvar dpItem = dpList[i];\n\t\t\tdpItem.saveManager._save(false, function(data) {\n\n\t\t\t\tthat.saveDecrement(cb);\n\n\t\t\t});\n\t\t}\n\t}\n}\nfunction rollback () {\n\n\tvar originInfo = this.ctx.getOriginInfo('model');\n\toriginInfo.setSilent(this.savedItem);\n\n}\n/**\n * @param {Function} cb\n * @private\n */\nfunction saveDecrement (cb) {\n\tthis.ctxSaveCount -= 1;\n\tif (this.ctxSaveCount == 0) {\n\t\t// first put in any values input ctrls have\n\t\tvar that = this;\n\t\tvar callback = function(saveReport) {\n\n\t\t\t//for any inner control, if not valid mark edit top as not valid\n\t\t\tif (saveReport != null && !saveReport.isValid) {\n\t\t\t\tvar editTop = that.getEditTop();\n\t\t\t\teditTop.isValidSave = false;\n\t\t\t}\n\n\t\t\tif (that.isEditTop) {\n\n\t\t\t\tif (that.isValidSave) {\n\n\t\t\t\t\tvar originInfo = that.ctx.getOriginInfo('model');\n\t\t\t\t\tvar item = originInfo.get();\n\n\t\t\t\t\tif (that.ctx.get('crudObject')) {\n\n            //single crud item\n            that.ctx.updateCrudItem(null, false, cb);\n\n          } else {\n\n            if (that.ctx.pCM && that.ctx.pCM.isArrayBase) {\n              that.ctx.pCM.updateArrayItem(that.ctx.moduleAccess.getTagName(), null, false, cb);\n            } else {\n              //don't need to notify inner controls\n              originInfo.notifyChangeData(that.ctx);\n\n              that.ctx.exec('onSaved', item, function(data) {\n                cb();\n              });\n            }\n\n          }\n\n\t\t\t\t} else { \n\t\t\t\t\t//doesn't continue, validation error freezes everything, they must rollback manually\n\t\t\t\t\t//cb() callback to abort (TODO: need this is basic exec functionality)\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tcb();\n\t\t\t}\n\t\t};\n\t\t\n\t\tthis.ctx.setControlDataToModel(true, function() {\n\n\t\t\tthat.ctx.validate(callback);\n\n\t\t});\n\n\t}\n}\n\n/**\n * @param {boolean} isEditTop\n * @param {Function} cb\n * @private\n */\nfunction validate (isEditTop, cb) {\n\tthis.isEditTop = isEditTop;\n\tthis.isValidSave = true;\n\tvar list = this.ctx.getChildCtxs([],'bot2Top', false, false);\n\tthis.ctxSaveCount = list.length;\n\n\tif (list.length == 0) {\n\t\t// if bottom page updateData\n\t\tthis.ctxSaveCount = 1;\n\t\tthis.validateDecrement(cb);\n\t} else { // continue to go down to btn ctxs\n\t\tvar that = this;\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tvar ctx = list[i];\n\t\t\tctx.saveManager.validate(false, function(data) {\n\n\t\t\t\tthat.validateDecrement(cb);\n\n\t\t\t});\n\t\t}\n\t}\n}\n/**\n * @param {Function} cb\n * @private\n */\nfunction validateDecrement (cb) {\n\tthis.ctxSaveCount -= 1;\n\tif (this.ctxSaveCount == 0) {\n\t\t// first put in any values input ctrls have\n\t\tvar that = this;\n\t\tvar callback = function() {\n\n\t\t\tif (that.isEditTop) {\n\t\t\t\tif (that.isValidSave) {\n\n\t\t\t\t\tcb();\n\n\t\t\t\t} else {\n\t\t\t\t\t//doesn't continue, validation error freezes everything\n\t\t\t\t\tcb();\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tcb();\n\t\t\t}\n\t\t};\n\t\t\n\t\tthat.ctx.validate(true, callback);\n\t}\n}\n\n/**\n * @param {pebble.libs.standard.OriginInfo} originInfo\n * @param {boolean} setSilent\n * @param {Function} cb\n */\nfunction writeThru (originInfo, setSilent, cb) {\n\tvar basePath = originInfo.getBasePath();\n\n\tvar docControl = this.ctx.getCollectionDocControl();\n  if (docControl.get('crudObject')) {\n    docControl.updateCrudItem(null, false, cb);\n  } else {\n    var docOrigin = docControl.getOriginInfo('model');\n    var docBasePath = docOrigin.getBasePath();\n\n    var relPath = basePath.replace(docBasePath + '.', '');\n    var arrayCtrl = docControl.pCM;\n    arrayCtrl.updateArrayItem(docControl.moduleAccess.getTagName(), relPath, setSilent, cb);\n  }\n}\n/**\n * @return {pebble.libs.standard.SaveManager}\n * \n */\nfunction getEditTop () {\n\tif (this.isEditTop) {\n\t\treturn this;\n\t} else {\n\t\treturn this.ctx.pCM.saveManager.getEditTop();\n\t}\n}\n/**\n * @param {pebble.libs.standard.interfaces.ControlAccess} ctx\n * @constructor\n */\npebble.libs.standard.SaveManager = function(ctx){ \n\tthis.ctx = ctx;\n\t/**\n\t * edit top\n\t * @type {boolean}\n\t * @private\n\t */\n\tthis.isEditTop = false;\n\n\t/**\n\t * @type {?number}\n\t * @private\n\t */\n\tthis.ctxSaveCount = null;\n\t/**\n\t * @type {pebble.Pebble}\n\t * @private\n\t */\n\tthis.savedItem;\n\t/**\n\t * @type {boolean}\n\t * @private\n\t */\n\tthis.isValidSave = false;\n}\n\npebble.libs.standard.SaveManager.prototype.save = save;\npebble.libs.standard.SaveManager.prototype.saveThru = saveThru;\npebble.libs.standard.SaveManager.prototype._save = _save;\npebble.libs.standard.SaveManager.prototype.validate = validate;\npebble.libs.standard.SaveManager.prototype.validateDecrement = validateDecrement;\npebble.libs.standard.SaveManager.prototype.saveDecrement = saveDecrement;\npebble.libs.standard.SaveManager.prototype.getEditTop = getEditTop;\npebble.libs.standard.SaveManager.prototype.writeThru = writeThru;\n\n})();\n"},{"key":"codePath","val":"frontend/src/lib/client/saveManager.js"},{"key":"ext","val":"js"}]},{"key":"serverProxy","val":[{"key":"devCode","val":"\n/**\n * Cache for the client side.  Duplicate requests are put on a wait list Event.\n * Includes utility functions for common requests that can be cached. \n * @constructor\n */\npebble.libs.standard.ServerProxy = function(comm, ws) {\n\n\t//could be injected by client.html for simulation\n\tthis.comm = comm;\n\n\tthis.ws = ws;\n\n\tthis.ws.setOnMessage(function(message) {\n\t\tvar obj = new pebble.Pebble(message);\n\t\tvar params = obj.getParams();\n\t\tvar sp = params.getRef('.'); \n\t\tvar path = params.getRef('path');\n\t\tvar collectionPath = path.substring(0, path.lastIndexOf('.'));\n\t\tvar meta = path.substring(path.lastIndexOf('.') + 1);\n\t\tvar doc = params.get('doc');\n\t\t \n\t\tswitch (sp) {\n\t\t\n\t\tcase 'created':\n\t\t\tvar topApp = pebble.libs.standard.Module.topMod.item;\n\t\t\tvar originInfo = topApp.getOriginInfo(collectionPath + '._events.added');\n\t\t\tvar added = new pebble.Pebble();\n\t\t\tadded.setRef('.', meta);\n\t\t\toriginInfo.setSilent(added);\n\t\t\toriginInfo.notifyExact(null, null, function() {\n\n\t\t\t\t//cb();\n\n\t\t\t}); \n\n\t\tbreak;\n\t\t\n\t\tcase 'updated':\n\t\tbreak;\n\t\t\n\t\tcase 'deleted':\n\t\tbreak;\n\t\t\n\t\t}\n\n\t});\n\n\t/**\n\t * array of query results with _generate included\n\t */\n\tthis.queryResults = new pebble.Pebble();\n\n\t/**\n\t * array of arrayControls that have queried or called getArrayCollectionItem\n\t */\n\tthis.managedControls = new pebble.Pebble();\n\n\t//this.ctx = ctx;\n\t////check for dataevents\n\t\t//var theControlApp = ctx.theControlApp.getRef('.');\n\t\t//var topControlRef = ctx.accessPoint.getRef('topControl');\n\t\t//var topControl = ctx.deployment.getDocument(theControlApp + '.controls.' + topControlRef);\n\n\t\t//var serverBindMatchPaths = topControl.get('serverBindMatchPaths');\n\n\t/**\n\t * @type {Object.<string, pebble.Pebble>}\n\t */\n\tthis.cache = {};\n\t/**\n\t * @type {Object.<string, pebble.libs.standard.Event>}\n\t */\n\tthis.events = {};\n};\n\n/**\n * compares if queries are equal, only checks first level and checks both ref and value (because its dumb, for now)\n * @param {pebble.Pebble} query1\n * @param {pebble.Pebble} query2\n * @return {boolean}\n */\npebble.libs.standard.ServerProxy.prototype.compareQuery = function(query1, query2) {\n\t\t\n\tvar queryParams1 = query1.getParams().getRecords('.');\n\tvar queryParamsPeb2 = query2.getParams();\n\tvar queryParams2 = queryParamsPeb2.getRecords('.');\n\tif (queryParams1.length == queryParams2.length) {\n\n\t\tvar same = true;\n\t\tfor (var i = 0; i < queryParams1.length; i++) {\n\t\t\tvar queryParam1 = queryParams1[i];\n\t\t\tvar tagName = queryParam1.getTagName();\n\t\t\tvar queryParam2 = queryParamsPeb2.get(tagName);\n\t\t\t//only comparing value and ref!!! TODO:deep compare?\n\t\t\tif (queryParam2 == null || queryParam2.getValue('.') !== queryParam1.getValue('.') || queryParam2.getRef('.') !== queryParam1.getRef('.')) {\n\t\t\t\tsame = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn same;\n\t}\n\treturn false;\n};\n/**\n * check if query exists, if so give it the reference\n * @param {pebble.Pebble} query\n * @return {null|pebble.Pebble}\n */\npebble.libs.standard.ServerProxy.prototype.checkQueryExist = function(query) {\n\t\t\n\t//for managed ctrls\n\tvar queryResults = this.queryResults.getRecords('.');\n\tfor (var i = 0; i < queryResults.length; i++) {\n\t\tvar queryResult = queryResults[i];\n\t\tif (this.compareQuery(query)) {\n\t\t\treturn queryResult;\n\t\t}\n\t}\n\treturn null;\n};\n/**\n * the web soket is already available.\n * this is for the server to manage the web sockets it needs to be alerted to start one and place on it sessions object\n */\npebble.libs.standard.ServerProxy.prototype.setUpWebSocket = function() {\n\n\tvar obj = new pebble.Pebble();\n\tvar params = obj.getParams();\n\tparams.setRef('.', 'setup');\n\t\n\tparams.setRef('sessionId', this.sessionId);\n\tthis.ws.sendToServer(obj);\n\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.libs.standard.ServerProxy.prototype.handleRequest = function(obj) {\n\n\tvar params = obj.getParams();\n\tvar controlId = params.getRef('arrayControlId');\n\tvar isArrayStackControl = params.getBool('isArrayStackControl');\n\tparams.setRef('sessionId', this.sessionId);\n\tparams.setRef('accessPoint', pebble.libs.standard.Module.topMod.accessPoint.getTagName());\n\n\tvar query = params.get('query');\n\tif (query !== null && query.getRef('.') != null && controlId !== null) { //doQuery or getArrayCollectionItem\n\t\t\n\t\tvar existManagedControl = this.managedControls.get(controlId);\n\t\tif (existManagedControl !== null ) { \n\t\t\tif (!isArrayStackControl) { \n\t\t\t\t//clobber old, but arrayStackControl keep managing\n\t\t\t\tvar queryRef = existManagedControl.getRef('.');\n\t\t\t\tvar managedControls = this.managedControls.getRecords('.');\n\t\t\t\tvar hasDependency = false;\n\t\t\t\tfor (var i = 0; i < managedControls.length; i++) {\n\t\t\t\t\tvar managedControl = managedControls[i];\n\t\t\t\t\tif(managedControl.getRef('.') === queryRef && managedControl.getTagName() !== controlId) {\n\t\t\t\t\t\t//still has dependency\n\t\t\t\t\t\thasDependency = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!hasDependency) {\n\n\t\t\t\t\t//tell server dont need to manage \n\t\t\t\t\tvar obj1 = new pebble.Pebble();\n\t\t\t\t\tvar params1 = obj1.getParams();\n\t\t\t\t\tparams1.setRef('.', 'removeDependency');\n\n\t\t\t\t\tparams1.setRef('queryRef', queryRef);\n\t\t\t\t\tthis.ws.sendToServer(obj1);\n\n\t\t\t\t\t//remove from proxy queryResults\n\t\t\t\t\tif (queryRef !== null) {\n\t\t\t\t\t\tthis.queryResults.remove(queryRef);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t//exising ArrayStackControl, manage  (ex up to 20 items ...)\n\t\t\t\t//where you tell server not to manage\n\t\t\t}\n\t\t} \n\n\t\t//check if can fulfill with existing query\n\t\tvar existQueryResult = this.checkQueryExist(obj);\n\t\tif (existQueryResult !== null) {\n\t\t\tif (controlId != null) {\n\t\t\t\tthis.managedControls.setRef(controlId, existQueryResult.getTagName());\n\t\t\t}\n\n\t\t\tobj.set('.', existQueryResult);\n\t\t\tobj.callback();\n\n\t\t} else {\n\t\t\tvar that = this;\n\t\t\tthis.comm.httpRequest({\n\t\t\t\trequest: obj, \n\t\t\t\tpersistCallback: false, \n\t\t\t\tdeployment: pebble.libs.standard.Module.topMod.deployment,\n\t\t\t\tsuccess: function (data) {\n\n\t\t\t\t\tvar serverQueryReference = data.getRef('_serverQueryReference');\n\n\t\t\t\t\tthat.queryResults.set(serverQueryReference, data);\n\n\t\t\t\t\tthat.managedControls.setRef(controlId, serverQueryReference);\n\n\t\t\t\t\tobj.setFull('.', data);\n\t\t\t\t\tobj.callback();\n\t\t\t\t}\n\n\t\t\t});\n\t\t}\n\t} else {\n\t\t\n\t\tthis.comm.httpRequest({\n\t\t\t\trequest: obj, \n\t\t\t\tpersistCallback: false, \n\t\t\t\tdeployment: pebble.libs.standard.Module.topMod.deployment,\n\t\t\t\tsuccess: function (data) {\n\n\t\t\t\t\tobj.setFull('.', data);\n\t\t\t\t\tobj.callback();\n\t\t\t\t}\n\n\t\t});\n\n\t}\n};\n\n\n/* old usage\n\tpebble.libs.standard.ArrayTreeBase.cache.get(obj, this, function(fetchedData) {\n\n\t}, 20000); //20 sec cache\n*/\n/**\n * @param {pebble.Pebble} obj\n * @param {pebble.libs.standard.interfaces.ControlAccess} scope\n * @param {Function} cb\n * @param {number} old \n */\npebble.libs.standard.ServerProxy.prototype.get = function(obj, scope, cb, old) {\n\tif (old == null) {\n\t\told = pebble.libs.standard.ServerProxy.STALE_TIME;\n\t}\n\tvar params = obj.getParams();\n\tvar key = params.toString();\n\tvar currentTime = new Date().getTime();\n\tif (key in this.cache && (currentTime - parseInt(this.cache[key].getValue('_cache.time'), 10)) < old){\n\t\tcb(this.cache[key].getCopy('.'));\n\t} else if (key in this.events) {\n\t\t//executing\n\t\tthis.events[key].subscribe(cb);\n\t} else {\n\t\tvar ev = new pebble.libs.standard.Event();\n\t\tev.subscribe(cb);\n\t\tthis.events[key] = ev;\n\t\tvar that = this;\n\t\tobj.setCallback(function(data){\n\n\t\t\tdata.setValue('_cache.time', currentTime);\n\t\t\tvar ev = that.events[key];\n\t\t\tdelete that.events[key];\n\t\t\tev.fire(data.getCopy('.'));\n\t\t\tthat.cache[key] = data.getCopy('.');\n\n\t\t});\n\t\tscope.resolve(obj);\n\t}\n};\n//if exists overwrite\n/**\n * @param {pebble.Pebble} obj\n * @param {pebble.libs.standard.interfaces.ControlAccess} scope\n * @param {Function} cb\n */\npebble.libs.standard.ServerProxy.prototype.put = function(obj, scope, cb) {\n\tvar params = obj.getParams();\n\tvar key = params.toString();\n\n\tvar ev = new pebble.libs.standard.Event();\n\tvar existingEvent = this.events[key];\n\tif ( existingEvent != null) {\n\t\t//transfer those waiting on this callback\n\t\tfor (var i = 0; i < existingEvent.subscribers.length; i++){\n\t\t\tev.subscribe(existingEvent.subscribers[i]);\n\t\t}\n\t}\n\tev.subscribe(cb);\n\tthis.events[key] = ev; //clobbers existingEvent\n\tvar that = this;\n\tobj.setCallback(function(data){\n\n\t\tdata.setValue('_cache.time', new Date().getTime());\n\t\tvar ev = that.events[key];\n\t\tif (ev != null) {\n\t\t\tdelete that.events[key];\n\t\t\tev.fire(data.getCopy('.'));\n\t\t}\n\t\tthat.cache[key] = data.getCopy('.');\n\n\t});\n\tscope.resolve(obj);\n};\n\n/**\n * @type {number}\n */\npebble.libs.standard.ServerProxy.STALE_TIME = 600000; //10 minute\n"},{"key":"codePath","val":"frontend/src/lib/client/serverProxy.js"},{"key":"ext","val":"js"}]},{"key":"topModule","val":[{"key":"devCode","val":"/** \n * TopModule is instantiated before any rendering.  It loads the topControl\n * environment and sets fixed global (roles, userId, ds) vs AppControlBase\n * which sets dynamic globals (orientation change, etc.) \n *\n * @constructor \n * @param {Element} display \n * @param {pebble.shared.Deployment} deployment \n * @param {string} topId \n * @extends {pebble.libs.standard.Module}\n */\npebble.libs.standard.TopModule = function(display, deployment, topId) {\n\n\tpebble.libs.standard.Module.call(this, null, null, display, topId || 'top');\n\n\tpebble.libs.standard.Module.topMod = this;\n\n\tthis.referenceConfiggedFields = {};\n\n\tthis.deployment = deployment;\n\tthis.app = this.deployment.getDocument('theModel.appInstances.theInstance');\n\tthis.theControlApp = this.app.get('theControlApp');\n\tthis.accessPoint = this.app.getRecords('accessPoints')[0];//the only one on the access point deployment\n\tthis.topControl = this.accessPoint.get('topControl');\n\n};\n\npebble.inherits(pebble.libs.standard.TopModule, pebble.libs.standard.Module);\n\n/**\n * @param {Function} cb\n */\npebble.libs.standard.TopModule.prototype.load = function(cb) {\n\t\n\tvar app = 'theModel..libs.' + this.app.getRef('.');\n\tvar appMeta = app.split('.').pop();\n\tvar formKey = app + '.types.' + appMeta;\n\n\t//change to full path\n\tthis.topControl.setRef('.', formKey.substring(formKey.lastIndexOf('.') + 1) + ':' + this.topControl.getRef('.'));\n\n\tthis.topControl.set('model', this.theControlApp);\n\n\tthis.item = this.getControlBase(this.topControl, true);\n\n\tvar that = this;\n\n\tthis.item.initialize(function() {\n\n\t\tfor (var key in pebble.serverProxies) {\n\t\t\tpebble.serverProxies[key].setUpWebSocket();\n\t\t}\n\n\t\tthat.item.roll(cb); \n\n\t\tthat.item.startHistoryWatch();\n\t})\n};\n\n"},{"key":"codePath","val":"frontend/src/lib/client/topModule.js"},{"key":"ext","val":"js"}]},{"key":"standardValidation","val":[{"key":"devCode","val":"\n/**\n\t\tvar field = this.getInnerField();\n\t\tvar ret = null;\n\t\tvar valid = false;\n\t\tif (field != null) {\n\t\t\tret = this.checkValid(data, field);\n\t\t\tif (ret == null) {\n\t\t\t\tvalid = true;\n\t\t\t\tret = this.checkWarning(data, field);\n\t\t\t\tif (ret == null) {\n\t\t\t\t\tret = this.checkInfo(data, field);\n\t\t\t\t\tif (ret == null) {\n\t\t\t\t\t\tret = new pebble.Pebble();\n\t\t\t\t\t\tret.setValue('.', 'success');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} \n\n\t\t} else {\n\t\t\tvalid = true;\n\t\t\tret = new pebble.Pebble();\n\t\t\tret.setValue('.', 'success');\n\t\t}\n\n\t\tif (valid) save\n\n * @param {pebble.Pebble} data\n * @param {pebble.Pebble} field\n * @return {pebble.Pebble}\n */\nfunction exists (data, field) {\n\tif (\n\t\t\ttype == pebble.shared.TypeReferences.TEXT ||\n\t\t\ttype == pebble.shared.TypeReferences.BOOL ||\n\t\t\ttype == pebble.shared.TypeReferences.NUMBER ||\n\t\t\ttype == pebble.shared.TypeReferences.DATE \n\t\t ) {\n\t\t\t var val =  data.getValue('.');\n\t\t\t if (val == null || val == '') {\n\t\t\t\t //return doesnt proceed\n\t\t\t\t var ret = new pebble.Pebble();\n\t\t\t\t ret.setValue('status', 'error');\n\t\t\t\t ret.setValue('statusMessage', 'required'); //should be message from isRequireMessage\n\t\t\t\t return ret;\n\t\t\t }\n\t\t }\n\treturn null;\n}\n\n\npebble.libs.standard.validation.exists = exists;\n"},{"key":"codePath","val":"frontend/src/lib/client/validation/standardValidation.js"},{"key":"ext","val":"js"}]},{"key":"pebble-object-dom","val":[{"key":"devCode","val":"\n(function (exports) {\n\n\t/**\n\t * @constructor\n\t * @implements{pebble.interfaces.IPebbleDataSource}\n\t * @param {string|Element|null|undefined} o\n\t */\n\tvar PebbleDataSourceImpl = function(o){\n\t\t/**\n\t\t * @type {Element}\n\t\t */\n\t\tthis.xml = null;\n\n\t\tif (o == null) {\n\t\t\tthis.createXml('<i />'); \n\t\t} else if (typeof(o) == 'string') {\n\t\t\tif (o.indexOf('<') === -1) {\n\t\t\t\t//name only\n\t\t\t\tthis.createXml('<' + o + '/>');\n\t\t\t} else {\n\t\t\t\tthis.createXml(o);\n\t\t\t}\n\t\t} else if (typeof(o) == 'object') { //element\n\t\t\tthis.xml = o;\n\t\t}\n\t};\n\n\t/**\n\t * @param {string} xmlStr\n\t */\n\tPebbleDataSourceImpl.prototype.createXml = function(xmlStr) {\n\t\tthis.xml = this.parse(xmlStr).documentElement;\n\t};\n\t/**\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.toString = function () {\n\t\treturn this.element2String(this.xml);\n\t};\n\t/**\n\t * @param {string} key\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.getDataSource = function (key) {\n\t\tvar node = PebbleDataSourceImpl.selectSingleElement(this.xml, key, false);\n\t\treturn node == null ? null : new PebbleDataSourceImpl(node);\n\t};\n\t/**\n\t * @param {string} key\n\t * @return {?string}\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.getValue = function(key) {\n\t\tif (key != null) {\n\t\t\tvar node = PebbleDataSourceImpl.selectSingleElement(this.xml, key, false);\n\t\t\tif (node != null && node.childNodes.length > 0) {\n\t\t\t\tfor (var i = 0; i < node.childNodes.length; i++) {\n\t\t\t\t\tvar child = node.childNodes[i];\n\t\t\t\t\tif (child.nodeName.indexOf('_') != 0) {\n\t\t\t\t\t\treturn child.nodeValue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t\treturn null;\n\t};\n\t/**\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.setValue = function(path, val) {\n\t\tif (val != null) {\n\t\t\tvar node = PebbleDataSourceImpl.selectSingleElement(this.xml, path, true);\n\t\t\tfor (var i = node.childNodes.length - 1; i >= 0; i--) {\n\t\t\t\tvar child = node.childNodes[i];\n\t\t\t\tif (child.nodeName.indexOf('_') != 0) {\n\t\t\t\t\tnode.removeChild(node.childNodes[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tnode.appendChild(node.ownerDocument.createTextNode(val.toString()));\n\t\t}\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {string} val\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.setMarkup = function(path, val) {\n\t\tif (val != null) {\n\t\t\tvar node = PebbleDataSourceImpl.selectSingleElement(this.xml, path, true);\n\t\t\tfor (var i = node.childNodes.length - 1; i >= 0; i--) {\n\t\t\t\tvar child = node.childNodes[i];\n\t\t\t\tif (child.nodeName.indexOf('_') != 0) {\n\t\t\t\t\tnode.removeChild(node.childNodes[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tnode.appendChild(node.ownerDocument.createCDATASection(val));\n\t\t}\n\t};\n\t/**\n\t * @param {string} path\n\t * @return {Object}\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.getAttributes = function(path) {\n\t\tvar attributes = {};\n\t\tvar node = PebbleDataSourceImpl.selectSingleElement(this.xml, path, false);\n\t\tif (node != null) {\n\t\t\tfor (var i = 0; i < node.attributes.length; i++) {\n\t\t\t\tvar attr = node.attributes[i];\n\t\t\t\tattributes[attr.name] = attr.value;\n\t\t\t}\n\t\t} \n\t\treturn attributes;\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {string} attrName\n\t * @return {?string}\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.getRecordSetAttribute = function(path, attrName) {\n\t\tvar node = PebbleDataSourceImpl.selectSingleElement(this.xml, path, false);\n\t\tif (node != null) {\n\t\t\treturn node.getAttribute(attrName);\n\t\t} \n\t\treturn null;\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {string} val\n\t * @param {string} attrName\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.setRecordSetAttribute = function(path, val, attrName) {\n\t\tvar node = PebbleDataSourceImpl.selectSingleElement(this.xml, path, true);\n\t\tnode.setAttribute(attrName, val);\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {string} attrName\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.removeRecordSetAttribute = function(path, attrName) {\n\t\tvar node = PebbleDataSourceImpl.selectSingleElement(this.xml, path, true);\n\t\tif (node != null) {\n\t\t\tnode.removeAttribute(attrName);\n\t\t}\n\t};\n\t/**\n\t * @return {string}\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.getTagName = function() {\n\t\treturn this.xml.tagName; \n\t};\n\t/**\n\t * @param {string} path\n\t * @param {pebble.interfaces.IPebbleDataSource} item\n\t * @param {boolean} copyProperties\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.setRecordSet = function(path, item, copyProperties) {\n\t\tvar node = PebbleDataSourceImpl.selectSingleElement(this.xml, path, true);\n\t\tif (item.xml != node) {//if it is itself, don't need to do anything (the remove will empty itself)\n\t\t\tif (node != null) {\n\t\t\t\tfor (var i = node.childNodes.length - 1; i >= 0; i--) {\n\t\t\t\t\tvar child = node.childNodes[i];\n\t\t\t\t\tif (child.nodeType != Node.ELEMENT_NODE || (child.tagName.indexOf('_') != 0 || copyProperties)) {\n\t\t\t\t\t\tnode.removeChild(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} \n\t\t\tfor (var i = 0; i < item.xml.attributes.length; i++) {\n\t\t\t\tvar attr = item.xml.attributes[i];\n\t\t\t\tnode.setAttribute(attr.name, attr.value);\n\t\t\t}\n\t\t\tfor (var i = 0; i < item.xml.childNodes.length; i++) {\n\t\t\t\tvar child = item.xml.childNodes[i];\n\t\t\t\tif (child.nodeType !=  Node.ELEMENT_NODE || (child.tagName.indexOf('_') != 0 || copyProperties)) {\n\t\t\t\t\tvar importNode = this.xml.ownerDocument.importNode(child, true);\n\t\t\t\t\tnode.appendChild(importNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {pebble.interfaces.IPebbleDataSource} item\n\t */\n\tPebbleDataSourceImpl.prototype.add = function(path, item) {\n\t\tvar node = PebbleDataSourceImpl.selectSingleElement(this.xml, path, true);\n\t\t\tif (node != null) {\n\t\t\t\t\tvar importNode = this.xml.ownerDocument.importNode(item.xml, true);\n\t\t\t\t\tnode.appendChild(importNode);\n\t\t\t} \n\t};\n\t/**\n\t * @param {string} path\n\t * @return {pebble.interfaces.IPebbleDataSource}\n\t */\n\tPebbleDataSourceImpl.prototype.remove = function(path) {\n\t\tvar node = PebbleDataSourceImpl.selectSingleElement(this.xml, path, false);\n\t\tif (node != null) {\n\t\t\treturn new PebbleDataSourceImpl(/**@type{Element}*/(node.parentNode.removeChild(node)));\n\t\t} \n\t\treturn null;\n\t};\n\t//public pebble.interfaces.IPebbleDataSource getParent() {\n\t//Element parent = (Element)this.xml.parentNode;\n\t//if (parent != null && parent.parentNode != null) {\n\t//return new PebbleDataSourceImpl((Element)parent.parentNode);\n\t//} else {\n\t//return null;\n\t//}\n\t//}\n\t/**\n\t * @param {string} path\n\t * @return {Array.<pebble.interfaces.IPebbleDataSource>}\n\t */\n\tPebbleDataSourceImpl.prototype.getRecords = function(path) {\n\t\tvar recs = [];\n\t\tvar node = PebbleDataSourceImpl.selectSingleElement(this.xml, path, false);\n\t\tif (node != null) {\n\t\t\tvar childNodes = node.childNodes;\n\t\t\tfor (var i = 0; i < childNodes.length; i++) {\n\t\t\t\tvar childNode = childNodes[i];\n\t\t\t\tif (childNode.nodeType == Node.ELEMENT_NODE && childNode.tagName.indexOf('_') != 0){\n\t\t\t\t\trecs[recs.length] = new PebbleDataSourceImpl(childNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn recs;\n\t};\n\t/**\n\t * @param {pebble.interfaces.IPebbleDataSource} newNode\n\t * @param {string} targetPath\n\t */\n\tPebbleDataSourceImpl.prototype.insertBefore = function(newNode, targetPath) {\n\n\t\tvar targetNode = PebbleDataSourceImpl.selectSingleElement(this.xml, targetPath, false);\n\t\tvar parent = targetNode.parentNode;\n\t\tvar node = parent.ownerDocument.importNode(newNode.xml, true);\n\t\tparent.insertBefore(node, targetNode);\n\n\t};\n\n\t/**\n\t * @param {string} path \n\t * @param {string} name\n\t * @return {number}\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.getIndex = function(path, name) {\n\t\tvar node = PebbleDataSourceImpl.selectSingleElement(this.xml, path, false);\n\t\tif (node != null) {\n\t\t\t\tvar childNodes = node.childNodes;\n\t\t\t\tvar j = 0; //only count element nodes\n\t\t\t\tfor (var i = 0; i < childNodes.length; i++) {\n\t\t\t\t\tvar item = childNodes[i];\n\t\t\t\t\tif (item.nodeType == Node.ELEMENT_NODE && item.tagName.indexOf('_') != 0){\n\t\t\t\t\t\tif (item.tagName == name) {\n\t\t\t\t\t\t\treturn j;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tj += 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\treturn -1;\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {!number} index\n\t * @return {pebble.interfaces.IPebbleDataSource}\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.getByIndex = function(path, index) {\n\t\tvar node = PebbleDataSourceImpl.selectSingleElement(this.xml, path, false);\n\t\tif (node != null) {\n\t\t\tvar childNodes = node.childNodes;\n\t\t\tvar j = 0; //only count element nodes\n\t\t\tfor (var i = 0; i < childNodes.length; i++) {\n\t\t\t\tvar item = childNodes[i];\n\t\t\t\tif (item.nodeType == Node.ELEMENT_NODE && item.tagName.indexOf('_') != 0){\n\t\t\t\t\tif (j == index) {\n\t\t\t\t\t\treturn new PebbleDataSourceImpl(item);\n\t\t\t\t\t}\n\t\t\t\t\tj += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\t/**\n\t * copies full i (ps and rs)\n\t * @param {string} path\n\t * @param {pebble.interfaces.IPebbleDataSource} obj\n\t * @param {string} name\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.add2Array = function(path, obj, name) {\n\n\t\tthis.setRecordSet(path + '.' + name, obj, true);\n\n\t};\n\t/**\n\t * @param {string} str\n\t * @return {pebble.interfaces.IPebbleDataSource}\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.getNewInstance = function(str) {\n\t\tif (str == null) {\n\t\t\treturn new PebbleDataSourceImpl(null);\n\t\t} else {\n\t\t\treturn new PebbleDataSourceImpl(str);\n\t\t}\n\t};\n\t/**\n\t * @return {pebble.interfaces.IPebbleDataSource}\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.getCopyInstance = function() {\n\t\treturn new PebbleDataSourceImpl(this.xml.cloneNode(true));\n\t};\n\t/**\n\t * @param {string} xml\n\t * @return {Document}\n\t */\n\tPebbleDataSourceImpl.prototype.parse = function(xml) {\n\t\tif (DOMParser) {\n\t\t\t\tvar doc = new DOMParser().parseFromString(xml, 'text/xml');\n\t\t\t\tif ('parsererror' == doc.documentElement.nodeName) {\n\t\t\t\t//if (doc.documentElement.firstChild && 'parsererror' == doc.documentElement.firstChild.nodeName) {\n\t\t\t\t\tthrow new Error('Parse error');\n\t\t\t\t}\n\t\t\t\treturn doc;\n\n\t\t} else {\n\t\t\tvar doc = new ActiveXObject('Microsoft.XMLDOM');\n\t\t\tif (!doc.loadXML(xml)) {\n\t\t\t\tthrow new Error('Parse error');\n\t\t\t}\n\t\t\treturn doc;\n\t\t}\n\t}\n\t/**\n\t * @param {Element} obj\n\t * @return {string}\n\t */\n\tPebbleDataSourceImpl.prototype.element2String = function (obj) {\n\t\tif (DOMParser) {\n\t\t\t\treturn new XMLSerializer().serializeToString(obj);\n\t\t} else {\n\t\t\t\treturn obj.xml;\n\t\t}\n\t}\n\t/**\n\t * @override\n\t */\n\tPebbleDataSourceImpl.prototype.getInnerXml = function() {\n\t\tvar innerXml = '';\n\t\tvar childNodes = this.xml.childNodes;\n\t\tfor (var i = 0; i < childNodes.length; i++) {\n\t\t\tvar childNode = childNodes[i];\n\t\t\tif (childNode.nodeType == Node.ELEMENT_NODE || childNode.nodeType == Node.TEXT_NODE) {\n\t\t\t\tinnerXml += new XMLSerializer().serializeToString(childNode);\n\t\t\t}\n\t\t}\n\t\treturn innerXml;\n\t}\n\n\t//PebbleDataSourceImpl.prototype.transform = function(xsl) {\n\t//\tvar xslDoc = this.parse(xsl);\n\t//\tvar ret;\n\t//\t// code for IE\n\t//\tif (window.ActiveXObject) {\n\t//\t\tret = this.xml.ownerDocument.transformNode(xslDoc);\n\t//\t\t\n\t//\t} else if (document.implementation && document.implementation.createDocument) {\n\t//\t\tvar xsltProcessor= new XSLTProcessor();\n\t//\t\txsltProcessor.importStylesheet(xslDoc);\n\t//\t\tvar resultDocument = xsltProcessor.transformToFragment(this.xml.ownerDocument, document);\n\t//\t\tret = new XMLSerializer().serializeToString(resultDocument);\n\t//\t}\n\t//\treturn ret;\n\t//}\n\n\t/**\n\t * @param {Element} xml\n\t * @param {string} path\n\t * @param {boolean} createOnNull\n\t * @return {Element} \n\t */\n\tPebbleDataSourceImpl.selectSingleElement = function(xml, path, createOnNull) {\n\t\tif (path != null && path != '.' && path != '') {\n\t\t\tvar elements = path.split('.');\n\t\t\tvar i = 0;\n\t\t\t//sometimes comes in with leading '.'\n\t\t\twhile (elements[i] == '') {\n\t\t\t\tpath = path.substring(path.indexOf('.') + 1);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\txml = PebbleDataSourceImpl.getChildNode(xml, elements[i], createOnNull);\n\t\t\tvar remElements = elements.length - i;\n\t\t\tif (remElements > 1 && xml != null) { \n\t\t\t\tvar newPath = path.substring(path.indexOf('.') + 1);\n\t\t\t\treturn PebbleDataSourceImpl.selectSingleElement(xml, newPath, createOnNull);\n\t\t\t}\n\t\t}\n\t\treturn xml;\n\t};\n\t/**\n\t * @param {Element} item\n\t * @param {string} currentPath\n\t * @param {boolean} createOnNull\n\t * @return {Element}\n\t */\n\tPebbleDataSourceImpl.getChildNode = function(item, currentPath, createOnNull) {\n\t\tif (item != null) {\n\t\t\tvar childNodes = item.childNodes;\n\t\t\tfor (var i = 0; i < childNodes.length; i++) {\n\t\t\t\tvar child = childNodes[i];\n\t\t\t\tif (child.nodeType == Node.ELEMENT_NODE && child.tagName === currentPath) {\n\t\t\t\t\treturn child;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (createOnNull) {\n\t\t\t\tvar child = item.ownerDocument.createElement(currentPath);\n\t\t\t\titem.appendChild(child);\n\t\t\t\treturn child;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\t/**\n\t * @param {Element} item\n\t * @return {Object}\n\t */\n\tfunction getJson (item) {\n\n\t\tvar json = {};\n\t\tjson.key = item.tagName;\n\t\t\n\t\tif (item.attributes && item.attributes.length > 0) {\n\t\t\tjson.attr = {};\n\t\t\tfor (var j = 0; j < item.attributes.length; j++) {\n\t\t\t\tvar attr = item.attributes[j];\n\t\t\t\tjson.attr[attr.name] = attr.value;\n\t\t\t}\n\t\t}\n\n\t\tvar childNodes = item.childNodes;\n\t\tif (item.childNodes) {\n\t\t\tfor (var i = 0; i < childNodes.length; i++) {\n\t\t\t\tvar child = childNodes[i];\n\t\t\t\tif (child.nodeType == Node.ELEMENT_NODE) { \n\n\t\t\t\t\tif (child.tagName.indexOf('_') === 0) {\n\n\t\t\t\t\t\tjson.props = json.props || [];\n\t\t\t\t\t\tjson.props.push(getJson(child));\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tjson.val = json.val || [];\n\t\t\t\t\t\tjson.val.push(getJson(child));\n\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t} else if (child.nodeType == Node.TEXT_NODE) {\n\t\t\t\t\t\tjson.val = child.nodeValue;\n\t\t\t\t} else if (child.nodeType == Node.CDATA_SECTION_NODE) {\n\t\t\t\t\tjson['VAL_CDATA'] = child.nodeValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn json;\n\t}\n\t\n\tPebbleDataSourceImpl.getJson = getJson;\n\n\texports.PebbleDataSourceImpl_BrowserDom = PebbleDataSourceImpl;\n\n})(typeof(exports) === \"undefined\" ? this : exports);\n"},{"key":"codePath","val":"frontend/src/lib/object/impl/pebble-object-dom/lib/pebble-object-dom.js"},{"key":"ext","val":"js"}]},{"key":"testPebble","val":[{"key":"devCode","val":"\nvar topApp;\n\ndescribe('testPebble', function () {\n\n\n\tit ('can do cdata', function() {\n\n\t\tvar o = new pebble.Pebble();\n\n\t\to.setMarkup('aa.bb', '<html />');\n\t\texpect(o.toString().indexOf('CDATA')).not.toEqual(-1);\n\n\t});\n\n\tit ('should ignore spaces', function() {\n\n\t\tvar o = new pebble.Pebble('<item> <child> <grandchild> hello </grandchild> </child> </item>');\n\t\texpect(o.getValue('child.grandchild')).toEqual(' hello ');\n\n\t\to = new pebble.Pebble('<item> <child> <grandchild>a0</grandchild> </child> <child1> <grandchild>a1</grandchild> </child1> </item>');\n\t\texpect(o.getValue('child.grandchild')).toEqual('a0');\n\t\texpect(o.getValue('child1.grandchild')).toEqual('a1');\n\t\texpect(o.getRecords('.').length).toEqual(2);\n\n\t});\n\n});\n\n\n\n"},{"key":"codePath","val":"frontend/src/lib/object/impl/pebble-object-dom/tests/testPebble.js"},{"key":"ext","val":"js"},{"key":"testCode","val":"\nvar topApp;\n\ndescribe('testPebble', function () {\n\n\n\tit ('can do values', function() {\n\n\t\tvar o = new pebble.Pebble();\n\n\t\tvar val = 'hello!';\n\t\to.setValue('aa.bb.cc', val);\n\t\texpect(o.getValue('aa.bb.cc')).toEqual(val);\n\n\t\to.remove('aa.bb.cc');\n\t\texpect(o.getValue('aa.bb.cc')).toBeNull();\n\n\t\to.setMarkup('aa.bb', '<html />');\n\t\t\n\t\texpect(o.getValue('aa.bb')).toEqual('<html />');\n\n\t});\n\n\tit ('should handle references', function() {\n\n\t\tvar o = new pebble.Pebble();\n\t\tvar val = 'hello!';\n\t\to.setRef('aa.bb.cc', val);\n\t\texpect(o.getRef('aa.bb.cc')).toEqual(val);\n\n\t\to.remove('aa.bb.cc');\n\t\texpect(o.getRef('aa.bb.cc')).toBeNull();\n\n\t});\n\n\tit ('should handle arrays', function() {\n\t\n\t\tvar o = new pebble.Pebble();\n\n\t\tvar data1 = new pebble.Pebble();\n\t\tdata1.setValue('.', 'array item');\n\t\to.add2Array('aa.bb.cc', data1);\n\t\texpect(o.getRecords('aa.bb.cc').length).toEqual(1); // set 1 record\n\n\t\tvar data2 = new pebble.Pebble();\n\t\to.add2Array('aa.bb.cc', data2);\n\t\texpect(o.getRecords('aa.bb.cc').length).toEqual(2); //set 2 record\n\n\t\tvar data3 = new pebble.Pebble();\n\t\to.add2Array('aa.bb.cc', data3, 'forceName');\n\t\texpect(o.get('aa.bb.cc.forceName')).not.toBeNull(); // force name\n\n\t\tvar index = o.getIndex('aa.bb.cc', 'forceName');\n\t\texpect(index).toEqual(2); //get index\n\n\t\tvar newNode = new pebble.Pebble();\n\t\to.insertBefore(newNode, 'aa.bb.cc.forceName');\n\t\tindex = o.getIndex('aa.bb.cc', 'forceName');\n\t\texpect(index).toEqual(3);  //insert before\n\n\t});\n\n\tit ('should handle numbers', function() {\n\t\n\t\tvar o = new pebble.Pebble();\n\t\tvar val = 2;\n\t\to.setValue('aa.bb.cc', val);\n\t\tvar returnedVal = o.getInt('aa.bb.cc');\n\t\texpect(returnedVal).toEqual(2);\n\n\t\tval = 2.1;\n\t\to.setValue('aa.bb.cc', val);\n\t\treturnedVal = o.getInt('aa.bb.cc');\n\t\texpect(returnedVal).toEqual(2);\n\n\t\tval = 2.9;\n\t\to.setValue('aa.bb.cc', val);\n\t\treturnedVal = o.getInt('aa.bb.cc');\n\t\texpect(returnedVal).toEqual(2);\n\n\t\tval = 2;\n\t\to.setValue('aa.bb.cc', val);\n\t\treturnedVal = o.getFloat('aa.bb.cc');\n\t\texpect(returnedVal).toEqual(val);\n\n\t\tval = 2.1;\n\t\to.setValue('aa.bb.cc', val);\n\t\treturnedVal = o.getFloat('aa.bb.cc');\n\t\texpect(returnedVal).toEqual(val);\n\n\t\tval = 2.1223;\n\t\to.setValue('aa.bb.cc', val);\n\t\treturnedVal = o.getFloat('aa.bb.cc');\n\t\texpect(returnedVal).toEqual(val);\n\n\t});\n\n\n\n});\n\n\n\n"},{"key":"testCodePath","val":"frontend/test/lib/object/testPebble.js"}]},{"key":"json2xml","val":[{"key":"devCode","val":"var fs = require(\"fs\");\nvar pd = require(\"pretty-data\").pd;\nvar PebbleDataSourceXml = require(\"pebble-object-xmldom\").PebbleDataSourceImpl;\nvar PebbleDataSourceImpl = require('../lib/pebble-object-json.js').PebbleDataSourceImpl;\n\n\nvar inFile = process.argv[2];\nvar outFile = process.argv[3];\nvar mode = process.argv[4];\n\nif (inFile && outFile) {\n\tvar ws = fs.readFileSync(inFile, \"utf-8\");\n\tvar impl = PebbleDataSourceImpl.getXml(JSON.parse(ws), PebbleDataSourceXml);\n\tvar xml = impl.toString();\n\tif (mode == 'min') {\n\n\t\tfs.writeFileSync(outFile, pd.xmlmin(xml), \"utf8\");\n\n\t} else {\n\n\t\tfs.writeFileSync(outFile, pd.xml(xml), \"utf8\");\n\n\t}\n\n} else {\n\n\tconsole.log('inFile and outFile required');\n\n}\n\n"},{"key":"codePath","val":"frontend/src/lib/object/impl/pebble-object-json/bin/json2xml.js"},{"key":"ext","val":"js"}]},{"key":"pebble-object-json","val":[{"key":"devCode","val":"(function (exports) {\n\n/**\n * @constructor\n * @implements{pebble.interfaces.IPebbleDataSource}\n * @param {string|Object|null} [o]\n */\nvar PebbleDataSourceImpl = function(o){\n\t/**\n\t * @type {Object}\n\t */\n\tthis.data = null;\n\n\tif (o == null) {\n\t\tthis.data = {\n\t\t\tkey: 'i'\t\n\t\t}; \n\t} else if (typeof(o) == 'string') {\n\t\tif (o.indexOf('{') === -1) {\n\t\t\t//name only\n\t\t\tthis.data = {\n\t\t\t\tkey: o\t\n\t\t\t};\n\t\t} else {\n\t\t\tthis.data = JSON.parse(o);\n\t\t}\n\t} else if (typeof(o) == 'object') { //element\n\t\tthis.data = o;\n\t}\n};\n\n/**\n * @return {string}\n * @override\n */\nPebbleDataSourceImpl.prototype.toString = function () {\n\treturn JSON.stringify(this.data);\n};\n/**\n * @param {string} key\n * @return {?pebble.interfaces.IPebbleDataSource}\n * @override\n */\nPebbleDataSourceImpl.prototype.getDataSource = function (key) {\n\tvar node = PebbleDataSourceImpl.selectSingleElement(this.data, key, false);\n\treturn node == null ? null : new PebbleDataSourceImpl(node);\n};\n/**\n * @param {string} key\n * @return {?string}\n */\nPebbleDataSourceImpl.prototype.getValue = function(key) {\n\tif (key != null) {\n\t\tvar node = PebbleDataSourceImpl.selectSingleElement(this.data, key, false);\n\t\tif (node != null) {\n\t\t\tif (node.val != undefined && !Array.isArray(node.val)) {\n\t\t\t\treturn node.val;\n\t\t\t} else if (node.VAL_CDATA) {\n\t\t\t\treturn node.VAL_CDATA;\n\t\t\t}\n\t\t} \n\t}\n\treturn null;\n};\n/**\n * @override\n */\nPebbleDataSourceImpl.prototype.setValue = function(path, val) {\n\tvar node = PebbleDataSourceImpl.selectSingleElement(this.data, path, true);\n\tnode.val = val;\n};\n/**\n * @param {string} path\n * @param {string} val\n * @override\n */\nPebbleDataSourceImpl.prototype.setMarkup = function(path, val) {\n\tvar node = PebbleDataSourceImpl.selectSingleElement(this.data, path, true);\n\tnode.val = val; //base64\n};\n/**\n * @param {string} path\n * @return {Object}\n * @override\n */\nPebbleDataSourceImpl.prototype.getAttributes = function(path) {\n\tvar node = PebbleDataSourceImpl.selectSingleElement(this.data, path, false);\n\tif (node != null) {\n\t\treturn node.attr || {};\n\t} \n\treturn {};\n};\n/**\n * @param {string} path\n * @param {string} attrName\n * @return {?string}\n * @override\n */\nPebbleDataSourceImpl.prototype.getRecordSetAttribute = function(path, attrName) {\n\tvar node = PebbleDataSourceImpl.selectSingleElement(this.data, path, false);\n\tif (node != null && node.attr) {\n\t\treturn node.attr[attrName]; \n\t} \n\treturn null;\n};\n/**\n * @param {string} path\n * @param {string} val\n * @param {string} attrName\n * @override\n */\nPebbleDataSourceImpl.prototype.setRecordSetAttribute = function(path, val, attrName) {\n\tvar node = PebbleDataSourceImpl.selectSingleElement(this.data, path, true);\n\tif (!node.attr) {\n\t\tnode.attr = {};\n\t}\n\tnode.attr[attrName] = val;\n};\n/**\n * @param {string} path\n * @param {string} attrName\n * @override\n */\nPebbleDataSourceImpl.prototype.removeRecordSetAttribute = function(path, attrName) {\n\tvar node = PebbleDataSourceImpl.selectSingleElement(this.data, path, false);\n\tif (node != null) {\n\t\tdelete node.attr[attrName];\n\t}\n};\n/**\n * @return {string}\n * @override\n */\nPebbleDataSourceImpl.prototype.getTagName = function() {\n\treturn this.data.key; \n};\n/**\n * @param {string} path\n * @param {pebble.interfaces.IPebbleDataSource} item\n * @param {boolean} copyProperties\n * @override\n */\nPebbleDataSourceImpl.prototype.setRecordSet = function(path, item, copyProperties) {\n\tvar node = PebbleDataSourceImpl.selectSingleElement(this.data, path, true);\n\tif (item.data != node) {//if it is itself, don't need to do anything (the remove will empty itself)\n\t\tnode.attr = item.data.attr;\n\t\tnode.val = item.data.val;\n\t\tif (copyProperties) {\n\t\t\tnode.props = item.data.props;\n\t\t}\n\t}\n};\n/**\n * @param {string} path\n * @param {pebble.interfaces.IPebbleDataSource} item\n */\nPebbleDataSourceImpl.prototype.add = function(path, item) {\n\tvar node = PebbleDataSourceImpl.selectSingleElement(this.data, path, true);\n\tif (node != null) {\n\t\tnode.val = node.val || [];\n\t\tnode.val.push(item.data);\n\t} \n};\n/**\n * @param {string} path : cannot be '.'\n * @return {pebble.interfaces.IPebbleDataSource}\n */\nPebbleDataSourceImpl.prototype.remove = function(path) {\n\tvar elements = path.split('.');\n\tvar name = elements.pop();\n\tvar parentPath = elements.join('.');\n\tvar node = PebbleDataSourceImpl.selectSingleElement(this.data, parentPath, false);\n\tif (node != null && Array.isArray(node.val)) {\n\t\tvar index = this.getIndex(parentPath, name);\n\t\tif (index !== -1) {\n\t\t\tvar deleteChild = node.val[index];\n\t\t\tnode.val.splice(index, 1);\n\t\t\treturn new PebbleDataSourceImpl(deleteChild);\n\t\t}\n\t} \n\treturn null;\n};\n/**\n * @param {string} path\n * @return {Array.<pebble.interfaces.IPebbleDataSource>}\n */\nPebbleDataSourceImpl.prototype.getRecords = function(path) {\n\tvar recs = [];\n\tvar node = PebbleDataSourceImpl.selectSingleElement(this.data, path, false);\n\tif (node != null) {\n\t\tif (Array.isArray(node.val)) {\n\t\t\tvar array = node.val;\n\t\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\t\tvar childNode = array[i];\n\t\t\t\trecs.push(new PebbleDataSourceImpl(childNode));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn recs;\n};\n/**\n * @param {pebble.interfaces.IPebbleDataSource} newNode\n * @param {string} targetPath\n */\nPebbleDataSourceImpl.prototype.insertBefore = function(newNode, targetPath) {\n\n\tvar elements = targetPath.split('.');\n\tvar targetName = elements.pop();\n\tvar parentPath = elements.join('.');\n\tvar index = this.getIndex(parentPath, targetName);\n\tvar parent = PebbleDataSourceImpl.selectSingleElement(this.data, parentPath, false);\n\tparent.val.splice(index, 0, newNode.data);\n\n};\n\n/**\n * @param {string} path \n * @param {string} name\n * @return {number}\n * @override\n */\nPebbleDataSourceImpl.prototype.getIndex = function(path, name) {\n\tvar node = PebbleDataSourceImpl.selectSingleElement(this.data, path, false);\n\tif (node != null && Array.isArray(node.val)) {\n\t\t\tvar childNodes = node.val; \n\t\t\tfor (var i = 0; i < childNodes.length; i++) {\n\t\t\t\tvar item = childNodes[i];\n\t\t\t\t\tif (item.key == name) {\n\t\t\t\t\t\treturn i;\n\t\t\t\t\t}\n\t\t\t}\n\t}\n\treturn -1;\n};\n/**\n * @param {string} path\n * @param {!number} index\n * @return {pebble.interfaces.IPebbleDataSource}\n * @override\n */\nPebbleDataSourceImpl.prototype.getByIndex = function(path, index) {\n\tvar node = PebbleDataSourceImpl.selectSingleElement(this.data, path, false);\n\tif (node != null && Array.isArray(node.val)) {\n\t\treturn new PebbleDataSourceImpl(node.val[index]);\n\t}\n\treturn null;\n};\n/**\n * copies full i (ps and rs)\n * @param {string} path\n * @param {pebble.interfaces.IPebbleDataSource} obj\n * @param {string} name\n * @override\n */\nPebbleDataSourceImpl.prototype.add2Array = function(path, obj, name) {\n\t\n\tthis.setRecordSet(path + '.' + name, obj, true);\n\n};\n/**\n * @param {string} str\n * @return {pebble.interfaces.IPebbleDataSource}\n * @override\n */\nPebbleDataSourceImpl.prototype.getNewInstance = function(str) {\n\tif (str == null) {\n\t\treturn new PebbleDataSourceImpl();\n\t} else {\n\t\treturn new PebbleDataSourceImpl(str);\n\t}\n};\n/**\n * @return {pebble.interfaces.IPebbleDataSource}\n * @override\n */\nPebbleDataSourceImpl.prototype.getCopyInstance = function() {\n\treturn new PebbleDataSourceImpl(PebbleDataSourceImpl.clone(this.data));\n};\n\n/**\n * @override\n */\nPebbleDataSourceImpl.prototype.getInnerXml = function() {\n\n\treturn this._getInnerXml(true);\n\n};\n\n/**\n * @param {boolean} isTop\n * @return {string} \n */\nPebbleDataSourceImpl.prototype._getInnerXml = function(isTop) {\n\n\tvar innerXml = '';\n\t\n\tif (!isTop) {\n\t\tinnerXml += '<' + this.data.key;\n\n\t\tvar attr = this.getAttributes('.');\n\t\tif (Object.keys(attr).length > 0) {\n\t\t\tfor (var key in attr) {\n\n\t\t\t\tinnerXml += ' ';\n\t\t\t\tinnerXml += key + '=\"' + attr[key] + '\"';\n\n\t\t\t}\n\t\t}\n\t\tinnerXml += '>';\n\t}\n\n\t//this should be included but we only use this for simple markup .. which doesnt need props.  should find a better way to do simple markup\n\t//var props = this.data.props;\n\t//if (props) {\n\t\t//for (var i = 0; i < props.length; i++) {\n\t\t\t//var prop = props[i];\n\t\t\t//innerXml += new PebbleDataSourceImpl(prop)._getInnerXml(false);\n\t\t//}\n\t//}\n\n\tif (this.data.val && typeof(this.data.val) == 'string' || this.data.VAL_CDATA && typeof(this.data.VAL_CDATA) == 'string') {\n\n\t\tinnerXml += this.getValue('.');\n\n\t} else if (Array.isArray(this.data.val)){\n\n\t\t//note: this is innerMarkup, everything is an array\n\t\tvar array = this.data.val;\n\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\tvar childNode = array[i];\n\t\t\tinnerXml += new PebbleDataSourceImpl(childNode)._getInnerXml(false);\n\t\t}\n\t}\n\n\tif (!isTop) {\n\t\tinnerXml += '</' + this.data.key + '>';\n\t}\n\treturn innerXml;\n\t\n};\n/**\n * @param {Object} data\n * @param {string} path\n * @param {boolean} createOnNull\n * @return {Object} \n */\nPebbleDataSourceImpl.selectSingleElement = function(data, path, createOnNull) {\n\tif (path != null && path != '.' && path != '') {\n\t\tvar elements = path.split('.');\n\t\tvar i = 0;\n\t\t//sometimes comes in with leading '.'\n\t\twhile (elements[i] == '') {\n\t\t\tpath = path.substring(path.indexOf('.') + 1);\n\t\t\ti++;\n\t\t}\n\t\tdata = PebbleDataSourceImpl.getChildNode(data, elements[i], createOnNull);\n\t\tvar remElements = elements.length - i;\n\t\tif (remElements > 1 && data != null) { \n\t\t\tvar newPath = path.substring(path.indexOf('.') + 1);\n\t\t\treturn PebbleDataSourceImpl.selectSingleElement(data, newPath, createOnNull);\n\t\t}\n\t}\n\treturn data;\n};\n\n/**\n * @param {Object} item\n * @param {string} currentPath\n * @param {boolean} createOnNull\n * @return {Object}\n */\nPebbleDataSourceImpl.getChildNode = function(item, currentPath, createOnNull) {\n\t\n\tif (item != null) {\n\t\tvar isProps = false;\n\t\tif (currentPath.indexOf('_') === 0) {\n\t\t\tisProps = true;\n\t\t\t//currentPath = currentPath.substring(1);\n\t\t}\n\n\t\tif (isProps) {\n\t\t\tif (Array.isArray(item.props)) {\n\t\t\t\tvar childNodes = item.props;\n\t\t\t\tfor (var i = 0; i < childNodes.length; i++) {\n\t\t\t\t\tvar child = childNodes[i];\n\t\t\t\t\tif (child.key === currentPath) {\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} \n\t\t\n\t\t\tif (createOnNull) {\n\t\t\t\titem.props = item.props || [];\n\t\t\t\tvar child = {key: currentPath};\n\t\t\t\titem.props.push(child);\n\t\t\t\treturn child;\n\t\t\t}\n\n\t\t} else {\n\t\t\tif (Array.isArray(item.val)) {\n\t\t\t\tvar childNodes = item.val;\n\t\t\t\tfor (var i = 0; i < childNodes.length; i++) {\n\t\t\t\t\tvar child = childNodes[i];\n\t\t\t\t\tif (child.key === currentPath) {\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} \n\t\t\t\n\t\t\tif (createOnNull) {\n\t\t\t\titem.val = item.val || [];\n\t\t\t\tvar child = {key: currentPath};\n\t\t\t\titem.val.push(child);\n\t\t\t\treturn child;\n\t\t\t}\n\t\t}\n\n\t}\n\treturn null;\n};\n\n\nPebbleDataSourceImpl.clone = function clone(obj) {\n    // Handle the 3 simple types, and null or undefined\n    if (null == obj || \"object\" != typeof obj) return obj;\n\n    // Handle Date\n    if (obj instanceof Date) {\n        var copy = new Date();\n        copy.setTime(obj.getTime());\n        return copy;\n    }\n\n    // Handle Array\n    if (obj instanceof Array) {\n        var copy = [];\n        for (var i = 0, len = obj.length; i < len; i++) {\n            copy[i] = clone(obj[i]);\n        }\n        return copy;\n    }\n\n    // Handle Object\n    if (obj instanceof Object) {\n        var copy = {};\n        for (var attr in obj) {\n            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);\n        }\n        return copy;\n    }\n\n    throw new Error(\"Unable to copy obj! Its type isn't supported.\");\n}\n\t\n\n\n\n/**\n\t * @param {Object} json\n\t * @param {Function} PebbleDataSourceImplXml\n\t * @return {pebble.interfaces.IPebbleDataSource} //instance of PebbleDataSourceImplXml\n\t */\n\tPebbleDataSourceImpl.getXml = function(json, PebbleDataSourceImplXml) {\n\n\t\tvar tag = json.key || 'i';\n\t\tvar impl = new PebbleDataSourceImplXml(tag);\n\n\t\tfor (var key in json.attr) {\n\t\t\t\t\n\t\t\timpl.setRecordSetAttribute('.', json.attr[key], key);\n\n\t\t}\n\n\t\tif (json.props) {\n\t\t\tfor (var i = 0; i < json.props.length; i++) {\n\t\t\t\tvar prop = json.props[i];\n\t\t\t\t\timpl.setRecordSet(prop.key, PebbleDataSourceImpl.getXml(prop, PebbleDataSourceImplXml), true);\n\t\t\t}\t\n\t\t}\n\n\t\tif (json.VAL_CDATA) {\n\t\t\timpl.setMarkup('.', json.VAL_CDATA);\n\t\t} else if (json.val) {\n\n\t\t\tif (Array.isArray(json.val)) {\n\t\t\t\tvar array = json.val;\n\t\t\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\t\t\tvar child = array[i];\n\t\t\t\t\timpl.add('.', PebbleDataSourceImpl.getXml(child, PebbleDataSourceImplXml));\n\t\t\t\t}\t\n\t\t\t} else {\n\n\t\t\t\timpl.setValue('.', json.val);\n\n\t\t\t}\n\t\t}\n\n\t\treturn impl;\n\t}\n\n\texports.PebbleDataSourceImpl_Json = PebbleDataSourceImpl;\n\n})(typeof(exports) === \"undefined\" ? this : exports);\n"},{"key":"codePath","val":"frontend/src/lib/object/impl/pebble-object-json/lib/pebble-object-json.js"},{"key":"ext","val":"js"}]},{"key":"xml2json","val":[{"key":"devCode","val":"var fs = require(\"fs\");\nvar pd = require(\"pretty-data\").pd;\nvar PebbleDataSourceImpl = require('../lib/pebble-object-xmldom.js').PebbleDataSourceImpl;\n\n\nvar inFile = process.argv[2];\nvar outFile = process.argv[3];\nvar mode = process.argv[4];\n\nif (inFile && outFile) {\n\tvar ws = fs.readFileSync(inFile, \"utf-8\");\n\tvar impl = new PebbleDataSourceImpl(ws);\n\tvar json = PebbleDataSourceImpl.getJson(impl.xml, '');\n\tvar jsonStr = JSON.stringify(json);\n\tif (mode == 'min') {\n\n\t\tfs.writeFileSync(outFile, jsonStr, \"utf8\");\n\n\t} else {\n\n\t\tfs.writeFileSync(outFile, pd.json(jsonStr), \"utf8\");\n\t}\n\n} else {\n\n\tconsole.log('inFile and outFile required');\n\n}\n\n"},{"key":"codePath","val":"frontend/src/lib/object/impl/pebble-object-xmldom/bin/xml2json.js"},{"key":"ext","val":"js"}]},{"key":"pebble-object-xmldom","val":[{"key":"devCode","val":"var xmldom = require(\"xmldom\");\nvar DOMParser = xmldom.DOMParser;\nvar XMLSerializer = xmldom.XMLSerializer;\n\n//the xmldom uses NodeType\nvar Node = {\n\tELEMENT_NODE: 1,\n\tTEXT_NODE: 3,\n\tCDATA_SECTION_NODE: 4\n}; \n//replace all pebble.Xml with PebbleDtaSourceImplXmlDom\n\n/**\n * @constructor\n * @implements{IPebbleDataSource}\n * @param {string|Element|null} o\n */\nPebbleDataSourceImplXmlDom = function(o) {\n\tif (o == null) {\n\t\tthis.createXml(\"<i />\"); \n\t} else if (typeof(o) == \"string\") {\n\t\t\tif (o.indexOf('<') === -1) {\n\t\t\t\t//name only\n\t\t\t\tthis.createXml('<' + o + '/>');\n\t\t\t} else {\n\t\t\t\tthis.createXml(o);\n\t\t\t}\n\t} else if (typeof(o) == \"object\") { //element\n\t\tthis.xml = o;\n\t}\n};\n/**\n * @param {string} xmlStr\n */\nPebbleDataSourceImplXmlDom.prototype.createXml = function(xmlStr) {\n\tthis.xml = this.parse(xmlStr).documentElement;\n};\n/**\n * @return {string}\n * @override\n */\nPebbleDataSourceImplXmlDom.prototype.toString = function () {\n\treturn this.element2String(this.xml);\n};\n/**\n * @param {string} key\n * @return {?IPebbleDataSource}\n * @override\n */\nPebbleDataSourceImplXmlDom.prototype.getDataSource = function (key) {\n\tvar node = PebbleDataSourceImplXmlDom.selectSingleElement(this.xml, key, false);\n\treturn node == null ? null : new PebbleDataSourceImplXmlDom(node);\n};\n/**\n * @param {string} key\n * @return {?string}\n */\nPebbleDataSourceImplXmlDom.prototype.getValue = function(key) {\n\tif (key != null) {\n\t\tvar node = PebbleDataSourceImplXmlDom.selectSingleElement(this.xml, key, false);\n\t\tif (node != null && node.childNodes.length > 0) {\n\t\t\tfor (var i = 0; i < node.childNodes.length; i++) {\n\t\t\t\tvar child = node.childNodes[i];\n\t\t\t\tif (child.nodeName.indexOf(\"_\") != 0) {\n\t\t\t\t\treturn child.nodeValue;\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t}\n\treturn null;\n};\n/**\n * @param {string} path\n * @param {string} val\n * @override\n */\nPebbleDataSourceImplXmlDom.prototype.setValue = function(path, val) {\n\tif (val != null) {\n\t\tvar node = PebbleDataSourceImplXmlDom.selectSingleElement(this.xml, path, true);\n\t\tfor (var i = node.childNodes.length - 1; i >= 0; i--) {\n\t\t\tvar child = node.childNodes[i];\n\t\t\tif (child.nodeName.indexOf(\"_\") != 0) {\n\t\t\t\tnode.removeChild(node.childNodes[i]);\n\t\t\t}\n\t\t}\n\t\tnode.appendChild(node.ownerDocument.createTextNode(val));\n\t}\n};\n/**\n * @param {string} path\n * @param {string} val\n * @override\n */\nPebbleDataSourceImplXmlDom.prototype.setMarkup = function(path, val) {\n\tif (val != null) {\n\t\tvar node = PebbleDataSourceImplXmlDom.selectSingleElement(this.xml, path, true);\n\t\tfor (var i = node.childNodes.length - 1; i >= 0; i--) {\n\t\t\tvar child = node.childNodes[i];\n\t\t\tif (child.nodeName.indexOf(\"_\") != 0) {\n\t\t\t\tnode.removeChild(node.childNodes[i]);\n\t\t\t}\n\t\t}\n\t\tnode.appendChild(node.ownerDocument.createCDATASection(val));\n\t}\n};\n/**\n * @param {string} path\n * @param {string} attrName\n * @return {?string}\n * @override\n */\nPebbleDataSourceImplXmlDom.prototype.getRecordSetAttribute = function(path, attrName) {\n\tvar node = PebbleDataSourceImplXmlDom.selectSingleElement(this.xml, path, false);\n\tif (node != null) {\n\t\treturn node.getAttribute(attrName);\n\t} \n\treturn null;\n};\n/**\n * @param {string} path\n * @param {string} val\n * @param {string} attrName\n * @override\n */\nPebbleDataSourceImplXmlDom.prototype.setRecordSetAttribute = function(path, val, attrName) {\n\tvar node = PebbleDataSourceImplXmlDom.selectSingleElement(this.xml, path, true);\n\tnode.setAttribute(attrName, val);\n};\n/**\n * @param {string} path\n * @param {string} attrName\n * @override\n */\nPebbleDataSourceImplXmlDom.prototype.removeRecordSetAttribute = function(path, attrName) {\n\tvar node = PebbleDataSourceImplXmlDom.selectSingleElement(this.xml, path, true);\n\tif (node != null) {\n\t\tnode.removeAttribute(attrName);\n\t}\n};\n/**\n * @return {string}\n * @override\n */\nPebbleDataSourceImplXmlDom.prototype.getTagName = function() {\n\treturn this.xml.tagName; \n};\n/**\n * @param {string} path\n * @param {IPebbleDataSource} item\n * @param {boolean} copyProperties\n * @override\n */\nPebbleDataSourceImplXmlDom.prototype.setRecordSet = function(path, item, copyProperties) {\n\tvar node = PebbleDataSourceImplXmlDom.selectSingleElement(this.xml, path, true);\n\tif (item.xml != node) {//if it is itself, don't need to do anything (the remove will empty itself)\n\t\tif (node != null) {\n\t\t\tfor (var i = node.childNodes.length - 1; i >= 0; i--) {\n\t\t\t\tvar child = node.childNodes[i];\n\t\t\t\tif (child.nodeType != Node.ELEMENT_NODE || (child.tagName.indexOf(\"_\") != 0 || copyProperties)) {\n\t\t\t\t\tnode.removeChild(child);\n\t\t\t\t}\n\t\t\t}\n\t\t} \n\t\tfor (var i = 0; i < item.xml.attributes.length; i++) {\n\t\t\tvar attr = item.xml.attributes[i];\n\t\t\tnode.setAttribute(attr.name, attr.value);\n\t\t}\n\t\tfor (var i = 0; i < item.xml.childNodes.length; i++) {\n\t\t\tvar child = item.xml.childNodes[i];\n\t\t\tif (child.nodeType !=  Node.ELEMENT_NODE || (child.tagName.indexOf(\"_\") != 0 || copyProperties)) {\n\t\t\t\tvar importNode = this.xml.ownerDocument.importNode(child, true);\n\t\t\t\tnode.appendChild(importNode);\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @param {string} path\n * @param {IPebbleDataSource} item\n */\nPebbleDataSourceImplXmlDom.prototype.add = function(path, item) {\n\tvar node = PebbleDataSourceImplXmlDom.selectSingleElement(this.xml, path, true);\n\t\tif (node != null) {\n\t\t\t\tvar importNode = this.xml.ownerDocument.importNode(item.xml, true);\n\t\t\t\tnode.appendChild(importNode);\n\t\t} \n};\n/**\n * @param {string} path\n * @return {IPebbleDataSource}\n */\nPebbleDataSourceImplXmlDom.prototype.remove = function(path) {\n\tvar node = PebbleDataSourceImplXmlDom.selectSingleElement(this.xml, path, false);\n\tif (node != null) {\n\t\treturn new PebbleDataSourceImplXmlDom(node.parentNode.removeChild(node));\n\t} \n\treturn null;\n};\n/**\n * @param {string} path\n * @return {Array.<IPebbleDataSource>}\n */\nPebbleDataSourceImplXmlDom.prototype.getRecords = function(path) {\n\tvar recs = [];\n\tvar node = PebbleDataSourceImplXmlDom.selectSingleElement(this.xml, path, false);\n\tif (node != null) {\n\t\tvar childNodes = node.childNodes;\n\t\tfor (var i = 0; i < childNodes.length; i++) {\n\t\t\tvar childNode = childNodes[i];\n\t\t\tif (childNode.nodeType == Node.ELEMENT_NODE && childNode.tagName.indexOf(\"_\") != 0){\n\t\t\t\trecs[recs.length] = new PebbleDataSourceImplXmlDom(childNode);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn recs;\n};\n/**\n * @param {IPebbleDataSource} newNode\n * @param {string} targetPath\n */\nPebbleDataSourceImplXmlDom.prototype.insertBefore = function(newNode, targetPath) {\n\n\tvar targetNode = PebbleDataSourceImplXmlDom.selectSingleElement(this.xml, targetPath, false);\n\tvar parent = targetNode.parentNode;\n\tvar node = parent.ownerDocument.importNode(newNode.xml, true);\n\tparent.insertBefore(node, targetNode);\n\n};\n\n/**\n * @param {string} path \n * @param {string} name\n * @return {number}\n * @override\n */\nPebbleDataSourceImplXmlDom.prototype.getIndex = function(path, name) {\n\tvar node = PebbleDataSourceImplXmlDom.selectSingleElement(this.xml, path, false);\n\tif (node != null) {\n\t\t\tvar childNodes = node.childNodes;\n\t\t\tvar j = 0; //only count element nodes\n\t\t\tfor (var i = 0; i < childNodes.length; i++) {\n\t\t\t\tvar item = childNodes[i];\n\t\t\t\tif (item.nodeType == Node.ELEMENT_NODE && item.tagName.indexOf(\"_\") != 0){\n\t\t\t\t\tif (item.tagName == name) {\n\t\t\t\t\t\treturn j;\n\t\t\t\t\t}\n\t\t\t\t\tj += 1;\n\t\t\t\t}\n\t\t\t}\n\t}\n\treturn -1;\n};\n/**\n * @param {string} path\n * @param {!number} index\n * @return {IPebbleDataSource}\n * @override\n */\nPebbleDataSourceImplXmlDom.prototype.getByIndex = function(path, index) {\n\tvar node = PebbleDataSourceImplXmlDom.selectSingleElement(this.xml, path, false);\n\tif (node != null) {\n\t\tvar childNodes = node.childNodes;\n\t\tvar j = 0; //only count element nodes\n\t\tfor (var i = 0; i < childNodes.length; i++) {\n\t\t\tvar item = childNodes[i];\n\t\t\tif (item.nodeType == Node.ELEMENT_NODE && item.tagName.indexOf(\"_\") != 0){\n\t\t\t\tif (j == index) {\n\t\t\t\t\treturn new PebbleDataSourceImplXmlDom(item);\n\t\t\t\t}\n\t\t\t\tj += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n};\n/**\n * copies full i (ps and rs)\n * @param {string} path\n * @param {IPebbleDataSource} obj\n * @param {string} name\n * @override\n */\nPebbleDataSourceImplXmlDom.prototype.add2Array = function(path, obj, name) {\n\n\tthis.setRecordSet(path + \".\" + name, obj, true);\n\n};\n/**\n * @param {string} str\n * @return {PebbleDataSource}\n * @override\n */\nPebbleDataSourceImplXmlDom.prototype.getNewInstance = function(str) {\n\tif (str == null) {\n\t\treturn new PebbleDataSourceImplXmlDom();\n\t} else {\n\t\treturn new PebbleDataSourceImplXmlDom(str);\n\t}\n};\n/**\n * @return {IPebbleDataSource}\n * @override\n */\nPebbleDataSourceImplXmlDom.prototype.getCopyInstance = function() {\n\treturn new PebbleDataSourceImplXmlDom(this.xml.cloneNode(true));\n};\n/**\n * @param {string} xml\n * @return {Element}\n */\nPebbleDataSourceImplXmlDom.prototype.parse = function(xml) {\n\tif (DOMParser) {\n\t\t\tvar doc = new DOMParser().parseFromString(xml, \"text/xml\");\n\t\t\tif (\"parsererror\" == doc.documentElement.nodeName) {\n\t\t\t\tthrow new Error(\"Parse error\");\n\t\t\t}\n\t\t\treturn doc;\n\n\t} else {\n\t\tvar doc = new ActiveXObject(\"Microsoft.XMLDOM\");\n\t\tif (!doc.loadXML(xml)) {\n\t\t\tthrow new Error(\"Parse error\");\n\t\t}\n\t\treturn doc;\n\t}\n};\n/**\n * @param {Element} obj\n * @return {string}\n */\nPebbleDataSourceImplXmlDom.prototype.element2String = function (obj) {\n\tif (DOMParser) {\n\t\t\treturn new XMLSerializer().serializeToString(obj);\n\t} else {\n\t\t\treturn obj.xml;\n\t}\n};\n\n\n/**\n * @param {Element} xml\n * @param {string} path\n * @param {boolean} createOnNull\n * @return {Element} \n */\nPebbleDataSourceImplXmlDom.selectSingleElement = function(xml, path, createOnNull) {\n\tif (path != null && path != \".\" && path != \"\") {\n\t\tvar elements = path.split(\".\");\n\t\tvar i = 0;\n\t\t//sometimes comes in with leading \".\"\n\t\twhile (elements[i] == \"\") {\n\t\t\tpath = path.substring(path.indexOf(\".\") + 1);\n\t\t\ti++;\n\t\t}\n\t\txml = PebbleDataSourceImplXmlDom.getChildNode(xml, elements[i], createOnNull);\n\t\tvar remElements = elements.length - i;\n\t\tif (remElements > 1 && xml != null) { \n\t\t\tvar newPath = path.substring(path.indexOf(\".\") + 1);\n\t\t\treturn PebbleDataSourceImplXmlDom.selectSingleElement(xml, newPath, createOnNull);\n\t\t}\n\t}\n\treturn xml;\n};\n/**\n * @param {Element} item\n * @param {string} currentPath\n * @param {boolean} createOnNull\n * @return {Element}\n */\nPebbleDataSourceImplXmlDom.getChildNode = function(item, currentPath, createOnNull) {\n\tif (item != null) {\n\t\tvar childNodes = item.childNodes;\n\t\tfor (var i = 0; i < childNodes.length; i++) {\n\t\t\tvar child = childNodes[i];\n\t\t\tif (child.nodeType == Node.ELEMENT_NODE && child.tagName === currentPath) {\n\t\t\t\treturn child;\n\t\t\t}\n\t\t}\n\t\tif (createOnNull) {\n\t\t\tvar child = item.ownerDocument.createElement(currentPath);\n\t\t\titem.appendChild(child);\n\t\t\treturn child;\n\t\t}\n\t}\n\treturn null;\n};\n\t/**\n\t * @param {Element} item\n\t * @return {Element}\n\t */\n\tfunction getJson (item, path, isProps) {\n\n\t\tvar json = {};\n\t\tjson.key = item.tagName;\n\t\t\n\t\tif (item.attributes && item.attributes.length > 0) {\n\t\t\tjson.attr = {};\n\t\t\tfor (var j = 0; j < item.attributes.length; j++) {\n\t\t\t\tvar attr = item.attributes[j];\n\t\t\t\tjson.attr[attr.name] = attr.value;\n\t\t\t}\n\t\t}\n\n\t\tvar childNodes = item.childNodes;\n\t\tif (item.childNodes) {\n\t\t\tfor (var i = 0; i < childNodes.length; i++) {\n\t\t\t\tvar child = childNodes[i];\n\t\t\t\tif (child.nodeType == Node.ELEMENT_NODE) { \n\n\t\t\t\t\tif (child.tagName.indexOf('_') === 0) {\n\n\t\t\t\t\t\tjson.props = json.props || [];\n\t\t\t\t\t\tjson.props.push(getJson(child, path !== '' ? path + '.' + child.tagName : child.tagName, true));\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tjson.val = json.val || [];\n\t\t\t\t\t\tjson.val.push(getJson(child, path !== '' ? path + '.' + child.tagName : child.tagName, false));\n\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t} else if (child.nodeType == Node.TEXT_NODE) {\n\t\t\t\t\t\tjson.val = child.nodeValue;\n\t\t\t\t} else if (child.nodeType == Node.CDATA_SECTION_NODE) {\n\t\t\t\t\tjson['VAL_CDATA'] = child.nodeValue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn json;\n\t}\n\n\nPebbleDataSourceImplXmlDom.getJson = getJson;\n\n\nexports.PebbleDataSourceImpl = PebbleDataSourceImplXmlDom;\n"},{"key":"codePath","val":"frontend/src/lib/object/impl/pebble-object-xmldom/lib/pebble-object-xmldom.js"},{"key":"ext","val":"js"}]},{"key":"IPebbleDataSource","val":[{"key":"devCode","val":"/**\n * @interface\n */\npebble.interfaces.IPebbleDataSource = function() {};\n\n/**\n * @param {string} o\n * @return {pebble.interfaces.IPebbleDataSource}\n */\npebble.interfaces.IPebbleDataSource.prototype.getNewInstance = function (o){};\n\n/**\n * @param {string} key\n * @return {?pebble.interfaces.IPebbleDataSource}\n */\npebble.interfaces.IPebbleDataSource.prototype.getDataSource = function(key){};\n/**\n * @return {pebble.interfaces.IPebbleDataSource}\n */\npebble.interfaces.IPebbleDataSource.prototype.getCopyInstance = function(){};\n\n/**\n * @param {string} key\n * @return {?string}\n */\npebble.interfaces.IPebbleDataSource.prototype.getValue = function(key){};\n/**\n * @param {string} path\n * @param {string|number|boolean} val\n */\npebble.interfaces.IPebbleDataSource.prototype.setValue = function(path, val){};\n/**\n * @param {string} path\n * @param {string} val\n */\npebble.interfaces.IPebbleDataSource.prototype.setMarkup = function(path, val){};\n/**\n * @return {string}\n */\npebble.interfaces.IPebbleDataSource.prototype.getTagName = function(){};\n\n/**\n * @return {string}\n */\npebble.interfaces.IPebbleDataSource.prototype.getInnerXml = function(){};\n/**\n * @param {string} path\n * @return {Object}\n */\npebble.interfaces.IPebbleDataSource.prototype.getAttributes = function(path){};\n/**\n * @param {string} path\n * @param {string} string\n * @return {?string}\n */\npebble.interfaces.IPebbleDataSource.prototype.getRecordSetAttribute = function(path, string){};\n\n/**\n * @param {string} path\n * @param {string} val\n * @param {string} attrName\n */\npebble.interfaces.IPebbleDataSource.prototype.setRecordSetAttribute = function(path, val, attrName){};\n/**\n * @param {string} path\n * @param {string} attrName\n */\npebble.interfaces.IPebbleDataSource.prototype.removeRecordSetAttribute = function(path, attrName){};\n\n/**\n * @param {string} path\n * @param {pebble.interfaces.IPebbleDataSource} obj\n * @param {boolean} copyProperties\n */\npebble.interfaces.IPebbleDataSource.prototype.setRecordSet = function(path, obj, copyProperties){};\n\n/**\n * @param {string} path\n * @return {pebble.interfaces.IPebbleDataSource}\n */\npebble.interfaces.IPebbleDataSource.prototype.remove = function(path){};\n\n/**\n * @param {string} path\n * @return {Array.<pebble.interfaces.IPebbleDataSource>}\n */\npebble.interfaces.IPebbleDataSource.prototype.getRecords = function(path){};\n\n/**\n * @param {string} path\n * @param {string} name\n * @return {number}\n */\npebble.interfaces.IPebbleDataSource.prototype.getIndex = function(path, name){};\n\n/**\n * @param {string} path\n * @param {pebble.interfaces.IPebbleDataSource} xml\n * @param {string} name\n */\npebble.interfaces.IPebbleDataSource.prototype.add2Array = function(path, xml, name){};\n\n/**\n * @param {pebble.interfaces.IPebbleDataSource} newNode\n * @param {string} targetPath\n */\npebble.interfaces.IPebbleDataSource.prototype.insertBefore = function(newNode, targetPath){};\n/**\n * @param {string} path\n * @param {number} index\n * @return {pebble.interfaces.IPebbleDataSource}\n */\npebble.interfaces.IPebbleDataSource.prototype.getByIndex = function(path, index){};\n\n\n"},{"key":"codePath","val":"frontend/src/lib/object/interfaces/IPebbleDataSource.js"},{"key":"ext","val":"js"}]},{"key":"pebble_Pebble","val":[{"key":"devCode","val":"\n(function (exports) {\n\n\t/**\n\t * @param {string|pebble.Pebble|pebble.interfaces.IPebbleDataSource|null} [o]\n\t * @constructor\n\t */\n\tpebble.Pebble = function(o) {\n\t\t/**\n\t\t * @type {pebble.interfaces.IPebbleDataSource}\n\t\t */\n\t\tthis.impl = null;\n\n\t\tif (o == null) {\n\t\t\tthis.setId();\n\t\t\tthis.impl = pebble.Pebble.dataSourceFactory.getNewInstance();\n\t\t} else if (typeof(o) == 'string') { //element\n\t\t\tthis.setId();\n\t\t\tthis.impl = pebble.Pebble.dataSourceFactory.getNewInstance(o);\n\t\t} else if (o instanceof pebble.Pebble) {\n\t\t\tthis.setId();\n\t\t\tthis.impl = o.impl;\n\t\t} else if (typeof(o) == 'object') { //> pebble.interfaces.IPebbleDataSource???\n\t\t\tthis.setId();\n\t\t\tthis.impl = o;\n\t\t}\n\t\t/**\n\t\t * @type {Function} \n\t\t */\n\t\tthis.fn = null;\n\t};\n\n\tpebble.Pebble.prototype.setId = function() {\n\t\tpebble.Pebble.count += 1;\n\t\tthis.id = pebble.Pebble.count;\n\t};\n\t/**\n\t * @param {string} key\n\t * @return {pebble.Pebble}\n\t */\n\tpebble.Pebble.prototype.get = function(key) {\n\t\tvar node = this.getNode(key, false, false);\n\t\treturn node !== null ? new pebble.Pebble(node) : null;\n\t};\n\t/**\n\t * @param {string} key\n\t * @return {pebble.Pebble}\n\t */\n\tpebble.Pebble.prototype.getCreateOnNull = function(key) {\n\t\tvar node = this.getNode(key, false, true);\n\t\treturn new pebble.Pebble(node);\n\t};\n\t/**\n\t * @param {string} key\n\t * @return {pebble.Pebble}\n\t */\n\tpebble.Pebble.prototype.getCopy = function(key) {\n\t\tvar node = this.getNode(key, true, false);\n\t\treturn node !== null ? new pebble.Pebble(node) : null;\n\t};\n\t/**\n\t * @param {string} key\n\t * @return {pebble.Pebble}\n\t */\n\tpebble.Pebble.prototype.getCopyCreateOnNull = function(key) {\n\t\tvar node = this.getNode(key, true, true);\n\t\treturn node !==\tnull ? new pebble.Pebble(node) : null;\n\t};\n\t/**\n\t * @param {string} key\n\t * @param {?boolean} isCopy\n\t * @param {?boolean} createOnNull\n\t * @return pebble.interfaces.IPebbleDataSource\n\t */\n\tpebble.Pebble.prototype.getNode = function(key, isCopy, createOnNull) {\n\t\tvar node = this.impl.getDataSource(key);\n\t\tif (node === null && createOnNull) {\n\t\t\tthis.impl.setRecordSet(key, pebble.Pebble.dataSourceFactory.getNewInstance(), false);\n\t\t\tnode = this.impl.getDataSource(key);\n\t\t}\n\t\tif (node !== null) {\n\t\t\tif (isCopy) {\n\t\t\t\treturn node.getCopyInstance();\n\t\t\t} else {\n\t\t\t\treturn node;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\t/**\n\t * @param {string} path\n\t * @return {Array.<pebble.Pebble>}\n\t */\n\tpebble.Pebble.prototype.getRecords = function(path) {\n\t\tvar recs = [];\n\t\tvar rs = this.impl.getRecords(path);\n\t\tfor (var i = 0; i < rs.length; i++) {\n\t\t\tvar childNode = rs[i];\n\t\t\trecs[recs.length] = new pebble.Pebble(childNode);\n\t\t}\n\t\treturn recs;\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {pebble.Pebble} obj\n\t */\n\tpebble.Pebble.prototype.set = function(path, obj) {\n\t\tif (obj != null) {\n\t\t\tthis.impl.setRecordSet(path, obj.impl, false); \n\t\t} else {\n\t\t\tthis.remove(path);\n\t\t}\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {pebble.Pebble} obj\n\t */\n\tpebble.Pebble.prototype.setFull = function(path, obj) {\n\t\tif (obj != null) {\n\t\t\tthis.impl.setRecordSet(path, obj.impl, true);\n\t\t} else {\n\t\t\tthis.remove(path);\n\t\t}\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {pebble.Pebble} obj\n\t */\n\tpebble.Pebble.prototype.add = function(path, obj) {\n\t\tthis.impl.add(path, obj.impl);\n\t};\n\t/**\n\t * @param {string} path\n\t */\n\tpebble.Pebble.prototype.remove = function(path) {\n\t\treturn new pebble.Pebble(this.impl.remove(path));\n\t};\n\t/**\n\t * if there is no value/ no dNode return null\n\t * @param {string} key\n\t * @return {?string}\n\t */\n\tpebble.Pebble.prototype.getValue = function(key) {\n\t\treturn this.impl.getValue(key);\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {string|number|boolean} val\n\t */\n\tpebble.Pebble.prototype.setValue = function(path, val) {\n\t\tif (val != null) {\n\t\t\tthis.impl.setValue(path, val);\n\t\t} else {\n\t\t\tthis.remove(path);\n\t\t}\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {string} val\n\t */\n\tpebble.Pebble.prototype.setMarkup = function(path, val) {\n\t\tif (val != null) {\n\t\t\tthis.impl.setMarkup(path, val);\n\t\t} else {\n\t\t\tthis.remove(path);\n\t\t}\n\t};\n\t/**\n\t * @param {string} path\n\t * @return {Object}\n\t */\n\tpebble.Pebble.prototype.getAttributes = function(path) {\n\t\treturn this.impl.getAttributes(path);\n\t};\n\t/**\n\t * @param {string} key\n\t * @return {boolean}\n\t */\n\tpebble.Pebble.prototype.getBool = function(key) {\n\t\tvar val = this.impl.getValue(key);\n\t\tif (val != null) {\n\t\t\t//val = val.trim();\n\t\t\treturn val == true || val == 'true';\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\n\t/**\n\t * @param {string} key\n\t * @return {?number}\n\t */\n\tpebble.Pebble.prototype.getInt = function(key) {\n\t\tvar val = this.impl.getValue(key);\n\t\tif (val != null) {\n\t\t\treturn parseInt(val, 10);//.trim()); \n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\t/**\n\t * @param {string} key\n\t * @return {?number}\n\t */\n\tpebble.Pebble.prototype.getFloat = function(key) {\n\t\tvar val = this.impl.getValue(key);\n\t\tif (val != null) {\n\t\t\treturn parseFloat(val);//.trim());\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t};\n\t/**\n\t * @param {string} path\n\t */\n\tpebble.Pebble.prototype.setTrue = function(path) {\n\t\tthis.setValue(path, 'true');\n\t};\n\t/**\n\t * @return {string}\n\t */\n\tpebble.Pebble.prototype.getTagName = function() {\n\t\treturn this.impl.getTagName(); \n\t};\n\t/**\n\t * @param {string} val\n\t */\n\tpebble.Pebble.prototype.setTagName = function(val) {\n\t\t//this.impl.setRecordAttribute('n', val);\n\t};\n\t//--- reference implementation uses 'ref' ---\n\t/**\n\t * @param {string} path\n\t * @return {?string}\n\t */\n\tpebble.Pebble.prototype.getRef = function(path) {\n\t\tvar ret = this.impl.getRecordSetAttribute(path, 'ref');\n\t\tif (ret == '') {\n\t\t\t//return null for empty strings\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn ret;\n\t\t}\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {?string} val\n\t */\n\tpebble.Pebble.prototype.setRef = function(path, val) {\n\t\tif (val != null) {\n\t\t\tthis.impl.setRecordSetAttribute(path, val, 'ref');\n\t\t} else {\n\t\t\tthis.impl.removeRecordSetAttribute(path, 'ref');\n\t\t}\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {string} attrName\n\t * @return {?string}\n\t */\n\tpebble.Pebble.prototype.getAttribute = function(path, attrName) {\n\t\tvar ret = this.impl.getRecordSetAttribute(path, attrName);\n\t\tif (ret === '') {\n\t\t\t//return null for empty strings\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn ret;\n\t\t}\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {string} attrName\n\t * @param {?string} val\n\t */\n\tpebble.Pebble.prototype.setAttribute = function(path, attrName, val) {\n\t\tif (val != null) {\n\t\t\tthis.impl.setRecordSetAttribute(path, val, attrName);\n\t\t} else {\n\t\t\tthis.impl.removeRecordSetAttribute(path, attrName);\n\t\t}\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {string} attrName\n\t */\n\tpebble.Pebble.prototype.removeAttribute = function(path, attrName) {\n\t\tthis.impl.removeRecordSetAttribute(path, attrName);\n\t};\n\t//ARRAY (start)\n\t/**\n\t * @param {pebble.Pebble} newPeb\n\t * @param {string} targetPath\n\t */\n\tpebble.Pebble.prototype.insertBefore = function(newPeb, targetPath) {\n\t\tthis.impl.insertBefore(newPeb.impl, targetPath);\n\t};\n\n\t//public pebble.Pebble insertAfter(pebble.Pebble newPeb, String targetPath) {\n\t//pebble.Pebble targetPeb = this.get(targetPath, null);\n\t//pebble.Pebble parent = targetPeb.getParent(false);\n\t//newPeb.setTopId('n', parent.getArrayName('.'));\n\n\t//if (targetPeb.impl.getNextSibling() != null) {\n\t//targetPeb.impl.getParentNode().insertBefore(newPeb.impl, targetPeb.impl.getNextSibling());\n\t//} else {\n\t//targetPeb.impl.getParentNode().appendChild(newPeb.impl);\n\t//}\n\t//return newPeb;\n\t//}\n\t//path to prev i\n\t/**\n\t * @param {string} path\n\t * @param {string} name\n\t * @return {number}\n\t */\n\tpebble.Pebble.prototype.getIndex = function(path, name) {\n\t\treturn this.impl.getIndex(path, name);\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {!number} index\n\t * @return pebble.Pebble\n\t */\n\tpebble.Pebble.prototype.getByIndex = function(path, index) {\n\t\tvar node = this.impl.getByIndex(path, index);\n\t\tif (node != null) {\n\t\t\treturn new pebble.Pebble(node);\n\t\t}\n\t\treturn null;\n\t};\n\t//note: copies full i (ps and rs)\n\t/**\n\t * @param {string} path\n\t * @param {pebble.Pebble} obj\n\t * @param {?string} forceName\n\t * @return {pebble.Pebble}\n\t */\n\tpebble.Pebble.prototype.add2Array = function(path, obj, forceName) {\n\t\treturn this._add2Array(path, obj, (forceName != null) ? forceName : this.getArrayName(path, 'a'));\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {pebble.Pebble} obj\n\t * @param {string} prefix\n\t * @return {pebble.Pebble}\n\t */\n\tpebble.Pebble.prototype.add2ArrayUsePrefix = function(path, obj, prefix){\n\t\treturn this._add2Array(path, obj, this.getArrayName(path, prefix));\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {pebble.Pebble} obj\n\t * @param {string} name\n\t * @private\n\t * @return {pebble.Pebble}\n\t */\n\tpebble.Pebble.prototype._add2Array = function(path, obj, name) {\n\t\tthis.impl.add2Array(path, obj.impl, name);\n\t\treturn this.get(path + '.' + name);\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {string} prefix\n\t * @return {string}\n\t */\n\tpebble.Pebble.prototype.getArrayName = function(path, prefix) {\n\t\tvar metaArrayName = '';\n\t\tfor (var name = 0; ; name++) {\n\t\t\tmetaArrayName = prefix + name;\n\t\t\tif (!this.hasName(path, metaArrayName)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn metaArrayName;\n\t};\n\t/**\n\t * @param {string} path\n\t * @param {string} name\n\t * @return {?boolean} \n\t */\n\tpebble.Pebble.prototype.hasName = function(path, name) {\n\t\tvar recs = this.getRecords(path);\n\t\tfor (var i = 0; i < recs.length; i++) {\n\t\t\tif (recs[i].getTagName() == name) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\t/**\n\t * @return {?string} \n\t */\n\tpebble.Pebble.prototype.getInnerXml = function() {\n\t\treturn this.impl.getInnerXml();\n\t};\n\t/**\n\t * @return {string}\n\t * @override\n\t */\n\tpebble.Pebble.prototype.toString = function() {\n\t\treturn this.impl.toString();\n\t};\n\n\t/**\n\t * @param {Function} cb\n\t */\n\tpebble.Pebble.prototype.setCallback = function (cb) {\n\t\tthis.fn = cb;\n\t};\n\t/**\n\t * @return {Function}\n\t */\n\tpebble.Pebble.prototype.getCallback = function() {\n\t\tif (this.fn == null) {\n\t\t\tthis.fn = function(){};\n\t\t}\n\t\treturn this.fn;\n\t};\n\t/**\n\t * @param {pebble.Pebble} [data]\n\t */\n\tpebble.Pebble.prototype.callback = function (data) {\n\t\tif (this.fn != null) {\n\t\t\tif (data == null) {\n\t\t\t\tthis.fn(this); //not sure if this is being used... fn(null)??\n\t\t\t} else {\n\t\t\t\tthis.fn(data);\n\t\t\t}\n\t\t}\n\t};\n\t/**\n\t * @param {string} path\n\t * @return {pebble.Pebble}\n\t */\n\tpebble.Pebble.prototype.voidFunc2ReturnFunc = function (path) {\n\t\t//create a generator object \n\t\tvar func = this.get(path);\n\t\treturn _voidFunc2ReturnFunc(func);\n\t};\n\t/**\n\t * @param {pebble.Pebble} params\n\t */\n\tpebble.Pebble.prototype.setParams = function(params) {\n\t\tif (params != null) {\n\t\t\tthis.set('_generate', params);\n\t\t}\n\t};\n\t/**\n\t * @return {pebble.Pebble}\n\t */\n\tpebble.Pebble.prototype.getParams = function() {\n\t\treturn this.getCreateOnNull('_generate');\n\t};\n\n\t/**\n\t * @param {pebble.Pebble} func\n\t * @return {pebble.Pebble}\n\t */\n\tfunction _voidFunc2ReturnFunc(func) {\n\t\tvar genObj = new pebble.Pebble();\n\t\tif (func != null) {\n\t\t\t//genObj.set('ps.rg', func.get('voidrg'));\n\t\t\tvar recs = func.getRecords('.');\n\t\t\tif (recs.length > 0) {\n\t\t\t\tgenObj.set('_generate', func.getRecords('.')[0]);\n\t\t\t}\n\t\t}\n\t\treturn genObj;\n\t}\n\n\tpebble.Pebble.count = 0;\n\n\t/**\n\t * @param {pebble.interfaces.IPebbleDataSource} pebbleDataSource\n\t */\n\tpebble.Pebble.setDataSourceFactory = function(pebbleDataSource) {\n\t\tpebble.Pebble.dataSourceFactory = pebbleDataSource;\n\t};\n\n\n})(typeof(exports) === \"undefined\" ? this : exports);\n"},{"key":"codePath","val":"frontend/src/lib/object/pebble.Pebble.js"},{"key":"ext","val":"js"}]},{"key":"pebble","val":[{"key":"devCode","val":"/**\n * @namespace\n */\nvar pebble = pebble || {};\n/**\n * @namespace\n */\npebble.interfaces = {};\n\n/**\n * Taken from Google Closure\n * Inherit the prototype methods from one constructor into another.\n * Must call this right after child function definition\n * @param {Function} childCtor Child class.\n * @param {Function} parentCtor Parent class.\n */\npebble.inherits = function(childCtor, parentCtor) {\n\t/** @constructor */\n\tfunction tempCtor() {}\n\ttempCtor.prototype = parentCtor.prototype;\n\tchildCtor.superClass_ = parentCtor.prototype;\n\tchildCtor.prototype = new tempCtor();\n\t/** @override */\n\tchildCtor.prototype.constructor = childCtor;\n};\n\n\n"},{"key":"codePath","val":"frontend/src/lib/object/pebble.js"},{"key":"ext","val":"js"}]},{"key":"authorizer","val":[{"key":"devCode","val":"\n/**\n * Helper class you can inherit from when writing authorizers\n * @constructor\n */\npebble.shared.Authorizer = function(userId) {\n\tthis.userId = userId || pebble.shared.Authorizer.UNAUTHORIZED_USER;\n};\n/**\n * @return {pebble.Pebble}\n */\npebble.shared.Authorizer.prototype.getUserObject = function(groupMaps) {\n\tvar user = new pebble.Pebble();\n\n\tvar maps = groupMaps.getRecords('.');\n\t//check against all groupMaps if true for any then authorized\n\tfor (var j = 0; j < maps.length; j++) {\n\t\tvar map = maps[j];\n\t\tvar actorGroup = map.getRef('.');\n\t\tvar userGroup = map.get('toGroup');\n\t\tif (this.isInGroup(actorGroup, userGroup)) {\n\t\t\tuser.set('roles.' + actorGroup, new pebble.Pebble());\n\t\t}\n\t}\n\tuser.setRef('id', this.userId);\n\tvar isAuth = this.userId != pebble.shared.Authorizer.UNAUTHORIZED_USER;\n\tuser.setValue('isAuth', isAuth.toString());\n\treturn user;\n};\n/**\n * @param {string} actorGroup\n * @param {pebble.Pebble} userGroup\n * @return {boolean}\n */\npebble.shared.Authorizer.prototype.isInGroup = function(actorGroup, userGroup){};\n\n\npebble.shared.Authorizer.UNAUTHORIZED_USER = '-1';\n"},{"key":"codePath","val":"frontend/src/lib/shared/authorizer.js"},{"key":"ext","val":"js"}]},{"key":"buildDeployment","val":[{"key":"devCode","val":"\n\t/** \n\t * pebble.shared.BuildDeployment takes a workspace, developed in pebbleDev, and creates a\n\t * deployment runtime.  \n\t * @param {Object} less : less parser injected in\n\t * @constructor\n\t */\n\tpebble.shared.BuildDeployment = function(less) { \n\t\tthis.less = less;\t\n\t};\n\n\t/**\n\t * this can be used for package management\n\t */\n\t//pebble.shared.BuildDeployment.prototype.getAllDependencies = function(dep) {\n\n\t\t//var depList = {};\n\t\t//var accessPoints =  dep.getRecords('accessPoints');\n\t\t//for (var i = 0; i < accessPoints.length; i++) {\n\t\t\t//var accessPoint = accessPoints[i];\n\t\t\t//var dependencies = accessPoint.getRecords('dependencies');\n\t\t\t//for (var j = 0; j < dependencies.length; j++) {\n\t\t\t\t//var dependency = dependencies[j];\n\t\t\t\t//depList[dependency.getRef('.')] = dependency;\n\t\t\t//}\n\t\t//}\n\t\t//return depList;\n\t//};\n\n\t/**\n\t * @param {pebble.shared.interfaces.IServerData} ds\n\t * @param {pebble.shared.interfaces.IServerData} deploymentDs\n\t * @param {pebble.Pebble} deployment : the deployment to extract\n\t * @param {string} accessPointMeta \n\t * @param {Function} cb \n\t */\n\tpebble.shared.BuildDeployment.prototype.buildDeployment = function(ds, deploymentDs, deployment, accessPointMeta, cb) {\n\t\tds.setOffsetPath('theModel.clientWorkspace');\n\t\tvar app = new pebble.Pebble('theInstance');\n\t\tapp.set('.', deployment.get('.'));\n\n\t\t//get unique list\n\t\tvar depList = {};\n\t\tvar accessPointsPeb = app.get('accessPoints');\n\t\tvar accessPoint =  accessPointsPeb.get(accessPointMeta);\n    var configStr = accessPoint.getValue('config');\n    var config = JSON.parse(configStr);\n\n    //json array\n\t\tvar dependencies = config.dependencies;\n\n    app.setRef('.', dependencies[dependencies.length - 1].lib);\n\n\t\tfor (var z = 0; z < dependencies.length; z++) {\n\t\t\tvar dependency = dependencies[z]; //references to sharedLib\n\t\t\tvar dependencyRef = dependency.lib;\n\n\t\t\tif (dependencyRef != null) {\n        console.log('--------- ' + dependencyRef + ' -----------');\n\n        var sharedLib = this.getSharedLib(ds, 'theModel.clientWorkspace.libs.' + dependencyRef);\n\t\t\t\tvar customizeLib = sharedLib.getCopy('.');\n        \n        //only keep what is referenced\n        //array of strings\n        if (dependency.css) {\n          var newCss = new pebble.Pebble();\n          for (var i = 0; i < dependency.css.length; i++) {\n            var name = dependency.css[i];\n            var o = customizeLib.get('cssTemplates.' + name);\n            newCss.set(name, o);\n            console.log(name);\n          }\n          customizeLib.set('cssTemplates', newCss);\n          console.log('set cssTemplates ----- done' );\n        }\n\n        if (dependency.strings) {\n          var newStringMaps = new pebble.Pebble();\n          for (var i = 0; i < dependency.strings.length; i++) {\n            var refStringMap = dependency.strings[i];\n            var name = refStringMap.name;\n            var o = customizeLib.get('stringMaps.' + name);\n            newStringMaps.set(name, o);\n\n            //inner overrides\n            if (refStringMap.overrides) {\n              var overrides = refStringMap.overrides;\n              for (var key in overrides) {\n                newStringMaps.set(key, overrides[key]); \n              }\n            }\n\n          }\n          customizeLib.set('stringMaps', newStringMaps);\n          console.log('set stringMaps ----- done' );\n        }\n\n\n        if (dependency.assets) {\n          var newAssets = new pebble.Pebble();\n          for (var i = 0; i < dependency.assets.length; i++) {\n            var refAssetMap = dependency.assets[i];\n            var name = refAssetMap.name;\n            var o = customizeLib.get('assets.' + name);\n            newAssets.set(name, o);\n            \n            //inner overrides\n            if (refAssetMap.overrides) {\n              var overrides = refAssetMap.overrides;\n              for (var key in overrides) {\n                newAssets.set(key, overrides[key]); \n              }\n            }\n          }\n          customizeLib.set('assets', newAssets);\n          console.log('set assets ----- done' );\n        }\n\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tthrow new Error('BuildDeployment: buildDeployment() required reference on dependency');\n\t\t\t}\n\n\t\t\tthis.putDependency(deploymentDs, ds, customizeLib);\n\t\t}\n\n\t\t//all access point dependencies\n\t\tfor (var i = 0; i < config.dependencies.length; i++) {\n\t\t\tvar ap = config.dependencies[i];\n\t\t\tif (ap.lib !== accessPointMeta) {\n\t\t\t\t//remove all other accessPoints\n\t\t\t\taccessPointsPeb.remove(ap.lib);\n\t\t\t}\n\t\t}\n\n\t\tdeploymentDs.create('theModel.appInstances', app);\n\t\tcb(deploymentDs.getDataSource());\n\n\t};\n\n\t/**\n\t * @param {pebble.shared.interfaces.IServerData} deploymentDs\n\t * @param {pebble.shared.interfaces.IServerData} ds\n\t * @param {pebble.Pebble} customizeLib\n\t */\t\n\tpebble.shared.BuildDeployment.prototype.putDependency = function(deploymentDs, ds, customizeLib) {\n\t\t\t\n\t\t\t//stringMaps\n\t\t\tvar stringMaps = customizeLib.get('stringMaps');\n      changePeb(customizeLib, stringMaps);\n\t\t\t\n\t\t\tthis.processCssTemplates(customizeLib.get('cssTemplates'), function(processedCssTemplates) {\n\t\t\t\t//remove less?\n\t\t\t\tif (processedCssTemplates != null) {\n\t\t\t\t\tcustomizeLib.set('cssTemplates', processedCssTemplates);\n\t\t\t\t}\n\n\t\t\t\t//put in theModel.libs\n\t\t\t\tpebble.shared.BuildDeployment.installApp(deploymentDs, customizeLib, 'theModel.libs', true);\n\n\t\t\t});\n\n\t};\t\n\n\t/**\n\t * @param {pebble.shared.interfaces.IServerData} ds\n\t * @param {string} sharedLibRef\n\t * @return {pebble.Pebble}\n\t */\n\tpebble.shared.BuildDeployment.prototype.getSharedLib = function(ds, sharedLibRef) {\n\t\tpebble.shared.logger.log('INFO', sharedLibRef + ' ----- ');\n\t\tvar collectionPath = sharedLibRef.substring(0, sharedLibRef.lastIndexOf('.'));\n\t\tvar appDefName = sharedLibRef.substring(sharedLibRef.lastIndexOf('.') + 1);\n\t\tvar doc = ds.retrieve(collectionPath, appDefName);\n\n\t\tvar collections = ['types', 'controls', 'services', 'stringMaps', 'cssTemplates', 'assets'];\n\t\tfor (var i = 0; i < collections.length; i++) {\n\t\t\tvar collection = collections[i];\n\t\t\tdoc = this.getCollection(ds, sharedLibRef, collection, doc);\n\t\t\tconsole.log(collection +  ' ----- done' );\n\t\t}\n\t\treturn doc;\n\t};\n\n\t/**\n\t * @param {pebble.shared.interfaces.IServerData} ds\n\t * @param {string} path\n\t * @param {string} collectionName\n\t * @param {pebble.Pebble} item\n\t * @return {pebble.Pebble}\n\t */\n\tpebble.shared.BuildDeployment.prototype.getCollection = function(ds, path, collectionName, item) {\n\n\t\tvar query = new pebble.Pebble();\n\t\tvar collectionPath = path + '.' + collectionName;\n\t\tquery.setRef('from.path', collectionPath);\n\t\tvar appIndexes = ds.doQuery(query);\n\t\tif (appIndexes.length > 0) {\n\t\t\titem.setTrue(collectionName + '._' + pebble.shared.BuildDeployment.COMPRESSED_COLLECTION_ATTR);\n\n\t\t\tfor (var i = 0; i < appIndexes.length; i++) {\n\t\t\t\tvar childPeb = appIndexes[i];\n\t\t\t\tpebble.shared.logger.log('INFO', childPeb.getTagName());\n\t\t\t\tvar doc = ds.retrieve(collectionPath, childPeb.getTagName());\n\t\t\t\tthis.convertDoc(ds, doc, collectionPath);\n\n\t\t\t\titem.set(collectionName + '.' + childPeb.getTagName(), doc);\n\t\t\t}\n\t\t}\n\n\t\treturn item;\n\t};\n\n\t/**\n\t * @param {pebble.shared.interfaces.IServerData} ds\n\t * @param {pebble.Pebble} doc\n\t * @param {string} collectionPath\n\t */\n\tpebble.shared.BuildDeployment.prototype.convertDoc = function(ds, doc, collectionPath) {\n\t\tvar collectionName = collectionPath.substring(collectionPath.lastIndexOf('.') + 1);\n\t\tif (collectionName == 'services') {\n\t\t\t//functions\n\t\t\tdoc = this.getCollection(ds, collectionPath + '.' + doc.getTagName(), 'functions', doc);\n\n\t\t\tthis.adjustRef(doc, 'inherits');\n\n\t\t\tthis.adjustFields(doc);\n\n\t\t} else if (collectionName == 'controls') {\n\t\t\t//functions\n\t\t\tdoc = this.getCollection(ds, collectionPath + '.' + doc.getTagName(), 'functions', doc);\n\n\t\t\tthis.adjustRef(doc, 'inherits');\n\n\t\t\tthis.adjustFields(doc);\n\n\t\t} else if (collectionName == 'functions') {\n\n\t\t\tthis.adjustFields(doc);\n\n\t\t\tthis.adjustRef(doc, 'returnType');\n\n\t\t} else if (collectionName == 'types') {\n\n\t\t\tthis.adjustRef(doc, 'inherits');\n\n\t\t\tthis.adjustFields(doc);\n\n\t\t}\n\t\treturn doc;\n\t};\n\t/**\n\t * @param {pebble.Pebble} fieldsHolder\n\t */\n\tpebble.shared.BuildDeployment.prototype.adjustFields = function(fieldsHolder) {\n\t\tvar appDefFields = fieldsHolder.getRecords('fields');\n\t\tfor (var i = 0; i < appDefFields.length; i++) {\n\t\t\tvar field = appDefFields[i];\n\t\t\tvar arrayFormId = field.getRef('type.arrayFormId');\n\t\t\tif (arrayFormId != null) {\n\t\t\t\tthis.adjustRef(field, 'type.arrayFormId');\n\t\t\t}\n\t\t\tthis.adjustRef(field, 'type');\n\t\t}\n\t};\n\t/**\n\t * @param {pebble.Pebble} peb\n\t * @param {string} path\n\t */\n\tpebble.shared.BuildDeployment.prototype.adjustRef = function(peb, path) {\n\t\tvar ref = peb.getRef(path);\n\t\tif (ref != null) {\n\t\t\tref = ref.replace('theModel.clientWorkspace', 'theModel');\n\t\t\tpeb.setRef(path, ref);\n\t\t}\n\t};\n\n\n\n\t/**\n\t * Installs a top app index item.\n\t * If app has a uniqueName (app.getMetaId()) it will use it\n\t * @param {pebble.shared.interfaces.IServerData} ds\n\t * @param {pebble.Pebble} app\n\t * @param {string} colPath ie. 'theModel.libs'\n\t * @param {boolean} store\n\t */\n\tpebble.shared.BuildDeployment.installApp = function(ds, app, colPath, store) {\n\n\t\tvar recs = app.getRecords('.');\n\t\tfor (var i = 0; i < recs.length; i++) {\n\t\t\tvar rec = recs[i];\n\t\t\t//decompress\n\t\t\tvar collection;\n\t\t\tif (colPath == null) {\n\t\t\t\tcollection = app.getTagName();\n\t\t\t} else {\n\t\t\t\tcollection = colPath + '.' + app.getTagName();\n\t\t\t}\n\t\t\tvar doStore = app.getBool('_' + pebble.shared.BuildDeployment.COMPRESSED_COLLECTION_ATTR);\n\t\t\tpebble.shared.BuildDeployment.installApp(ds, rec, collection, doStore);\n\t\t\tif (doStore) {\n\t\t\t\tapp.remove(rec.getTagName());\n\t\t\t}\n\t\t}\n\t\t//strait store (add indexes on second pass)\n\t\tif (store) {\n\t\t\tds.create(colPath, app);\n\t\t}\n\t};\n\n\t/**\n\t * \n\t * @param {pebble.Pebble} cssTemplates\n\t * @param {Function} cb\n\t */\t\n\tpebble.shared.BuildDeployment.prototype.processCssTemplates = function(cssTemplates, cb) {\n\t\tif (cssTemplates == null) {\n\t\t\tcb(cssTemplates);\n\t\t} else {\n\t\t\tvar recs = cssTemplates.getRecords('.');\n\t\t\tvar count = recs.length;\n\t\t\tif (count == 0) {\n\t\t\t\tcb(cssTemplates);\n\t\t\t} else {\n\t\t\t\tfor (var i = 0; i < recs.length; i++) {\n\t\t\t\t\tvar cssTemplate = recs[i];\n\t\t\t\t\tvar less = cssTemplate.get('less');\n\t\t\t\t\tif (less != null) {\n\t\t\t\t\t\t//generate css\n\t\t\t\t\t\tvar lessFiles = less.getRecords('.');\n\t\t\t\t\t\tif (lessFiles.length > 0) {\n\n              console.log('compiling less ...');\n              var entryPoint = cssTemplate.getValue('lessEntryPoint') || 'bootstrap';\n\t\t\t\t\t\t\tthis.compileLess(entryPoint, less, function(temp) {\n\t\t\t\t\t\t\t\treturn\tfunction(css) {\n\t\t\t\t\t\t\t\t\ttemp.setMarkup('css', css);\n\t\t\t\t\t\t\t\t\tcount -= 1;\n\t\t\t\t\t\t\t\t\tif (count == 0) cb(cssTemplates);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}(cssTemplate));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcount -= 1;\n\t\t\t\t\t\t\tif (count == 0) cb(cssTemplates);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcount -= 1;\t\n\t\t\t\t\t\tif (count == 0) cb(cssTemplates);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\t\n\t/**\n\t * @param {string} entryPoint\n\t * @param {pebble.Pebble} lessPeb\n\t * @param {Function} cb\n\t */\t\n\tpebble.shared.BuildDeployment.prototype.compileLess = function(entryPoint, lessPeb, cb) {\n\t\t//main less file is first one\n    var main = lessPeb.getValue(entryPoint);\n\t\tif (main !== null) {\n\t\t\tvar startIndex  = 0;\n\t\t\tvar outputStr = '';\n\t\t\tvar remStr = main;\n\t\t\twhile (remStr.indexOf('@import') != -1) {\n\t\t\t\tstartIndex = remStr.indexOf('@import');\n\t\t\t\tif (startIndex >= 0) {\n\t\t\t\t\tstartIndex = remStr.indexOf('\"', startIndex) + 1;\n\t\t\t\t\tvar endIndex = remStr.indexOf('\"', startIndex);\n\t\t\t\t\tvar fileName = remStr.substring(startIndex, endIndex);\n\t\t\t\t\tfileName = fileName.replace('.less', '');\n          console.log('less file: ' + fileName);\n\t\t\t\t\tvar lessContents = lessPeb.getValue(fileName);\n          if (lessContents) {\n            outputStr += lessContents;\n          } else {\n           console.log('NO LESS FILE: ' + fileName);\n          } \n\n\t\t\t\t\t//should check again but...\n\n\t\t\t\t\tremStr = remStr.substring(endIndex + 1);\n\t\t\t\t} \n\t\t\t}\n\t\t\tvar parser = new(this.less.Parser);\n\n\t\t\tparser.parse(outputStr, function (err, tree) {\n\t\t\t\tif (err) { \n\t\t\t\t\treturn console.error(err);\n\t\t\t\t}\n\t\t\t\tvar css = tree.toCSS({compress:true});\n\t\t\t\tcb(css);\n\t\t\t});\n\t\t}\n\t};\t\n\n  function changePeb(peb, stringMaps) {\n\n    var val = peb.getValue('.');\n    if (val && val.match(/(@pebble-[a-z]+_[a-z0-9]+)/gi)) {\n      val = val.replace(/(@pebble-[a-z]+_[a-z0-9]+)/gi, function(match) {\n        var partsStr = match.split('-')[1];\n        var parts = partsStr.split('_');\n        var mapName = parts[0];\n        var key = parts[1];\n\n        var map = stringMaps.get(mapName);\n        if (map) {\n          return map.getValue(key) || val;\n        } else {\n          return val;\n        }\n      });\n      peb.setValue('.', val);\n    }\n    var recs = peb.getRecords(\".\");\n    for (var i = 0; i < recs.length; i++) {\n      var rec = recs[i];\n      changePeb(rec, stringMaps);\n    }\n  }\n\tpebble.shared.BuildDeployment.COMPRESSED_COLLECTION_ATTR = 'compressedCollection';\n\t\t\n\n"},{"key":"codePath","val":"frontend/src/lib/shared/buildDeployment.js"},{"key":"ext","val":"js"}]},{"key":"deployment","val":[{"key":"devCode","val":"\n(function(){\n\n\t/**\n\t * @param {pebble.Pebble} sharedLib\n\t */\n\tfunction getScriptsAndCss_client(sharedLib) {\n\n\t\tvar sharedLibName = sharedLib.getTagName();\n\n\t\tvar cssTemplates = sharedLib.getRecords('cssTemplates');\n\t\taddCssTemplates(cssTemplates, sharedLibName);\n\n\t}\n\n\tfunction addCssTemplates(cssTemplates, id) {\n\t\tvar css = '';\n\t\tfor (var i = 0; i < cssTemplates.length; i++) {\n\t\t\tvar cssTemplate = cssTemplates[i];\n\t\t\tvar s = cssTemplate.getValue('css');\n\t\t\tif (s != null) {\n\t\t\t\tcss += s;\n\t\t\t}\n\t\t}\n\t\tif (css != '') {\n\t\t\taddCss(id, css);\n\t\t}\n\t}\n\n\n  function addCodeToEnv_client() {\n    \n\t\tvar app = this.ds.retrieve('theModel.appInstances', 'theInstance');\n    var accessPoint = app.getRecords('accessPoints')[0];\n    var accessPointMeta = accessPoint.getTagName();\n    var accessPointConfigStr = accessPoint.getValue('config');\n    var accessPointConfig = accessPointConfigStr ? JSON.parse(accessPointConfigStr) : {};\n\t\t\n    var dependencies = accessPointConfig.dependencies;\n\t\tfor (var z = 0; z < dependencies.length; z++) {\n\t\t\tvar dependency = dependencies[z]; //references to sharedLib\n\t\t\tvar dependencyRef = dependency.lib;\n\n      var lib = this.ds.retrieve('theModel.libs', dependencyRef);\n      //TODO: should only put css in based on config\n      getScriptsAndCss_client(lib);\n\n      //create namespaces\n      addScriptCode(dependencyRef + '-lib', 'if (!pebble.libs.' + dependencyRef + ') pebble.libs.' + dependencyRef + '={};');//create namespace\n\n      var libConfigStr = lib.getValue('mainConfig');\n      var libConfig = libConfigStr ? JSON.parse(libConfigStr) : null;\n\n      var files;\n      if (z == dependencies.length - 1) {\n        //last, itself\n        files = getFiles('accessPoint', [], libConfig, accessPointConfig);\n      } else {\n        files = getFiles('libAccessPoint', [], libConfig);\n      }\n\n      var js = '';\n\n      var clientScripts = lib.getRecords('clientScripts');\n\n      var query = new pebble.Pebble();\n      query.setRef('from.path', 'theModel.libs.' + dependencyRef + '.controls');\n      var controls = this.ds.doQuery(query);\n\n      for (var j = 0; j < files.length; j++) { \n        var file = files[j];\n        var found = false;\n        for (var i = 0; i < clientScripts.length; i++) {\n          var clientScript = clientScripts[i];\n          if (file === clientScript.getValue('codePath')) {\n            var devCode = clientScript.getValue('devCode');\n            if (devCode) {\n              addScriptCode(dependencyRef + file.replace('.', '-'), devCode);\n            }\n            found = true;\n            break;\n          }\n        }\n        if (!found) {\n          for (var i = 0; i < controls.length; i++) {\n            var control = controls[i];\n            if (file === control.getValue('codePath')) {\n              var code = control.getValue('code');\n              if (code) {\n                addScriptCode(dependencyRef + file.replace('.', '-'), code);\n              }\n              found = true;\n              break;\n            }\n          }\n        }\n        if (!found) console.log('SCRIPT NOT FOUND: ' +  file);\n      }\n\n      //templates\n      var templateFiles, templateType;\n      if (z == dependencies.length - 1) {\n        //last, itself\n        if (accessPointConfig.templates || libConfig.libTemplates) {\n          templateFiles = getTemplateFiles('templates', [], libConfig, accessPointConfig);\n          addTemplateFiles(templateFiles, controls, accessPointConfig.templates.type || libConfig.libTemplates.type);\n        }\n      } else {\n        if (libConfig.libTemplates) {\n          templateFiles = getTemplateFiles('libTemplates', [], libConfig);\n          addTemplateFiles(templateFiles, controls, libConfig.libTemplates.type);\n        }\n      }\n      \n    }\n  } \n\n  function addTemplateFiles(templateFiles, controls, templateType) {\n      for (var j = 0; j < templateFiles.length; j++) { \n        var file = templateFiles[j];\n        for (var i = 0; i < controls.length; i++) {\n          var control = controls[i];\n          if (file === control.getValue('templatePath')) {\n            var template = control.getValue('template');\n            var name = file.substring(file.lastIndexOf('templates/') + 10);\n            name.replace('.hbs', '').replace('.html', '');\n            if (template) {\n              getTemplateTag(name, template, templateType);\n            }\n            break;\n          }\n          console.log('TEMPLATE NOT FOUND: ' +  file);\n        }\n      }\n  }  \n\t//server adds all access point dependencies\n\tfunction addCodeToEnv_server() {\n\t\t\n\t\tvar query = new pebble.Pebble();\n\t\tquery.setRef('from.path', 'theModel.libs');\n\t\tvar appIndexes = this.ds.doQuery(query);\n\t\tfor (var i = 0; i < appIndexes.length; i++) {\n\t\t\tvar lib = appIndexes[i];\n\t\t\tgetScriptsAndCss_server(lib);\n\t\t\t\n\t\t}\n\t}\n\n\t/**\n\t * @param {pebble.Pebble} sharedLib\n\t */\n\tfunction getScriptsAndCss_server(sharedLib) {\n\n\t\tvar sharedLibName = sharedLib.getTagName();\n\t\tvar serverScripts = sharedLib.getRecords('serverScripts');\t\n\t\taddClientScripts(serverScripts, sharedLibName + '-serverCode');\n\n\t}\n\tfunction addClientScripts (clientScripts, id) {\n\t\tvar js = '';\n\t\tfor (var i = 0; i < clientScripts.length; i++) {\n\t\t\tvar clientScript = clientScripts[i];\n\t\t\tjs += clientScript.getValue('devCode');\n\t\t}\n\t\tif (js != '') {\n\t\t\taddScriptCode(id, js);\n\t\t}\n\t}\n\t//----- Utils\n\n\t/**\n\t * @param {string} pfId\n\t * @param {string} selector\n\t * @param {string} rule\n\t * @override\n\t */\n\t//pebble.libs.standard.impl.ModuleDisplayImpl.prototype.setCssRule (pfId, selector, rule) {\n\t//\tthis.addCssRule('css-' + pfId, '#' + pfId + ' ' + selector, rule); // add this to stylesheet not elements\n\t//\n\t//}\n\t/**\n\t * Insert one rule\n\t * @param {string} id\n\t * @param {string} selector\n\t * @param {string} style\n\t */\n\tfunction addCssRule (id, selector, style){\n\n\t\tvar head = document.getElementsByTagName('head')[0];\n\t\tvar dynamicCss = document.getElementById(id);\n\t\tif (dynamicCss ==  null) {\n\t\t\tvar styleEle = document.createElement('style');\n\t\t\tstyleEle.setAttribute('id', id);\n\t\t\thead.appendChild(styleEle);\n\t\t\tdynamicCss = document.getElementById(id);\n\t\t}\n\t\t//innerText?\n\t\tdynamicCss.innerHTML = selector + '{' + style + '}';\n\n\t}\n\t/**\n\t * Insert style tag\n\t * @param {string} id\n\t * @param {string} style\n\t */\n\tfunction addCss (id, style) {\n\n\t\tvar head = document.getElementsByTagName('head')[0];\n\t\tvar dynamicCss = document.getElementById(id);\n\t\tif (dynamicCss ==  null) {\n\t\t\tvar styleEle = document.createElement('style');\n\t\t\tstyleEle.setAttribute('id', id);\n\t\t\thead.appendChild(styleEle);\n\t\t\tdynamicCss = document.getElementById(id);\n\t\t}\n\t\tdynamicCss.innerHTML = style;\n\t}\n\t/**\n\t * Insert style tag\n\t * @param {string} id\n\t * @param {string} code\n\t */\n\tfunction addScriptCode (id, code) {\n\n\t\tvar head = document.getElementsByTagName('head')[0];\n\t\tvar script = document.getElementById(id);\n\t\tif (script ==  null) {\n\t\t\tvar ele = document.createElement('script');\n\t\t\tele.setAttribute('id', id);\n\t\t\thead.appendChild(ele);\n\t\t\tscript = document.getElementById(id);\n\t\t}\n\t\tscript.innerHTML = code;\n\t}\n\t/**\n\t * Insert style tag\n\t * @param {string} id\n\t * @param {string} src\n\t */\n\tfunction addScriptSrc (id, src) {\n\n\t\tvar head = document.getElementsByTagName('head')[0];\n\t\tvar script = document.getElementById(id);\n\t\tif (script ==  null) {\n\t\t\tvar ele = document.createElement('script');\n\t\t\tele.setAttribute('id', id);\n\t\t\thead.appendChild(ele);\n\t\t\tscript = document.getElementById(id);\n\t\t}\n\t\tscript.src = src;\n\n\t}\n\n  function getTemplateTag(name, template, templateType) {\n\n\t\tvar body = document.body;\n    var ele = document.createElement('script');\n    switch (templateType) {\n      case 'emberjs':\n        ele.setAttribute('type', 'text/x-handlebars');\n        ele.setAttribute('data-template-name', name);\n        break;\n      case 'backbonejs':\n        ele.setAttribute('type', 'text/template');\n        ele.setAttribute('id', name);\n        break;\n    }\n\t\tele.innerHTML = template;\n    body.appendChild(ele);\n  }\n\n/**\n * Deployment gets infomation about the path \n * @param {string|pebble.Pebble|pebble.shared.interfaces.IServerData} ds\n * @constructor\n */\npebble.shared.Deployment = function(ds) {\n\n  this.ds = null;\t\n\tif (ds) {\n\t\tif (typeof(ds) == 'string') { //element\n\t\t\tthis.ds = new pebble.shared.ServerDataImpl_Xml(new pebble.Pebble(ds));\n\t\t} else if (ds instanceof pebble.Pebble) {\n\t\t\tthis.ds = new pebble.shared.ServerDataImpl_Xml(ds);\n\t\t\t} else if (ds instanceof pebble.shared.ServerDataImpl_Xml) {\n\t\t\tthis.ds = ds;\n\t\t}\n\t}\n\tif (this.ds == null) {\n\t\tthis.ds = new pebble.shared.ServerDataImpl_Xml(new pebble.Pebble());\n\t} \n}\n/**\n * @param {string} url\n * @param {Function} cb\n */\npebble.shared.Deployment.prototype.retrieveDeployment = function(url, cb) {\n\tvar that = this;\n\tvar xmlhttp = new XMLHttpRequest();\n\txmlhttp.open('GET', url, true);\n\txmlhttp.onreadystatechange = function() {\n\t\tif (xmlhttp.readyState == 4 && xmlhttp.status == 200){\n\t\t\tthat.ds = new pebble.shared.ServerDataImpl_Xml(new pebble.Pebble(xmlhttp.responseText));\n\t\t\tcb();\n\t\t}\n\t};\n\txmlhttp.send(); \n}\n/**\n * @return {pebble.Pebble}\n */\npebble.shared.Deployment.prototype.getDeploymentPeb = function() {\n\treturn this.ds.retrieve('theModel.appInstances', 'theInstance');\n}\n/**\n * @return {pebble.Pebble}\n */\npebble.shared.Deployment.prototype.getTheControlApp = function() {\n  return this.getDeploymentPeb().get('theControlApp');\n}\n/**\n * @param {string} path\n * @return {pebble.shared.ItemType}\n */\npebble.shared.Deployment.prototype.getTypeDocument = function(path) {\n\treturn new pebble.shared.ItemType(this.ds, path);\n}\n/**\n * @param {string} path\n * @return {pebble.shared.PathAnalyzer}\n */\npebble.shared.Deployment.prototype.getPathAnalyzer = function(path) {\n\treturn new pebble.shared.PathAnalyzer(this.ds, path);\n}\n/**\n * @param {string} path\n * @return {pebble.Pebble}\n */\npebble.shared.Deployment.prototype.getDocument = function(path) {\n\tvar elements = path.split('.');\n\tvar name = elements.pop();\n\tvar container = elements.join('.');\n\treturn this.ds.retrieve(container, name);\n}\n/**\n * @param {Object} builder\n * @param {pebble.shared.ServerDataImpl_Xml} workspaceDs\n * @param {string} libMeta\n * @param {pebble.Pebble} dep\n * @param {string} accessPoint\n * @param {Function} cb\n */\npebble.shared.Deployment.prototype.buildDeployment = function(builder, workspaceDs, libMeta, dep, accessPoint, cb) {\n\tthis.libMeta = libMeta;\n\tvar that = this;\n\tbuilder.buildDeployment(workspaceDs, this.ds, dep, accessPoint, function(accessPointDeployment){\n\n\t\tcb(accessPointDeployment);\n\t\t\n\t});\n}\nfunction extendConfig(config, extendedConfig) {\n\n  if (!config) {\n    config = {};\n  }\n\n  for (var key in extendedConfig) {\n    config[key] = extendedConfig[key];\n  }\n  return config;\n\n}\n\nfunction getFiles(innerConfigName, files, config, extendedConfig, excludePatt) {\n  config = config || {};\n  if (extendedConfig) {\n    config = extendConfig(config, extendedConfig);\n  }\n  if (config[innerConfigName]) {\n    var innerConfig = config[innerConfigName];\n    if (innerConfig.imports) {\n      for (var i = 0; i < innerConfig.imports.length; i++) {\n        var importLibName = innerConfig.imports[i];\n        files = getFiles(importLibName, files, config, null, excludePatt);\n      }\n    }\n    for (var k = 0; k < innerConfig.files.length; k++) {\n      var file = innerConfig.files[k];\n\n      if (!excludePatt || !file.match(excludePatt)) {\n        var path = innerConfig.basePath ? innerConfig.basePath + '/' + file : file;\n        files.push(path);\n      }\n    }\n  } else {\n    console.log(\"no inner config: \" + innerConfigName);\n  } \n  return files;\n}\nfunction getTemplateFiles(innerConfigName, files, config, extendedConfig, excludePatt) {\n  config = config || {};\n  if (extendedConfig) {\n    config = extendConfig(config, extendedConfig);\n  }\n  if (config[innerConfigName]) {\n    var innerConfig = config[innerConfigName];\n    if (innerConfig.imports) {\n      for (var i = 0; i < innerConfig.imports.length; i++) {\n        var importLibName = innerConfig.imports[i];\n        files = getTemplateFiles(importLibName, files, config, null, excludePatt);\n      }\n    }\n    for (var k = 0; k < innerConfig.files.length; k++) {\n      var file = innerConfig.files[k];\n\n      if (!excludePatt || !file.match(excludePatt)) {\n        var path = innerConfig.basePath ? innerConfig.basePath + '/' + file : file;\n        files.push(path);\n      }\n    }\n  } else {\n    console.log(\"no inner config: \" + innerConfigName);\n  } \n  return files;\n}\npebble.shared.Deployment.prototype.addCodeToEnv_server = addCodeToEnv_server;\npebble.shared.Deployment.prototype.addCodeToEnv_client = addCodeToEnv_client;\npebble.shared.Deployment.getFiles = getFiles;\npebble.shared.Deployment.getTemplateFiles = getTemplateFiles;\n\n\n\n})();\n"},{"key":"codePath","val":"frontend/src/lib/shared/deployment.js"},{"key":"ext","val":"js"}]},{"key":"browserLogger","val":[{"key":"devCode","val":"\n/**\n * requires classes (label label-)\n * @constructor\n * @implements {pebble.shared.interfaces.HandlesLogging}\n */\npebble.shared.BrowserLogger = function(container) {\n\tif (container != null) {\n\t\tthis.ele = container;\n\t}\n};\n\npebble.shared.BrowserLogger.prototype.log = function(level, str, fn, data) {\n\tif (this.ele != null) {\n\t\tvar div = document.createElement('div');\n\t\tvar span = document.createElement('span');\n\t\tvar style = 'font-size: 11.844px; font-weight: bold; line-height: 14px; color: #ffffff; text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25); white-space: nowrap; vertical-align: baseline; background-color: #999999; padding: 1px 4px 2px; -webkit-border-radius: 3px; -moz-border-radius: 3px; border-radius: 3px;';\n\n\t\tvar bgColor;\n\t\tswitch(level) {\n\t\tcase 'INFO':\n\t\t\tbgColor = '#3a87ad';\n\t\t\tbreak;\n\t\tcase 'SUCCESS':\n\t\t\tbgColor = '#468847';\n\t\t\tbreak;\n\t\tcase 'ERROR':\n\t\t\tbgColor = '#b94a48';\n\t\t\tbreak;\n\t\tcase 'WARNING':\n\t\t\tbgColor = '#f89406';\n\t\t\tbreak;\n\t\t}\n\t\tstyle += 'background-color:' + bgColor;\n\t\tspan.setAttribute('style', style);\n\t\tspan.innerHTML = level;\n\t\tdiv.appendChild(span);\n\t\t//var tn = document.createTextNode(str);\n\t\tvar tn = document.createElement('span');\n\t\ttn.innerText = str;\n\t\tif (fn) {\n\t\t\ttn.addEventListener('click', function(e) {\n\n\t\t\t\tfn(data);\t\t\n\n\t\t\t}, false);\n\t\t\ttn.setAttribute('style', 'cursor:pointer; color:blue; text-decoration:underline;');\n\t\t}\n\t\tdiv.appendChild(tn);\n\t\tthis.ele.appendChild(div);\n\t\tthis.ele.scrollTop = this.ele.scrollHeight;\n\t} else {\n\t\twindow.console.log(level + ' : ' + str);\n\t}\n\t\n};\npebble.shared.BrowserLogger.prototype.clear = function() {\n\tif (this.ele != null) {\n\t\twhile(this.ele.childNodes.length > 0) {\n\t\t\tthis.ele.removeChild(this.ele.firstChild);\n\t\t}\n\t} else {\n\t}\n\t\n};\n\n\n\n"},{"key":"codePath","val":"frontend/src/lib/shared/impl/browserLogger.js"},{"key":"ext","val":"js"}]},{"key":"serverDataImplMongo","val":[{"key":"devCode","val":"var Db = require('mongodb').Db;\nvar Connection = require('mongodb').Connection;\nvar Server = require('mongodb').Server;\nvar BSON = require('mongodb').BSON;\nvar ObjectID = require('mongodb').ObjectID;\nvar pebbleServer = require(\"./pebble-shared-javascript-node\");\nvar PebbleDataSourceImpl = require(\"./pebbleDataSourceImplXmlDom\").PebbleDataSourceImpl;\n\n/**\n * @constructor\n * @implements {pebble.shared.interfaces.IServerData}\n * @param {string | pebble.Pebble} o\n */\nServerDataImpl = function(o, host, port) {\n\n  this.db= new Db('node-mongo-blog', new Server(host, port, {auto_reconnect: true}, {}));\n  this.db.open(function(){});\n  //this.db= new Db('node-mongo-employee', new Server(host, port, {safe: false}, {auto_reconnect: true}, {}));\n  //this.db.open(function(){});\n}\nServerDataImpl.prototype.getCollection= function(callback) {\n  this.db.collection('employees', function(error, employee_collection) {\n    if( error ) callback(error);\n    else callback(null, employee_collection);\n  });\n};\n/**\n * @param {string} collection\n * @param {pebble.Pebble} peb\n * @return {pebble.Pebble}\n * @override\n */\nServerDataImpl.prototype.create = function(collection, peb) {\n    this.getCollection(function(error, employee_collection) {\n      if( error ) callback(error)\n      else {\n        if( typeof(employees.length)==\"undefined\")\n          employees = [employees];\n\n        for( var i =0;i< employees.length;i++ ) {\n          employee = employees[i];\n          employee.created_at = new Date();\n        }\n\n        employee_collection.insert(employees, function() {\n          callback(null, employees);\n        });\n      }\n    });\n\n\t//must set these before returning\n\n\tvar tableName = this.getTableName(collection);\n\tif (peb.getTagName() != 'i') {\n\t\tthis.ds.setFull(tableName + '.' + peb.getTagName(), peb);\n\t} else {\n\t\tpeb = this.ds.add2Array(tableName, peb, null);\n\t}\n\tthis.persist();\n\treturn this.retrieve(collection, peb.getTagName());\n\n};\n/**\n * @param {string} path\n */\nServerDataImpl.prototype.setOffsetPath = function(path) {\n\n\tthis.offsetPath = path;\n\n};\n/**\n * @param {string} path\n * @return {string}\n */\nServerDataImpl.prototype.getTableName = function(path) {\n\n\tpath = this.adjustPath(path);\n\treturn path.replace(/\\./g, '_');\n};\n/**\n * @param {string} path\n * @return {string}\n */\nServerDataImpl.prototype.adjustPath = function(path) {\n\n\tif (this.offsetPath) {\n\t\tif (path.indexOf(this.offsetPath) == 0) {\n\n\t\t\tpath = path.replace(this.offsetPath, 'theModel');\n\n\t\t} else {\n\n\t\t\tthrow Error('ServerDataImpl_Xml:adjustPath() no such allowed path:' + path);\n\n\t\t}\n\t} \n\treturn path;\n};\n\n/**\n * @param {string} collection\n * @param {string} uniqueName\n * @return {pebble.Pebble}\n * @override\n */\nServerDataImpl.prototype.retrieve = function(collection, uniqueName) {\n\tvar tableName = this.getTableName(collection);\n\tvar path = tableName + '.' + uniqueName;\n\t\n\tthis.getCollection(function(error, employee_collection) {\n\t\tif( error ) callback(error)\n\t\telse {\n\t\t\temployee_collection.findOne({_id: employee_collection.db.bson_serializer.ObjectID.createFromHexString(id)}, function(error, result) {\n\t\t\t\tif( error ) callback(error)\n\t\t\t\telse callback(null, result)\n\t\t\t});\n\t\t}\n\t});\n\n\tvar tableName = this.getTableName(collection);\n\tvar path = tableName + '.' + uniqueName;\n\tvar data = this.ds.getCopy(path);\n\tif (data != null) {\n\t\treturn data;\n\t} else {\n\t\tpebble.shared.logger.log('ERROR', 'Couldn\\'t get single entity for query: ' + collection + '-' + uniqueName);\n\t\treturn null;\n\t}\n};\n/**\n * @param {string} collection\n * @param {string} uniqueName\n * @param {pebble.Pebble} doc\n * @override\n */\nServerDataImpl.prototype.update = function(collection, uniqueName, doc) {\n\tvar tableName = this.getTableName(collection);\n\tvar path = tableName + '.' + uniqueName;\n\tthis.getCollection(function(error, employee_collection) {\n\t\tif( error ) callback(error);\n\t\telse {\n\t\t\temployee_collection.update(\n\t\t\t\t{_id: employee_collection.db.bson_serializer.ObjectID.createFromHexString(employeeId)},\n\t\t\t\temployees,\n\t\t\t\tfunction(error, employees) {\n\t\t\t\t\tif(error) callback(error);\n\t\t\t\t\telse callback(null, employees)       \n\t\t\t\t});\n\t\t}\n\t});\n\n\tvar tableName = this.getTableName(collection);\n\tvar path = tableName + '.' + uniqueName;\n\tvar data = this.ds.getCopy(path);\n\n\tdata.set('.', doc.getCopy('.'));\n\n\t//write\n\tthis.ds.setFull(path, data);\n\tthis.persist();\n};\n/**\n * @param {string} collection\n * @param {string} name\n * @override\n */\nServerDataImpl.prototype.deleteItem = function(collection, name) {\n\tvar tableName = this.getTableName(collection);\n\tvar path = tableName + '.' + name;\n\n\n\tthis.getCollection(function(error, employee_collection) {\n\t\tif(error) callback(error);\n\t\telse {\n\t\t\temployee_collection.remove(\n\t\t\t\t{_id: employee_collection.db.bson_serializer.ObjectID.createFromHexString(employeeId)},\n\t\t\t\tfunction(error, employee){\n\t\t\t\t\tif(error) callback(error);\n\t\t\t\t\telse callback(null, employee)\n\t\t\t\t});\n\t\t}\n\t});\n\tvar tableName = this.getTableName(collection);\n\tvar path = tableName + '.' + name;\n\tthis.ds.remove(path);\n\t\t\n\tvar pathPrefix = path.replace('.', '_');\n\tvar tables = this.getDataSource().getRecords('.');\n\tfor (var i = tables.length - 1; i >= 0; i--) {\n\t\tvar table = tables[i];\n\t\tvar tableName = table.getTagName();\n\t\tif (tableName.indexOf(pathPrefix) == 0) {\n\t\t\tthis.ds.remove(tableName);\n\t\t}\n\t}\n\n\tthis.persist();\n};\n/**\n * @param {Array.<string>} list\n * @override\n */\nServerDataImpl.prototype.deleteCollections = function(list) {\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar collection = list[i];\n\t\tvar tableName = this.getTableName(collection);\n\t\tthis.ds.remove(tableName);\n\t}\n\tthis.persist();\n};\n\n/**\n * returns doc with decendents in ds format but as pebble\n * @param{string} path\n * @return{pebble.Pebble} ds (as pebble)\n */\nServerDataImpl.prototype.getDs = function(path) {\n\t//\n\tpath = this.adjustPath(path);\n\n\tvar ret = new pebble.Pebble();\n\t\n\tif (path == 'theModel') {\n    ret.set('.', this.getDataSource());\n  } else {\n    //get doc and decendents in one ds  \n    var docCollection = path.substring(0, path.lastIndexOf('.'));\n    var docName = path.substring(path.lastIndexOf('.') + 1);\n    \n    var datasource = this.getDataSource();\n\n    var tables = datasource.getRecords('.');\n    for (var i = 0; i < tables.length; i++) {\n      var table = tables[i];\n      var tableName = table.getTagName();\n      var tableDotName = tableName.replace(/_/g, '.');\n      if (tableDotName != docCollection) {\n        if (tableDotName.indexOf(path) != -1) {\n\t\t\t\t\t//add table to our output\n\t\t\t\t\t//collapse\n\t\t\t\t\tvar collapsePath = tableDotName.replace(path, 'theModel');\n\t\t\t\t\tvar newTableName = collapsePath.replace(/\\./g, '_');\n\t\t\t\t\tret.set(newTableName, table);\n        }\n      } else {\n        //instance of app > theModel_appInstances.theInstance\n        var app = datasource.get(tableName + '.' + docName);\n\t\t\t\tif (app != null) {\n\t\t\t\t\tret.set('theModel_appInstances.theInstance', app);\n\t\t\t\t}\n      }\n    }\n\n  }\n\tret.setAttribute('.', 'noresolve', 'true'); \n\treturn ret;\n\t\n};\n/**\n * addDs preserves tagName in app\n * @param{string} collection\n * @param{pebble.Pebble} app (as pebble)\n */\nServerDataImpl.prototype.addDs = function(collection, app) {\n\tif (collection != null) {\n\n\t\tcollection = this.adjustPath(collection);\n\n\t\tvar docName = app.getTagName();\n\n\t\tvar path = collection + '.' + docName;\n\n\t\tvar instance = app.get('theModel_appInstances.theInstance');\n\t\tif (instance != null) {\n\n\t\t\tvar docCollectionTableName = collection.replace(/\\./g, '_');\n\t\t\tthis.ds.set(docCollectionTableName + '.' + docName, instance);\n\t\t\tapp.remove('theModel_appInstances');\n\n\t\t}\n\n\t\tvar tables = app.getRecords('.');\n\t\tfor (var i = 0; i < tables.length; i++) {\n\t\t\tvar table = tables[i];\n\t\t\tvar tableName = table.getTagName();\n\t\t\tvar tableDotName = tableName.replace(/_/g, '.');\n\n\t\t\tvar adjustedTableDotName = tableDotName.replace('theModel', path);\n\t\t\tvar newTableName = adjustedTableDotName.replace(/\\./g, '_');\n\n\t\t\tthis.ds.set(newTableName, table);\n\t\t}\n\t\tthis.persist();\n\n\t} else {\n\t\tthis.replaceDs(app);\n\t} \n\t\n};\n/**\n * @param{string} path\n * @param{pebble.Pebble} app (as pebble)\n */\nServerDataImpl.prototype.setDs = function(path, app) {\n\tif (path != null) {\n\t\tpath = this.adjustPath(path);\n\n\t\tvar instance = app.get('theModel_appInstances.theInstance');\n\t\tif (instance != null) {\n\n\t\t\tvar docCollection = path.substring(0, path.lastIndexOf('.'));\n\t\t\tvar docName = path.substring(path.lastIndexOf('.') + 1);\n\t\t\tvar docCollectionTableName = docCollection.replace(/\\./g, '_');\n\t\t\tthis.ds.set(docCollectionTableName + '.' + docName, instance);\n\t\t\tapp.remove('theModel_appInstances');\n\n\t\t}\n\n\t\tvar tables = app.getRecords('.');\n\t\tfor (var i = 0; i < tables.length; i++) {\n\t\t\tvar table = tables[i];\n\t\t\tvar tableName = table.getTagName();\n\t\t\tvar tableDotName = tableName.replace(/_/g, '.');\n\n\t\t\tvar adjustedTableDotName = tableDotName.replace('theModel', path);\n\t\t\tvar newTableName = adjustedTableDotName.replace(/\\./g, '_');\n\n\t\t\tthis.ds.set(newTableName. table);\n\t\t}\n\t\tthis.persist();\n\n\t} else {\n\t\tthis.replaceDs(app);\n\t} \n\t\n};\n\n\n/**\n */\nServerDataImpl.prototype.replaceDs = function(s) {\n\tthis.ds = new pebble.Pebble(s);\n\tthis.persist();\n};\n\n/**\n * @param {pebble.Pebble} query\n * @return {Array.<pebble.Pebble>}\n * @override\n */\nServerDataImpl.prototype.doQuery = function(query) {\n\tvar fields = query.getRecords('select');\n\tvar from = query.get('from');\n\tvar table = from.getRecords('.')[0];\n\tvar collection = table.getRef('.');\n\n\n\tvar where = query.get('where');\n\n\tvar tableName = this.getTableName(collection);\n\n\tvar list = this.ds.getCopy('.').getRecords(tableName);\n\n\tvar pebbleFilter;\n\tif (where != null) {\n\n\t\tvar collectionHoldingAppPath = collection.substring(0, collection.lastIndexOf('.'));\n\t\tvar arrayField = collection.substring(collection.lastIndexOf('.') + 1);\n\t\tvar collectionHoldingDoc = new pebble.shared.PathAnalyzer(collectionHoldingAppPath);\n\t\tvar collectionField = collectionHoldingDoc.getLastItemType().getField(arrayField);\n\n\t\tvar type = collectionField.getRef('type.arrayFormId');\n\n\t\tvar itemType = new pebble.shared.ItemType(type);\n\n\t\tpebbleFilter = new pebble.shared.PebbleFilter(where, itemType);\n\n\t} else {\n\n\t\tpebbleFilter = new pebble.shared.PebbleFilter();\n\t}\n\n\n\n\n\n\n\n    this.getCollection(function(error, employee_collection) {\n      if( error ) callback(error)\n      else {\n        employee_collection.find().toArray(function(error, results) {\n          if( error ) callback(error)\n          else callback(null, results)\n        });\n      }\n    });\n\n\n\n\n\n\n\tvar results = [];\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\n\t\tif (pebbleFilter.filter(item)) {\n\n\t\t\tif (fields.length === 0 || fields[0].getRef('.') === '*') {\n\t\t\t  \t\n\t\t\t\tresults.push(item);\n\n\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\tvar compositeItem = new pebble.Pebble();\n\t\t\t\tfor (var i = 0; i < fields.length; i++) {\n\t\t\t\t\tvar field = fields[i];\n\t\t\t\t\tvar as = field.getAttribute('.', 'as');\n\t\t\t\t\tvar fieldPath = as != null ? as : field.getRef('.');\n\t\t\t\t\tcompositeItem.set(fieldPath, item.getFieldPath);\n\n\t\t\t\t}\n\t\t\t\tresults.push(compositeItem);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn results;       \n\n};\n\n\n/**\n * @return {pebble.Pebble}\n */\nServerDataImpl.prototype.getDataSource = function() {\n\treturn this.ds;\n};\n/**\n * @return {string}\n * @override\n */\t\nServerDataImpl.prototype.toString = function() {\n\treturn this.ds.toString();\n\n};\n\nServerDataImpl.prototype.persist = function() {\n\tif (this.pm) {\n\t\tthis.pm.setItem(this.ds.toString());\n\t}\n};\nServerDataImpl.prototype.setPersistanceManager = function(pm) {\n\tthis.ds = new pebble.Pebble(pm.getItem());\n\tthis.pm = pm;\n};\n\nexports.ServerDataImpl = ServerDataImpl;\n"},{"key":"codePath","val":"frontend/src/lib/shared/impl/pebble-provider-mongodb/lib/serverDataImplMongo.js"},{"key":"ext","val":"js"}]},{"key":"serverDataImplPostgre","val":[{"key":"devCode","val":"var fs = require(\"fs\");\nvar pg = require(\"pg\");\nvar p = require(\"path\");\nvar pebbleServer = require(\"./pebble-shared-javascript-node\");\nvar PebbleDataSourceImpl = require(\"./pebbleDataSourceImplXmlDom\").PebbleDataSourceImpl;\n\n\t\t\t// pgclient.query(\"CREATE TABLE IF NOT EXISTS emps(firstname varchar(64), lastname varchar(64))\");\n\t\t\t// pgclient.query(\"INSERT INTO emps(firstname, lastname) values($1, $2)\", ['Ronald', 'McDonald']);\n\t\t\t// pgclient.query(\"INSERT INTO emps(firstname, lastname) values($1, $2)\", ['Mayor', 'McCheese']);\n\t\t\t//var conString = \"pg://postgres:@localhost:5432/rtsunoda_client_142\";\n\n/**\n * @constructor\n * @implements {pebble.shared.interfaces.IServerData}\n * @param {string | pebble.Pebble} o\n */\nServerDataImpl = function(o, connStr) {\n\n\tthis.pgclient = new pg.Client(\"pg://postgres:developers@devdb01.corp.ezrez:5432/ezrez_shared_142\");\n\tthis.pgclient.connect();\n\n}\n/**\n * @param {string} collection\n * @param {pebble.Pebble} peb\n * @return {pebble.Pebble}\n * @override\n */\nServerDataImpl.prototype.create = function(collection, peb) {\n\tvar queryStr = \"select id, cobrand_name, agency_id, config_name, live_value, test_value from configuration\";\n\n\tvar query = this.pgclient.query(queryStr);\n\tquery.on(\"row\", function (row, result) {\n\t\trow.client = c;\n\t\tconfigs[row.config_name] = 1;\n\n\t\tif (report.clientHits[c] === undefined) {\n\t\t\treport.clientHits[c] = 0;\n\t\t}\n\t\treport.clientHits[c] += 1;\n\t\tresult.addRow(row);\n\n\t});\n\tquery.on(\"end\", function (result) {\n\t\tfull.concat(result.rows);\n\t\tif (params.verbose) {\n\t\t\tconsole.log(JSON.stringify(result.rows, null, \"    \"));\n\t\t}\n\t\tpgclient.end();\n\n\t\tcount -= 1;\n\t\tif (count == 0) {\n\n\t\t\tconsole.log(\"total configs: \" + Object.keys(configs).length);\n\t\t\tconsole.log(JSON.stringify(report, null, \"    \"));\n\n\t\t}\n\t});\n\n\t//must set these before returning\n\n\tvar tableName = this.getTableName(collection);\n\tif (peb.getTagName() != 'i') {\n\t\tthis.ds.setFull(tableName + '.' + peb.getTagName(), peb);\n\t} else {\n\t\tpeb = this.ds.add2Array(tableName, peb, null);\n\t}\n\tthis.persist();\n\treturn this.retrieve(collection, peb.getTagName());\n\n};\n/**\n * @param {string} path\n */\nServerDataImpl.prototype.setOffsetPath = function(path) {\n\n\tthis.offsetPath = path;\n\n};\n/**\n * @param {string} path\n * @return {string}\n */\nServerDataImpl.prototype.getTableName = function(path) {\n\n\tpath = this.adjustPath(path);\n\treturn path.replace(/\\./g, '_');\n};\n/**\n * @param {string} path\n * @return {string}\n */\nServerDataImpl.prototype.adjustPath = function(path) {\n\n\tif (this.offsetPath) {\n\t\tif (path.indexOf(this.offsetPath) == 0) {\n\n\t\t\tpath = path.replace(this.offsetPath, 'theModel');\n\n\t\t} else {\n\n\t\t\tthrow Error('ServerDataImpl_Xml:adjustPath() no such allowed path:' + path);\n\n\t\t}\n\t} \n\treturn path;\n};\n\n/**\n * @param {string} collection\n * @param {string} uniqueName\n * @return {pebble.Pebble}\n * @override\n */\nServerDataImpl.prototype.retrieve = function(collection, uniqueName) {\n\tvar tableName = this.getTableName(collection);\n\tvar path = tableName + '.' + uniqueName;\n\tvar data = this.ds.getCopy(path);\n\tif (data != null) {\n\t\treturn data;\n\t} else {\n\t\tpebble.shared.logger.log('ERROR', 'Couldn\\'t get single entity for query: ' + collection + '-' + uniqueName);\n\t\treturn null;\n\t}\n};\n/**\n * @param {string} collection\n * @param {string} uniqueName\n * @param {pebble.Pebble} doc\n * @override\n */\nServerDataImpl.prototype.update = function(collection, uniqueName, doc) {\n\tvar tableName = this.getTableName(collection);\n\tvar path = tableName + '.' + uniqueName;\n\tvar data = this.ds.getCopy(path);\n\n\tdata.set('.', doc.getCopy('.'));\n\n\t//write\n\tthis.ds.setFull(path, data);\n\tthis.persist();\n};\n/**\n * @param {string} collection\n * @param {string} name\n * @override\n */\nServerDataImpl.prototype.deleteItem = function(collection, name) {\n\tvar tableName = this.getTableName(collection);\n\tvar path = tableName + '.' + name;\n\tthis.ds.remove(path);\n\t\t\n\tvar pathPrefix = path.replace('.', '_');\n\tvar tables = this.getDataSource().getRecords('.');\n\tfor (var i = tables.length - 1; i >= 0; i--) {\n\t\tvar table = tables[i];\n\t\tvar tableName = table.getTagName();\n\t\tif (tableName.indexOf(pathPrefix) == 0) {\n\t\t\tthis.ds.remove(tableName);\n\t\t}\n\t}\n\n\tthis.persist();\n};\n/**\n * @param {Array.<string>} list\n * @override\n */\nServerDataImpl.prototype.deleteCollections = function(list) {\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar collection = list[i];\n\t\tvar tableName = this.getTableName(collection);\n\t\tthis.ds.remove(tableName);\n\t}\n\tthis.persist();\n};\n\n/**\n * returns doc with decendents in ds format but as pebble\n * @param{string} path\n * @return{pebble.Pebble} ds (as pebble)\n */\nServerDataImpl.prototype.getDs = function(path) {\n\t//\n\tpath = this.adjustPath(path);\n\n\tvar ret = new pebble.Pebble();\n\t\n\tif (path == 'theModel') {\n    ret.set('.', this.getDataSource());\n  } else {\n    //get doc and decendents in one ds  \n    var docCollection = path.substring(0, path.lastIndexOf('.'));\n    var docName = path.substring(path.lastIndexOf('.') + 1);\n    \n    var datasource = this.getDataSource();\n\n    var tables = datasource.getRecords('.');\n    for (var i = 0; i < tables.length; i++) {\n      var table = tables[i];\n      var tableName = table.getTagName();\n      var tableDotName = tableName.replace(/_/g, '.');\n      if (tableDotName != docCollection) {\n        if (tableDotName.indexOf(path) != -1) {\n\t\t\t\t\t//add table to our output\n\t\t\t\t\t//collapse\n\t\t\t\t\tvar collapsePath = tableDotName.replace(path, 'theModel');\n\t\t\t\t\tvar newTableName = collapsePath.replace(/\\./g, '_');\n\t\t\t\t\tret.set(newTableName, table);\n        }\n      } else {\n        //instance of app > theModel_appInstances.theInstance\n        var app = datasource.get(tableName + '.' + docName);\n\t\t\t\tif (app != null) {\n\t\t\t\t\tret.set('theModel_appInstances.theInstance', app);\n\t\t\t\t}\n      }\n    }\n\n  }\n\tret.setAttribute('.', 'noresolve', 'true'); \n\treturn ret;\n\t\n};\n/**\n * addDs preserves tagName in app\n * @param{string} collection\n * @param{pebble.Pebble} app (as pebble)\n */\nServerDataImpl.prototype.addDs = function(collection, app) {\n\tif (collection != null) {\n\n\t\tcollection = this.adjustPath(collection);\n\n\t\tvar docName = app.getTagName();\n\n\t\tvar path = collection + '.' + docName;\n\n\t\tvar instance = app.get('theModel_appInstances.theInstance');\n\t\tif (instance != null) {\n\n\t\t\tvar docCollectionTableName = collection.replace(/\\./g, '_');\n\t\t\tthis.ds.set(docCollectionTableName + '.' + docName, instance);\n\t\t\tapp.remove('theModel_appInstances');\n\n\t\t}\n\n\t\tvar tables = app.getRecords('.');\n\t\tfor (var i = 0; i < tables.length; i++) {\n\t\t\tvar table = tables[i];\n\t\t\tvar tableName = table.getTagName();\n\t\t\tvar tableDotName = tableName.replace(/_/g, '.');\n\n\t\t\tvar adjustedTableDotName = tableDotName.replace('theModel', path);\n\t\t\tvar newTableName = adjustedTableDotName.replace(/\\./g, '_');\n\n\t\t\tthis.ds.set(newTableName, table);\n\t\t}\n\t\tthis.persist();\n\n\t} else {\n\t\tthis.replaceDs(app);\n\t} \n\t\n};\n/**\n * @param{string} path\n * @param{pebble.Pebble} app (as pebble)\n */\nServerDataImpl.prototype.setDs = function(path, app) {\n\tif (path != null) {\n\t\tpath = this.adjustPath(path);\n\n\t\tvar instance = app.get('theModel_appInstances.theInstance');\n\t\tif (instance != null) {\n\n\t\t\tvar docCollection = path.substring(0, path.lastIndexOf('.'));\n\t\t\tvar docName = path.substring(path.lastIndexOf('.') + 1);\n\t\t\tvar docCollectionTableName = docCollection.replace(/\\./g, '_');\n\t\t\tthis.ds.set(docCollectionTableName + '.' + docName, instance);\n\t\t\tapp.remove('theModel_appInstances');\n\n\t\t}\n\n\t\tvar tables = app.getRecords('.');\n\t\tfor (var i = 0; i < tables.length; i++) {\n\t\t\tvar table = tables[i];\n\t\t\tvar tableName = table.getTagName();\n\t\t\tvar tableDotName = tableName.replace(/_/g, '.');\n\n\t\t\tvar adjustedTableDotName = tableDotName.replace('theModel', path);\n\t\t\tvar newTableName = adjustedTableDotName.replace(/\\./g, '_');\n\n\t\t\tthis.ds.set(newTableName. table);\n\t\t}\n\t\tthis.persist();\n\n\t} else {\n\t\tthis.replaceDs(app);\n\t} \n\t\n};\n\n\n/**\n */\nServerDataImpl.prototype.replaceDs = function(s) {\n\tthis.ds = new pebble.Pebble(s);\n\tthis.persist();\n};\n\n/**\n * @param {pebble.Pebble} query\n * @return {Array.<pebble.Pebble>}\n * @override\n */\nServerDataImpl.prototype.doQuery = function(query) {\n\tvar fields = query.getRecords('select');\n\tvar from = query.get('from');\n\tvar table = from.getRecords('.')[0];\n\tvar collection = table.getRef('.');\n\n\n\tvar where = query.get('where');\n\n\tvar tableName = this.getTableName(collection);\n\n\tvar list = this.ds.getCopy('.').getRecords(tableName);\n\n\tvar pebbleFilter;\n\tif (where != null) {\n\n\t\tvar collectionHoldingAppPath = collection.substring(0, collection.lastIndexOf('.'));\n\t\tvar arrayField = collection.substring(collection.lastIndexOf('.') + 1);\n\t\tvar collectionHoldingDoc = new pebble.shared.PathAnalyzer(collectionHoldingAppPath);\n\t\tvar collectionField = collectionHoldingDoc.getLastItemType().getField(arrayField);\n\n\t\tvar type = collectionField.getRef('type.arrayFormId');\n\n\t\tvar itemType = new pebble.shared.ItemType(type);\n\n\t\tpebbleFilter = new pebble.shared.PebbleFilter(where, itemType);\n\n\t} else {\n\n\t\tpebbleFilter = new pebble.shared.PebbleFilter();\n\t}\n\n\n\n\n\tvar queryStr = \"\";\n\tqueryStr += \"select id, cobrand_name, agency_id, config_name, live_value, test_value from configuration\";\n\n\tif (params.config) {\n\t\tqueryStr += ' where config_name=\\'' + params.config + '\\' and test_value != \\'0\\'';\n\t}\n\tvar query = pgclient.query(queryStr);\n\tquery.on(\"row\", function (row, result) {\n\t\trow.client = c;\n\t\tconfigs[row.config_name] = 1;\n\n\t\tif (report.clientHits[c] === undefined) {\n\t\t\treport.clientHits[c] = 0;\n\t\t}\n\t\treport.clientHits[c] += 1;\n\t\tresult.addRow(row);\n\n\t});\n\tquery.on(\"end\", function (result) {\n\t\tfull.concat(result.rows);\n\t\tif (params.verbose) {\n\t\t\tconsole.log(JSON.stringify(result.rows, null, \"    \"));\n\t\t}\n\t\tpgclient.end();\n\n\t\tcount -= 1;\n\t\tif (count == 0) {\n\n\t\t\tconsole.log(\"total configs: \" + Object.keys(configs).length);\n\t\t\tconsole.log(JSON.stringify(report, null, \"    \"));\n\n\t\t}\n\t});\n\n\n\n\n\n\n\n\tvar results = [];\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\n\t\tif (pebbleFilter.filter(item)) {\n\n\t\t\tif (fields.length === 0 || fields[0].getRef('.') === '*') {\n\t\t\t  \t\n\t\t\t\tresults.push(item);\n\n\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\tvar compositeItem = new pebble.Pebble();\n\t\t\t\tfor (var i = 0; i < fields.length; i++) {\n\t\t\t\t\tvar field = fields[i];\n\t\t\t\t\tvar as = field.getAttribute('.', 'as');\n\t\t\t\t\tvar fieldPath = as != null ? as : field.getRef('.');\n\t\t\t\t\tcompositeItem.set(fieldPath, item.getFieldPath);\n\n\t\t\t\t}\n\t\t\t\tresults.push(compositeItem);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn results;       \n\n};\n\n\n/**\n * @return {pebble.Pebble}\n */\nServerDataImpl.prototype.getDataSource = function() {\n\treturn this.ds;\n};\n/**\n * @return {string}\n * @override\n */\t\nServerDataImpl.prototype.toString = function() {\n\treturn this.ds.toString();\n\n};\n\n\nServerDataImpl.prototype.persist = function() {\n\tif (this.pm) {\n\t\tthis.pm.setItem(this.ds.toString());\n\t}\n};\nServerDataImpl.prototype.setPersistanceManager = function(pm) {\n\tthis.ds = new pebble.Pebble(pm.getItem());\n\tthis.pm = pm;\n};\n\n\nexports.ServerDataImpl = function(config) {\n\treturn new ServerDataImpl(config);\n}\n\n\n\n//queries can be executed either via text/parameter values passed as individual arguments\n//or by passing an options object containing text, (optional) parameter values, and (optional) query name\n//client.query({\n  //name: 'insert beatle',\n  //text: \"INSERT INTO beatles(name, height, birthday) values($1, $2, $3)\",\n  //values: ['George', 70, new Date(1946, 02, 14)]\n//});\n\n////subsequent queries with the same name will be executed without re-parsing the query plan by postgres\n//client.query({\n  //name: 'insert beatle',\n  //values: ['Paul', 63, new Date(1945, 04, 03)]\n//});\n//var query = client.query(\"SELECT * FROM beatles WHERE name = $1\", ['john']);\n\n"},{"key":"codePath","val":"frontend/src/lib/shared/impl/pebble-provider-postgresql/lib/serverDataImplPostgre.js"},{"key":"ext","val":"js"}]},{"key":"serverDataImplRDS","val":[{"key":"devCode","val":""},{"key":"codePath","val":"frontend/src/lib/shared/impl/pebble-provider-rds/lib/serverDataImplRDS.js"},{"key":"ext","val":"js"}]},{"key":"serverDataImpl_Xml","val":[{"key":"devCode","val":"\n/**\n * @constructor\n * @implements {pebble.shared.interfaces.IServerData}\n * @param {string | pebble.Pebble} o\n */\npebble.shared.ServerDataImpl_Xml = function(o) {\n\t/**\n\t * @type {pebble.Pebble}\n\t */\n\tif (o instanceof pebble.Pebble){\n\t\tthis.ds = o;\n\t} else {\n\t\tthis.ds = new pebble.Pebble();\n\t}\n};\n\n/**\n * @param {string} collection\n * @param {pebble.Pebble} peb\n * @return {pebble.Pebble}\n * @override\n */\npebble.shared.ServerDataImpl_Xml.prototype.create = function(collection, peb) {\n\t//loop thru appIndex.datamaps to set other properties\n\n\t//must set these before returning\n\n\tvar tableName = this.getTableName(collection);\n\tif (peb.getTagName() != 'i') {\n\t\tthis.ds.setFull(tableName + '.' + peb.getTagName(), peb);\n\t} else {\n\t\tpeb = this.ds.add2Array(tableName, peb, null);\n\t}\n\tthis.persist();\n\treturn this.retrieve(collection, peb.getTagName());\n\n};\n/**\n * @param {string} path\n */\npebble.shared.ServerDataImpl_Xml.prototype.setOffsetPath = function(path) {\n\n\tthis.offsetPath = path;\n\n};\n/**\n * @param {string} path\n * @return {string}\n */\npebble.shared.ServerDataImpl_Xml.prototype.getTableName = function(path) {\n\n\tpath = this.adjustPath(path);\n\treturn path.replace(/\\./g, '_');\n};\n/**\n * @param {string} path\n * @return {string}\n */\npebble.shared.ServerDataImpl_Xml.prototype.adjustPath = function(path) {\n\n\tif (this.offsetPath) {\n\t\tif (path.indexOf(this.offsetPath) == 0) {\n\n\t\t\tpath = path.replace(this.offsetPath, 'theModel');\n\n\t\t} else {\n\n\t\t\tthrow Error('ServerDataImpl_Xml:adjustPath() no such allowed path:' + path);\n\n\t\t}\n\t} \n\treturn path;\n};\n\n/**\n * @param {string} collection\n * @param {string} uniqueName\n * @return {pebble.Pebble}\n * @override\n */\npebble.shared.ServerDataImpl_Xml.prototype.retrieve = function(collection, uniqueName) {\n\tvar tableName = this.getTableName(collection);\n\tvar path = tableName + '.' + uniqueName;\n\tvar data = this.ds.getCopy(path);\n\tif (data != null) {\n\t\treturn data;\n\t} else {\n\t\tpebble.shared.logger.log('ERROR', 'Couldn\\'t get single entity for query: ' + collection + '-' + uniqueName);\n\t\treturn null;\n\t}\n};\n/**\n * @param {string} collection\n * @param {string} uniqueName\n * @param {pebble.Pebble} doc\n * @override\n */\npebble.shared.ServerDataImpl_Xml.prototype.update = function(collection, uniqueName, doc) {\n\tvar tableName = this.getTableName(collection);\n\tvar path = tableName + '.' + uniqueName;\n\tvar data = this.ds.getCopy(path);\n\n\tdata.set('.', doc.getCopy('.'));\n\n\t//write\n\tthis.ds.setFull(path, data);\n\tthis.persist();\n};\n/**\n * @param {string} collection\n * @param {string} name\n * @override\n */\npebble.shared.ServerDataImpl_Xml.prototype.deleteItem = function(collection, name) {\n\tvar tableName = this.getTableName(collection);\n\tvar path = tableName + '.' + name;\n\tthis.ds.remove(path);\n\t\t\n\tvar pathPrefix = path.replace('.', '_');\n\tvar tables = this.getDataSource().getRecords('.');\n\tfor (var i = tables.length - 1; i >= 0; i--) {\n\t\tvar table = tables[i];\n\t\tvar tn = table.getTagName();\n\t\tif (tn.indexOf(pathPrefix) == 0) {\n\t\t\tthis.ds.remove(tn);\n\t\t}\n\t}\n\n\tthis.persist();\n};\n/**\n * @param {Array.<string>} list\n * @override\n */\npebble.shared.ServerDataImpl_Xml.prototype.deleteCollections = function(list) {\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar collection = list[i];\n\t\tvar tableName = this.getTableName(collection);\n\t\tthis.ds.remove(tableName);\n\t}\n\tthis.persist();\n};\n\n/**\n * returns doc with decendents in ds format but as pebble\n * @param{string} path\n * @return{pebble.Pebble} ds (as pebble)\n */\npebble.shared.ServerDataImpl_Xml.prototype.getDs = function(path) {\n\t//\n\tpath = this.adjustPath(path);\n\n\tvar ret = new pebble.Pebble();\n\t\n\tif (path == 'theModel') {\n    ret.set('.', this.getDataSource());\n  } else {\n    //get doc and decendents in one ds  \n    var docCollection = path.substring(0, path.lastIndexOf('.'));\n    var docName = path.substring(path.lastIndexOf('.') + 1);\n    \n    var datasource = this.getDataSource();\n\n    var tables = datasource.getRecords('.');\n    for (var i = 0; i < tables.length; i++) {\n      var table = tables[i];\n      var tableName = table.getTagName();\n      var tableDotName = tableName.replace(/_/g, '.');\n      if (tableDotName != docCollection) {\n        if (tableDotName.indexOf(path) != -1) {\n\t\t\t\t\t//add table to our output\n\t\t\t\t\t//collapse\n\t\t\t\t\tvar collapsePath = tableDotName.replace(path, 'theModel');\n\t\t\t\t\tvar newTableName = collapsePath.replace(/\\./g, '_');\n\t\t\t\t\tret.set(newTableName, table);\n        }\n      } else {\n        //instance of app > theModel_appInstances.theInstance\n        var app = datasource.get(tableName + '.' + docName);\n\t\t\t\tif (app != null) {\n\t\t\t\t\tret.set('theModel_appInstances.theInstance', app);\n\t\t\t\t}\n      }\n    }\n\n  }\n\tret.setAttribute('.', 'noresolve', 'true'); \n\treturn ret;\n\t\n};\n/**\n * addDs preserves tagName in app\n * @param{string} collection\n * @param{pebble.Pebble} app (as pebble)\n */\npebble.shared.ServerDataImpl_Xml.prototype.addDs = function(collection, app) {\n\tif (collection != null) {\n\n\t\tcollection = this.adjustPath(collection);\n\n\t\tvar docName = app.getRef('tagName_') || app.getTagName();\n\n\t\tvar path = collection + '.' + docName;\n\n\t\tvar instance = app.get('theModel_appInstances.theInstance');\n\t\tif (instance != null) {\n\n\t\t\tvar docCollectionTableName = collection.replace(/\\./g, '_');\n\t\t\tthis.ds.set(docCollectionTableName + '.' + docName, instance);\n\t\t\tapp.remove('theModel_appInstances');\n\n\t\t}\n\n\t\tvar tables = app.getRecords('.');\n\t\tfor (var i = 0; i < tables.length; i++) {\n\t\t\tvar table = tables[i];\n\t\t\tvar tableName = table.getTagName();\n\t\t\tvar tableDotName = tableName.replace(/_/g, '.');\n\n\t\t\tvar adjustedTableDotName = tableDotName.replace('theModel', path);\n\t\t\tvar newTableName = adjustedTableDotName.replace(/\\./g, '_');\n\n\t\t\tthis.ds.set(newTableName, table);\n\t\t}\n\t\tthis.persist();\n\n\t} else {\n\t\tthis.replaceDs(app);\n\t} \n\t\n};\n/**\n * @param{string} path\n * @param{pebble.Pebble} app (as pebble)\n */\npebble.shared.ServerDataImpl_Xml.prototype.setDs = function(path, app) {\n\tif (path != null) {\n\t\tpath = this.adjustPath(path);\n\n\t\tvar instance = app.get('theModel_appInstances.theInstance');\n\t\tif (instance != null) {\n\n\t\t\tvar docCollection = path.substring(0, path.lastIndexOf('.'));\n\t\t\tvar docName = path.substring(path.lastIndexOf('.') + 1);\n\t\t\tvar docCollectionTableName = docCollection.replace(/\\./g, '_');\n\t\t\tthis.ds.set(docCollectionTableName + '.' + docName, instance);\n\t\t\tapp.remove('theModel_appInstances');\n\n\t\t}\n\n\t\tvar tables = app.getRecords('.');\n\t\tfor (var i = 0; i < tables.length; i++) {\n\t\t\tvar table = tables[i];\n\t\t\tvar tableName = table.getTagName();\n\t\t\tvar tableDotName = tableName.replace(/_/g, '.');\n\n\t\t\tvar adjustedTableDotName = tableDotName.replace('theModel', path);\n\t\t\tvar newTableName = adjustedTableDotName.replace(/\\./g, '_');\n\n\t\t\tthis.ds.set(newTableName, table);\n\t\t}\n\t\tthis.persist();\n\n\t} else {\n\t\tthis.replaceDs(app);\n\t} \n\t\n};\n\n\n/**\n */\npebble.shared.ServerDataImpl_Xml.prototype.replaceDs = function(s) {\n\tthis.ds = new pebble.Pebble(s);\n\tthis.persist();\n};\n\n/**\n * @param {pebble.Pebble} query\n * @return {Array.<pebble.Pebble>}\n * @override\n */\npebble.shared.ServerDataImpl_Xml.prototype.doQuery = function(query) {\n\tvar results = [];\n\tvar fields = query.getRecords('select');\n\tvar from = query.get('from');\n\tvar table = from.getRecords('.')[0];\n\tvar collection = table.getRef('.');\n\t\n\tif (collection != null) {\n\n\t\tvar where = query.get('where');\n\n\t\tvar tableName = this.getTableName(collection);\n\n\t\tvar list = this.ds.getCopy('.').getRecords(tableName);\n\n\t\tvar pebbleFilter;\n\t\tif (where != null) {\n\n\t\t\tvar collectionHoldingAppPath = collection.substring(0, collection.lastIndexOf('.'));\n\t\t\tvar arrayField = collection.substring(collection.lastIndexOf('.') + 1);\n\t\t\tvar collectionHoldingDoc = new pebble.shared.PathAnalyzer(this, collectionHoldingAppPath);\n\t\t\tvar collectionField = collectionHoldingDoc.getLastItemType().getField(arrayField);\n\n\t\t\tvar type = collectionField.getRef('type.arrayFormId');\n\n\t\t\tvar itemType = new pebble.shared.ItemType(this, type);\n\n\t\t\tpebbleFilter = new pebble.shared.PebbleFilter(where, itemType);\n\n\t\t} else {\n\n\t\t\tpebbleFilter = new pebble.shared.PebbleFilter();\n\t\t}\n\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tvar item = list[i];\n\n\t\t\tif (pebbleFilter.filter(item)) {\n\n\t\t\t\tif (fields.length === 0 || fields[0].getRef('.') === '*') {\n\t\t\t\t\t\t\n\t\t\t\t\tresults.push(item);\n\n\t\t\t\t} else {\n\t\t\t\t\t\t\n\t\t\t\t\tvar compositeItem = new pebble.Pebble();\n\t\t\t\t\tfor (var i = 0; i < fields.length; i++) {\n\t\t\t\t\t\tvar field = fields[i];\n\t\t\t\t\t\tvar as = field.getAttribute('.', 'as');\n\t\t\t\t\t\tvar fieldPath = as != null ? as : field.getRef('.');\n\t\t\t\t\t\tif (fieldPath != null) {\n\t\t\t\t\t\t\tcompositeItem.set(fieldPath, item.get(fieldPath));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresults.push(compositeItem);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn results;       \n\n};\n\n\n/**\n * @return {pebble.Pebble}\n */\npebble.shared.ServerDataImpl_Xml.prototype.getDataSource = function() {\n\treturn this.ds;\n};\n/**\n * @return {string}\n * @override\n */\t\npebble.shared.ServerDataImpl_Xml.prototype.toString = function() {\n\treturn this.ds.toString();\n\n};\n\npebble.shared.ServerDataImpl_Xml.prototype.persist = function() {\n\tif (this.pm) {\n\t\tthis.pm.setItem(this.ds.toString());\n\t}\n};\npebble.shared.ServerDataImpl_Xml.prototype.setPersistanceManager = function(pm) {\n\tthis.ds = new pebble.Pebble(pm.getItem());\n\tthis.pm = pm;\n};\n\n"},{"key":"codePath","val":"frontend/src/lib/shared/impl/serverDataImpl_Xml.js"},{"key":"ext","val":"js"}]},{"key":"testServerData","val":[{"key":"devCode","val":"\nvar server = require(\"./serverDataImpl_Mongo\").ServerData;\n\n//add item1\n\n//add item2\n\n\n//update item\n\n\n\n//delete item\n//\n\n\n//query items\n"},{"key":"codePath","val":"frontend/src/lib/shared/impl/testServerData.js"},{"key":"ext","val":"js"}]},{"key":"IServerData","val":[{"key":"devCode","val":"/**\n * @interface\n */\npebble.shared.interfaces.IServerData = function() {};\n\n/**\n * @param {string} collection\n * @param {pebble.Pebble} pebble\n * @return {pebble.Pebble}\n */\npebble.shared.interfaces.IServerData.prototype.create = function (collection, pebble){};\n/**\n * @param {string} collection\n * @param {string} uniqueName\n * @return {pebble.Pebble}\n */\npebble.shared.interfaces.IServerData.prototype.retrieve = function(collection, uniqueName){};\n/**\n * @param {string} collection\n * @param {string} uniqueName\n * @param {pebble.Pebble} doc\n */\npebble.shared.interfaces.IServerData.prototype.update = function (collection, uniqueName, doc){};\n/**\n * @param {string} collection\n * @param {string} uniqueName\n */\npebble.shared.interfaces.IServerData.prototype.deleteItem = function(collection, uniqueName){};\n/**\n * @param {Array.<string>} list\n */\npebble.shared.interfaces.IServerData.prototype.deleteCollections = function (list){};\n/**\n * @param {pebble.Pebble} queryItem\n * @return {Array.<pebble.Pebble>} \n */\npebble.shared.interfaces.IServerData.prototype.doQuery = function(queryItem){};\n"},{"key":"codePath","val":"frontend/src/lib/shared/interfaces/IServerData.js"},{"key":"ext","val":"js"}]},{"key":"handlesLogging","val":[{"key":"devCode","val":"/**\n * @interface\n */\npebble.shared.interfaces.HandlesLogging = function() {};\n\n/**\n * @param {string} level \n * @param {string} message\n * @param {Function=} fn\n * @param {string=} data\n */\npebble.shared.interfaces.HandlesLogging.prototype.log = function (level, message, fn, data){};\n\n\n"},{"key":"codePath","val":"frontend/src/lib/shared/interfaces/handlesLogging.js"},{"key":"ext","val":"js"}]},{"key":"itemType","val":[{"key":"devCode","val":"\n/**\n * @constructor\n * @param {pebble.shared.interfaces.IServerData} ds\n * @param {?string} path\n * @param {pebble.Pebble} [config] optional\n * @extends {pebble.Pebble}\n */\npebble.shared.ItemType = function(ds, path, config) {\n\tif (path != null) {\n\t\tvar elements = path.split('.');\n\t\tvar name = elements.pop();\n\t\tvar container = elements.join('.');\n\t\tpebble.Pebble.call(this, ds.retrieve(container, name));\n\t\tthis.ds = ds;\n\t\tthis.key = path;\n\t\tthis.config = config;\n\t} else {\n\t\tthrow new Error('ItemType requires path');\n\t}\n};\n\npebble.inherits(pebble.shared.ItemType, pebble.Pebble);\n\n/**\n * @return {pebble.Pebble}\n */\npebble.shared.ItemType.prototype.getFields = function() {\n\treturn this.getInheritMember('fields');\n};\n/**\n * @return {pebble.Pebble}\n */\npebble.shared.ItemType.prototype.getFunctions = function () {\n\treturn this.getInheritMember_Docs('functions');\n};\n/**\n * fields, functions, typeMaps only\n * @param {string} member\n * @return {pebble.Pebble}\n */\npebble.shared.ItemType.prototype.getInheritMember = function(member) {\n\tvar inheritMember = this.getCreateOnNull(member);\n\tvar inherits = this.getRef('inherits');\n\tif (inherits != null) {\n\t\tvar base = new pebble.shared.ItemType(this.ds, inherits);\n\t\tvar baseInheritMembers = base.getInheritMember(member);\n\t\tvar recs = baseInheritMembers.getRecords('.');\n\t\tfor (var i = 0; i < recs.length; i++){\n\t\t\tvar baseInheritMember = recs[i];\n\t\t\tinheritMember.set(baseInheritMember.getTagName(), baseInheritMember);\n\t\t}\n\t}\n\treturn inheritMember;\n};\n/**\n * @param {string} member\n * @return {pebble.Pebble}\n */\npebble.shared.ItemType.prototype.getInheritMember_Docs = function(member) {\n\tvar inheritMember = new pebble.Pebble();\n\n\tvar queryItem = new pebble.Pebble();\n\tvar collectionPath = this.key + '.' + member;\n\tqueryItem.setRef('from.path', collectionPath);\n\tvar appIndexes = this.ds.doQuery(queryItem);\n\tfor (var i = 0; i < appIndexes.length; i++) {\n\t\tvar childPeb = appIndexes[i];\n\t\tinheritMember.setFull(childPeb.getTagName(), childPeb);//need to have uniques!!!\n\n\t\t//even though we show all together, we need to show where it actually resides\n\t\t//inheritMember.setRef(childPeb.getTagName() + '._memberBaseCollection', this.key + '.' + member); \n\t}\n\n\tvar inherits = this.getRef('inherits');\n\tif (inherits != null) {\n\t\tvar base = new pebble.shared.ItemType(this.ds, inherits);\n\t\tvar baseInheritMembers = base.getInheritMember_Docs(member);\n\t\tvar recs = baseInheritMembers.getRecords('.');\n\t\tfor (var i = 0; i < recs.length; i++){\n\t\t\tvar baseInheritMember = recs[i];\n\t\t\tinheritMember.setFull(baseInheritMember.getTagName(), baseInheritMember);\n\t\t}\n\t}\n\treturn inheritMember;\n};\n/**\n * @param {string} compareType\n */\npebble.shared.ItemType.prototype.inherits = function (compareType) {\n\tvar inherits = this.getRef('inherits');\n\tif (inherits != null) {\n\t\tif (inherits == compareType) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tvar base = new pebble.shared.ItemType(this.ds, inherits);\n\t\t\treturn base.inherits(compareType);\n\t\t}\n\t}\n\treturn false;\n};\n/**\n * @param {string} fieldName\n * @return {pebble.Pebble}\n */\npebble.shared.ItemType.prototype.getField = function(fieldName){\n\tvar fields = this.getFields();\n\treturn fields.get(fieldName);\n};\n/**\n * @param {string} relPath\n * @param {pebble.Pebble=} instanceRefs\n * @return {pebble.Pebble}\n */\npebble.shared.ItemType.prototype.getInnerType = function(relPath, instanceRefs) {\n\tif (relPath != '') {\n\t\treturn this._getInnerType(relPath, instanceRefs);\n\t} else {\n\t\treturn this;\n\t}\n};\n/**\n * @param {string} relPath\n * @param {pebble.Pebble=} instanceRefs\n * @return {pebble.Pebble}\n */\npebble.shared.ItemType.prototype._getInnerType = function(relPath, instanceRefs) {\n\n\tvar field = this.getInnerField(relPath, instanceRefs);\n\tif (field != null) {\n\t\treturn field.get('type');\n\t} \n\treturn null;\n};\n/**\n * @param {string} relPath\n * @param {pebble.Pebble=} instanceRefs\n * @return {pebble.Pebble}\n */\npebble.shared.ItemType.prototype.getInnerField = function(relPath, instanceRefs) {\n\n\tvar elements = relPath.split('.');\n\tvar firstMember = elements[0];\n\tvar firstMemberField = this.getFields().get(firstMember);\n\tif (firstMemberField != null) { \n\t\tvar nextType = firstMemberField.get('type');\n\t\tif (elements.length > 1) {\n\t\t\t//do again\n\t\t\tvar nextTypeStr = nextType.getRef('.');\n\t\t\tvar nextInstanceRefs = null;\n\t\t\tvar nextRelPath = '';\n\n\t\t\t//if this is reference\n\t\t\tvar obj = null;\n\t\t\tif (nextTypeStr == pebble.shared.TypeReferences.REFERENCE){\n\t\t\t\t//configged\n\t\t\t\tif (instanceRefs) {\n\t\t\t\t\tnextTypeStr = instanceRefs.getRef(firstMember);\n\t\t\t\t\tif (nextTypeStr != null) {\n\t\t\t\t\t\tobj = new pebble.shared.ItemType(this.ds, nextTypeStr);\n\n\t\t\t\t\t\tvar specialConfigFields = obj.get('configFields');\n\t\t\t\t\t\tif (specialConfigFields) {\n\t\t\t\t\t\t\t//use obj.configFields\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//use obj.fields\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnextRelPath = relPath.substring(relPath.indexOf('.') + 1);\n\t\t\t\t\t\tif (instanceRefs == null) {\n\t\t\t\t\t\t\tnextInstanceRefs = null;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnextInstanceRefs = instanceRefs.get(firstMember);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t} else if (nextTypeStr == pebble.shared.TypeReferences.ARRAY || nextTypeStr == pebble.shared.TypeReferences.COLLECTION) {\n\n\t\t\t\tvar arrayFormId = firstMemberField.getRef('type.arrayFormId');\n\t\t\t\tif (arrayFormId != null) {\n\t\t\t\t\tnextRelPath = relPath.substring(relPath.indexOf('.') + 1);\n\t\t\t\t\tnextRelPath = nextRelPath.substring(nextRelPath.indexOf('.') + 1); //advance it twice\n\t\t\t\t\tnextTypeStr = arrayFormId;\n\t\t\t\t\tif (instanceRefs == null) {\n\t\t\t\t\t\tnextInstanceRefs = null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnextInstanceRefs = instanceRefs.get(firstMember + '.' + elements[1]);  //advance it twice\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar ii = 1;\n\t\t\t\t}\n\t\t\t\tobj = new pebble.shared.ItemType(this.ds, nextTypeStr);\n\t\t\t} else {\n\t\t\t\tnextRelPath = relPath.substring(relPath.indexOf('.') + 1);\n\t\t\t\tif (instanceRefs == null) {\n\t\t\t\t\tnextInstanceRefs = null;\n\t\t\t\t} else {\n\t\t\t\t\tnextInstanceRefs = instanceRefs.get(firstMember);\n\t\t\t\t}\n\t\t\t\tobj = new pebble.shared.ItemType(this.ds, nextTypeStr);\n\t\t\t}\n\t\t\treturn obj.getInnerField(nextRelPath, nextInstanceRefs);\n\n\t\t} else {\n\t\t\t//return type\n\t\t\treturn firstMemberField;\n\t\t} \n\t} else {\n\t\t//if not defined field, should show error ...\n\t\treturn null;\n\t}\n};\n\n\n"},{"key":"codePath","val":"frontend/src/lib/shared/itemType.js"},{"key":"ext","val":"js"}]},{"key":"logger","val":[{"key":"devCode","val":"\npebble.shared.logger = {};\n\npebble.shared.logger.impl = null;\n\n/**\n * @param {pebble.shared.interfaces.HandlesLogging} logger\n */\npebble.shared.logger.setLogger = function(logger) {\n\tpebble.shared.logger.impl = logger;\n};\n\n/**\n * @param {string} level\n * @param {string} str\n * @param {Function=} fn\n * @param {string=} data\n */\npebble.shared.logger.log = function(level, str, fn, data) {\n\tif (pebble.shared.logger.impl != null) {\n\t\tpebble.shared.logger.impl.log(level, str, fn, data);\n\t}\n};\n\npebble.shared.logger.clear = function() {\n\tif (pebble.shared.logger.impl != null) {\n\t\tpebble.shared.logger.impl.clear();\n\t}\n};\n\n\n"},{"key":"codePath","val":"frontend/src/lib/shared/logger.js"},{"key":"ext","val":"js"}]},{"key":"pathAnalyzer","val":[{"key":"devCode","val":"\n/**\n * PathAnalyzer gets infomation about the path \n * @param {pebble.shared.interfaces.IServerData} ds\n * @param {string} appPath\n * @constructor\n */\npebble.shared.PathAnalyzer = function(ds, appPath) {\n\n\tif (appPath == null) {\n\t\tthrow new Error('PathAnalyzer: PathAnalyzer() requires path');\n\t}\n\n\tthis.ds = ds;\n\t/**\n\t * @type {string}\n\t */\n\tthis.path = appPath;\n\t/**\n\t * the ItemType(typePath) so that getField, getAppIndex can be used\n\t * @type Array.<pebble.shared.ItemType>\n\t */\n\tthis.itemTypes = [];\n\t/**\n\t * the types as in their parent definition (field.type)\n\t * @type Array.<pebble.Pebble>\n\t */\n\tthis.fieldTypes = [];\n\t/**\n\t * list of doc paths (non doc members are skipped), only useful for the last one\n\t * @type Array.<string>\n\t */\n\tthis.docPaths = [];\n\n\tthis.initComponents();\n};\n\n/**\n * Set forms, docPaths\n */\npebble.shared.PathAnalyzer.prototype.initComponents = function() {\n\n\tvar elements = this.path.split('.');\n\tvar element = elements[0];\n\tthis.docPaths.push(element);\n\tthis.docPaths.push(element[1]);\n\tvar theInstance = this.ds.retrieve('theModel.appInstances', 'theInstance');\n\tvar app = 'theModel.libs.' + theInstance.getRef('.');\n\tvar appMeta = app.split('.').pop();\n\tvar currentForm = new pebble.shared.ItemType(this.ds, app + '.types.' + appMeta);\n\tthis.itemTypes.push(null);\n\tthis.itemTypes.push(currentForm);\n\n\tthis.fieldTypes.push(null);\n\tthis.fieldTypes.push(currentForm.getCopy('.'));\n\n\tvar i = 2;\n\twhile (i < elements.length) {\n\t\telement = elements[i];\n\t\tvar field = currentForm.getField(element);\n\t\tvar type = field.get('type');\n\t\tvar typeRef = type.getRef('.');\n\t\tif (typeRef != null) {\n\t\t\t//ARRAY\n\t\t\tif (pebble.shared.PebbleUtils.endsWith(typeRef, 'standard.types.array') || pebble.shared.PebbleUtils.endsWith(typeRef, 'standard.types.collection')) { //.equals(TypeReferences.ARRAY)) {\n\t\t\t\tvar arrayFormId = type.get('arrayFormId');\n\t\t\t\tvar instanceId = '';\n\n\t\t\t\tfor (var j = 0; j < i + 1; j++) {\n\t\t\t\t\tinstanceId += elements[j] + '.';\n\t\t\t\t}\n\t\t\t\tinstanceId = pebble.shared.PebbleUtils.rStrip(instanceId, '.');\n\t\t\t\tthis.itemTypes.push(new pebble.shared.ItemType(this.ds, typeRef)); \n\t\t\t\tthis.fieldTypes.push(type);\n\n\t\t\t\tif (instanceId != this.path) {\n\t\t\t\t\t//skip the array element (if we didnt we would put array as currentForm but the next currentForm.getField(element) wouldn't work)\n\t\t\t\t\t//here we are skipping to the arrayFormId and incrementing (as the collectionPath was added to the forms list)\n\t\t\t\t\tinstanceId += '.' + elements[i + 1];\n\t\t\t\t\tif (type.getRef('.').split('.').pop() === 'collection'){ \n\t\t\t\t\t\tthis.docPaths.push(instanceId);\n\t\t\t\t\t} \n\t\t\t\t\tcurrentForm = new pebble.shared.ItemType(this.ds, arrayFormId.getRef('.'));\n\t\t\t\t\tthis.itemTypes.push(currentForm);\n\t\t\t\t\tthis.fieldTypes.push(currentForm.getCopy('.'));\n\t\t\t\t\ti += 1; \n\t\t\t\t} \n\t\t\t} else if (pebble.shared.PebbleUtils.endsWith(typeRef, 'standard.types.itemRelRef')){ //equals(TypeReferences.REFERENCE)) {\n\t\t\t\t//REFERENCE TO TYPE\n\t\t\t\tvar pathToRef = '';\n\t\t\t\tfor (var j = 0; j <= i; j++) {\n\t\t\t\t\tpathToRef += elements[j] + '.';\n\t\t\t\t}\n\t\t\t\tpathToRef = pathToRef.substring(0, pathToRef.lastIndexOf('.'));\n\t\t\t\tvar relPath = this.getRelPath(pathToRef);\n\t\t\t\t//type is in the instance.rs.k\n\t\t\t\tvar doc = this.getLastDoc();\n\t\t\t\tcurrentForm = new pebble.shared.ItemType(this.ds, doc.getRef(relPath));\n\n\t\t\t\tthis.itemTypes.push(currentForm);\n\t\t\t\tthis.fieldTypes.push(currentForm.getCopy('.'));\n\t\t\t} else {\n\t\t\t\tcurrentForm = new pebble.shared.ItemType(this.ds, typeRef);\n\t\t\t\tthis.itemTypes.push(currentForm);\n\t\t\t\tthis.fieldTypes.push(currentForm.getCopy('.'));\n\t\t\t}\n\t\t\ti += 1;\n\t\t} else {\n\t\t\tthrow new Error('PathAnalyzer: initComponents() requires typeRef for all fields in path');\n\t\t}\n\t}\n};\n\n/**\n * @return {string}\n */\npebble.shared.PathAnalyzer.prototype.getPath = function() {\n\treturn this.path;\n};\n/**\n * @return {pebble.Pebble}\n */\npebble.shared.PathAnalyzer.prototype.getLastDoc = function() {\n\tvar elements = this.getLastDocPath().split('.');\n\tvar name = elements.pop();\n\tvar container = elements.join('.');\n\treturn this.ds.retrieve(container, name);\n};\n/**\n * @return Array.<string>\n */\npebble.shared.PathAnalyzer.prototype.getDocPaths = function() {\n\treturn this.docPaths;\n};\n/**\n * @return {string}\n */\npebble.shared.PathAnalyzer.prototype.getLastDocPath = function() {\n\treturn this.docPaths[this.docPaths.length - 1];\n};\n/**\n * @return {string}\n */\npebble.shared.PathAnalyzer.prototype.getParentDocPath = function() {\n\treturn this.docPaths[this.docPaths.length - 2];\n};\n/**\n * @return {pebble.Pebble}\n */\npebble.shared.PathAnalyzer.prototype.getLastFieldType = function() {\n\treturn this.fieldTypes[this.fieldTypes.length - 1];\n};\n/**\n * @return Array.<pebble.shared.ItemType>\n */\npebble.shared.PathAnalyzer.prototype.getItemTypes = function() {\n\treturn this.itemTypes;\n};\n/**\n * @return {pebble.shared.ItemType}\n */\npebble.shared.PathAnalyzer.prototype.getParentItemType = function() {\n\treturn this.itemTypes[this.itemTypes.length - 2];\n};\n/**\n * @return {pebble.shared.ItemType}\n */\npebble.shared.PathAnalyzer.prototype.getLastItemType = function() {\n\treturn this.itemTypes[this.itemTypes.length - 1];\n};\n/**\n * @param {string} [fullPath]\n * @return {string}\n */\npebble.shared.PathAnalyzer.prototype.getRelPath = function(fullPath) {\n\tif (fullPath == null) {\n\t\tfullPath = this.getPath();\n\t}\n\treturn pebble.shared.PebbleUtils.lStrip(fullPath.replace(this.docPaths[this.docPaths.length - 1], ''), '.');\n};\n/**\n * @return {pebble.Pebble}\n */\npebble.shared.PathAnalyzer.prototype.getItem = function() {\n\tvar relPath = this.getRelPath();\n\tvar doc = this.getLastDoc();\n\tif (relPath != '') {\n\t\treturn doc.get(relPath);\n\t} else {\n\t\treturn doc;\n\t}\n};\n"},{"key":"codePath","val":"frontend/src/lib/shared/pathAnalyzer.js"},{"key":"ext","val":"js"}]},{"key":"pebbleFilter","val":[{"key":"devCode","val":"\n/**\n * implied AND for first condition\n *\n *\t<condition>\n *\t\t<aa.bb op='gt'>1</aa.bb>\n *\t\t<aa.bb op='gt' ref='cc' />\n *\t\t<META>myMeta</META>\n *\t\t<OR>\n *\t\t\t<dd op='startsWith'>hello</dd>\n *\t\t\t<cc ref='cc' op='eq'>3</cc>\n *\t\t</OR>\n *\t</condition> \n *\n *\tUsage: new pebble.shared.PebbleFilter(topConditionPeb).filter(item)\n *\n * @constructor\n * @param {pebble.Pebble} [condition]\n * @param {pebble.shared.ItemType} [itemType]\n * @param {pebble.Pebble} [globalItem]\n * @extends {pebble.Pebble}\n */\npebble.shared.PebbleFilter = function(condition, itemType, globalItem) {\n\n\tthis.filterCondition = condition || null;\n\tthis.itemType = itemType || null;\n\tthis.globalItem = globalItem || null;\n\n\tthis.typesCache = {};\n};\n\n/**\n * @param {pebble.Pebble} item\n * @return {boolean}\n */\npebble.shared.PebbleFilter.prototype.filter = function(item) {\n\n\treturn this._filter(this.filterCondition, item, true);\n\n};\n\n/**\n * @param {pebble.Pebble} condition\n * @param {pebble.Pebble} item\n * @param {boolean} isFilterTop\n * @return {boolean}\n */\npebble.shared.PebbleFilter.prototype._filter = function(condition, item, isFilterTop) {\n\tif (isFilterTop && condition == null) { //only will happen for top\n\n\t\treturn true;\n\n\t} else {\n\n\t\tvar tagName = condition.getTagName().toUpperCase();\n\t\tif (isFilterTop || tagName.toUpperCase() == 'AND'){\n\n\t\t\treturn this.filterAnd(condition, item);\n\n\t\t} else if (tagName == 'OR'){\n\n\t\t\treturn this.filterOr(condition, item);\n\n\t\t} else if (tagName == 'META') {\n\t\t\n\t\t\treturn item.getTagName() == condition.getValue('.');\n\n\t\t} else {\n\t\t\t\n\t\t\treturn this.doCompare(condition, item);\n\n\t\t}\n\t}\n};\n\n/**\n * @param {pebble.Pebble} andPeb\n * @param {pebble.Pebble} item\n * @return {boolean}\n */\npebble.shared.PebbleFilter.prototype.filterAnd = function(andPeb, item) {\n\tvar innerConditions = andPeb.getRecords('.');\n\tfor (var i = 0; i < innerConditions.length; i++) {\n\t\tvar innerCondition = innerConditions[i];\n\t\tif (!this._filter(innerCondition, item, false)){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\n/**\n * @param {pebble.Pebble} orPeb\n * @param {pebble.Pebble} item\n * @return {boolean}\n */\npebble.shared.PebbleFilter.prototype.filterOr = function(orPeb, item) {\n\tvar innerConditions = orPeb.getRecords('.');\n\tfor (var i = 0; i < innerConditions.length; i++) {\n\t\tvar innerCondition = innerConditions[i];\n\t\tif (this._filter(innerCondition, item, false)){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\n/**\n * override to implement on types\n * @param {pebble.Pebble} item\n * @return {boolean}\n */\npebble.shared.PebbleFilter.prototype.doCompare = function(condition, item) {\n\tvar ret = true;\n\n\tvar path = condition.getRef('.');\n\tvar type = this.getItemType(path);\n\tvar o = item.getCreateOnNull(path);\n\t\n\tif (path.indexOf('global:') == 0) {\n\t\tpath = path.replace('global:', '');\n\t\to = this.globalItem || null;\n\t}\n\t\n\tif (type == pebble.shared.TypeReferences.TEXT) {\n\t\tret = this.compareText(condition, o);\n\t} else if (type == pebble.shared.TypeReferences.BOOL) {\n\t\tret = this.compareBool(condition, o);\n\t} else if (type == pebble.shared.TypeReferences.NUMBER) {\n\t\tret = this.compareNumber(condition, o);\n\t} else if (type == pebble.shared.TypeReferences.DATE) {\n\t\tret = this.compareDate(condition, o);\n\t} else if (type == pebble.shared.TypeReferences.REFERENCE) {\n\t\tret = this.compareReference(condition, o);\n\t}\n\treturn ret;\n};\n/**\n * @param {string} path\n * @return {string}\n */\npebble.shared.PebbleFilter.prototype.getItemType = function(path) {\n\n\tif (this.typesCache[path] === undefined) {\n\n\t\tvar type = this.itemType.getInnerType(path);\n\t\tif (type !== null) {\n\t\t\t//return type pebble (flexible, no need?) or type string (faster)???\n\t\t\tthis.typesCache[path] = type.getRef('.');\n\t\t}\n\t}\n\n\treturn this.typesCache[path];\n};\n/**\n * @param {pebble.Pebble} condition\n * @param {pebble.Pebble} item\n * @return {boolean}\n */\npebble.shared.PebbleFilter.prototype.compareText = function(condition, item) {\n\n\tvar op = condition.getAttribute('.', 'op');\n\tvar itemVal = item.getValue('.');\n\tvar val = condition.getValue('.');\n\tif (op == null || op === 'eq') {\n\t\treturn val == itemVal;\n\t} else if (op == 'startsWith') {\n\t\tif (itemVal != null) {\n\t\t\treturn itemVal.indexOf(val) == 0;\n\t\t} \n\t}\n\treturn false;\n};\n\n/**\n * @param {pebble.Pebble} condition\n * @param {pebble.Pebble} item\n * @return {boolean}\n */\npebble.shared.PebbleFilter.prototype.compareNumber = function(condition, item) {\n\n\n\tvar val = condition.getInt('.');\n\tvar op = condition.getAttribute('.', 'op');\n\tif (op == null || op === 'eq') {\n\t\treturn val == item.getInt('.');\n\t} else if (op == 'lt') {\n\t\treturn val > item.getInt('.');\n\t} else if (op == 'gt') {\n\t\treturn val < item.getInt('.');\n\t} else {\n\t\tthrow new Error('PebbleFilter:compareNumber() no such operator');\n\t}\n};\n\n/**\n * @param {pebble.Pebble} condition\n * @param {pebble.Pebble} item\n * @return {boolean}\n */\npebble.shared.PebbleFilter.prototype.compareDate = function(condition, item) {\n\n//Date.parse('1997-07-16T19:20:15')           // ISO 8601 Formats\n//Date.parse('1997-07-16T19:20:30+01:00')  \n\n\t//var val = condition.getValue('.');\n\t//var itemDate = item.getValue('.');\n\tvar val = Date.parse(condition.getValue('.'));\n\tvar itemDate = Date.parse(item.getValue('.'));\n\tvar op = condition.getAttribute('.', 'op');\n\tif (op == null || op === 'eq') {\n\t\treturn val == itemDate;\n\t} else if (op == 'lt') {\n\t\treturn val > itemDate;\n\t} else if (op == 'gt') {\n\t\treturn val < itemDate;\n\t} else {\n\t\tthrow new Error('PebbleFilter:compareDate() no such operator');\n\t}\n};\n/**\n * @param {pebble.Pebble} condition\n * @param {pebble.Pebble} item\n * @return {boolean}\n */\npebble.shared.PebbleFilter.prototype.compareBool = function(condition, item) {\n\n\tvar val = condition.getBool('.');\n\treturn val == item.getBool('.');\n\n};\n\n/**\n * @param {pebble.Pebble} condition\n * @param {pebble.Pebble} item\n * @return {boolean}\n */\npebble.shared.PebbleFilter.prototype.compareReference = function(condition, item) {\n\n\tvar op = condition.getAttribute('.', 'op');\n\tvar val = condition.getValue('.');\n\tvar itemRef = item.getRef('.');\n\tif (op == null || op == 'eq') {\n\t\n\t\treturn val == itemRef;\n\n\t} else if (op == 'in') {\n\t\tvar recs = condition.getRecords('inReferences');\n\t\tfor (var i = 0; i < recs.length; i++) {\n\t\t\tvar rec = recs[i];\n\t\t\tvar compareType = rec.getRef('.');\n\t\t\tif (compareType == itemRef){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} else if (op == 'out') {\n\t\t\n\t\tvar recs = condition.getRecords('outReferences');\n\t\tfor (var i = 0; i < recs.length; i++) {\n\t\t\tvar rec = recs[i];\n\t\t\tvar compareType = rec.getRef('.');\n\t\t\tif (compareType == itemRef){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n};\n/**\n * filters are often as an array of items each with a filter so that when the filter is caught it does something\n * select the FIRST match, if none match returns null\n * these items should always have the meta name 'filter'\n * @param {pebble.Pebble} item\n * @param {pebble.Pebble} arrayWithFilters\n * @return {pebble.Pebble} \n */\nfunction getFilterCaseItem (item, arrayWithFilters) {\n\tif (arrayWithFilters != null) {\n\t\tvar actionFilters = arrayWithFilters.getRecords('.');\n\t\tfor (var i = 0; i < actionFilters.length; i++) {\n\t\t\tvar actionFilter = actionFilters[i];\n\t\t\t//passing the filter means it was caught (like a switch case)\n\t\t\tif (new pebble.shared.PebbleFilter(actionFilter.getCreateOnNull('filter')).filter(item)) {\n\t\t\t\treturn actionFilter;\n\t\t\t}\n\t\t}\n\t}\n\treturn null; \n}\n"},{"key":"codePath","val":"frontend/src/lib/shared/pebbleFilter.js"},{"key":"ext","val":"js"}]},{"key":"pebbleUtils","val":[{"key":"devCode","val":"\n/**\n * @constructor\n */\npebble.shared.PebbleUtils = function() {\n\n};\n\n\n//creates a simple pebble of heirarchy for path or ref instances\n/**\n * @param {pebble.Pebble} item\n * @param {string} path\n * @return {pebble.Pebble}\n */\npebble.shared.PebbleUtils.getInstanceRefs = function(item, path) {\n\t//create simple reference instance pebble\n\tvar instanceRefs = new pebble.Pebble();\n\tif (path.indexOf('.') == 0) {\n\t\tpath = path.substring(1);\n\t}\n\tvar elements = path.split('.');\n\tvar getPath = '';\n\tfor (var i = 0; i < elements.length; i++) {\n\t\tvar ele = elements[i];\n\t\tgetPath += ele;\n\t\tvar ref = item.getRef(getPath);\n\t\tif (ref == null) {\n\t\t\tref = ''; // no refs are set as empty string\n\t\t}\n\t\tinstanceRefs.setRef(getPath, ref);\n\t\tgetPath += '.';\n\t}\n\treturn instanceRefs;\n};\n\n//need the definition\n//public static String toJson(Pebble item) {\n//String json = '';\n//List<Pebble> recs = item.getRecords('.');\n//for (Pebble rec : recs) {\n//json += ''' + rec.getTagName() + '':' + _toJson(rec, def);\n//}\n//return json;\n//}\n\n//public static String toXml(Pebble item) {\n//String xml = '';\n//return xml;\n//}\n\n/**\n * @param {string} str\n * @param {string} suffix\n * @return {boolean}\n */\npebble.shared.PebbleUtils.endsWith = function (str, suffix) {\n\treturn str.indexOf(suffix, str.length - suffix.length) !== -1;\n};\n\n\n/**\n * @param {string} str\n * @param {string} val\n * @return {string}\n */\npebble.shared.PebbleUtils.rStrip = function(str, val) {\n\tif (pebble.shared.PebbleUtils.endsWith(str, val)) {\n\t\treturn str.substring(0, str.lastIndexOf(val));\n\t} else {\n\t\treturn str;\n\t}\n};\n/**\n * @param {string} str\n * @param {string} val\n * @return {string}\n */\npebble.shared.PebbleUtils.lStrip = function(str, val) {\n\tif (str.indexOf(val) == 0) {\n\t\treturn str.substring(val.length);\n\t} else {\n\t\treturn str;\n\t}\n};\n\n\n"},{"key":"codePath","val":"frontend/src/lib/shared/pebbleUtils.js"},{"key":"ext","val":"js"}]},{"key":"serverControl","val":[{"key":"devCode","val":"/**\n * @constructor\n */\nfunction Session() {\n\n\tthis.lastPresence = Date.now();\n\n\tthis.queryResults = new pebble.Pebble();\n\n}\n\nSession.prototype.requiresNotification = function (rec, path) {\n\n\treturn true;\n\n};\n\n//Iws.send\nSession.prototype.setSocket = function (Iws) {\n\n\tthis.ws = Iws;\n\n};\n\n/**\n * remove management for query\n * @param {string} queryRef: should be same server and client\n */\nSession.prototype.removeQuery = function (queryRef) {\n\n\tthis.queryResults.remove(queryRef);\n\n};\n\n/**\n * @constructor\n */\npebble.shared.ServerControl = function(wss, ds) {\n\tthis.init(wss, ds);\n}\n\npebble.shared.ServerControl.prototype.init = function(wss, ds) {\n\tthis.ds = ds;\n\tthis.wss = wss;\t\n\tthis.sessions = {};\n\tthis.sessionCount = 0;\n\n\tif (this.wss != null) {\n\t\tvar that = this;\n\t\tthis.wss.setOnMessage(function(ws, message){\n\n\t\t\tvar req = new pebble.Pebble(message);\n\t\t\tvar params = req.getParams();\n\t\t\tvar rg = params.getRef('.');\n\t\t\tif (rg != null) {\n\t\t\t\tvar sp = rg.split('.').pop();\n\n\t\t\t\tvar sessionId = params.getRef('sessionId');\n\n\t\t\t\tswitch (sp) {\n\n\t\t\t\t\tcase 'setup':\n\t\t\t\t\t\t\n\t\t\t\t\t\t//that.sessions[sessionId].setSocket(ws);\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'removeDependency':\n\n\t\t\t\t\t\tvar queryRef = params.getRef('queryRef');\t\n\t\t\t\t\t\tthat.sessions[sessionId].removeQuery(queryRef);\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t//that.executeMethod (sp, req);//doQuery, etc. if going thru socket)\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n};\t\npebble.shared.ServerControl.prototype.addTestData = function(deployment) {\n\n  var deploymentPeb = deployment.getDeploymentPeb();\n\tvar theControlApp = deployment.getTheControlApp();\n\tvar appDefPath = 'theModel.libs.' + deploymentPeb.getRef('.');\n\tvar elements = appDefPath.split('.');\n\tvar appDefMeta = elements.pop();\n\tvar appDefCollection = elements.join('.');\n\tvar appDefinition = deployment.ds.retrieve(appDefPath + '.types', appDefMeta);\n\n\tvar appFields = appDefinition.get('fields');\n\n\t//only check first level for collection items\n\tvar recs = theControlApp.getRecords('.');\n\tfor (var i = 0; i < recs.length; i++) {\n\t\tvar rec = recs[i];\n\t\tif (appFields.getRef(rec.getTagName() + '.type').split('.').pop() === 'collection') {\n\t\t\tthis.createTable('theModel.' + rec.getTagName(), rec);\n\t\t}\t\n\t}\n};\n\n/**\n * @param {string} path\n * @param {pebble.Pebble} collection\n */\npebble.shared.ServerControl.prototype.createTable = function (path, collection) {\n\tvar docs = collection.getRecords('.');\n\tfor (var i = 0; i < docs.length; i++) {\n\t\tvar doc = docs[i];\n\t\tthis.ds.create(path, doc);\n\t}\n};\n/**\n * @param {string} sessionId\n * @param {pebble.Pebble} doc\n * @param {string} path\n */\npebble.shared.ServerControl.prototype.alertCreated = function(sessionId, doc, path) {\n\n\tvar o = new pebble.Pebble();\n\tvar params = o.getParams();\n\tparams.setRef('.', 'created');\n\tparams.set('doc', doc);\n\tparams.setRef('path', path);\n\n\tvar message = o.toString();\n\n\tfor (var key in this.sessions) {\n\n\t\tvar session = this.sessions[key];\n\t\t//if (sessionId != key) { \n\t\t\tif (session.requiresNotification(doc, path)) {\n\n\t\t\t\tsession.ws.sendToClient(message);\n\t\t\t\t\n\t\t\t}\n\t\t//}\n\t}\n};\t\n/**\n * @param {pebble.Pebble} obj\n */\npebble.shared.ServerControl.prototype.alertDeleted = function(obj) {\n\n};\t\n\n/**\n * @param {pebble.Pebble} obj\n */\npebble.shared.ServerControl.prototype.alertUpdated = function(obj) {\n\n};\t\n/**\n * @param {string} sp\n * @param {pebble.Pebble} obj\n * @return {number}\n * @override\n */\n//Service.prototype.executeMethod = function(sp, obj) {\n\t//var ret = 1;\n\t//if (sp in this) {\n\t\t//this[sp](obj);\n\t//} \n\t//return ret;\n//};\n/**\n * @param {string} sp\n * @param {pebble.Pebble} obj\n * @return {number}\n */\npebble.shared.ServerControl.prototype.executeMethod = function(sp, obj, deployment) {\n\tthis.deployment = deployment;\n\tvar ret = 1;\n\tif (sp == 'doInit') {\n\t\tthis.doInit(obj);\n\t} else if (sp == 'retrieveItem') {\n\t\tthis.retrieveItem(obj);\n\t} else if (sp == 'doQuery') {\n\t\tthis.doGenericQuery(sp, obj);\n\t} else if (sp == 'getFields') {\n\t\tthis.getFields(obj);\n\t} else if (sp == 'createItem') {\n\t\tthis.createItem(obj);\n\t} else if (sp == 'updateItem') {\n\t\tthis.updateItem(obj);\n\t} else if (sp == 'deleteItem') {\n\t\tthis.deleteItem(obj);\n\t} else {\n\t\tthis.doGenericQuery(sp, obj);\n\t}\n\treturn ret;\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.shared.ServerControl.prototype.doInit = function(obj) {\n\t\n\tthis.sessionCount += 1;\n\t//client receives sessionId an \n\tvar sessionStr =  this.sessionCount.toString();\n\tobj.setValue('sessionId', sessionStr);\n\tthis.sessions[sessionStr] = new Session();\n\t\n\t//set in request\n\tobj.set('user', obj.get('_user'));\n\tobj.setRef('sessionId', sessionStr);\n};\t\n\n/**\n * @param {pebble.Pebble} obj\n */\npebble.shared.ServerControl.prototype.retrieveItem = function(obj) {\n\tvar params = obj.getParams();\n\tvar relPath = params.getRef('relPath');\n\tvar collectionPath = params.getRef('collection');\n\tvar path = collectionPath + '.' + relPath;\n\tvar asDs = params.getBool('asDs');\n\n\t//check permissions\n\tvar doc;\n\tif (asDs) {\n\t\tdoc = this.ds.getDs(path);\n\n\t} else {\n\n\t\tdoc = this.ds.retrieve(collectionPath, relPath);\n\n\t} \n\n\tobj.setRef('source', path);\n\tobj.setFull('arrayItem', doc);\n\n};\n\n/**\n * Queries always query a path\n * @param {pebble.Pebble} obj\n */\npebble.shared.ServerControl.prototype.doGenericQuery = function(funcName, obj) {\n\tvar params = obj.getParams();\n\n\tvar appDef = 'theModel.libs.' + this.deployment.getDeploymentPeb().getRef('.');\n\tvar service = this.deployment.getTypeDocument(appDef + '.services.' + funcName);\n\tvar query = service.get('query');\n\n\tif (query != null) {\n\t\tvar qq = query.getCopy('.');\n\t\tvar tables = qq.getRecords('from');\n    if (tables.length == 0) {\n      //default path to basePath, provided automatically in collection\n      qq.setRef('from.table0', params.getRef('collection'));\n    } \n    \n\t\tfor (var i = 0; i < tables.length; i++) {\n\t\t\tvar table = tables[i];\n\t\t\tvar relPath = table.getRef('.');\n\t\t\tif (relPath.indexOf('theModel') == -1) {\n\t\t\t\ttable.setRef('.', 'theModel.' + relPath);\n\t\t\t}\n\t\t}\n\n\t\tvar s = qq.toString();\n\n\t\tvar patt = /{{\\w+(\\.\\w+)*}}/g;\t\n\t\tvar that = this;\n\t\tvar out = s.replace(patt, function(token) {\n\n\t\t\ttoken = token.replace(/{{|}}/g, '');\n\t\t\tvar field = service.getInnerField(token);\n\t\t\tvar type = field.getRef('type');\n\t\t\tif (type == pebble.shared.TypeReferences.REFERENCE) {\n\t\t\t\treturn params.getRef(token);\n\t\t\t} else if (type == pebble.shared.TypeReferences.TEXT) {\n\t\t\t\treturn params.getValue(token);\n\t\t\t}\n\n\t\t});\n\n\t\tvar peb = new pebble.Pebble(out);\n\n\t\tquery.set('.', peb);\n\n\t\tvar tmpDoc = new pebble.Pebble();\n\t\tvar dt = this.ds.doQuery(query);\n\t\tfor (var i = 0; i < dt.length; i++) {\n\t\t\ttmpDoc.setFull(dt[i].getTagName(), dt[i]);\n\t\t}\n\n\t\tobj.set('.', tmpDoc); //base class add the rs so we know we can replace it \n\n\t\tvar sessionId = params.getRef('sessionId');\n\t\tif (sessionId !== null) {\n\n\t\t\t//we dont need to put the result set on\n\t\t\tvar managedQuery = new pebble.Pebble();\n\t\t\t//managedQuery.setParams(obj.getParams());\n\t\t\tmanagedQuery.set('query', query);\n\n\t\t\t//TODO:need to put these back by adding session to all server in topModule\n\t\t\t//var queryResult = this.sessions[sessionId].queryResults.add2Array('.', managedQuery); //this will copy full\n\t\t\t//obj.setRef('_serverQueryReference', queryResult.getTagName());\n\n\t\t}\n\n\t}\n};\n/**\n * @param {pebble.Pebble} obj\n */\npebble.shared.ServerControl.prototype.getFields = function(obj) {\n\n\tvar params = obj.getParams();\n\tvar typeId = params.getRef('typeId');\n\tvar fieldsPath = params.getRef('fieldsPath');\n\tif (fieldsPath != null) {\n\t\tvar fields;\n\t  if (typeId.indexOf('theModel.') == 0) {\n\t    var control = this.deployment.getTypeDocument(typeId);\n  \t\tif (fieldsPath == 'fields') {\n  \t\t\tfields = control.getFields();\n  \t\t} else { \n  \t\t\tfields = control.get(fieldsPath);\n  \t\t}\n\t  } else {\n  \t  var collection = typeId.substring(0, typeId.lastIndexOf('.'));\n  \t  var name = typeId.substring(typeId.lastIndexOf('.') + 1);\n  \t\tvar control = this.ds.retrieve(collection, name);\n  \t\tif (fieldsPath == 'fields') {\n  \t\t//TODO: should get inherits fields\n  \t\t\tfields = control.get('fields');\n  \t\t} else { \n  \t\t\tfields = control.get(fieldsPath);\n  \t\t}\n\t  }\n\n\t\tobj.set('.', fields);\n\n\t} else {\n\t\tthrow new Error('ServerControl: getFields() requires fieldsPath');\n\t}\n};\n/**\n * @param {pebble.Pebble} queryItem\n * @return {string}\n */\npebble.shared.ServerControl.prototype.getDocs = function(queryItem, itemType) {\n\n};\n/**\n * @param {pebble.Pebble} obj\n */\n//called as collection \npebble.shared.ServerControl.prototype.createItem = function(obj) {\n\tvar params = obj.getParams();\n\tvar recItem = params.get('item');\n\tvar data;\n\tvar collection = params.getRef('collection');\n\tvar sessionId = params.getRef('sessionId');\n\tvar asDs = params.getBool('asDs');\n\n\tif (collection != null) { \n\t\t\n\t\tvar uniqueName = recItem.getValue('key_');\n\t\trecItem.remove('key_');\n\t\tif (uniqueName != null) {\n\t\t\tdata = new pebble.Pebble(uniqueName);\n\t\t} else {\n\t\t\tdata = new pebble.Pebble(); //empty item, serverdata will create an id\n\t\t}\n\t\tdata.set('.', recItem);\n\n\t\tif (asDs && recItem.get('theModel_appInstances.theInstance') != null) {\n\n\t\t\tthis.ds.addDs(collection, data);\n\t\t\tobj.setRef('id', uniqueName);\n\n\t\t} else {\n\n\t\t\tvar doc = this.ds.create(collection, data);\n\n\t\t\tobj.setRef('id', doc.getTagName());\n\n\t\t}\n\t\t//notify\n\t\t//this.alertCreated(sessionId, doc, collection + '.' + doc.getTagName());\n\n\t} else {\n\t\tthrow new Error('ServerControl: addItem() requires collection specified');\n\t}\n};\n\n\n/**\n * @param {pebble.Pebble} obj\n */\npebble.shared.ServerControl.prototype.updateItem = function(obj) {\n\tvar params = obj.getParams();\n\tvar data = params.get('data');\n\tvar collection = params.getRef('collection');\n\tvar name = params.getRef('name');\n\tif (collection != null && name != null) {\n\t\tvar relPath = params.getRef('relPath');\n\t\tif (relPath) {\n\t\t\tvar doc = this.ds.retrieve(collection, name);\n\t\t\tdoc.set(relPath, data);\n\t\t\tthis.ds.update(collection, name, doc);\n\t\t} else {\n\t\t\tthis.ds.update(collection, name, data);\n\t\t}\n\t}\n};\n\n/**\n * @param {pebble.Pebble} obj\n */\npebble.shared.ServerControl.prototype.deleteItem = function(obj) {\n\tvar params = obj.getParams();\n\tvar collection = params.getRef('collection');\n\tvar name = params.getRef('name');\n\n\tvar path = collection + '.' + name;\n\tif (collection != null && name != null) {\n\t\tthis.ds.deleteItem(collection, name);\n\t\t \n\t} else {\n\t\tthrow 'delete requires collection and name';\n\t}\n};\n\n\n\n\n"},{"key":"codePath","val":"frontend/src/lib/shared/serverControl.js"},{"key":"ext","val":"js"}]},{"key":"shared","val":[{"key":"devCode","val":"/**\n * @namespace\n */\npebble.shared = {};\n/**\n * @namespace\n */\npebble.shared.interfaces = {};\n\n"},{"key":"codePath","val":"frontend/src/lib/shared/shared.js"},{"key":"ext","val":"js"}]},{"key":"typeReferences","val":[{"key":"devCode","val":"\n/**\n * @constructor\n */\npebble.shared.TypeReferences = function(){\n\n}\n\n\npebble.shared.TypeReferences.ControlBase = {\n\t\tCONTROL_BASE : 'standard:ClientControl'\n};\n\npebble.shared.TypeReferences.CONTROL = 'theModel.libs.standard.types.control';\npebble.shared.TypeReferences.BASIC_TYPE = 'theModel.libs.standard.types.basicType';\npebble.shared.TypeReferences.DOC_TYPE = 'theModel.libs.pebbleDev.types.lib';\npebble.shared.TypeReferences.FUNCTION_DEF = 'theModel.libs.standard.types.functionDef';\npebble.shared.TypeReferences.ARRAY = 'theModel.libs.standard.types.array';\npebble.shared.TypeReferences.COLLECTION = 'theModel.libs.standard.types.collection';\npebble.shared.TypeReferences.COMMAND = 'theModel.libs.standard.types.command';\npebble.shared.TypeReferences.TEXT = 'theModel.libs.standard.types.text';\npebble.shared.TypeReferences.MARKUP = 'theModel.libs.standard.types.markup';\npebble.shared.TypeReferences.NUMBER = 'theModel.libs.standard.types.number';\npebble.shared.TypeReferences.DATE = 'theModel.libs.standard.types.date';\npebble.shared.TypeReferences.BOOL = 'theModel.libs.standard.types.bool';\npebble.shared.TypeReferences.REFERENCE = 'theModel.libs.standard.types.itemRelRef';\npebble.shared.TypeReferences.WIN = 'theModel.libs.standard.types.win';\npebble.shared.TypeReferences.MOUSE_EVENTS = 'theModel.libs.standard.types.winMouseEvents';\npebble.shared.TypeReferences.FIELD = 'theModel.libs.standard.types.typeField';\npebble.shared.TypeReferences.ARRAY_PAGE = 'theModel.libs.standard.types.arrayPage';\npebble.shared.TypeReferences.DEPLOYMENT = 'theModel.libs.pebbleDev.types.deployment';\npebble.shared.TypeReferences.GLOBAL_INDEX_ITEM = 'theModel.libs.standard.types.globalIndexItem';\n\n\n\n"},{"key":"codePath","val":"frontend/src/lib/shared/typeReferences.js"},{"key":"ext","val":"js"}]},{"key":"testArrayTreeBaseExternal","val":[{"key":"testCode","val":"\nvar topApp, ctrl1, ctrl2, ctrl3, originInfo;\n\ndescribe('testArrayTreeBaseExternal', function () {\n\n\tbeforeEach(function() {\n\n\t\tvar ready = false;\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\ttopApp && topApp.kill();\n\t\t\t\ttopApp = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top');\n\t\t\t\ttopApp.load(function() {\n\t\t\t\t\tready = true;\t\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn ready;\n\t\t}, 'wait for deployment and testAppControl', 300);\n\n\t\truns(function() {\n\t\t\tvar bindPoint = 'model.testItems';\t\n\n\t\t\t//ArrayCtrl1: main point of changes\n\t\t\tvar ctrl1 = new pebble.Pebble();\n\t\t\tctrl1.setRef('.', 'standard:ArrayTreeBase');\n\t\t\tctrl1.setRef('model._bind', bindPoint);\n\t\t\tctrl1.setRef('crud.create', 'SERVER.createItem');\n\t\t\tctrl1.setRef('crud.update', 'SERVER.updateItem');\n\t\t\tctrl1.setRef('crud.delete', 'SERVER.deleteItem');\n\t\t\tctrl1.setRef('crud.retrieve', 'SERVER.retrieveItem');\n\t\t\tctrl1.setRef('loadQuery', 'SERVER.testItems1');\n\n\t\t\tvar div1 = new pebble.Pebble('div');\n\t\t\tdiv1.set('control', ctrl1);\n\n\t\t\tvar innerMarkup = new pebble.Pebble();\n\t\t\tinnerMarkup.add('.', div1);\n\n\t\t\t//ArrayCtrl2: test how an array reacts to changes\n\t\t\tvar ctrl2 = new pebble.Pebble();\n\t\t\tctrl2.setRef('.', 'standard:ArrayTreeBase');\n\t\t\t//TODO would be nice to have a filter here \n\t\t\tctrl2.setRef('loadQuery', 'SERVER.testItems1');\n\t\t\tctrl2.setRef('model._bind', bindPoint);\n\t\t\tvar div2 = new pebble.Pebble('div');\n\t\t\tdiv2.set('control', ctrl2);\n\t\t\tinnerMarkup.add('.', div2);\n\n\t\t\t//ArrayStackControl\n\t\t\tvar ctrl3 = new pebble.Pebble();\n\t\t\tctrl3.setRef('.', 'standard:ArrayStackControl');\n\t\t\tctrl3.setRef('crud.retrieve', 'SERVER.retrieveItem');\n\t\t\tctrl3.setRef('model._bind', bindPoint);\n\t\t\n\t\t\tvar control = new pebble.Pebble();\n\t\t\tcontrol.setRef('.', 'standard:TextInput');\n\n\t\t\tvar displayControl = new pebble.Pebble();\n\t\t\tdisplayControl.setAttribute('innerMarkup.input', 'type', 'text');\n\t\t\tdisplayControl.set('innerMarkup.input.control', control);\n\n\t\t\tctrl3.set('displayControl', displayControl);\n\n\t\t\tctrl3.set('childElement.div', new pebble.Pebble());\n\n\t\t\tvar div3 = new pebble.Pebble('div');\n\t\t\tdiv3.set('control', ctrl3);\n\t\t\tinnerMarkup.add('.', div3);\n\n\n\t\t\tvar dm = topApp.item;\n\t\t\tdm.set('innerMarkup', innerMarkup);\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\tctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\tctrl2 = topApp.item.modules['childmod1'].item; \n\t\t\tctrl3 = topApp.item.modules['childmod2'].item; \n\t\t\toriginInfo = ctrl1.getOriginInfo('model');\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t});\n\n\tit ('check setup is correct', function() {\n\t\truns(function() {\n\t\t\texpect(ctrl1.getRef('.').indexOf('ArrayTreeBase') != -1);\n\t\t\texpect(ctrl2.getRef('.').indexOf('ArrayTreeBase') != -1);\n\t\t\texpect(ctrl3.getRef('.').indexOf('ArrayStackControl') != -1);\n\t\t\texpect(ctrl1.origin.getThisType().getRef('arrayFormId').split('.').pop()).toEqual('testItem');\n\t\t\texpect(ctrl2.origin.getThisType().getRef('arrayFormId').split('.').pop()).toEqual('testItem');\n\t\t\texpect(ctrl3.origin.getThisType().getRef('arrayFormId').split('.').pop()).toEqual('testItem');\n\t\t});\n\t});\n\t\n\tit ('pull data if filter exists, embedded data is always ignored because source is the server', function() {\n\t\tvar returned = false;\n\t\texpect(originInfo.get().getRecords('.').length).toEqual(10);\n\t});\n\n\tit ('can create an external item', function() {\n\n\t\tvar returned = false;\n\t\truns(function() {\n\t\t\tvar obj = new pebble.Pebble();\n\t\t\tvar params = obj.getParams();\n\t\t\tobj.setCallback(function() { returned = true; });\n\t\t\t\n\t\t\tspyOn(ctrl1, 'onArrayItemsAdded').andCallThrough();\n\t\t\tspyOn(ctrl2, 'onArrayItemsAdded').andCallThrough();\n\t\t\tspyOn(ctrl3, 'onArrayItemsAdded').andCallThrough();\n\t\t\tctrl1.createArrayItem(obj);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'createArrayItem should have returned', 300);\n\n\t\truns(function() {\n\t\t\t//after created on the server, the controls are notified, its up to them to get their own data\n\t\t\texpect(ctrl1.onArrayItemsAdded).toHaveBeenCalled();\n\t\t\texpect(ctrl1.onArrayItemsAdded.calls.length).toEqual(1);\n\t\t\texpect(ctrl2.onArrayItemsAdded).toHaveBeenCalled();\n\t\t\texpect(ctrl2.onArrayItemsAdded.calls.length).toEqual(1);\n\t\t\texpect(ctrl3.onArrayItemsAdded).toHaveBeenCalled();\n\t\t\texpect(ctrl3.onArrayItemsAdded.calls.length).toEqual(1);\n\t\t\t\n\t\t\tvar returned = false;\n\t\t\t//delete what we created\t\n\t\t\tctrl1.setSelectedItem('a10', function() {\n\n\t\t\t\tvar obj = new pebble.Pebble();\n\t\t\t\tvar params = obj.getParams();\n\t\t\t\tobj.setCallback(function() { returned = true; });\n\t\t\t\t\n\t\t\t\tspyOn(ctrl1, 'onBeforeArrayItemsDeleted').andCallThrough();\n\t\t\t\tspyOn(ctrl2, 'onBeforeArrayItemsDeleted').andCallThrough();\n\t\t\t\tspyOn(ctrl3, 'onBeforeArrayItemsDeleted').andCallThrough();\n\t\t\t\tctrl1.deleteSelectedItem(obj);\n\n\t\t\t});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'createArrayItem should have returned from delete', 300);\n\n\t\truns(function() {\n\t\t\t//after created on the server, the controls are notified, its up to them to get their own data\n\t\t\texpect(ctrl1.onBeforeArrayItemsDeleted).toHaveBeenCalled();\n\t\t\texpect(ctrl1.onBeforeArrayItemsDeleted.calls.length).toEqual(1);\n\t\t\texpect(ctrl2.onBeforeArrayItemsDeleted).toHaveBeenCalled();\n\t\t\texpect(ctrl2.onBeforeArrayItemsDeleted.calls.length).toEqual(1);\n\t\t\texpect(ctrl3.onBeforeArrayItemsDeleted).toHaveBeenCalled();\n\t\t\texpect(ctrl3.onBeforeArrayItemsDeleted.calls.length).toEqual(1);\n\t\t});\n\t});\n\n\tit ('can create an external item with own tag name', function() {\n\n\t\tvar meta = 'myname', \n\t\t\t\tname = 'Item1', \n\t\t\t\tupdateText = 'update text', \n\t\t\t\twriteThruUpdateText = 'update again';\n\n\t\tvar returned = false;\n\t\truns(function() {\n\t\t\tvar obj = new pebble.Pebble();\n\t\t\tvar params = obj.getParams();\n\t\t\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('key_', meta);\n\t\t\tdata.setValue('name', name);\n\t\t\tparams.setFull('withData', data);\n\t\t\t\n\t\t\tobj.setCallback(function() { returned = true; });\n\t\t\tspyOn(ctrl1, 'onArrayItemsAdded').andCallThrough();\n\t\t\tctrl1.createArrayItem(obj);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'createArrayItem should have returned', 300);\n\n\t\tvar newItem;\n\t\truns(function() {\n\t\t\t//after created on the server, the controls are notified, its up to them to get their own data\n\t\t\texpect(ctrl1.onArrayItemsAdded).toHaveBeenCalled();\n\t\t\texpect(ctrl1.onArrayItemsAdded.calls.length).toEqual(1);\n\t\t\treturned = false;\n\t\t\tctrl1.retrieveArrayItem(meta, false, function(data) {\n\t\t\t\tnewItem = data;\n\t\t\t\treturned = true;\t\n\t\t\t});\n\t\t});\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'should have returned', 300);\n\n\t\truns(function() {\n\t\t\texpect(newItem.getValue('name')).toEqual(name);\n\t\t\t\n\t\t\tvar origin = ctrl1.getOriginInfo('collection.' + meta);\n\t\t\tspyOn(ctrl1, 'onArrayItemsUpdated').andCallThrough();\n\t\t\tvar item = new pebble.Pebble();\n\t\t\titem.setValue('text', updateText);\n\t\t\torigin.set(item, ctrl1, true);//set silent\n\t\t\treturned = false;\n\t\t\tctrl1.updateArrayItem(meta, null, false, function(){ returned = true;});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'should have returned', 300);\n\n\t\tvar updateItem;\n\t\truns(function() {\n\t\t\t//after created on the server, the controls are notified, its up to them to get their own data\n\t\t\texpect(ctrl1.onArrayItemsUpdated).toHaveBeenCalled();\n\t\t\texpect(ctrl1.onArrayItemsUpdated.calls.length).toEqual(1);\n\n\t\t\treturned = false;\n\t\t\tctrl1.retrieveArrayItem(meta, false, function(data) {\n\t\t\t\tupdateItem = data;\n\t\t\t\treturned = true;\t\n\t\t\t});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'should have returned', 300);\n\n\t\truns(function() {\n\t\t\texpect(updateItem.getValue('text')).toEqual(updateText);//there is no data there but ps._isSelected creates the item \n\t\t\t\n\t\t\t//can update writeThru when relPath specified for an external item\n\t\t\tvar textData = new pebble.Pebble();\n\t\t\ttextData.setValue('.', writeThruUpdateText);\n\t\t\tvar relPath = 'text';\t\n\t\t\tvar origin = ctrl1.getOriginInfo('collection.' + meta + '.' + relPath);\n\t\t\tvar returned = false;\n\t\t\t\n\t\t\torigin.set(textData, ctrl1, true);//set silent\n\t\t\tctrl1.updateArrayItem(meta, relPath, false, function(){ returned = true;});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'should have returned', 300);\n\n\t\tvar updateItem;\n\t\truns(function() {\n\t\t\t//after created on the server, the controls are notified, its up to them to get their own data\n\t\t\texpect(ctrl1.onArrayItemsUpdated).toHaveBeenCalled();\n\t\t\texpect(ctrl1.onArrayItemsUpdated.calls.length).toEqual(2);\n\t\t\treturned = false;\n\t\t\tctrl1.retrieveArrayItem(meta, false, function(data) {\n\t\t\t\tupdateItem = data;\n\t\t\t\treturned = true;\t\n\t\t\t});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'should have returned', 300);\n\n\t\truns(function() {\n\t\t\tvar origin = ctrl1.getOriginInfo('collection.' + meta + '.text');\n\t\t\tvar newlyRetrievedItem = origin.get();\n\t\t\texpect(newlyRetrievedItem.getValue('.')).toEqual(writeThruUpdateText);//there is no data there but ps._isSelected creates the item \n\n\n\t\t\tvar returned = false;\n\t\t\t//delete what we created\t\n\t\t\tctrl1.setSelectedItem(meta, function() {\n\n\t\t\t\tvar obj = new pebble.Pebble();\n\t\t\t\tvar params = obj.getParams();\n\t\t\t\tobj.setCallback(function() { returned = true; });\n\t\t\t\t\n\t\t\t\tspyOn(ctrl1, 'onBeforeArrayItemsDeleted').andCallThrough();\n\t\t\t\tctrl1.deleteSelectedItem(obj);\n\n\t\t\t});\n\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'createArrayItem should have returned from delete', 300);\n\n\t\truns(function() {\n\t\t\t//after created on the server, the controls are notified, its up to them to get their own data\n\t\t\texpect(ctrl1.onBeforeArrayItemsDeleted).toHaveBeenCalled();\n\t\t\texpect(ctrl1.onBeforeArrayItemsDeleted.calls.length).toEqual(1);\n\t\t});\n\t});\n\n\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/controls/testArrayTreeBaseExternal.js"},{"key":"ext","val":"js"}]},{"key":"testInputControls","val":[{"key":"testCode","val":"\nvar topApp;\n\ndescribe('testInputControls', function () {\n\n\tfunction getInnerMarkup(control, testItemField, inputType) {\n\t\tvar ctrl = new pebble.Pebble();\n\t\tctrl.setRef('.', 'standard:' + control);\n\t\tctrl.setRef('model._bind', 'testItem.' + testItemField);\n\t\t\n\t\tvar ele = new pebble.Pebble('input');\n\t\tele.setAttribute('.', 'type', inputType);\n\t\tele.set('control', ctrl);\n\n\t\tvar innerMarkup = new pebble.Pebble();\n\t\tinnerMarkup.add('.', ele);\n\n\t\treturn innerMarkup;\n\t}\n\n\tit ('requires deployment and testAppControl', function() {\n\t\tvar ready = false;\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\ttopApp && topApp.kill();\n\t\t\t\ttopApp = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top');\n\t\t\t\ttopApp.load(function() {\n\t\t\t\t\tready = true;\t\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn ready;\n\t\t}, 'wait for deployment and testAppControl', 300);\n\n\t});\n\n\n\tit ('textInput should load and react to data change', function() {\n\n\t\tvar ctrl;\n\t\tvar innerMarkup = getInnerMarkup('TextInput', 'text', 'text');\t\n\t\tvar dm = topApp.item;\n\n\t\tvar LOADVAL = 'hello';\n\t\tvar CHANGEVAL = 'goodbye';\n\t\tdm.set('innerMarkup', innerMarkup);\n\t\tdm.setValue('testItem.text', LOADVAL);\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\tctrl = topApp.item.modules['childmod0'].item; \n\t\t\tvar originInfo = ctrl.getOriginInfo('model'); \n\t\t\texpect(originInfo.getValue()).toEqual(LOADVAL);\n\t\t\texpect(ctrl.element.value).toEqual(LOADVAL);\n\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('.', CHANGEVAL);\n\t\t\tchanged = false;\n\t\t\toriginInfo.set(data, topApp.item, false, function() {\n\t\t\t\tchanged = true;\n\t\t\t});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn changed;\n\t\t}, 'data still not set', 300);\n\n\t\truns(function() {\n\t\t\texpect(ctrl.element.value).toEqual(CHANGEVAL);\n\n\t\t\tctrl.element.value = LOADVAL;\n\t\t\tctrl.saveManager.save(function() {});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn ctrl.saveManager.isValidSave;\n\t\t}, 'still waiting for to set own data', 300);\n\n\t\truns(function() {\n\t\t\texpect(topApp.item.getValue('testItem.text')).toEqual(LOADVAL);\n\t\t});\n\t});\n\t\n\tit ('numberInput / number should load and react to data change', function() {\n\n\t\tvar ctrl;\n\t\tvar innerMarkup = getInnerMarkup('NumberInput', 'number', 'number');\t\n\t\tvar dm = topApp.item;\n\n\t\tvar LOADVAL = 1;\n\t\tvar CHANGEVAL = 2;\n\t\tdm.set('innerMarkup', innerMarkup);\n\t\tdm.setValue('testItem.number', LOADVAL);\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\tctrl = topApp.item.modules['childmod0'].item; \n\t\t\tvar originInfo = ctrl.getOriginInfo('model'); \n\t\t\texpect(originInfo.getInt()).toEqual(LOADVAL);\n\t\t\texpect(parseInt(ctrl.element.value)).toEqual(LOADVAL);\n\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('.', CHANGEVAL);\n\t\t\tchanged = false;\n\t\t\toriginInfo.set(data, topApp.item, false, function() {\n\t\t\t\tchanged = true;\n\t\t\t});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn changed;\n\t\t}, 'data still not set', 300);\n\n\t\truns(function() {\n\t\t\texpect(parseInt(ctrl.element.value)).toEqual(CHANGEVAL);\n\n\t\t\tctrl.element.value = LOADVAL;\n\t\t\tctrl.saveManager.save(function() {});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn ctrl.saveManager.isValidSave;\n\t\t}, 'still waiting for to set own data', 300);\n\n\t\truns(function() {\n\t\t\texpect(topApp.item.getInt('testItem.number')).toEqual(LOADVAL);\n\t\t});\n\t});\n\t\n\tit ('numberInput / range should load and react to data change', function() {\n\n\t\tvar ctrl;\n\t\tvar innerMarkup = getInnerMarkup('NumberInput', 'number', 'range');\t\n\t\tvar dm = topApp.item;\n\n\t\tvar LOADVAL = 1;\n\t\tvar CHANGEVAL = 2;\n\t\tdm.set('innerMarkup', innerMarkup);\n\t\tdm.setValue('testItem.number', LOADVAL);\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\tctrl = topApp.item.modules['childmod0'].item; \n\t\t\tvar originInfo = ctrl.getOriginInfo('model'); \n\t\t\texpect(originInfo.getInt()).toEqual(LOADVAL);\n\t\t\texpect(parseInt(ctrl.element.value)).toEqual(LOADVAL);\n\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('.', CHANGEVAL);\n\t\t\tchanged = false;\n\t\t\toriginInfo.set(data, topApp.item, false, function() {\n\t\t\t\tchanged = true;\n\t\t\t});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn changed;\n\t\t}, 'data still not set', 300);\n\n\t\truns(function() {\n\t\t\texpect(parseInt(ctrl.element.value)).toEqual(CHANGEVAL);\n\n\t\t\tctrl.element.value = LOADVAL;\n\t\t\tctrl.saveManager.save(function() {});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn ctrl.saveManager.isValidSave;\n\t\t}, 'still waiting for to set own data', 300);\n\n\t\truns(function() {\n\t\t\texpect(topApp.item.getInt('testItem.number')).toEqual(LOADVAL);\n\t\t});\n\t});\n\n\tit ('colorInput should load and react to data change', function() {\n\n\t\tvar ctrl;\n\t\tvar innerMarkup = getInnerMarkup('ColorInput', 'color', 'color');\t\n\t\tvar dm = topApp.item;\n\n\t\tvar LOADVAL = '#eeeeee';\n\t\tvar CHANGEVAL = '#ffffff';\n\t\tdm.set('innerMarkup', innerMarkup);\n\t\tdm.setValue('testItem.color', LOADVAL);\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\tctrl = topApp.item.modules['childmod0'].item; \n\t\t\tvar originInfo = ctrl.getOriginInfo('model'); \n\t\t\texpect(originInfo.getValue()).toEqual(LOADVAL);\n\t\t\texpect(ctrl.element.value).toEqual(LOADVAL);\n\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('.', CHANGEVAL);\n\t\t\tchanged = false;\n\t\t\toriginInfo.set(data, topApp.item, false, function() {\n\t\t\t\tchanged = true;\n\t\t\t});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn changed;\n\t\t}, 'data still not set', 300);\n\n\t\truns(function() {\n\t\t\texpect(ctrl.element.value).toEqual(CHANGEVAL);\n\n\t\t\tctrl.element.value = LOADVAL;\n\t\t\tctrl.saveManager.save(function() {});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn ctrl.saveManager.isValidSave;\n\t\t}, 'still waiting for to set own data', 300);\n\n\t\truns(function() {\n\t\t\texpect(topApp.item.getValue('testItem.color')).toEqual(LOADVAL);\n\t\t});\n\t});\n\n\tit ('dateInput should load and react to data change', function() {\n\n\t\tvar ctrl;\n\t\tvar innerMarkup = getInnerMarkup('DateInput', 'date', 'date');\t\n\t\tvar dm = topApp.item;\n\n\t\tvar LOADVAL = '2000-12-01';//must be in this format\n\t\tvar CHANGEVAL = '2010-04-10';\n\t\tdm.set('innerMarkup', innerMarkup);\n\t\tdm.setValue('testItem.date', LOADVAL);\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\tctrl = topApp.item.modules['childmod0'].item; \n\t\t\tvar originInfo = ctrl.getOriginInfo('model'); \n\t\t\texpect(originInfo.getValue()).toEqual(LOADVAL);\n\t\t\texpect(ctrl.element.value).toEqual(LOADVAL);\n\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('.', CHANGEVAL);\n\t\t\tchanged = false;\n\t\t\toriginInfo.set(data, topApp.item, false, function() {\n\t\t\t\tchanged = true;\n\t\t\t});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn changed;\n\t\t}, 'data still not set', 300);\n\n\t\truns(function() {\n\t\t\texpect(ctrl.element.value).toEqual(CHANGEVAL);\n\n\t\t\tctrl.element.value = LOADVAL;\n\t\t\tctrl.saveManager.save(function() {});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn ctrl.saveManager.isValidSave;\n\t\t}, 'still waiting for to set own data', 300);\n\n\t\truns(function() {\n\t\t\texpect(topApp.item.getValue('testItem.date')).toEqual(LOADVAL);\n\t\t});\n\t});\n\n\tit ('checkBox / checkbox should load and react to data change', function() {\n\n\t\tvar ctrl;\n\t\tvar innerMarkup = getInnerMarkup('CheckBox', 'bool', 'checkbox');\t\n\t\tvar dm = topApp.item;\n\n\t\tvar LOADVAL = true;\n\t\tvar CHANGEVAL = false;\n\t\tdm.set('innerMarkup', innerMarkup);\n\t\tdm.setValue('testItem.bool', LOADVAL);\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\tctrl = topApp.item.modules['childmod0'].item; \n\t\t\tvar originInfo = ctrl.getOriginInfo('model'); \n\t\t\texpect(originInfo.getBool()).toEqual(LOADVAL);\n\t\t\texpect(ctrl.element.checked).toEqual(LOADVAL);\n\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('.', CHANGEVAL);\n\t\t\tchanged = false;\n\t\t\toriginInfo.set(data, topApp.item, false, function() {\n\t\t\t\tchanged = true;\n\t\t\t});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn changed;\n\t\t}, 'data still not set', 300);\n\n\t\truns(function() {\n\t\t\texpect(ctrl.element.checked).toEqual(CHANGEVAL);\n\n\t\t\tctrl.element.checked = LOADVAL;\n\t\t\tctrl.saveManager.save(function() {});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn ctrl.saveManager.isValidSave;\n\t\t}, 'still waiting for to set own data', 300);\n\n\t\truns(function() {\n\t\t\texpect(topApp.item.getBool('testItem.bool')).toEqual(LOADVAL);\n\t\t});\n\t});\n\n\tit ('referenceTextInput should load and react to data change', function() {\n\n\t\tvar ctrl;\n\t\tvar innerMarkup = getInnerMarkup('ReferenceTextInput', 'referenceEmbedded', 'text');\t\n\t\tvar dm = topApp.item;\n\n\t\tvar LOADVAL = 'a1';\n\t\tvar CHANGEVAL = 'a2';\n\t\tdm.set('innerMarkup', innerMarkup);\n\t\tdm.setRef('testItem.referenceEmbedded', LOADVAL);\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\tctrl = topApp.item.modules['childmod0'].item; \n\t\t\tvar originInfo = ctrl.getOriginInfo('model'); \n\t\t\texpect(originInfo.getRef()).toEqual(LOADVAL);\n\t\t\texpect(ctrl.element.value).toEqual(LOADVAL);\n\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setRef('.', CHANGEVAL);\n\t\t\tchanged = false;\n\t\t\toriginInfo.set(data, topApp.item, false, function() {\n\t\t\t\tchanged = true;\n\t\t\t});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn changed;\n\t\t}, 'data still not set', 300);\n\n\t\truns(function() {\n\t\t\texpect(ctrl.element.value).toEqual(CHANGEVAL);\n\n\t\t\tctrl.element.value = LOADVAL;\n\t\t\tctrl.saveManager.save(function() {});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn ctrl.saveManager.isValidSave;\n\t\t}, 'still waiting for to set own data', 300);\n\n\t\truns(function() {\n\t\t\texpect(topApp.item.getRef('testItem.referenceEmbedded')).toEqual(LOADVAL);\n\t\t});\n\t});\n\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/controls/testInputControls.js"},{"key":"ext","val":"js"}]},{"key":"testShowControls","val":[{"key":"testCode","val":"\nvar topApp;\n/**\n * show and input controls should \n * - load\n * - react to data changes\n */\ndescribe('testShowControls', function () {\n\n\tfunction getInnerMarkup(control, testItemField, containerEle) {\n\t\tvar ctrl = new pebble.Pebble();\n\t\tctrl.setRef('.', 'standard:' + control);\n\t\tctrl.setRef('model._bind', 'testItem.' + testItemField);\n\t\t\n\t\tvar ele = new pebble.Pebble(containerEle);\n\t\tele.set('control', ctrl);\n\n\t\tvar innerMarkup = new pebble.Pebble();\n\t\tinnerMarkup.add('.', ele);\n\n\t\treturn innerMarkup;\n\t}\n\n\tit ('requires deployment and testAppControl', function() {\n\t\tvar ready = false;\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\ttopApp && topApp.kill();\n\t\t\t\ttopApp = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top');\n\t\t\t\ttopApp.load(function() {\n\t\t\t\t\tready = true;\t\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn ready;\n\t\t}, 'wait for deployment and testAppControl', 300);\n\n\t});\n\n\tit ('text should load and react to data change', function() {\n\n\t\tvar innerMarkup = getInnerMarkup('Text', 'text', 'div');\t\n\t\tvar dm = topApp.item;\n\t\tvar ctrl;\n\t\tvar LOADVAL = 'hello';\n\t\tvar CHANGEVAL = 'goodbye';\n\t\tdm.set('innerMarkup', innerMarkup);\n\t\tdm.setValue('testItem.text', LOADVAL);\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\tctrl = topApp.item.modules['childmod0'].item; \n\t\t\tvar originInfo = ctrl.getOriginInfo('model'); \n\t\t\texpect(originInfo.getValue()).toEqual(LOADVAL);\n\t\t\texpect(ctrl.element.innerHTML).toEqual(LOADVAL);\n\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('.', CHANGEVAL);\n\t\t\tchanged = false;\n\t\t\toriginInfo.set(data, topApp.item, false, function() {\n\t\t\t\tchanged = true;\n\t\t\t});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn changed;\n\t\t}, 'data still not set', 300);\n\n\t\truns(function() {\n\t\t\texpect(ctrl.element.innerHTML).toEqual(CHANGEVAL);\n\t\t});\n\t});\n\n\tit ('markup should load and react to data change', function() {\n\n\t\tvar innerMarkup = getInnerMarkup('Markup', 'markup', 'div');\t\n\t\tvar dm = topApp.item;\n\t\tvar ctrl;\n\t\tvar LOADVAL = '<div>hello</div>';\n\t\tvar CHANGEVAL = '<span>goodbye</span>';\n\t\tdm.set('innerMarkup', innerMarkup);\n\t\tdm.setMarkup('testItem.markup', LOADVAL);\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\tctrl = topApp.item.modules['childmod0'].item; \n\t\t\tvar originInfo = ctrl.getOriginInfo('model'); \n\t\t\texpect(originInfo.getValue()).toEqual(LOADVAL);\n\t\t\texpect(ctrl.element.innerHTML).toEqual(LOADVAL);\n\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setMarkup('.', CHANGEVAL);\n\t\t\tchanged = false;\n\t\t\toriginInfo.set(data, topApp.item, false, function() {\n\t\t\t\tchanged = true;\n\t\t\t});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn changed;\n\t\t}, 'data still not set', 300);\n\n\t\truns(function() {\n\t\t\texpect(ctrl.element.innerHTML).toEqual(CHANGEVAL);\n\t\t});\n\t});\n\n\n\tit ('dateShow should load and react to data change', function() {\n\n\t\tvar innerMarkup = getInnerMarkup('DateShow', 'date', 'ele');\t\n\t\tvar dm = topApp.item;\n\t\tvar ctrl;\n\t\tvar LOADVAL = 'hello';\n\t\tvar CHANGEVAL = 'goodbye';\n\t\tdm.set('innerMarkup', innerMarkup);\n\t\tdm.setValue('testItem.date', LOADVAL);\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\tctrl = topApp.item.modules['childmod0'].item; \n\t\t\tvar originInfo = ctrl.getOriginInfo('model'); \n\t\t\texpect(originInfo.getValue()).toEqual(LOADVAL);\n\t\t\texpect(ctrl.element.innerHTML).toEqual(LOADVAL);\n\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('.', CHANGEVAL);\n\t\t\tchanged = false;\n\t\t\toriginInfo.set(data, topApp.item, false, function() {\n\t\t\t\tchanged = true;\n\t\t\t});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\t\treturn changed;\n\t\t}, 'data still not set', 300);\n\n\t\truns(function() {\n\t\t\texpect(ctrl.element.innerHTML).toEqual(CHANGEVAL);\n\t\t});\n\t});\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/controls/testShowControls.js"},{"key":"ext","val":"js"}]},{"key":"expressionManager_spec","val":[{"key":"testCode","val":"\nvar topApp;\n\ndescribe('testExpression Binds', function () {\n\n\n\tvar o;\n\tvar ele = document.createElement('div');\n\tbeforeEach(function() {\n\t\to = new pebble.libs.standard.tags.Xp();\n\t});\n\n\tit ('can return binds specifiers (single)', function() {\n\t\tvar key1 = 'ctx.model';\n\t\tvar template = '{{' + key1 + '}}';\n\t\t//var template = 'this.aa.bb ctx.aa.bb mod2.aa.bb, item.@, item.@aa.bb, etc\n\t\tvar binds = o.getBinds(template, ele, null);\n\t\texpect(binds).toBeDefined();\n\t\texpect(Object.keys(binds).length).toEqual(1);\n\t\texpect(binds['ctx.model'].specifier).toEqual('ctx');\n\t\texpect(binds['ctx.model'].path).toEqual('model');\n\n\t});\n\n\tit ('can return binds specifiers (multiple)', function() {\n\t\tvar key1 = 'ctx.model';\n\t\tvar key2 = 'num1.number';\n\t\tvar template = '{{' + key1 + ' > ' + key2 + '}}';\n\t\t//var template = 'this.aa.bb ctx.aa.bb mod2.aa.bb, item.@, item.@aa.bb, etc\n\t\tvar binds = o.getBinds(template, ele, null);\n\t\texpect(binds).toBeDefined();\n\t\texpect(Object.keys(binds).length).toEqual(2);\n\t\texpect(binds[key1].specifier).toEqual('ctx');\n\t\texpect(binds[key1].path).toEqual('model');\n\t\texpect(binds[key2].specifier).toEqual('num1');\n\t\texpect(binds[key2].path).toEqual('number');\n\n\t});\n\n\tit ('can return binds specifiers (multiple expressions)', function() {\n\t\tvar key1 = 'ctx.model';\n\t\tvar key2 = 'num1.number';\n\t\tvar key3 = 'num2.number';\n\t\tvar template = '{{' + key1 + ' > ' + key2 + '}} and {{' + key3 + '}}';\n\t\tvar binds = o.getBinds(template, ele, null);\n\t\texpect(binds).toBeDefined();\n\t\texpect(Object.keys(binds).length).toEqual(3);\n\t\texpect(binds[key1].specifier).toEqual('ctx');\n\t\texpect(binds[key1].path).toEqual('model');\n\t\texpect(binds[key2].specifier).toEqual('num1');\n\t\texpect(binds[key2].path).toEqual('number');\n\t\texpect(binds[key3].specifier).toEqual('num2');\n\t\texpect(binds[key3].path).toEqual('number');\n\n\t});\n\t\n\tit ('can return binds specifiers (multiple expressions) and ignore duplicates', function() {\n\t\tvar key1 = 'ctx.model';\n\t\tvar key2 = 'num1.number';\n\t\tvar key3 = 'num2.number';\n\t\tvar template = '{{' + key1 + ' > ' + key2 + '}} and {{' + key1 + ' > ' + key3 + '}}';\n\t\tvar binds = o.getBinds(template, ele, null);\n\t\texpect(Object.keys(binds).length).toEqual(3);\n\t\texpect(binds[key1].specifier).toEqual('ctx');\n\t\texpect(binds[key1].path).toEqual('model');\n\t\texpect(binds[key2].specifier).toEqual('num1');\n\t\texpect(binds[key2].path).toEqual('number');\n\t\texpect(binds[key3].specifier).toEqual('num2');\n\t\texpect(binds[key3].path).toEqual('number');\n\n\t});\n\n\n});\n\n\n\ndescribe('testExpression getDeployment', function () {\n\n\tit ('requires deployment and testAppControl', function() {\n\t\tvar ready = false;\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\ttopApp && topApp.kill();\n\t\t\t\ttopApp = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top');\n\t\t\t\ttopApp.load(function() {\n\t\t\t\t\tready = true;\t\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn ready;\n\t\t}, 'wait for deployment and testAppControl', 300);\n\t});\n});\n\ndescribe('testExpression', function () {\n\n\tfunction getInnerMarkup() {\n\t\t\n\t\tvar innerMarkup = new pebble.Pebble();\n\n\t\tvar ctrl1 = new pebble.Pebble();\n\t\tctrl1.setRef('.', 'standard:TextInput');\n\t\tctrl1.setRef('model._bind', 'model.testItem.text');\n\t\t\n\t\tvar div1 = new pebble.Pebble('div');\n\t\tdiv1.set('control', ctrl1);\n\n\t\tinnerMarkup.add('.', div1);\n\n\t\tvar ctrl2 = new pebble.Pebble();\n\t\tctrl2.setRef('.', 'standard:Text');\n\t\tctrl2.setValue('model', '{{ctx.model.testItem.number + ctx.model.testItem.text }}');\n\t\t\n\t\tvar div2 = new pebble.Pebble('div');\n\t\tdiv2.set('control', ctrl2);\n\n\t\tinnerMarkup.add('.', div2);\n\n\t\treturn innerMarkup;\n\t}\n\n\tbeforeEach(function() {\n\n\t\tvar innerMarkup = getInnerMarkup();\t\n\t\tvar dm = topApp.item;\n\t\tdm.set('innerMarkup', innerMarkup);\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\t});\n\n\tafterEach(function() {\n\n\t});\n\n\tit ('should be able to load simple', function() {\n\n\t\truns(function() {\n\t\t\t//normal\t\n\t\t\tvar textInput = topApp.item.modules['childmod0'].item; \n\t\t\tvar text = topApp.item.modules['childmod1'].item; \n\t\t\t\n\t\t\texpect(textInput.element.value).toEqual('hello');\n\t\t\texpect(text.element.innerHTML).toEqual('10hello');\n\n\t\t});\n\t});\n\n\tit ('should be able to respond and set', function() {\n\n\t\tvar textInput = topApp.item.modules['childmod0'].item; \n\t\tvar text = topApp.item.modules['childmod1'].item; \n\t\t\n\t\tvar returned = false;\n\t\truns(function() {\n\t\t\t\n\t\t  var originInfo = textInput.getOriginInfo('model');\n\t\t  var data = new pebble.Pebble();\n\t\t  data.setValue('.', 'goodbye');\n\t\t  originInfo.set(data, null, false, function () {\n\t\t\t  returned = true;\t\n\t\t\t});\t\n\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'did not load', 300);\n\n\t\truns(function() {\n\t\t\texpect(text.element.innerHTML).toEqual('10goodbye');\n\n\t\t});\n\t});\n\n});\n\ndescribe('testExpression on triggers', function () {\n\n\tfunction getInnerMarkupTriggers() {\n\t\t\n\t\tvar innerMarkup = new pebble.Pebble();\n\n\t\tvar ctrl1 = new pebble.Pebble();\n\t\tctrl1.setRef('.', 'standard:TextInput');\n\t\tctrl1.setRef('model._bind', 'model.testItem.text');\n\t\t\n\t\tvar div1 = new pebble.Pebble('div');\n\t\tdiv1.set('control', ctrl1);\n\n\t\tinnerMarkup.add('.', div1);\n\n\t\tvar ctrl2 = new pebble.Pebble();\n\t\tctrl2.setRef('.', 'standard:Text');\n\t\tctrl2.setValue('model', '{{ctx.model.testItem.number + ctx.model.testItem.text }}');\n\t\tctrl2.setRef('triggers.mytrig', 'this.setClass');\n\t\tctrl2.setValue('triggers.mytrig.class', '{{ctx.model.testItem.text == \"hello\" && \"active\"}}');\n\t\t\n\t\tvar div2 = new pebble.Pebble('div');\n\t\tdiv2.set('control', ctrl2);\n\n\t\tinnerMarkup.add('.', div2);\n\n\t\treturn innerMarkup;\n\t}\n\n\tbeforeEach(function() {\n\t\tvar innerMarkup = getInnerMarkupTriggers();\t\n\t\tvar dm = topApp.item;\n\t\tdm.set('innerMarkup', innerMarkup);\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\t});\n\n\tafterEach(function() {\n\n\t});\n\n\tit ('should be able to load', function() {\n\n\t\truns(function() {\n\t\t\t//normal\t\n\t\t\tvar textInput = topApp.item.modules['childmod0'].item; \n\t\t\tvar text = topApp.item.modules['childmod1'].item; \n\t\t\t\n\t\t\texpect(textInput.element.value).toEqual('goodbye');\n\t\t\texpect(text.element.innerHTML).toEqual('10goodbye');\n\n\t\t});\n\t});\n\n\tit ('should be able to respond and set', function() {\n\n\t\tvar textInput = topApp.item.modules['childmod0'].item; \n\t\tvar text = topApp.item.modules['childmod1'].item; \n\t\t\n\t\tvar returned = false;\n\t\truns(function() {\n\t\t\t\n\t\t  var originInfo = textInput.getOriginInfo('model');\n\t\t  var data = new pebble.Pebble();\n\t\t  data.setValue('.', 'hello');\n\t\t\tspyOn(text, 'setClass').andCallThrough();\n\t\t  originInfo.set(data, null, false, function () {\n\t\t\t  returned = true;\t\n\t\t\t});\t\n\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'did not load', 300);\n\n\t\truns(function() {\n\t\t\texpect(text.setClass).toHaveBeenCalled();\n\t\t\texpect(text.setClass.calls.length).toEqual(1);\n\t\t\texpect(text.element.className).toEqual('active');\n\n\t\t});\n\t});\n\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/lib/client/expressionManager_spec.js"},{"key":"ext","val":"js"}]},{"key":"innerMarkupManager_spec","val":[{"key":"testCode","val":"describe('InnerMarkupManager', function () {\n\n\n\tvar o, ele;\n\tbeforeEach(function() {\n\t\tele = document.createElement('div');\n\t\to = new pebble.libs.standard.InnerMarkupManager();\n\t});\n\n\tit ('can bind to inner text', function() {\n\t\tvar innerMarkup = new pebble.Pebble('innerMarkup');\n\t\tinnerMarkup.setValue('div', '{{path.to.data}}');\n\t\tinnerMarkup.setAttribute('div', 'class', 'aaa bbb');\n\n\t\tvar component = o._hookInnerHtml(innerMarkup, ele, null);\n\t\tvar points = component.points['path.to.data'];\n\t\texpect(points).toBeDefined();\n\t\texpect(points.length).toEqual(1);\n\t\tvar el = component.elements['0'];\n\t\texpect(el).not.toBeNull();\n\t\texpect(el.tagName.toUpperCase()).toEqual('DIV');\n\t});\n\n\tit ('can bind to multiple items in inner text', function() {\n\t\tvar innerMarkup = new pebble.Pebble('innerMarkup');\n\t\tinnerMarkup.setValue('div', 'blah blah {{path.to.data}} blah blah {{another.path}}');\n\t\tvar component = o._hookInnerHtml(innerMarkup, ele, null);\n\t\tvar points1 = component.points['path.to.data'];\n\t\tvar points2 = component.points['another.path'];\n\t\texpect(points1.length).toEqual(1);\n\t\texpect(points2.length).toEqual(1);\n\t});\n\t\n\tit ('can bind to both inner text and property', function() {\n\t\tvar innerMarkup = new pebble.Pebble('innerMarkup');\n\t\tinnerMarkup.setValue('div', '{{path.to.data}}');\n\t\tinnerMarkup.setAttribute('div', 'title', '{{path.to.data}}');\n\t\tvar component = o._hookInnerHtml(innerMarkup, ele, null);\n\t\tvar points = component.points['path.to.data'];\n\t\texpect(points).toBeDefined();\n\t\texpect(points.length).toEqual(2);\n\t\texpect(component.elements['0']).not.toBeNull();\n\t});\n\n\tit ('can bind to multiple items in on property', function() {\n\t\tvar innerMarkup = new pebble.Pebble('innerMarkup');\n\t\tinnerMarkup.setValue('div','{{path.to.data}}'); \n\t\tinnerMarkup.setAttribute('div', 'title', 'something-before{{path.to.data}}something-after{{path.to.data}}blah');\n\t\tvar component = o._hookInnerHtml(innerMarkup, ele, null);\n\t\tvar points = component.points['path.to.data'];\n\t\texpect(points).toBeDefined();\n\t\texpect(points.length).toEqual(3);\n\t\texpect(component.elements['0']).not.toBeNull();\n\t});\n\t\n\tit ('can find custom controls', function() {\n\t\tvar innerMarkup = new pebble.Pebble('innerMarkup');\n\t\tinnerMarkup.setValue('span', 'blah');\n\t\tinnerMarkup.setAttribute('control', 'id', 'id');\n\t\tvar component = o._hookInnerHtml(innerMarkup, ele, null);\n\t\texpect(component.childMods['id']).not.toBeNull();\n\t});\n\n\tit ('will ignore nested items (ie. in a container)', function() {\n\t\tvar innerMarkup = new pebble.Pebble('innerMarkup');\n\t\tinnerMarkup.setAttribute('div.control.model.a0.control', 'id', 'id1');\n\t\tinnerMarkup.setAttribute('div.control', 'id', 'id');\n\t\tinnerMarkup.setAttribute('div.control', 'k', 'aaa.bbb');\n\t\tinnerMarkup.setAttribute('div.onclick', '{{path.to.data}}');\n\t\tvar component = o._hookInnerHtml(innerMarkup, ele, null);\n\t\texpect(component.childMods['id']).not.toBeNull();\n\t\texpect(component.childMods['id1']).not.toBeDefined();\n\t\texpect(component.elements['id']).not.toBeNull();\n\t});\n\n\tit ('can find multiple custom controls', function() {\n\t\tvar innerMarkup = new pebble.Pebble('innerMarkup');\n\t\tinnerMarkup.setAttribute('div.control.model.a0.control', 'id1', 'id');\n\t\tinnerMarkup.setAttribute('div.control', 'id', 'id');\n\t\tinnerMarkup.setAttribute('div', 'onclick', '{{path.to.data}}');\n\n\t\tvar div2 = new pebble.Pebble('div');\n\t\tdiv2.setAttribute('control', 'id', 'id3');\n\t\tinnerMarkup.add('.', div2);\n\n\t\tvar component = o._hookInnerHtml(innerMarkup, ele, null);\n\t\texpect(component.childMods['id']).not.toBeNull();\n\t\texpect(component.childMods['id3']).not.toBeNull();\n\t});\n\n\tit ('can handle multiple properties', function() {\n\t\tvar innerMarkup = new pebble.Pebble('innerMarkup');\n\t\tinnerMarkup.setAttribute('div', 'class', '{{listCss.class}}');\n\t\tinnerMarkup.setAttribute('div', 'style', '\\'white-space:nowrap;\\'');\n\t\tinnerMarkup.setAttribute('div', 'wins', '{{model}}');\n\t\tvar component = o._hookInnerHtml(innerMarkup, ele, null);\n\t});\n\n\tit ('can bind with no tags', function() {\n\t\tvar innerMarkup = new pebble.Pebble('innerMarkup');\n\t\tinnerMarkup.setValue('.', '{{path.to.data}}');\n\t\tvar component = o._hookInnerHtml(innerMarkup, ele, null);\n\t\tvar points = component.points['path.to.data'];\n\t\texpect(points).toBeDefined();\n\t\texpect(points.length).toEqual(1);\n\t\tvar el = component.elements['0'];\n\t\texpect(el).not.toBeNull();\n\t});\n\n\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/lib/client/innerMarkupManager_spec.js"},{"key":"ext","val":"js"}]},{"key":"testArrayLocalFilter","val":[{"key":"testCode","val":"/**\n * test local filter \n * \n * test filters, filters on searchText change\n *\n * test pages set\n *\n * test page changed on page selection\n */\n\nvar topApp, returned, ctrl1, ctrl2, ctrl3;\n\ndescribe('testArrayLocalFilter', function () {\n\n\tfunction getInnerMarkup(bindPoint) {\n\t\tvar ctrl1 = new pebble.Pebble();\n\t\tctrl1.setRef('.', 'standard:ArrayControl');\n\t\tctrl1.setRef('model._bind', bindPoint);\n\t\t\n\t\tvar control1 = new pebble.Pebble();\n\t\tcontrol1.setRef('.', 'standard:TextInput');\n\t\t//control1.setRef('model._bind', 'model');\n\t\t\n\t\tvar embData = new pebble.Pebble();\n\t\tembData.setValue('a0.text', 'embData0');\n\t\tembData.setValue('a1.text', 'embData1');\n\t\tembData.setValue('a2.text', 'embData2');\n\t\tembData.setValue('a3.text', 'embData3');\n\t\tembData.setValue('a4.text', 'embData4');\n\n\t\tctrl1.set('model', embData);\n\n\t\tvar displayControl1 = new pebble.Pebble();\n\t\tdisplayControl1.setRef('mapPath', 'text');\n\t\tdisplayControl1.set('innerMarkup.control', control1);\n\n\t\tctrl1.set('childElement.input', new pebble.Pebble());\n\t\tctrl1.setAttribute('childElement.input', 'type', 'text');\n\t\tctrl1.set('displayControl', displayControl1);\n\t\tctrl1.setRef('triggers.trig', 'this.applyLocalFilter');\n\t\tctrl1.setValue('triggers.trig.showRecsFilter', '{{\"item.text\".indexOf(ctx.searchText) == 0}}'); \n\t\t//ctrl1.setValue('triggers.trig.showRecsFilter', '{{\"item.text\" == ctx.searchText}}'); \n\n\t\tvar filter1 = new pebble.Pebble();\n\t\tfilter1.setValue('.', '{{\"item.text\" == \"embData0\" || \"item.text\" == \"embData2\"}}');\n\t\tctrl1.set('showRecsFilter', filter1);\n\n\t\tvar div1 = new pebble.Pebble('div');\n\t\tdiv1.set('control', ctrl1);\n\n\t\tvar innerMarkup = new pebble.Pebble();\n\t\tinnerMarkup.add('.', div1);\n\n\t\tvar ctrl2 = new pebble.Pebble();\n\t\tctrl2.setRef('.', 'standard:ArrayControl');\n\t\tctrl2.setRef('model._bind', bindPoint);\n\t\t\n\t\tvar displayControl2 = new pebble.Pebble();\n\t\tdisplayControl2.setValue('innerMarkup', '{{item.text}}');\n\n\t\tctrl2.set('childElement.div', new pebble.Pebble());\n\t\tctrl2.set('displayControl', displayControl2);\n\n\t\tvar filter2 = new pebble.Pebble();\n\t\tfilter2.setValue('.', '{{item._selection.groupB.selected}}');\n\t\tctrl2.set('showRecsFilter', filter2);\n\n\t\tvar div2 = new pebble.Pebble('div');\n\t\tdiv2.set('control', ctrl2);\n\n\t\tinnerMarkup.add('.', div2);\n\n\t\t//searchbox\n\t\tvar ctrl3 = new pebble.Pebble();\n\t\tctrl3.setAttribute('.', 'id', 'searchBox');\n\t\tctrl3.setRef('.', 'standard:TextInput');\n\t\tctrl3.setRef('model._bind', 'searchText');\n\n\t\tvar div3 = new pebble.Pebble('div');\n\t\tdiv3.set('control', ctrl3);\n\n\t\tinnerMarkup.add('.', div3);\n\n\t\treturn innerMarkup;\n\t}\n\n\tbeforeEach(function() {\n\n\t\tvar ready = false;\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\ttopApp && topApp.kill();\n\t\t\t\ttopApp = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top');\n\t\t\t\ttopApp.load(function() {\n\n\t\t\t\t\tvar innerMarkup = getInnerMarkup('model.testEmbItems');\t\n\t\t\t\t\tvar dm = topApp.item;\n\n\t\t\t\t\tdm.set('innerMarkup', innerMarkup);\n\n\t\t\t\t\truns(function() {\n\t\t\t\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\t\t\t\ttopApp.getItem(dm, function() {\n\n\t\t\t\t\t\t\tctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\t\t\t\t\tctrl2 = topApp.item.modules['childmod1'].item; \n\t\t\t\t\t\t\tctrl3 = topApp.item.getModById('searchBox').item; \n\t\t\t\t\t\t\tready = ctrl1 && ctrl2 && ctrl3;\t\n\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn ready;\n\t\t}, 'wait for deployment and testAppControl', 300);\n\n\t});\n\n\t\n\tit ('should apply filter (showRecsFilter) on load and trigger filter on condition change', function() {\n\t\t\n\t\tvar returned1, returned2;\n\n\t\truns(function() {\n\n\t\t\texpect(ctrl1.showRecs.length).toEqual(2);\n\t\t\texpect(ctrl2.showRecs.length).toEqual(0);\n\t\t\t\n\t\t\tspyOn(ctrl1, 'applyLocalFilter').andCallThrough();\n\t\t\t\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('.', 'embData2');\n\n\t\t\treturned = false;\n\t\t\tctrl3.getOriginInfo('model').set(data, null, false, function() {\n\t\t\t\treturned = true;\n\t\t\t});\n\t\t\t\t\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\n\t\t\texpect(ctrl1.applyLocalFilter).toHaveBeenCalled();\n\t\t\texpect(ctrl1.applyLocalFilter.calls.length).toEqual(1);\n\n\t\t\texpect(ctrl1.showRecs.length).toEqual(1);\n\n\t\t});\n\t});\n\n\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/lib/client/testArrayLocalFilter.js"},{"key":"ext","val":"js"}]},{"key":"testArrayPages","val":[{"key":"testCode","val":"\nvar topApp, returned, ctrl1, ctrl2, ctrl3;\n\ndescribe('testArrayPages', function () {\n/**\n * test array pages\n * \n * test filters, filters on searchText change\n *\n * test pages set\n *\n * test page changed on page selection\n */\n\n\t\tvar embData = new pebble.Pebble();\n\t\tembData.setValue('a0.text', 'embData0');\n\t\tembData.setValue('a1.text', 'embData1');\n\t\tembData.setValue('a2.text', 'embData2');\n\t\tembData.setValue('a3.text', 'embData3');\n\t\tembData.setValue('a4.text', 'embData4');\n\t\tembData.setValue('a5.text', 'embData5');\n\t\tembData.setValue('a6.text', 'embData6');\n\t\tembData.setValue('a7.text', 'embData7');\n\t\tembData.setValue('a8.text', 'embData8');\n\t\tembData.setValue('a9.text', 'embData9');\n\t\tembData.setValue('a10.text', 'embData10');\n\t\tembData.setValue('a11.text', 'embData11');\n\t\tembData.setValue('a12.text', 'embData12');\n\t\tembData.setValue('a13.text', 'embData13');\n\t\tembData.setValue('a14.text', 'embData14');\n\t\tembData.setValue('a15.text', 'embData15');\n\t\tembData.setValue('a16.text', 'embData16');\n\t\tembData.setValue('a17.text', 'embData17');\n\t\tembData.setValue('a18.text', 'embData18');\n\t\tembData.setValue('a19.text', 'embData19');\n\t\tembData.setValue('a20.text', 'embData20');\n\t\tembData.setValue('a21.text', 'embData21');\n\t\tembData.setValue('a22.text', 'embData22');\n\t\tembData.setValue('a23.text', 'embData23');\n\t\tembData.setValue('a24.text', 'embData24');\n\t\tembData.setValue('a25.text', 'embData25');\n\t\tembData.setValue('a26.text', 'embData26');\n\t\tembData.setValue('a27.text', 'embData27');\n\t\tembData.setValue('a28.text', 'embData28');\n\t\tembData.setValue('a29.text', 'embData29');\n\t\tembData.setValue('a30.text', 'embData30');\n\t\tembData.setValue('a31.text', 'embData31');\n\t\tembData.setValue('a32.text', 'embData32');\n\t\tembData.setValue('a33.text', 'embData33');\n\t\tembData.setValue('a34.text', 'embData34');\n\t\tembData.setValue('a35.text', 'embData35');\n\t\tembData.setValue('a36.text', 'embData36');\n\t\tembData.setValue('a37.text', 'embData37');\n\t\tembData.setValue('a38.text', 'embData38');\n\t\tembData.setValue('a39.text', 'embData39');\n\t\tembData.setValue('a40.text', 'embData40');\n\t\tembData.setValue('a41.text', 'embData41');\n\n\tfunction getInnerMarkup() {\n\n\t\tvar pagesBindPoint = \"pages\";\n\n\t\tvar ctrl1 = new pebble.Pebble();\n\t\tctrl1.setRef('.', 'standard:ArrayControl');\n\t\tctrl1.setRef('model._bind', \"memoryArray\");\n\t\tctrl1.setRef('arrayPages_._bind', pagesBindPoint);\n\t\tctrl1.setValue('itemsPerPage', 5);\n\t\t\n\t\tvar control1 = new pebble.Pebble();\n\t\tcontrol1.setRef('.', 'standard:TextInput');\n\n\t\tctrl1.set('model', embData);\n\n\t\tvar displayControl1 = new pebble.Pebble();\n\t\tdisplayControl1.setRef('mapPath', 'text');\n\t\tdisplayControl1.set('innerMarkup.control', control1);\n\n\t\tctrl1.set('childElement.input', new pebble.Pebble());\n\t\tctrl1.setAttribute('childElement.input', 'type', 'text');\n\t\tctrl1.set('displayControl', displayControl1);\n\t\t//ctrl1.setRef('triggers.trig', 'this.applyLocalFilter');\n\t\t//ctrl1.setValue('triggers.trig.showRecsFilter', '{{\"item.text\".indexOf(ctx.searchText) == 0}}'); \n\t\t//ctrl1.setValue('triggers.trig.showRecsFilter', '{{\"item.text\" == ctx.searchText}}'); \n\n\t\t//var filter1 = new pebble.Pebble();\n\t\t//filter1.setValue('.', '{{\"item.text\" == \"embData0\" || \"item.text\" == \"embData2\"}}');\n\t\t//ctrl1.set('showRecsFilter', filter1);\n\n\t\tvar div1 = new pebble.Pebble('div');\n\t\tdiv1.set('control', ctrl1);\n\n\t\tvar innerMarkup = new pebble.Pebble();\n\t\tinnerMarkup.add('.', div1);\n\n\t\tvar ctrl2 = new pebble.Pebble();\n\t\tctrl2.setAttribute('.', 'id', 'pageControl');\n\t\tctrl2.setRef('.', 'standard:ArrayControl');\n\t\tctrl2.setRef('model._bind', pagesBindPoint);\n\t\t\n\t\tvar displayControl2 = new pebble.Pebble();\n\t\tdisplayControl2.setValue('innerMarkup', '{{item.pageNumber}}');\n\n\t\tctrl2.set('childElement.div', new pebble.Pebble());\n\t\tctrl2.set('displayControl', displayControl2);\n\n\t\tvar div2 = new pebble.Pebble('div');\n\t\tdiv2.set('control', ctrl2);\n\n\t\tinnerMarkup.add('.', div2);\n\n\t\t//searchbox\n\t\tvar ctrl3 = new pebble.Pebble();\n\t\tctrl3.setAttribute('.', 'id', 'searchBox');\n\t\tctrl3.setRef('.', 'standard:TextInput');\n\t\tctrl3.setRef('model._bind', 'searchText');\n\n\t\tvar div3 = new pebble.Pebble('div');\n\t\tdiv3.set('control', ctrl3);\n\n\t\tinnerMarkup.add('.', div3);\n\n\t\treturn innerMarkup;\n\t}\n\n\tbeforeEach(function() {\n\t\t\n\t\tvar ready = false;\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\ttopApp && topApp.kill();\n\t\t\t\ttopApp = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top');\n\t\t\t\ttopApp.load(function() {\n\n\t\t\t\t\tvar innerMarkup = getInnerMarkup();\t\n\t\t\t\t\tvar dm = topApp.item;\n\n\t\t\t\t\tdm.set('innerMarkup', innerMarkup);\n\n\t\t\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\t\t\ttopApp.getItem(dm, function() {\n\n\t\t\t\t\t\tctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\t\t\t\tctrl2 = topApp.item.modules['childmod1'].item; \n\t\t\t\t\t\tctrl3 = topApp.item.getModById('searchBox').item; \n\t\t\t\t\t\tready = ctrl1 && ctrl2 && ctrl3;\t\n\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn ready;\n\t\t}, 'wait for deployment and testAppControl', 300);\n\n\t});\n\n\t\n\tit ('should apply filter (showRecsFilter) on load and trigger filter on condition change', function() {\n\t\t\n\t\truns(function() {\n\n\t\t\t//showRecs is the recs from local filter\n\t\t\texpect(ctrl1.showRecs.length).toEqual(42);\n\n\t\t\t//displayed recs\n\t\t\texpect(ctrl1.element.childNodes.length).toEqual(5);\n\n\t\t\t//pages\n\t\t\texpect(ctrl2.showRecs.length).toEqual(9);\n\n\t\t\t//expect first selected on load\n\t\t\texpect(ctrl2.getSingleSelectedMeta()).toEqual('a0');\n\t\t\t\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('.', 'embData2');\n\n\t\t\treturned = false;\n\n\t\t\t//select 3nd page\n\t\t\tctrl2.setSelectedItem('a8', function() {\n\t\t\t\treturned = true;\n\t\t\t});\n\t\t\t\t\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\t\n\t\t\texpect(ctrl2.getSingleSelectedMeta()).toEqual('a8');\n\t\t\texpect(ctrl1.element.childNodes.length).toEqual(2);\n\n\t\t});\n\t});\n\t\n\tit ('can selectNext and selectPrev', function() {\n\t\t\n\t\tvar returned;\n\n\t\truns(function() {\n\n\t\t\t//showRecs is the recs from local filter\n\t\t\texpect(ctrl1.showRecs.length).toEqual(42);\n\t\t\t\n\t\t\t//displayed recs\n\t\t\texpect(ctrl1.element.childNodes.length).toEqual(5);\n\n\t\t\t//pages\n\t\t\texpect(ctrl2.showRecs.length).toEqual(9);\n\n\t\t\tobj = new pebble.Pebble();\n\t\t\tvar params = obj.getParams();\n\t\t\tparams.setRef('.', 'this.selectNext');\n\t\t\tobj.setCallback(function() {\n\t\t\t\treturned = true;\n\t\t\t});\n\t\t\tctrl2.resolve(obj);\n\t\t\t\t\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\t\n\t\t\texpect(ctrl2.getSingleSelectedMeta()).toEqual('a1');\n\t\t\t\n\t\t\tobj = new pebble.Pebble();\n\t\t\tvar params = obj.getParams();\n\t\t\tparams.setRef('.', 'this.selectPrev');\n\t\t\tobj.setCallback(function() {\n\t\t\t\treturned = true;\n\t\t\t});\n\t\t\tctrl2.resolve(obj);\n\n\t\t});\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\t\n\t\t\texpect(ctrl2.getSingleSelectedMeta()).toEqual('a0');\n\t\t\t\n\t\t});\n\t});\n\n\tit ('can selectFirst and selectLast', function() {\n\t\t\n\t\tvar returned;\n\n\t\truns(function() {\n\n\t\t\t//showRecs is the recs from local filter\n\t\t\texpect(ctrl1.showRecs.length).toEqual(42);\n\t\t\t\n\t\t\t//displayed recs\n\t\t\texpect(ctrl1.element.childNodes.length).toEqual(5);\n\n\t\t\t//pages\n\t\t\texpect(ctrl2.showRecs.length).toEqual(9);\n\n\t\t\tobj = new pebble.Pebble();\n\t\t\tvar params = obj.getParams();\n\t\t\tparams.setRef('.', 'this.selectLast');\n\t\t\tobj.setCallback(function() {\n\t\t\t\treturned = true;\n\t\t\t});\n\t\t\tctrl2.resolve(obj);\n\t\t\t\t\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\t\n\t\t\texpect(ctrl2.getSingleSelectedMeta()).toEqual('a8');\n\t\t\t\n\t\t\tobj = new pebble.Pebble();\n\t\t\tvar params = obj.getParams();\n\t\t\tparams.setRef('.', 'this.selectFirst');\n\t\t\tobj.setCallback(function() {\n\t\t\t\treturned = true;\n\t\t\t});\n\t\t\tctrl2.resolve(obj);\n\n\t\t});\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\t\n\t\t\texpect(ctrl2.getSingleSelectedMeta()).toEqual('a0');\n\n\t\t});\n\t});\n\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/lib/client/testArrayPages.js"},{"key":"ext","val":"js"}]},{"key":"testRealTime","val":[{"key":"testCode","val":"describe('testRealTime', function () {\n\n\tfunction getInnerMarkup_emb(bindPoint) {\n\t\tvar ctrl1 = new pebble.Pebble();\n\t\tctrl1.setRef('.', 'standard:ArrayTreeBase');\n\t\tctrl1.setRef('model._bind', bindPoint);\n\t\t//ctrl1.setRef('onSelected.exec', 'this.save');\n\n\t\tvar div1 = new pebble.Pebble('div');\n\t\tdiv1.set('control', ctrl1);\n\n\t\tvar innerMarkup = new pebble.Pebble();\n\t\tinnerMarkup.add('.', div1);\n\n\t\tvar ctrl2 = new pebble.Pebble();\n\t\tctrl2.setRef('.', 'standard:ArrayTreeBase');\n\t\tctrl2.setRef('model._bind', bindPoint);\n\t\t\n\t\tvar embData = new pebble.Pebble();\n\t\tembData.setValue('a0.text', 'embData1');\n\t\tembData.setValue('a1.text', 'embData2');\n\n\t\tctrl2.set('model', embData);\n\n\t\tvar div2 = new pebble.Pebble('div');\n\t\tdiv2.set('control', ctrl2);\n\n\t\tinnerMarkup.add('.', div2);\n\n\t\treturn innerMarkup;\n\t}\n\t\n\tbeforeEach(function() {\n\n\t});\n\tafterEach(function() {\n\n\t});\n\n\tvar topApp1, topApp2;\n\n\tit ('requires two top controls', function() {\n\t\t\n\n\t\tvar ready1 = false;\n\t\tvar ready2 = false;\n\t\tpebble.testServer.sessions = {};//all the previous ones dont clear\n\t\tpebble.testServer.sessionCount = 0;\n\n\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\t\n\t\t\t\ttopApp1 = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top1');\n\t\t\t\ttopApp1.load(function() {\n\t\t\t\t\tready1 = true;\t\n\t\t\t\t});\n\n\t\t\t\ttopApp2 = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top2');\n\t\t\t\ttopApp2.load(function() {\n\t\t\t\t\tready2 = true;\t\n\t\t\t\t});\n\t\t\t\t\n\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn ready1 && ready2;\n\t\t}, 'wait', 600);\n\n\t\truns(function() {\n\n\t\t\texpect(pebble.testServer.sessionCount).toEqual(2);\n\n\t\t});\n\t});\n\n\tit ('arrayEmbedded', function() {\n\n\t\tvar innerMarkup = getInnerMarkup_emb('model.testEmbItems');\t\n\t\tvar dm = topApp.item;\n\n\t\tdm.set('innerMarkup', innerMarkup);\n\n\t\truns(function() {\n\t\t\ttopApp1.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp1.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\t\t\tvar ctrl1 = topApp1.item.modules['childmod0'].item; \n\n\t\t\tvar originInfo = ctrl1.getOriginInfo('model');\n\t\t\texpect(originInfo.getThisType().getRef('arrayFormId').split('.').pop()).toEqual('testItem');\n\n\t\t});\n\t\t\n\t});\n\t\n\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/lib/client/testRealTime.js"},{"key":"ext","val":"js"}]},{"key":"testSelection","val":[{"key":"testCode","val":"/** testBasicMultiselect \n *\n * Test basic multiselect operations such as, delete / update selected, change\n * group, get group The implementation is based on \n * - setMultiSelect, deleteGroup, etc.\n * - _selection.group specification: (selectedMetas, count) \n *\n * Setup: Two arrayControls bound to the same array where multiSelect,\n * updateGroup, deleteGroup, getGroup are tested\n */\n\nvar topApp, returned, ctrl1;\n\ndescribe('testSelection', function () {\n\n\tfunction getInnerMarkup_emb(bindPoint) {\n\t\tvar ctrl1 = new pebble.Pebble();\n\t\tctrl1.setRef('.', 'standard:ArrayControl');\n\t\tctrl1.setRef('model._bind', bindPoint);\n\t\t\n\t\tvar control1 = new pebble.Pebble();\n\t\tcontrol1.setRef('.', 'standard:TextInput');\n\t\tcontrol1.setRef('model._bind', 'model');\n\n\t\tvar displayControl1 = new pebble.Pebble();\n\t\tdisplayControl1.setRef('mapPath', 'text');\n\t\tdisplayControl1.set('innerMarkup.control', control1);\n\n\t\tctrl1.set('childElement.input', new pebble.Pebble());\n\t\tctrl1.setAttribute('childElement.input', 'type', 'text');\n\t\tctrl1.set('displayControl', displayControl1);\n\n\t\tvar div1 = new pebble.Pebble('div');\n\t\tdiv1.set('control', ctrl1);\n\n\t\tvar innerMarkup = new pebble.Pebble();\n\t\tinnerMarkup.add('.', div1);\n\n\t\tvar ctrl2 = new pebble.Pebble();\n\t\tctrl2.setRef('.', 'standard:ArrayControl');\n\t\tctrl2.setRef('model._bind', bindPoint);\n\t\t\n\t\tvar displayControl2 = new pebble.Pebble();\n\t\tdisplayControl2.setValue('innerMarkup', '{{item.text}}');\n\n\t\tctrl2.set('childElement.div', new pebble.Pebble());\n\t\tctrl2.set('displayControl', displayControl2);\n\n\t\tvar div2 = new pebble.Pebble('div');\n\t\tdiv2.set('control', ctrl2);\n\n\t\tinnerMarkup.add('.', div2);\n\n\t\treturn innerMarkup;\n\t}\n\n\tbeforeEach(function() {\n\n\t\tvar ready = false;\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\ttopApp && topApp.kill();\n\t\t\t\ttopApp = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top');\n\t\t\t\ttopApp.load(function() {\n\t\t\t\t\tvar innerMarkup = getInnerMarkup_emb('model.testEmbItems');\t\n\t\t\t\t\tvar dm = topApp.item;\n\n\t\t\t\t\tdm.set('innerMarkup', innerMarkup);\n\n\t\t\t\t\treturned = false;\n\t\t\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\t\t\ttopApp.getItem(dm, function() {\n\n\t\t\t\t\t\tctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\t\t\t\tctrl2 = topApp.item.modules['childmod1'].item; \n\t\t\t\t\t\tready = true;\t\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t\t\n\t\t\twaitsFor(function() {\n\t\t\t\treturn ready;\t \n\t\t\t}, 'deployment or ctx did not load', 300);\n\n\t\t});\n\n\t});\n\n\tit ('multiSelect should toggle', function() {\n\n\t\truns(function() {\n\t\t\treturned = false;\n\t\t\tctrl1.setMultipleSelectedItem('a1', 'groupA', function() {\n\n\t\t\t\treturned = true;\n\n\t\t\t});\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'ctx did not load', 300);\n\t\t\n\t\truns(function() {\n\n\t\t\texpect(ctrl1.getOriginInfo('model.a1._selection.groupA.selected').getBool()).toEqual(true);\n\t\t\texpect(ctrl1.getOriginInfo('model._selection.groupA.metas.a1').get()).not.toBe(null);\n\t\t\texpect(ctrl1.getOriginInfo('model._selection.groupA.count').getInt()).toEqual(1);\n\t\t\t\t\n\t\t\treturned = false;\n\t\t\tctrl1.setMultipleSelectedItem('a1', 'groupA', function() {\n\n\t\t\t\treturned = true;\n\n\t\t\t});\n\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'ctx did not load', 300);\n\t\t\n\t\truns(function() {\n\n\t\t\texpect(ctrl1.getOriginInfo('model.a1._selection.groupA.selected').getBool()).toEqual(false);\n\t\t\texpect(ctrl1.getOriginInfo('model._selection.groupA.metas.a1').get()).toBe(null);\n\t\t\texpect(ctrl1.getOriginInfo('model._selection.groupA.count').getInt()).toEqual(0);\n\t\t\t\t\n\t\t});\n\t});\n\n\tit ('should multiSelect', function() {\n\n\t\tvar returned1 = false;\n\t\tvar returned2 = false;\n\n\t\truns(function() {\n\t\t\t\t\n\t\t\t\tctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\t\tctrl1.setMultipleSelectedItem('a1', 'groupA', function() {\n\n\t\t\t\t\treturned1 = true;\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t\tctrl1.setMultipleSelectedItem('a2', 'groupA', function() {\n\n\t\t\t\t\treturned2 = true;\n\t\t\t\t\t\n\t\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned1 && returned2;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\truns(function() {\n\n\t\t\texpect(ctrl1.getOriginInfo('model.a1._selection.groupA.selected').getBool()).toEqual(true);\n\t\t\texpect(ctrl1.getOriginInfo('model.a2._selection.groupA.selected').getBool()).toEqual(true);\n\t\t\texpect(ctrl1.getOriginInfo('model._selection.groupA.metas.a1').get()).not.toBe(null);\n\t\t\texpect(ctrl1.getOriginInfo('model._selection.groupA.metas.a2').get()).not.toBe(null);\n\t\t\texpect(ctrl1.getOriginInfo('model._selection.groupA.count').getInt()).toEqual(2);\n\n\t\t\texpect(ctrl2.getOriginInfo('model.a1._selection.groupA.selected').getBool()).toEqual(true);\n\t\t\texpect(ctrl2.getOriginInfo('model.a2._selection.groupA.selected').getBool()).toEqual(true);\n\t\t\texpect(ctrl2.getOriginInfo('model._selection.groupA.metas.a1').get()).not.toBe(null);\n\t\t\texpect(ctrl2.getOriginInfo('model._selection.groupA.metas.a2').get()).not.toBe(null);\n\t\t\texpect(ctrl2.getOriginInfo('model._selection.groupA.count').getInt()).toEqual(2);\n\t\t\t\n\t\t});\n\t\t\n\t});\n\t\n\tit ('should deleteGroup', function() {\n\n\t\tvar returned1 = false;\n\t\tvar returned2 = false;\n\n\t\truns(function() {\n\t\t\t\t\n\t\t\t\tctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\t\tctrl1.setMultipleSelectedItem('a1', 'groupA', function() {\n\n\t\t\t\t\treturned1 = true;\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t\tctrl1.setMultipleSelectedItem('a2', 'groupA', function() {\n\n\t\t\t\t\treturned2 = true;\n\t\t\t\t\t\n\t\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned1 && returned2;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\tvar returned = false;\n\n\t\truns(function() {\n\n\t\t\tctrl1.deleteGroup('groupA', function() {returned = true;});\n\t\t\t\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'ctx did not load', 300);\n\t\t\n\t\truns(function() {\n\n\t\t\texpect(ctrl1.getOriginInfo('model.a1._selection.groupA.selected').getBool()).toEqual(false);\n\t\t\texpect(ctrl1.getOriginInfo('model.a2._selection.groupA.selected').getBool()).toEqual(false);\n\t\t\texpect(ctrl1.getOriginInfo('model._selection.groupA.metas.a1').get()).toBe(null);\n\t\t\texpect(ctrl1.getOriginInfo('model._selection.groupA.metas.a2').get()).toBe(null);\n\t\t\texpect(ctrl1.getOriginInfo('model._selection.groupA.count').getInt()).toEqual(0);\n\n\t\t\texpect(ctrl1.origin.getRecords().length).toEqual(3);\n\t\t\t\n\t\t});\n\t});\n\n\tit ('can updateGroup', function() {\n\n\t\tvar returned1 = false;\n\t\tvar returned2 = false;\n\n\t\truns(function() {\n\t\t\t\t\n\t\t\t\tctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\t\tctrl1.setMultipleSelectedItem('a1', 'groupA', function() {\n\n\t\t\t\t\treturned1 = true;\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t\tctrl1.setMultipleSelectedItem('a2', 'groupA', function() {\n\n\t\t\t\t\treturned2 = true;\n\t\t\t\t\t\n\t\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned1 && returned2;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\tvar returned = false;\n\n\t\truns(function() {\n\n\t\t\tvar data = new pebble.Pebble();\n\t\t\tdata.setValue('.', 'tag1');\n\t\t\tctrl1.setGroup('groupA', 'text', data, function() {returned = true;});\n\t\t\t\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'ctx did not load', 300);\n\t\t\n\t\truns(function() {\n\n\t\t\texpect(ctrl1.getOriginInfo('model.a1._selection.groupA.selected').getBool()).toEqual(true);\n\t\t\texpect(ctrl1.getOriginInfo('model.a2._selection.groupA.selected').getBool()).toEqual(true);\n\t\t\texpect(ctrl1.getOriginInfo('model.a1.text').getValue()).toEqual('tag1');\n\t\t\texpect(ctrl1.getOriginInfo('model.a2.text').getValue()).toEqual('tag1');\n\t\t\t\n\t\t});\n\t});\n\n\tit ('can get group', function() {\n\n\t\tvar returned1 = false;\n\t\tvar returned2 = false;\n\n\t\truns(function() {\n\t\t\t\t\n\t\t\t\tctrl1 = topApp.item.modules['childmod0'].item; \n\t\t\t\tctrl1.setMultipleSelectedItem('a1', 'groupA', function() {\n\n\t\t\t\t\treturned1 = true;\n\t\t\t\t\t\n\t\t\t\t});\n\t\t\t\tctrl1.setMultipleSelectedItem('a2', 'groupA', function() {\n\n\t\t\t\t\treturned2 = true;\n\t\t\t\t\t\n\t\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned1 && returned2;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\tvar returned = false;\n\t\tvar obj;\n\t\truns(function() {\n\n\t\t\tobj = new pebble.Pebble();\n\t\t\tvar params = obj.getParams();\n\t\t\tparams.setRef('.', 'this.getGroup');\n\t\t\tparams.setValue('group', 'groupA');\n\t\t\tobj.setCallback(function() {\n\t\t\t\treturned = true;\n\t\t\t});\n\t\t\tctrl1.resolve(obj);\n\t\t\t\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'ctx did not load', 300);\n\t\t\n\t\truns(function() {\n\n\t\t\texpect(obj.getRecords('.').length).toEqual(2);\n\t\t\t\n\t\t\tobj = new pebble.Pebble();\n\t\t\tvar params = obj.getParams();\n\t\t\tparams.setRef('.', 'this.getGroup');\n\t\t\tparams.setValue('group', 'groupA');\n\t\t\tparams.setTrue('asRef');\n\t\t\tobj.setCallback(function() {\n\t\t\t\treturned = true;\n\t\t\t});\n\t\t\tctrl1.resolve(obj);\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\t \n\t\t}, 'ctx did not load', 300);\n\t\t\n\t\truns(function() {\n\n\t\t\tvar recs = obj.getRecords('.');\n\t\t\texpect(recs.length).toEqual(2);\n\t\t\texpect(recs[0].getRef('.') == 'a1');\n\t\t\texpect(recs[1].getRef('.') == 'a2');\n\t\t\t\n\t\t\t//TODO: use getPath/setPath\n\t\t});\n\n\t});\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/lib/client/testSelection.js"},{"key":"ext","val":"js"}]},{"key":"testValidation","val":[{"key":"testCode","val":"\nvar topApp;\n/*\n *\n * should execute all validators\n * should stop at else (per control)\n * should execute all bot2Top\n * should put _validation\n * should execute ({{}}, _generate, and ref filters)\n */ \ndescribe('testValidation', function () {\n\n\tfunction getInnerMarkup(validators) {\n\t\tvar ctrl = new pebble.Pebble();\n\t\tctrl.setRef('.', 'standard:TextInput');\n\n\t\t\n\t\tctrl.set('validators', validators);\n\n\t\tvar innerMarkup = new pebble.Pebble();\n\t\tinnerMarkup.set('div.control', ctrl);\n\n\t\treturn innerMarkup;\n\t}\n\n\tbeforeEach(function() {\n\n\t});\n\tafterEach(function() {\n\n\t});\n\n\tit ('requires deployment', function() {\n\t\tvar ready = false;\n\t\truns(function() {\n\t\t\tgetDeployment(function(depObj) {\n\t\t\t\ttopApp && topApp.kill();\n\t\t\t\ttopApp = new pebble.libs.standard.TopModule(document.createElement('div'), depObj, 'top');\n\t\t\t\ttopApp.load(function() {\n\t\t\t\t\tready = true;\t\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn ready;\n\t\t}, 'wait for deployment', 300);\n\n\t\truns(function() {\n\t\t\texpect(pebble.libs.standard.Module.topMod.deployment).not.toBeNull();\n\t\t\tvar originInfo = topApp.item.getOriginInfo('model');\n\t\t\texpect(originInfo.getThisType().getRef('.').split('.').pop()).toEqual('standard');\n\t\t});\n\t});\n\n\n\tit ('can validate expressions', function() {\n\n\t\tvar validators = new pebble.Pebble();\n\t\t\n\t\tvar val1 = new pebble.Pebble();\n\t\tval1.setValue('filter', '{{this.model != null}}');\n\t\tval1.setValue('status', 'error');\n\t\tval1.setValue('message', 'required');\n\n\t\tvalidators.add2Array('.', val1);\n\n\t\tvar val2 = new pebble.Pebble();\n\t\tval2.setValue('filter', '{{this.model == null}}');\n\t\tval2.setValue('status', 'error');\n\t\tval2.setValue('message', 'null expected');\n\n\t\tvalidators.add2Array('.', val2);\n\t\t\n\t\tvar innerMarkup = getInnerMarkup(validators);\t\n\t\tvar dm = topApp.item;\n\n\t\tdm.set('innerMarkup', innerMarkup);\n\n\t\truns(function() {\n\t\t\ttopApp.item.loadManager.ctxLoaded = false;\n\t\t\ttopApp.getItem(dm);\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn topApp.item.loadManager.ctxLoaded;\t \n\t\t}, 'ctx did not load', 300);\n\n\t\tvar returned = false;\n\t\truns(function() {\n\t\t\tvar ctrl = topApp.item.modules['childmod0'].item; \n\t\t\tctrl.validate(function() {returned = true});\n\t\t\t//ctrl.saveManager.validate(true, function() { returned = true;});\n\t\t});\n\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'validate should have returned', 300);\n\n\t\truns(function() {\n\n\t\t\tvar ctrl = topApp.item.modules['childmod0'].item; \n\t\t\texpect(ctrl.getOriginInfo('model._validation.status').getValue()).toEqual('error'); \n\t\t\t//should stop at first\n\t\t\texpect(ctrl.getOriginInfo('model._validation.message').getValue()).toEqual('required'); \n\n\n\t\t\treturned = false;\n\t\t\tctrl.setValue('model', 'hello');\n\t\t\tctrl.validate(function() {returned = true});\n\n\t\t});\n\t\t\n\t\twaitsFor(function() {\n\t\t\treturn returned;\n\t\t}, 'validate should have returned', 300);\n\n\t\truns(function() {\n\n\t\t\t//should stop at second\n\t\t\tvar ctrl = topApp.item.modules['childmod0'].item; \n\t\t\texpect(ctrl.getOriginInfo('model._validation.status').getValue()).toEqual('error'); \n\t\t\texpect(ctrl.getOriginInfo('model._validation.message').getValue()).toEqual('null expected'); \n\n\n\t\t});\n\n\n\n\t});\n\n\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/lib/client/testValidation.js"},{"key":"ext","val":"js"}]},{"key":"testEnv","val":[{"key":"testCode","val":"\n\npebble.Pebble.setDataSourceFactory(new PebbleDataSourceImpl_Json());\n\n"},{"key":"testCodePath","val":"frontend/test/lib/object/testEnv.js"},{"key":"ext","val":"js"}]},{"key":"testBuildDeployment","val":[{"key":"testCode","val":"/**\n *  \n */\ndescribe('BuildDeployment', function () {\n\n\t//var itemType;\n\t//var item;\n\t//beforeEach(function() {\n\n\t\t\t//var ready = false;\n\t\t\t//runs(function() {\n\t\t\t\t//getDeployment(function(depObj) {\n\t\t\t\t\t\t//itemType = depObj.getTypeDocument('theModel.libs.standard.types.testItem');\n\t\t\t\t\t\t//item = new pebble.Pebble(); //item to filter\n\t\t\t\t\t\t//ready = true;\t\n\t\t\t\t//});\n\t\t\t//});\n\n\t\t\t//waitsFor(function() {\n\t\t\t\t//return ready;\n\t\t\t//}, 'wait for deployment and testAppControl', 300);\n\n\t//});\n\n\t//it ('should return true for null', function() {\n\t\t//var o = new pebble.shared.PebbleFilter(null, itemType);\n\t\t//expect(o.filter(item)).toEqual(true);\n\t//});\n\n\t//it ('should return true for empty pebble', function() {\n\n\t\t//var o = new pebble.shared.PebbleFilter(new pebble.Pebble(), itemType);\n\t\t//expect(o.filter(item)).toEqual(true);\n\t//});\n\n\t//it ('should cache types', function() {\n\t\t//var condition = new pebble.Pebble();\n\t\t//condition.setRef('condition', 'bool');\n\t\t//condition.setTrue('condition');\n\t\t//var o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t\n\t\t//expect(Object.keys(o.typesCache).length).toEqual(0);\n\t\t//o.filter(item);\n\t\t//expect(Object.keys(o.typesCache).length).toEqual(1);\n\n\t//});\n\t\n\t//it ('should handle boolean values', function() {\n\t\t//var condition = new pebble.Pebble();\n\t\t//condition.setTrue('condition');\n\t\t//condition.setRef('condition', 'bool');\n\t\t//var o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t////undefined is not true\n\t\t//expect(o.filter(item)).toEqual(false);\n\n\t\t//item.setTrue('bool');\n\t\t//expect(o.filter(item)).toEqual(true);\n\t\t\n\t//});\n\n\t//it ('should handle text values', function() {\n\t\t//var condition = new pebble.Pebble();\n\t\t//condition.setValue('condition', 'hello');\n\t\t//condition.setRef('condition', 'text');\n\t\t//var o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t////undefined is not true\n\t\t//expect(o.filter(item)).toEqual(false);\n\n\t\t//item.setValue('text', 'hello');\n\t\t////no operator assumes eq\n\t\t//expect(o.filter(item)).toEqual(true);\n\t\t\n\t//});\n\n\t//it ('should handle number values', function() {\n\t\t//var condition = new pebble.Pebble();\n\t\t//condition.setValue('condition', 1);\n\t\t//condition.setRef('condition', 'number');\n\t\t//condition.setAttribute('condition', 'op', 'eq');\n\t\t//var o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t////undefined is not true\n\t\t//expect(o.filter(item)).toEqual(false);\n\n\t\t//item.setValue('number', 2);\n\t\t//expect(o.filter(item)).toEqual(false);\n\t\t\n\t\t//item.setValue('number', 1);\n\t\t//expect(o.filter(item)).toEqual(true);\n\t\t\n\t\t//condition.setAttribute('condition', 'op', 'gt');\n\t\t//o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t\n\t\t//item.setValue('number', 0);\n\t\t//expect(o.filter(item)).toEqual(false);\n\n\t\t//item.setValue('number', 2);\n\t\t//expect(o.filter(item)).toEqual(true);\n\t\t\n\t\t//item.setValue('number', 1);\n\t\t//expect(o.filter(item)).toEqual(false);\n\n\t\t//condition.setAttribute('condition', 'op', 'lt');\n\t\t//o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t\n\t\t//item.setValue('number', 0);\n\t\t//expect(o.filter(item)).toEqual(true);\n\n\t\t//item.setValue('number', 2);\n\t\t//expect(o.filter(item)).toEqual(false);\n\t\t\n\t\t//item.setValue('number', 1);\n\t\t//expect(o.filter(item)).toEqual(false);\n\t//});\n\n\t//it ('should handle date values', function() {\n\t\t//var condition = new pebble.Pebble();\n\t\t//condition.setRef('condition', 'date');\n\t\t//condition.setAttribute('condition', 'op', 'eq');\n\t\t//condition.setValue('condition', '2013-10-23T03:01:55.461Z');\n\n\t\t//var o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t////undefined is not true\n\t\t//expect(o.filter(item)).toEqual(false);\n\n\t\t//item.setValue('date', '2013-10-23T03:01:55.461Z');\n\t\t//expect(o.filter(item)).toEqual(true);\n\t\t\n\t\t//condition.setAttribute('condition', 'op', 'gt');\n\t\t//o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t\n\t\t//item.setValue('date', '2012-10-23T03:01:55.461Z');\n\t\t//expect(o.filter(item)).toEqual(false);\n\n\t\t//item.setValue('date', '2014-10-23T03:01:55.461Z');\n\t\t//expect(o.filter(item)).toEqual(true);\n\t\t\n\t\t//item.setValue('date', '2013-10-23T03:01:55.461Z');\n\t\t//expect(o.filter(item)).toEqual(false);\n\n\t\t//condition.setAttribute('condition', 'op', 'lt');\n\t\t//o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t\n\t\t//item.setValue('date', '2012-10-23T03:01:55.461Z');\n\t\t//expect(o.filter(item)).toEqual(true);\n\n\t\t//item.setValue('date', '2014-10-23T03:01:55.461Z');\n\t\t//expect(o.filter(item)).toEqual(false);\n\t\t\n\t\t//item.setValue('date', '2013-10-23T03:01:55.461Z');\n\t\t//expect(o.filter(item)).toEqual(false);\n\t//});\n\n\t//it ('should handle implied top AND', function() {\n\t\t//var condition = new pebble.Pebble();\n\t\t//condition.setValue('condition1', 'hello');\n\t\t//condition.setAttribute('condition1', 'op', 'eq');\n\t\t//condition.setRef('condition1', 'text');\n\n\t\t//condition.setTrue('condition2');\n\t\t////condition.setAttribute('condition2', 'op', 'eq');\n\t\t//condition.setRef('condition2', 'bool');\n\n\t\t//var o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t\n\t\t//expect(o.filter(item)).toEqual(false);\n\n\t\t////only setting bool should return false\n\t\t//item.setTrue('bool');\n\t\t//expect(o.filter(item)).toEqual(false);\n\n\t\t//item.setValue('text', 'hello');\n\t\t//expect(o.filter(item)).toEqual(true);\n\t\t\n\t//});\n\t\n\t//it ('should handle OR', function() {\n\t\t//var condition = new pebble.Pebble();\n\t\t\n\t\t//var or = new pebble.Pebble();\n\n\t\t//or.setValue('condition1', 'hello');\n\t\t//or.setAttribute('condition1', 'op', 'eq');\n\t\t//or.setRef('condition1', 'text');\n\n\t\t//or.setTrue('condition2');\n\t\t//or.setRef('condition2', 'bool');\n\n\t\t//condition.set('or', or);\n\n\n\t\t//var o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t\n\t\t//expect(o.filter(item)).toEqual(false);\n\n\t\t////only setting bool should return true\n\t\t//item.setTrue('bool');\n\t\t//expect(o.filter(item)).toEqual(true);\n\n\t\t//item.setValue('text', 'hello');\n\t\t//expect(o.filter(item)).toEqual(true);\n\n\t\t//item.remove('bool');\n\t\t//expect(o.filter(item)).toEqual(true);\n\t\t\n\t//});\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/lib/shared/testBuildDeployment.js"},{"key":"ext","val":"js"}]},{"key":"testPebbleFilter","val":[{"key":"testCode","val":"/**\n *  PebbleFilter is used to generate auto queries and to check live client usage\n */\ndescribe('PebbleFilter', function () {\n\n\tvar itemType;\n\tvar item;\n\tbeforeEach(function() {\n\n\t\t\tvar ready = false;\n\t\t\truns(function() {\n\t\t\t\tgetDeployment(function(depObj) {\n\t\t\t\t\t\titemType = depObj.getTypeDocument('theModel.libs.standard.types.testItem');\n\t\t\t\t\t\titem = new pebble.Pebble(); //item to filter\n\t\t\t\t\t\tready = true;\t\n\t\t\t\t});\n\t\t\t});\n\n\t\t\twaitsFor(function() {\n\t\t\t\treturn ready;\n\t\t\t}, 'wait for deployment and testAppControl', 300);\n\n\t});\n\n\tit ('should return true for null', function() {\n\t\tvar o = new pebble.shared.PebbleFilter(null, itemType);\n\t\texpect(o.filter(item)).toEqual(true);\n\t});\n\n\tit ('should return true for empty pebble', function() {\n\n\t\tvar o = new pebble.shared.PebbleFilter(new pebble.Pebble(), itemType);\n\t\texpect(o.filter(item)).toEqual(true);\n\t});\n\n\tit ('should cache types', function() {\n\t\tvar condition = new pebble.Pebble();\n\t\tcondition.setRef('condition', 'bool');\n\t\tcondition.setTrue('condition');\n\t\tvar o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t\n\t\texpect(Object.keys(o.typesCache).length).toEqual(0);\n\t\to.filter(item);\n\t\texpect(Object.keys(o.typesCache).length).toEqual(1);\n\n\t});\n\t\n\tit ('should handle boolean values', function() {\n\t\tvar condition = new pebble.Pebble();\n\t\tcondition.setTrue('condition');\n\t\tcondition.setRef('condition', 'bool');\n\t\tvar o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t//undefined is not true\n\t\texpect(o.filter(item)).toEqual(false);\n\n\t\titem.setTrue('bool');\n\t\texpect(o.filter(item)).toEqual(true);\n\t\t\n\t});\n\n\tit ('should handle text values', function() {\n\t\tvar condition = new pebble.Pebble();\n\t\tcondition.setValue('condition', 'hello');\n\t\tcondition.setRef('condition', 'text');\n\t\tvar o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t//undefined is not true\n\t\texpect(o.filter(item)).toEqual(false);\n\n\t\titem.setValue('text', 'hello');\n\t\t//no operator assumes eq\n\t\texpect(o.filter(item)).toEqual(true);\n\t\t\n\t});\n\n\tit ('should handle number values', function() {\n\t\tvar condition = new pebble.Pebble();\n\t\tcondition.setValue('condition', 1);\n\t\tcondition.setRef('condition', 'number');\n\t\tcondition.setAttribute('condition', 'op', 'eq');\n\t\tvar o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t//undefined is not true\n\t\texpect(o.filter(item)).toEqual(false);\n\n\t\titem.setValue('number', 2);\n\t\texpect(o.filter(item)).toEqual(false);\n\t\t\n\t\titem.setValue('number', 1);\n\t\texpect(o.filter(item)).toEqual(true);\n\t\t\n\t\tcondition.setAttribute('condition', 'op', 'gt');\n\t\to = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t\n\t\titem.setValue('number', 0);\n\t\texpect(o.filter(item)).toEqual(false);\n\n\t\titem.setValue('number', 2);\n\t\texpect(o.filter(item)).toEqual(true);\n\t\t\n\t\titem.setValue('number', 1);\n\t\texpect(o.filter(item)).toEqual(false);\n\n\t\tcondition.setAttribute('condition', 'op', 'lt');\n\t\to = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t\n\t\titem.setValue('number', 0);\n\t\texpect(o.filter(item)).toEqual(true);\n\n\t\titem.setValue('number', 2);\n\t\texpect(o.filter(item)).toEqual(false);\n\t\t\n\t\titem.setValue('number', 1);\n\t\texpect(o.filter(item)).toEqual(false);\n\t});\n\n\tit ('should handle date values', function() {\n\t\tvar condition = new pebble.Pebble();\n\t\tcondition.setRef('condition', 'date');\n\t\tcondition.setAttribute('condition', 'op', 'eq');\n\t\tcondition.setValue('condition', '2013-10-23T03:01:55.461Z');\n\n\t\tvar o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t//undefined is not true\n\t\texpect(o.filter(item)).toEqual(false);\n\n\t\titem.setValue('date', '2013-10-23T03:01:55.461Z');\n\t\texpect(o.filter(item)).toEqual(true);\n\t\t\n\t\tcondition.setAttribute('condition', 'op', 'gt');\n\t\to = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t\n\t\titem.setValue('date', '2012-10-23T03:01:55.461Z');\n\t\texpect(o.filter(item)).toEqual(false);\n\n\t\titem.setValue('date', '2014-10-23T03:01:55.461Z');\n\t\texpect(o.filter(item)).toEqual(true);\n\t\t\n\t\titem.setValue('date', '2013-10-23T03:01:55.461Z');\n\t\texpect(o.filter(item)).toEqual(false);\n\n\t\tcondition.setAttribute('condition', 'op', 'lt');\n\t\to = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t\n\t\titem.setValue('date', '2012-10-23T03:01:55.461Z');\n\t\texpect(o.filter(item)).toEqual(true);\n\n\t\titem.setValue('date', '2014-10-23T03:01:55.461Z');\n\t\texpect(o.filter(item)).toEqual(false);\n\t\t\n\t\titem.setValue('date', '2013-10-23T03:01:55.461Z');\n\t\texpect(o.filter(item)).toEqual(false);\n\t});\n\n\tit ('should handle implied top AND', function() {\n\t\tvar condition = new pebble.Pebble();\n\t\tcondition.setValue('condition1', 'hello');\n\t\tcondition.setAttribute('condition1', 'op', 'eq');\n\t\tcondition.setRef('condition1', 'text');\n\n\t\tcondition.setTrue('condition2');\n\t\t//condition.setAttribute('condition2', 'op', 'eq');\n\t\tcondition.setRef('condition2', 'bool');\n\n\t\tvar o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t\n\t\texpect(o.filter(item)).toEqual(false);\n\n\t\t//only setting bool should return false\n\t\titem.setTrue('bool');\n\t\texpect(o.filter(item)).toEqual(false);\n\n\t\titem.setValue('text', 'hello');\n\t\texpect(o.filter(item)).toEqual(true);\n\t\t\n\t});\n\t\n\tit ('should handle OR', function() {\n\t\tvar condition = new pebble.Pebble();\n\t\t\n\t\tvar or = new pebble.Pebble();\n\n\t\tor.setValue('condition1', 'hello');\n\t\tor.setAttribute('condition1', 'op', 'eq');\n\t\tor.setRef('condition1', 'text');\n\n\t\tor.setTrue('condition2');\n\t\tor.setRef('condition2', 'bool');\n\n\t\tcondition.set('or', or);\n\n\n\t\tvar o = new pebble.shared.PebbleFilter(condition, itemType);\n\t\t\n\t\texpect(o.filter(item)).toEqual(false);\n\n\t\t//only setting bool should return true\n\t\titem.setTrue('bool');\n\t\texpect(o.filter(item)).toEqual(true);\n\n\t\titem.setValue('text', 'hello');\n\t\texpect(o.filter(item)).toEqual(true);\n\n\t\titem.remove('bool');\n\t\texpect(o.filter(item)).toEqual(true);\n\t\t\n\t});\n});\n\n\n"},{"key":"testCodePath","val":"frontend/test/lib/shared/testPebbleFilter.js"},{"key":"ext","val":"js"}]}]},{"key":"cssTemplates","val":[{"key":"standard","val":[{"key":"css","val":"  \n        \n.droppable \n{\n  border-width: 2px; \n  border-color: green; \n  border-style: solid;\n  }\n  \n  .not-droppable {\n  border-width: 2px; \n  border-color: red; \n  border-style: solid;\n  }\n  \n  .overProxySide_INNER {\n  border-width: 2px; \n  border-color: pink; \n  border-style: solid;\n  }\n  \n  .overProxySide_TOP {\n  border-width: 2px; \n  border-color: green; \n  border-style: solid none none none;\n  }\n  \n  .overProxySide_BOT {\n  border-width: 2px; \n  border-color: green; \n  border-style: none none solid none;\n  }\n  \n  .overProxySide_RIGHT {\n  border-width: 2px; \n  border-color: green; \n  border-style: none solid none none;\n  }\n  \n  .overProxySide_LEFT {\n  border-width: 2px; \n  border-color: green; \n  border-style: none none none solid;\n  }\n\n  /*ArrayStackControl*/\n  .swipe {\n    overflow: hidden;\n    visibility: hidden;\n    position: relative;\n  }\n  .swipe-wrap {\n    overflow: hidden;\n    position: relative;\n  }\n  .swipe-wrap > div {\n    float:left;\n    width:100%;\n    position: relative;\n  }\n\n  /*StackPanel*/\n  .listStackPanelhide {\n    position:absolute;\n    top:0px;\n    left:0px;\n    right:0px;\n    bottom:0px;\n    background-color:#fff;\n     display:none;\n  }\n  .listStackPanelshow {\n    position:absolute;\n    top:0px;\n    left:0px;\n   right:0px;\n    bottom:0px;\n    background-color:#fff;\n    display:block;\n  }\n                 "}]}]},{"key":"mainConfig","val":"{\n  \"object\": {\n    \"basePath\": \"frontend/src/lib/object\",\n    \"files\": [\n      \"pebble.js\",\n      \"interfaces/IPebbleDataSource.js\",\n      \"impl/pebble-object-dom/lib/pebble-object-dom.js\",\n      \"impl/pebble-object-json/lib/pebble-object-json.js\",\n      \"pebble.Pebble.js\"\n    ]\n  },\n  \"shared\": {\n    \"imports\": [\"object\"],\n    \"basePath\": \"frontend/src/lib/shared\",\n    \"files\": [\n      \"shared.js\",\n      \"interfaces/IServerData.js\",\n      \"interfaces/handlesLogging.js\",\n      \"logger.js\",\n      \"authorizer.js\",\n      \"impl/browserLogger.js\",\n      \"buildDeployment.js\",\n      \"itemType.js\",\n      \"pathAnalyzer.js\",\n      \"pebbleFilter.js\",\n      \"pebbleUtils.js\",\n      \"serverControl.js\",\n      \"impl/serverDataImpl_Xml.js\",\n      \"typeReferences.js\",\n      \"deployment.js\"\n    ]\n  },\n  \"libAccessPoint\": {\n    \"imports\": [\"shared\"],\n    \"basePath\": \"frontend/src\",\n    \"files\": [\n      \"lib/client/libs.js\",\n      \"lib/client/client.js\",\n      \"../../karma/bower_components/angular-expression-temp/dist/angular-expression-temp.js\",\n      \"lib/client/interfaces/controlAccess.js\",\n      \"lib/client/interfaces/dataChangable.js\",\n      \"lib/client/interfaces/moduleAccess.js\",\n      \"lib/client/expressionManager.js\",\n      \"lib/client/innerMarkupManager.js\",\n      \"lib/client/layoutStateManager.js\",\n      \"lib/client/dragDropManager.js\",\n      \"lib/client/mouseEventsManager.js\",\n      \"lib/client/saveManager.js\",\n      \"lib/client/originItemsManager.js\",\n      \"lib/client/loadManager.js\",\n      \"lib/client/executionManager.js\",\n      \"controls/ClientControl.js\",\n      \"lib/client/serverProxy.js\",\n      \"controls/ArrayTreeBase.js\",\n      \"controls/ArrayControl.js\",\n      \"controls/ArraySingleControl.js\",\n      \"controls/AppControlBase.js\",\n      \"controls/DynControl.js\",\n      \"lib/client/event.js\", \n      \"lib/client/module.js\",\n      \"lib/client/originInfo.js\",\n      \"controls/Reference.js\",\n      \"controls/ReferenceArray.js\",\n      \"lib/client/topModule.js\",\n      \"controls/PeerConnectionBase.js\",\n      \"lib/client/impl/impl.js\",\n      \"lib/client/impl/comm.js\",\n      \"lib/client/impl/commClientSideImpl.js\",\n      \"lib/client/impl/webSocketClientSideImpl.js\",\n      \"lib/client/impl/webSocketServerClientSideImpl.js\",\n      \"lib/client/panel.js\",\n      \"controls/StackPanel.js\",\n      \"controls/Text.js\",\n      \"controls/Markup.js\",\n      \"controls/CheckBox.js\",\n      \"controls/TextInputBase.js\",\n      \"controls/TextInput.js\",\n      \"controls/TextArea.js\",\n      \"controls/ColorInput.js\",\n      \"controls/DateShow.js\",\n      \"controls/DateInput.js\",\n      \"controls/NumberInput.js\",\n      \"controls/ReferenceTextInput.js\",\n      \"controls/RichTextEditor.js\",\n      \"controls/ArrayStackControl.js\",\n      \"controls/ArraySelect.js\",\n      \"controls/FileInputBase.js\",\n      \"controls/FileInputImage.js\",\n      \"controls/FileInputText.js\",\n      \"controls/FileInputPebble.js\",\n      \"controls/FileInputCSV.js\",\n      \"controls/Download.js\",\n      \"controls/Audio.js\"\n    ]\n  }\n}\n"},{"key":"serverScripts","val":[{"key":"a0","val":[{"key":"devCode","val":""},{"key":"codePath","val":"server/src/a0.js"},{"key":"ext","val":"js"}]}]}]}]},{"key":"theModel_controls","val":[{"key":"AppControlBase","val":[{"key":"description","VAL_CDATA":" "},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"path","val":[{"key":"name","val":"path"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]},{"key":"global","val":[{"key":"name","val":"global"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.clientGlobal"}}]}]}]},{"key":"ArrayControl","val":[{"key":"description","VAL_CDATA":" "},{"key":"fields","val":[{"key":"displayControl","val":[{"key":"name","val":"display control"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.displayControl"}}]}]},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ArrayTreeBase"}}]},{"key":"ArraySelect","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ArrayControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"array"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.command"}}]}]}]}]},{"key":"ArraySingleControl","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ArrayControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"array"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]}]}]}]},{"key":"ArrayStackControl","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ArrayControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"array"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]}]}]}]},{"key":"ArrayTreeBase","val":[{"key":"description","VAL_CDATA":"Base for controls handling arrays."},{"key":"fields","props":[{"key":"_arrayPages","val":[{"key":"name","val":"_arrayPages"},{"key":"type","attr":{"ref":"theModel.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.libs.standard.types.arrayPage"}}]}]}],"val":[{"key":"filter","val":[{"key":"name","val":"collection filter"},{"key":"description","VAL_CDATA":"only used by collections.  Only one control should control what is retrieved."},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.queryCondition"}}]},{"key":"showRecsFilter","val":[{"key":"name","val":"control filter"},{"key":"description","VAL_CDATA":"filters the records for this control."},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.queryCondition"}}]},{"key":"selectionAction","val":[{"key":"name","val":"selectionAction"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]},{"key":"beforeSelectionAction","val":[{"key":"name","val":"beforeSelectionAction"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]},{"key":"itemsPerPage","val":[{"key":"name","val":"itemsPerPage"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.number"}}]},{"key":"sortFields","val":[{"key":"name","val":"sortFields"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.sortField"}}]}]},{"key":"writeFields","val":[{"key":"name","val":"write fields"},{"key":"description","VAL_CDATA":"specify write fields to ensure only certain fields are updated (no specification results in the entire item being updated)."},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]}]},{"key":"collection","val":[{"key":"name","val":"collection"},{"key":"type","attr":{"ref":"theModel.libs.standard.types.array"}}]}]},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}}]},{"key":"CheckBox","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"bool"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.bool"}}]}]}]},{"key":"ClientControl","val":[{"key":"description","VAL_CDATA":"This is the base for all controls (client / server)."},{"key":"fields","val":[{"key":"beforeload","val":[{"key":"name","val":"beforeload"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]},{"key":"afterload","val":[{"key":"name","val":"afterload"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]},{"key":"onDataChangeLogic","val":[{"key":"name","val":"onDataChangeLogic"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]},{"key":"onSaved","val":[{"key":"name","val":"onSaved"},{"key":"description","VAL_CDATA":"Executed on edit item (top) after control data set to model.  A common use is to createArrayItem withData"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]},{"key":"innerMarkup","val":[{"key":"name","val":"innerMarkup"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]}]}]},{"key":"Download","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"anything"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"text","val":[{"key":"name","val":"text"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]}]}]},{"key":"DropzoneClientDatasource","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"anything"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"template","val":[{"key":"name","val":"template"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]}]}]},{"key":"DynControl","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"reference"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"displayControlFilters","val":[{"key":"name","val":"displayControlFilters"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.displayControlFilter"}}]}]}]}]},{"key":"ExpressionManager"},{"key":"FileInputCSV","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"anything"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]}]}]},{"key":"FileInputImage","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"anything"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]}]}]},{"key":"FileInputPebble","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"anything"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]}]}]},{"key":"FileInputText","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"anything"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]}]}]},{"key":"InnerMarkupManager"},{"key":"Markup","val":[{"key":"description"},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"markup"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]}]}]},{"key":"Panel","val":[{"key":"description","VAL_CDATA":" panel."},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"displayControl"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.displayControl"}}]}]}]},{"key":"PeerConnectionBase","val":[{"key":"description","VAL_CDATA":"Base for controls handling signaling for rtc."},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"rtc"},{"key":"description","VAL_CDATA":"rtc."},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.rtc"}}]}]},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}}]},{"key":"Reference","val":[{"key":"description"},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"reference"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]},{"key":"onSelected","val":[{"key":"name","val":"onSelected"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]},{"key":"innerArray","val":[{"key":"name","val":"innerArray"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"}}]}]},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}}]},{"key":"ReferenceArray","val":[{"key":"description"},{"key":"fields"},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ArrayTreeBase"}}]},{"key":"ReferenceTextInput","val":[{"key":"description"},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"markup"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]}]},{"key":"RichTextEditor","val":[{"key":"description","VAL_CDATA":"Rich Text Area enables a editable content area. "},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"markup"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]},{"key":"onKeyUp","val":[{"key":"name","val":"onKeyUp"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]}]}]},{"key":"StackPanel","val":[{"key":"description","VAL_CDATA":" Displays one module at a time.  "},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ArrayTreeBase"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"model"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.win"}}]}]},{"key":"animationDuration","val":[{"key":"name","val":"animationDuration"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.number"}}]}]}]},{"key":"Template","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"anything"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"template","val":[{"key":"name","val":"template"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]}]}]},{"key":"TestArrayLocalFilter"},{"key":"TestArrayPages"},{"key":"TestArrayTreeBaseExternal"},{"key":"TestInputControls"},{"key":"TestRealTime"},{"key":"TestSelection"},{"key":"TestShowControls"},{"key":"TestValidation"},{"key":"Text","val":[{"key":"description"},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"text"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]}]}]},{"key":"TextArea","val":[{"key":"description"},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"text"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"onKeyUp","val":[{"key":"name","val":"onKeyUp"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]}]}]},{"key":"TextInput","val":[{"key":"description"},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"text"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"onKeyUp","val":[{"key":"name","val":"onKeyUp"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]}]}]},{"key":"testAppControl","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.AppControlBase"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"standard"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.standard"}}]},{"key":"testItem","val":[{"key":"name","val":"testItem"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.testItem"}}]}]}]},{"key":"testDragDrop","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.AppControlBase"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"testApp"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.standard"}}]}]},{"key":"innerMarkup","val":[{"key":"div","attr":{"class":"horizontal"},"val":[{"key":"control","attr":{"ref":"standard:ArrayControl"},"val":[{"key":"childElement","val":[{"key":"div"}]},{"key":"displayControl","attr":{"ref":"standard:Text"},"val":[{"key":"mapPath","attr":{"ref":"text"}},{"key":"dragDrop","val":[{"key":"draggable","val":"true"},{"key":"ondrop","val":[{"key":"exec","attr":{"ref":"this.alert"},"val":[{"key":"message","val":"hello!"}]}]}]},{"key":"triggers","val":[{"key":"func","attr":{"ref":"this.setClass"},"val":[{"key":"class","val":"{{this.model._ddSide==\"INNER\"?\"overProxySide_INNER\":this.model._ddSide==\"TOP\"?\"overProxySide_TOP\":this.model._ddSide==\"BOT\"?\"overProxySide_BOT\":this.model._ddSide==\"RIGHT\"?\"overProxySide_RIGHT\":this.model._ddSide==\"LEFT\"?\"overProxySide_LEFT\":\"\"}}"}]}]}]},{"key":"model","props":[{"key":"_bind","attr":{"ref":"model.testEmbItems"}}]}]}]}]}]},{"key":"testImage","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.AppControlBase"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"standard"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.standard"}}]},{"key":"url","val":[{"key":"name","val":"url"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.url"}}]}]},{"key":"innerMarkup","val":[{"key":"div","val":[{"key":"input","attr":{"type":"text","placeholder":"http://placehold.it/350x150"},"val":[{"key":"control","attr":{"ref":"standard:TextInput"},"val":[{"key":"containerEvents","val":[{"key":"blur","val":[{"key":"exec","attr":{"ref":"this.setControlDataToModel"}}]}]},{"key":"model","props":[{"key":"_bind","attr":{"ref":"url"}}]}]}]}]},{"key":"div","val":[{"key":"input","attr":{"type":"file"},"val":[{"key":"control","attr":{"ref":"standard:FileInputImage"},"val":[{"key":"model","props":[{"key":"_bind","attr":{"ref":"url"}}]}]}]}]},{"key":"div","val":[{"key":"a","attr":{"href":"#","download":"file.file"},"val":[{"key":"control","attr":{"ref":"standard:Download"},"val":[{"key":"extactText","val":"download me!"},{"key":"model","props":[{"key":"_bind","attr":{"ref":"url"}}]}]}]}]},{"key":"img","attr":{"src":"{{this.url}}"}},{"key":"select","val":[{"key":"control","attr":{"ref":"standard:ArraySelect"},"val":[{"key":"childElement","val":[{"key":"option"}]},{"key":"displayControl","val":[{"key":"innerMarkup","val":"{{item.text}}"}]},{"key":"model","val":[{"key":"a0","val":[{"key":"text","val":"Full Date/Time"},{"key":"function","val":[{"key":"exec","attr":{"ref":"win2.setDisabled"}},{"key":"exec","attr":{"ref":"win2.setValue"},"val":[{"key":"text","val":"EEEE, MMMM d, y h:mm:ss a zzzz"}]}]}]},{"key":"a1","val":[{"key":"text","val":"Long Date/Time"},{"key":"function","val":[{"key":"exec","attr":{"ref":"win2.setDisabled"}},{"key":"exec","attr":{"ref":"win2.setValue"},"val":[{"key":"text","val":"MMMM d, y h:mm:ss a z"}]}]}]},{"key":"a10","val":[{"key":"text","val":"Custom"},{"key":"function","val":[{"key":"exec","attr":{"ref":"win2.setEnabled"}}]}]}]}]}]},{"key":"div","val":[{"key":"input","attr":{"type":"text"},"val":[{"key":"control","attr":{"id":"win2","ref":"standard:TextInput"},"val":[{"key":"model","props":[{"key":"_bind","attr":{"ref":"model"}}]}]}]}]}]}]},{"key":"testNumber","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.AppControlBase"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"testApp"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.standard"}}]},{"key":"number","val":[{"key":"name","val":"number"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.number"}}]}]},{"key":"innerMarkup","val":[{"key":"progress","attr":{"style":"font-size:30px;width:300px;","max":"100"},"val":[{"key":"control","attr":{"ref":"standard:NumberInput"},"val":[{"key":"model","props":[{"key":"_bind","attr":{"ref":"number"}}]}]}]},{"key":"div","val":[{"key":"meter","attr":{"style":"font-size:30px;width:300px;","max":"100","min":"0","high":"80","low":"20"},"val":[{"key":"control","attr":{"ref":"standard:NumberInput"},"val":[{"key":"model","props":[{"key":"_bind","attr":{"ref":"number"}}]}]}]}]}]}]},{"key":"util-testItem","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls.ClientControl"}},{"key":"fields","val":[{"key":"model","val":[{"key":"name","val":"text"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.testItem"}}]},{"key":"titleClick","val":[{"key":"name","val":"titleClick"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]},{"key":"onDeleteBtnClick","val":[{"key":"name","val":"onDeleteBtnClick"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]}]},{"key":"fixedData","val":[{"key":"triggers","val":[{"key":"func1","attr":{"ref":"this.setClass"},"val":[{"key":"class","val":"{{this.model._selection.marked.selected ? \"active\" : \"\"}}"}]},{"key":"func2","attr":{"ref":"this.setClass"},"val":[{"key":"class","val":"{{this.model._selection.default.selected ? \"active\" : \"\"}}"}]}]}]},{"key":"innerMarkup","val":[{"key":"div","val":[{"key":"control","attr":{"id":"mainStackPanel","ref":"standard:StackPanel"},"val":[{"key":"initModule","attr":{"ref":"show"}},{"key":"autoHeight","val":"true"},{"key":"model","val":[{"key":"show","val":[{"key":"innerMarkup","val":[{"key":"table","val":[{"key":"tr","val":[{"key":"td","val":"{{this.model.text._field.name}}"},{"key":"td","attr":{"onclick":"{{ctx.titleClick}}"},"val":[{"key":"control","attr":{"ref":"standard:Text"},"val":[{"key":"model","props":[{"key":"_bind","attr":{"ref":"model.text"}}]}]}]}]},{"key":"tr","val":[{"key":"td","val":"{{this.model.number._field.name}}"},{"key":"td","val":[{"key":"control","attr":{"ref":"standard:Text"},"val":[{"key":"model","props":[{"key":"_bind","attr":{"ref":"model.number"}}]}]}]}]},{"key":"tr","val":[{"key":"td","val":"{{this.model.date._field.name}}"},{"key":"td","val":[{"key":"control","attr":{"ref":"standard:Text"},"val":[{"key":"model","props":[{"key":"_bind","attr":{"ref":"model.date"}}]}]}]}]},{"key":"tr","val":[{"key":"td","val":"{{this.model.bool._field.name}}"},{"key":"td","val":[{"key":"control","attr":{"ref":"standard:Text"},"val":[{"key":"model","props":[{"key":"_bind","attr":{"ref":"model.bool"}}]}]}]}]},{"key":"tr","val":[{"key":"td","val":[{"key":"control","attr":{"ref":"standard:Text"},"val":[{"key":"model","val":"edit"},{"key":"mouseEvents","val":[{"key":"click","val":[{"key":"exec","attr":{"ref":"mainStackPanel.setSingleSelectedItemByMeta"},"val":[{"key":"meta","attr":{"ref":"edit"}}]}]}]}]}]},{"key":"td","val":[{"key":"control","attr":{"ref":"standard:Text"},"val":[{"key":"model","val":"delete"},{"key":"mouseEvents","val":[{"key":"click","val":[{"key":"exec","attr":{"ref":"ctx.execFunction"},"val":[{"key":"path","attr":{"ref":"onDeleteBtnClick"}}]}]}]}]}]}]},{"key":"tr","val":[{"key":"td","val":"delete via bind: "},{"key":"td","val":[{"key":"control","attr":{"ref":"standard:Text"},"val":[{"key":"model","val":"delete"},{"key":"mouseEvents","val":[{"key":"click","props":[{"key":"_bind","attr":{"ref":"onDeleteBtnClick"}}]}]}]}]}]}]}]}]},{"key":"edit","val":[{"key":"innerMarkup","val":[{"key":"table","val":[{"key":"tr","val":[{"key":"td","val":"{{this.model.text._field.name}}"},{"key":"td","attr":{"onclick":"{{ctx.titleClick}}"},"val":[{"key":"input","attr":{"type":"text"},"val":[{"key":"control","attr":{"ref":"standard:TextInput"},"val":[{"key":"model","props":[{"key":"_bind","attr":{"ref":"model.text"}}]}]}]}]}]},{"key":"tr","val":[{"key":"td","val":"{{this.model.number._field.name}}"},{"key":"td","val":[{"key":"input","attr":{"type":"number"},"val":[{"key":"control","attr":{"ref":"standard:NumberInput"},"val":[{"key":"model","props":[{"key":"_bind","attr":{"ref":"model.number"}}]}]}]}]}]},{"key":"tr","val":[{"key":"td","val":"{{this.model.date._field.name}}"},{"key":"td","val":[{"key":"input","attr":{"type":"date"},"val":[{"key":"control","attr":{"ref":"standard:DateInput"},"val":[{"key":"model","props":[{"key":"_bind","attr":{"ref":"model.date"}}]}]}]}]}]},{"key":"tr","val":[{"key":"td","val":"{{this.model.bool._field.name}}"},{"key":"td","val":[{"key":"input","attr":{"type":"checkbox"},"val":[{"key":"control","attr":{"ref":"standard:CheckBox"},"val":[{"key":"model","props":[{"key":"_bind","attr":{"ref":"model.bool"}}]}]}]}]}]},{"key":"tr","val":[{"key":"td","val":[{"key":"control","attr":{"ref":"standard:Text"},"val":[{"key":"model","val":"cancel"},{"key":"mouseEvents","val":[{"key":"click","val":[{"key":"exec","attr":{"ref":"mainStackPanel.setSingleSelectedItemByMeta"},"val":[{"key":"meta","attr":{"ref":"show"}}]}]}]}]}]},{"key":"td","val":[{"key":"control","attr":{"ref":"standard:Text"},"val":[{"key":"model","val":"update"},{"key":"mouseEvents","val":[{"key":"click","val":[{"key":"exec","attr":{"ref":"ctx.save"}},{"key":"exec","attr":{"ref":"mainStackPanel.setSingleSelectedItemByMeta"},"val":[{"key":"meta","attr":{"ref":"show"}}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]},{"key":"theModel_controls_ArrayTreeBase_functions","val":[{"key":"create","val":[{"key":"name","val":"create"},{"key":"description","VAL_CDATA":"Call crud.create"},{"key":"fields","val":[{"key":"withData","val":[{"key":"name","val":"withData"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]}]},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"delete","val":[{"key":"name","val":"delete"},{"key":"fields"},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"setSingleSelectedItem","val":[{"key":"name","val":"setSelectedItem"},{"key":"fields","val":[{"key":"path","val":[{"key":"name","val":"path"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"setSingleSelectedItemByMeta","val":[{"key":"name","val":"setSelectedItemByMeta"},{"key":"fields","val":[{"key":"meta","val":[{"key":"name","val":"meta"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]}]},{"key":"theModel_controls_ClientControl_functions","val":[{"key":"alert","val":[{"key":"name","val":"alert"},{"key":"fields","val":[{"key":"message","val":[{"key":"name","val":"message"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]}]},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"copyModel","val":[{"key":"name","val":"copyModel"},{"key":"fields","val":[{"key":"toControl","val":[{"key":"name","val":"toControl"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]},{"key":"path","val":[{"key":"name","val":"path"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"execFunction","val":[{"key":"name","val":"execFunction"},{"key":"fields","val":[{"key":"path","val":[{"key":"name","val":"path"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"getData","val":[{"key":"name","val":"getData"},{"key":"fields","val":[{"key":"path","val":[{"key":"name","val":"path"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"},"val":[{"key":"itemPath","attr":{"ref":"parent"}}]}]}]},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]},{"key":"if","val":[{"key":"name","val":"if"},{"key":"fields","val":[{"key":"condition","val":[{"key":"name","val":"condition"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.bool"}}]},{"key":"ontrue","val":[{"key":"name","val":"ontrue"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]},{"key":"onfalse","val":[{"key":"name","val":"onfalse"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]}]},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"kill","val":[{"key":"name","val":"kill"},{"key":"fields"},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"loadControl","val":[{"key":"name","val":"loadControl"},{"key":"fields","val":[{"key":"control","val":[{"key":"name","val":"loadControl"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"loadExternal","val":[{"key":"name","val":"loadExternal"},{"key":"fields","val":[{"key":"url","val":[{"key":"name","val":"url"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.url"}}]}]},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"login","val":[{"key":"name","val":"login"},{"key":"description","VAL_CDATA":" Login starts the default login process (redirect).  The control using the login functin must inherit from a server platforms control base that implements \"loginServer\".   "},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}},{"key":"fields"}]},{"key":"logout","val":[{"key":"name","val":"logout"},{"key":"description","VAL_CDATA":" Login starts the default logout process (redirect).  The control using the login functin must inherit from a server platforms control base that implements \"logoutServer\".   "},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}},{"key":"fields"}]},{"key":"save","val":[{"key":"name","val":"save"},{"key":"fields"},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"setClass","val":[{"key":"name","val":"setClass"},{"key":"description"},{"key":"fields","val":[{"key":"class","val":[{"key":"name","val":"class"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]}]}]},{"key":"setData","val":[{"key":"name","val":"setData"},{"key":"description"},{"key":"fields","val":[{"key":"path","val":[{"key":"name","val":"path"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"},"val":[{"key":"itemPath","attr":{"ref":"parent"}}]}]}]}]},{"key":"setStyleProperty","val":[{"key":"name","val":"setStyleProperty"},{"key":"description"},{"key":"fields","val":[{"key":"property","val":[{"key":"name","val":"property"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"value","val":[{"key":"name","val":"value"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]}]}]},{"key":"toggle","val":[{"key":"name","val":"toggle"},{"key":"description"},{"key":"fields","val":[{"key":"path","val":[{"key":"name","val":"path"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]}]}]},{"key":"theModel_controls_Reference_functions","val":[{"key":"onSelected","val":[{"key":"name","val":"onSelected"},{"key":"fields"},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]}]},{"key":"theModel_controls_RichTextEditor_functions","val":[{"key":"setCenterJustification","val":[{"key":"name","val":"setCenterJustification"},{"key":"fields"},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"setLeftJustification","val":[{"key":"name","val":"setLeftJustification"},{"key":"fields"},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"setRightJustification","val":[{"key":"name","val":"setRightJustification"},{"key":"fields"},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]}]},{"key":"theModel_types","val":[{"key":"array","val":[{"key":"description","VAL_CDATA":"An array can be both a list or collection. "},{"key":"configFields","val":[{"key":"arrayFormId","val":[{"key":"name","val":"array type"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]},{"key":"path","val":"frontend/types/array.xml"},{"key":"ext","val":"xml"}]},{"key":"arrayPage","val":[{"key":"fields","val":[{"key":"name","val":[{"key":"name","val":"name"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]}]},{"key":"path","val":"frontend/types/arrayPage.xml"},{"key":"ext","val":"xml"}]},{"key":"basicType","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.basicTypeBase"}},{"key":"fields","val":[{"key":"description","val":[{"key":"name","val":"description"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]},{"key":"configType","val":[{"key":"name","val":"configType"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]},{"key":"path","val":"frontend/types/basicType.xml"},{"key":"ext","val":"xml"}]},{"key":"basicTypeBase","val":[{"key":"description","VAL_CDATA":" This is the base for all basicTypes. "},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.superBase"}},{"key":"fields","val":[{"key":"inherits","val":[{"key":"name","val":"inherits"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"},"val":[{"key":"itemPath","attr":{"ref":"theModel.clientWorkspace.libs.standard.types"}}]}]}]},{"key":"path","val":"frontend/types/basicTypeBase.xml"},{"key":"ext","val":"xml"}]},{"key":"bool","val":[{"key":"description"},{"key":"path","val":"frontend/types/bool.xml"},{"key":"ext","val":"xml"}]},{"key":"clientGlobal","val":[{"key":"fields","val":[{"key":"userId","val":[{"key":"name","val":"userId"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]},{"key":"isAuth","val":[{"key":"name","val":"isAuth"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.bool"}}]},{"key":"roles","val":[{"key":"name","val":"roles"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]}]}]},{"key":"path","val":"frontend/types/clientGlobal.xml"},{"key":"ext","val":"xml"}]},{"key":"collection","val":[{"key":"description","VAL_CDATA":"An collection of documents. "},{"key":"configFields","val":[{"key":"arrayFormId","val":[{"key":"name","val":"collection type"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]},{"key":"path","val":"frontend/types/collection.xml"},{"key":"ext","val":"xml"}]},{"key":"color","val":[{"key":"path","val":"frontend/types/color.xml"},{"key":"ext","val":"xml"}]},{"key":"command","val":[{"key":"fields","val":[{"key":"text","val":[{"key":"name","val":"text"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"function","val":[{"key":"name","val":"function"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]},{"key":"sub","val":[{"key":"name","val":"sub"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.command"}}]}]}]},{"key":"path","val":"frontend/types/command.xml"},{"key":"ext","val":"xml"}]},{"key":"control","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.superBase"}},{"key":"fields","val":[{"key":"description","val":[{"key":"name","val":"description"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]},{"key":"innerMarkup","val":[{"key":"name","val":"innerMarkup"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]},{"key":"functions","val":[{"key":"name","val":"functions"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.collection"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.functionDef"}}]}]},{"key":"fixedData","val":[{"key":"name","val":"fixedData"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"inherits","val":[{"key":"name","val":"inherits"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"},"val":[{"key":"itemPath","attr":{"ref":"theModel.clientWorkspace.libs.standard.controls"}}]}]}]},{"key":"path","val":"frontend/types/control.xml"},{"key":"ext","val":"xml"}]},{"key":"customValidation","val":[{"key":"description","VAL_CDATA":" "},{"key":"fields","val":[{"key":"description","val":[{"key":"name","val":"description"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]},{"key":"code","val":[{"key":"name","val":"code"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]}]},{"key":"path","val":"frontend/types/customValidation.xml"},{"key":"ext","val":"xml"}]},{"key":"dataAccess","val":[{"key":"description","VAL_CDATA":"data read/write access definition.  Access is checked top-to-bottom"},{"key":"fields","val":[{"key":"baseReadFilter","val":[{"key":"name","val":"baseReadFilter"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.queryCondition"}}]},{"key":"baseWriteFilter","val":[{"key":"name","val":"baseReadFilter"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.queryCondition"}}]},{"key":"readAccess","val":[{"key":"name","val":"read access"},{"key":"description","VAL_CDATA":"specify general to details as they get filtered."},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.dataPathAccess"}}]}]},{"key":"writeAccess","val":[{"key":"name","val":"write access"},{"key":"description","VAL_CDATA":"specify general to details as they get filtered."},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.dataPathAccess"}}]}]}]},{"key":"path","val":"frontend/types/dataAccess.xml"},{"key":"ext","val":"xml"}]},{"key":"dataPathAccess","val":[{"key":"description","VAL_CDATA":"Access permissions for one data path."},{"key":"fields","val":[{"key":"path","val":[{"key":"name","val":"path"},{"key":"description","VAL_CDATA":"Access permissions for one data path."},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"excludeSubPaths","val":[{"key":"name","val":"exclude sub paths"},{"key":"description","VAL_CDATA":"exclude sub paths (default is include)."},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.bool"}}]},{"key":"subPaths","val":[{"key":"name","val":"sub paths"},{"key":"description","VAL_CDATA":"sub paths to include/exclude from parent path."},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]}]},{"key":"condition","val":[{"key":"name","val":"condition"},{"key":"description","VAL_CDATA":"Optional condition for access."},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.queryCondition"}}]}]},{"key":"path","val":"frontend/types/dataPathAccess.xml"},{"key":"ext","val":"xml"}]},{"key":"date","val":[{"key":"path","val":"frontend/types/date.xml"},{"key":"ext","val":"xml"}]},{"key":"displayControl","val":[{"key":"description","VAL_CDATA":" Specifies the control to display an item "},{"key":"fields","val":[{"key":"innerMarkup","val":[{"key":"name","val":"innerMarkup"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]},{"key":"mapPath","val":[{"key":"name","val":"mapPath"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]},{"key":"path","val":"frontend/types/displayControl.xml"},{"key":"ext","val":"xml"}]},{"key":"displayControlFilter","val":[{"key":"description"},{"key":"fields","val":[{"key":"filter","val":[{"key":"name","val":"filter"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.queryCondition"}}]},{"key":"displayControl","val":[{"key":"name","val":"displayControl"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.displayControl"}}]}]},{"key":"path","val":"frontend/types/displayControlFilter.xml"},{"key":"ext","val":"xml"}]},{"key":"dragDrop","val":[{"key":"description","VAL_CDATA":" "},{"key":"fields","val":[{"key":"draggable","val":[{"key":"name","val":"draggable"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.bool"}}]},{"key":"onDrop","val":[{"key":"name","val":"onDrop"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]}]},{"key":"path","val":"frontend/types/dragDrop.xml"},{"key":"ext","val":"xml"}]},{"key":"expressionFilter","val":[{"key":"description","VAL_CDATA":" "},{"key":"fields","val":[{"key":"description","val":[{"key":"name","val":"description"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]},{"key":"code","val":[{"key":"name","val":"code"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]}]},{"key":"path","val":"frontend/types/expressionFilter.xml"},{"key":"ext","val":"xml"}]},{"key":"file","val":[{"key":"fields","val":[{"key":"filename","val":[{"key":"name","val":"filename"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"key","val":[{"key":"name","val":"key"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"contentType","val":[{"key":"name","val":"contentType"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"size","val":[{"key":"name","val":"size"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.number"}}]},{"key":"creationDate","val":[{"key":"name","val":"creationDate"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.date"}}]}]},{"key":"path","val":"frontend/types/file.xml"},{"key":"ext","val":"xml"}]},{"key":"filter","val":[{"key":"description","VAL_CDATA":" Filter "},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.superBase"}},{"key":"fields","val":[{"key":"name","val":[{"key":"name","val":"name"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"description","val":[{"key":"name","val":"description"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]}]},{"key":"path","val":"frontend/types/filter.xml"},{"key":"ext","val":"xml"}]},{"key":"function","val":[{"key":"fields","val":[{"key":"exec","val":[{"key":"name","val":"function"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]},{"key":"path","val":"frontend/types/function.xml"},{"key":"ext","val":"xml"}]},{"key":"functionDef","val":[{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.superBase"}},{"key":"fields","val":[{"key":"name","val":[{"key":"name","val":"name"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"description","val":[{"key":"name","val":"description"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]},{"key":"code","val":[{"key":"name","val":"code"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"execCode","val":[{"key":"name","val":"execCode"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]},{"key":"access","val":[{"key":"name","val":"access"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"returnType","val":[{"key":"name","val":"returnType"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]},{"key":"path","val":"frontend/types/functionDef.xml"},{"key":"ext","val":"xml"}]},{"key":"globalIndexItem","val":[{"key":"description","VAL_CDATA":" "},{"key":"fields","val":[{"key":"text","val":[{"key":"name","val":"name"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"description","val":[{"key":"name","val":"description"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]},{"key":"hash","val":[{"key":"name","val":"hash"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]}]},{"key":"path","val":"frontend/types/globalIndexItem.xml"},{"key":"ext","val":"xml"}]},{"key":"itemRelRef","val":[{"key":"description","VAL_CDATA":"An itemRelRef represents a selection of and item on an array in the datastore (has a global address path). "},{"key":"configFields","val":[{"key":"relArray","val":[{"key":"name","val":"relArray"},{"key":"description","val":"Convenient way to make embedded selections. Only\n\t\t\t\tsupports text"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]}]},{"key":"itemPath","val":[{"key":"name","val":"itemPath"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]},{"key":"path","val":"frontend/types/itemRelRef.xml"},{"key":"ext","val":"xml"}]},{"key":"location","val":[{"key":"fields","val":[{"key":"lat","val":[{"key":"name","val":"lat"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.number"}}]},{"key":"lng","val":[{"key":"name","val":"lng"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.number"}}]}]},{"key":"path","val":"frontend/types/location.xml"},{"key":"ext","val":"xml"}]},{"key":"locationArea","val":[{"key":"fields","val":[{"key":"name","val":[{"key":"name","val":"name"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"locAreas","val":[{"key":"name","val":"locAreas"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.locationArea"}}]}]}]},{"key":"path","val":"frontend/types/locationArea.xml"},{"key":"ext","val":"xml"}]},{"key":"locationRange","val":[{"key":"fields","val":[{"key":"locStart","val":[{"key":"name","val":"locStart"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.location"}}]},{"key":"locEnd","val":[{"key":"name","val":"locEnd"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.location"}}]}]},{"key":"path","val":"frontend/types/locationRange.xml"},{"key":"ext","val":"xml"}]},{"key":"mailAddress","val":[{"key":"path","val":"frontend/types/mailAddress.xml"},{"key":"ext","val":"xml"}]},{"key":"markup","val":[{"key":"path","val":"frontend/types/markup.xml"},{"key":"ext","val":"xml"}]},{"key":"number","val":[{"key":"path","val":"frontend/types/number.xml"},{"key":"ext","val":"xml"}]},{"key":"password","val":[{"key":"path","val":"frontend/types/password.xml"},{"key":"ext","val":"xml"}]},{"key":"pebbleBase","val":[{"key":"description","VAL_CDATA":"This is the base for all items."},{"key":"fields"},{"key":"path","val":"frontend/types/pebbleBase.xml"},{"key":"ext","val":"xml"}]},{"key":"pixelOffset","val":[{"key":"fields","val":[{"key":"x","val":[{"key":"name","val":"x"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.number"}}]},{"key":"y","val":[{"key":"name","val":"y"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.number"}}]}]},{"key":"path","val":"frontend/types/pixelOffset.xml"},{"key":"ext","val":"xml"}]},{"key":"query","val":[{"key":"fields","val":[{"key":"path","val":[{"key":"name","val":"ancestor path"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]},{"key":"index","val":[{"key":"name","val":"index"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.number"}}]},{"key":"rows","val":[{"key":"name","val":"rows"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.number"}}]},{"key":"condition","val":[{"key":"name","val":"condition"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.queryCondition"}}]}]},{"key":"path","val":"frontend/types/query.xml"},{"key":"ext","val":"xml"}]},{"key":"queryCondition","val":[{"key":"fields"},{"key":"path","val":"frontend/types/queryCondition.xml"},{"key":"ext","val":"xml"}]},{"key":"rtc","val":[{"key":"description","VAL_CDATA":"rtc."},{"key":"fields","val":[{"key":"offer","val":[{"key":"name","val":"offer"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"offerCandidate","val":[{"key":"name","val":"offerCandidate"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"answer","val":[{"key":"name","val":"answer"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"answerCandidate","val":[{"key":"name","val":"anserCandidate"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"cancelled","val":[{"key":"name","val":"cancelled"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.bool"}}]}]},{"key":"path","val":"frontend/types/rtc.xml"},{"key":"ext","val":"xml"}]},{"key":"sortField","val":[{"key":"fields","val":[{"key":"name","val":[{"key":"name","val":"name"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"sortDir","val":[{"key":"name","val":"sortDir"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]}]},{"key":"path","val":"frontend/types/sortField.xml"},{"key":"ext","val":"xml"}]},{"key":"standard","val":[{"key":"fields","val":[{"key":"name","val":[{"key":"name","val":"name"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"description","val":[{"key":"name","val":"description"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]},{"key":"testItem","val":[{"key":"name","val":"testItem"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.testItem"}}]},{"key":"testItems","val":[{"key":"name","val":"testItems"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.collection"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.testItem"}}]}]},{"key":"testEmbItems","val":[{"key":"name","val":"testEmbItems"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.testItem"}}]}]}]},{"key":"path","val":"frontend/types/standard.xml"},{"key":"ext","val":"xml"}]},{"key":"superBase","val":[{"key":"description","VAL_CDATA":"  "},{"key":"inherits","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.pebbleBase"}},{"key":"fields","val":[{"key":"fields","val":[{"key":"name","val":"fields"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.typeField"}}]}]}]},{"key":"path","val":"frontend/types/superBase.xml"},{"key":"ext","val":"xml"}]},{"key":"tag","val":[{"key":"path","val":"frontend/types/tag.xml"},{"key":"ext","val":"xml"}]},{"key":"testItem","val":[{"key":"fields","val":[{"key":"text","val":[{"key":"name","val":"text"},{"key":"description","VAL_CDATA":"test text field, required"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}},{"key":"validation","val":[{"key":"isRequired","val":"true"}]}]},{"key":"markup","val":[{"key":"name","val":"markup"},{"key":"description","VAL_CDATA":"test markup field"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]},{"key":"number","val":[{"key":"name","val":"number"},{"key":"description","VAL_CDATA":"test number field"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.number"}}]},{"key":"url","val":[{"key":"name","val":"url"},{"key":"description","VAL_CDATA":"test url field"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.url"}}]},{"key":"date","val":[{"key":"name","val":"date"},{"key":"description","VAL_CDATA":"test date field"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.date"}}]},{"key":"bool","val":[{"key":"name","val":"bool"},{"key":"description","VAL_CDATA":"test bool field"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.bool"}}]},{"key":"color","val":[{"key":"name","val":"color"},{"key":"description","VAL_CDATA":"test color field"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.color"}}]},{"key":"file","val":[{"key":"name","val":"file"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.file"}}]},{"key":"referenceExternal","val":[{"key":"name","val":"referenceExternal"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"},"val":[{"key":"itemPath","attr":{"ref":"theModel.testItems"}}]}]},{"key":"referenceEmbedded","val":[{"key":"name","val":"referenceEmbedded"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"},"val":[{"key":"relArray","val":[{"key":"a0","val":"Category 1"},{"key":"a1","val":"Category 2"},{"key":"a2","val":"Category 3"},{"key":"a3","val":"Category 4"},{"key":"a4","val":"Category 5"}]}]}]},{"key":"referenceExternalMultiple","val":[{"key":"name","val":"referenceExternalMultiple"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"},"val":[{"key":"itemPath","attr":{"ref":"theApp.theControlApp.libs"}}]}]}]},{"key":"referenceEmbeddedMultiple","val":[{"key":"name","val":"referenceEmbeddedMultiple"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"},"val":[{"key":"relArray","val":[{"key":"a0","val":"Category 1"},{"key":"a1","val":"Category 2"},{"key":"a2","val":"Category 3"},{"key":"a3","val":"Category 4"},{"key":"a4","val":"Category 5"}]}]}]}]}]},{"key":"path","val":"frontend/types/testItem.xml"},{"key":"ext","val":"xml"}]},{"key":"text","val":[{"key":"path","val":"frontend/types/text.xml"},{"key":"ext","val":"xml"}]},{"key":"typeField","val":[{"key":"fields","val":[{"key":"name","val":[{"key":"name","val":"name"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"description","val":[{"key":"name","val":"description"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.markup"}}]},{"key":"type","val":[{"key":"name","val":"type"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"},"val":[{"key":"configFieldsPath","attr":{"ref":"configFields"}}]}]},{"key":"validation","val":[{"key":"name","val":"validation"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.validation"}}]},{"key":"status","val":[{"key":"name","val":"status"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"actorGroups","val":[{"key":"name","val":"actorGroups"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]}]},{"key":"path","val":"frontend/types/typeField.xml"},{"key":"ext","val":"xml"}]},{"key":"undefined","val":[{"key":"path","val":"frontend/types/undefined.xml"},{"key":"ext","val":"xml"}]},{"key":"url","val":[{"key":"description","val":"External url"},{"key":"path","val":"frontend/types/url.xml"},{"key":"ext","val":"xml"}]},{"key":"username","val":[{"key":"path","val":"frontend/types/username.xml"},{"key":"ext","val":"xml"}]},{"key":"validation","val":[{"key":"description"},{"key":"fields","val":[{"key":"isRequired","val":[{"key":"name","val":"required"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.bool"}}]},{"key":"regex","val":[{"key":"name","val":"regex"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"annotations","val":[{"key":"name","val":"annotations"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"filters","val":[{"key":"name","val":"filters"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.validationFilter"}}]}]}]},{"key":"path","val":"frontend/types/validation.xml"},{"key":"ext","val":"xml"}]},{"key":"validationFilter","val":[{"key":"description","VAL_CDATA":" "},{"key":"fields","val":[{"key":"filter","val":[{"key":"name","val":"filter"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.queryCondition"}}]},{"key":"status","val":[{"key":"name","val":"status"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.validationStatus"}}]}]},{"key":"path","val":"frontend/types/validationFilter.xml"},{"key":"ext","val":"xml"}]},{"key":"validationStatus","val":[{"key":"description","VAL_CDATA":"\n             Return value of validation filter.\n            "},{"key":"fields","val":[{"key":"level","val":[{"key":"name","val":"level"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"message","val":[{"key":"name","val":"message"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]}]},{"key":"path","val":"frontend/types/validationStatus.xml"},{"key":"ext","val":"xml"}]},{"key":"win","val":[{"key":"fields","val":[{"key":"name","val":[{"key":"name","val":"name"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.text"}}]},{"key":"item","val":[{"key":"name","val":"item"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]},{"key":"path","val":"frontend/types/win.xml"},{"key":"ext","val":"xml"}]},{"key":"winMouseEvents","val":[{"key":"fields","val":[{"key":"ctxmenu","val":[{"key":"name","val":"ctxmenu"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"},"val":[{"key":"arrayFormId","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.command"}}]}]},{"key":"click","val":[{"key":"name","val":"click"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]},{"key":"dblclick","val":[{"key":"name","val":"dblclick"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]},{"key":"mouseover","val":[{"key":"name","val":"mouseover"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.function"}}]}]},{"key":"path","val":"frontend/types/winMouseEvents.xml"},{"key":"ext","val":"xml"}]}]},{"key":"theModel_services","val":[{"key":"createItem","val":[{"key":"name","val":"createItem"},{"key":"fields"},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}},{"key":"path","val":"server/services/createItem.xml"},{"key":"ext","val":"xml"}]},{"key":"deleteItem","val":[{"key":"name","val":"deleteItem"},{"key":"fields"},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}},{"key":"path","val":"server/services/deleteItem.xml"},{"key":"ext","val":"xml"}]},{"key":"doInit","val":[{"key":"name","val":"doInit"},{"key":"description","VAL_CDATA":" Roles are retrieved when app is loaded.    "},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}},{"key":"fields"},{"key":"path","val":"server/services/doInit.xml"},{"key":"ext","val":"xml"}]},{"key":"doQuery","val":[{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"}},{"key":"name","val":"doQuery"},{"key":"fields","val":[{"key":"query","val":[{"key":"name","val":"query"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.query"}}]}]},{"key":"path","val":"server/services/doQuery.xml"},{"key":"ext","val":"xml"}]},{"key":"extractApp","val":[{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"}},{"key":"name","val":"extractApp"},{"key":"fields","val":[{"key":"appPath","val":[{"key":"name","val":"appPath"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]}]},{"key":"path","val":"server/services/extractApp.xml"},{"key":"ext","val":"xml"}]},{"key":"importApp","val":[{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"}},{"key":"name","val":"importApp"},{"key":"fields","val":[{"key":"colPath","val":[{"key":"name","val":"colPath"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]},{"key":"app","val":[{"key":"name","val":"app"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]}]},{"key":"path","val":"server/services/importApp.xml"},{"key":"ext","val":"xml"}]},{"key":"loginServer","val":[{"key":"name","val":"loginServer"},{"key":"access","attr":{"ref":"private"}},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}},{"key":"fields"},{"key":"path","val":"server/services/loginServer.xml"},{"key":"ext","val":"xml"}]},{"key":"logoutServer","val":[{"key":"name","val":"logoutServer"},{"key":"access","attr":{"ref":"private"}},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}},{"key":"fields"},{"key":"path","val":"server/services/logoutServer.xml"},{"key":"ext","val":"xml"}]},{"key":"replaceDs","val":[{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.array"}},{"key":"name","val":"replaceDs"},{"key":"fields","val":[{"key":"colPath","val":[{"key":"name","val":"colPath"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.itemRelRef"}}]},{"key":"app","val":[{"key":"name","val":"app"},{"key":"type","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}}]}]},{"key":"path","val":"server/services/replaceDs.xml"},{"key":"ext","val":"xml"}]},{"key":"retrieveItem","val":[{"key":"name","val":"retrieveItem"},{"key":"fields"},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}},{"key":"path","val":"server/services/retrieveItem.xml"},{"key":"ext","val":"xml"}]},{"key":"testItems","val":[{"key":"name","val":"testItems"},{"key":"fields"},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}},{"key":"query","val":[{"key":"select","val":[{"key":"field","attr":{"ref":"*"}}]},{"key":"from","val":[{"key":"path","attr":{"ref":"testItems"}}]}]},{"key":"path","val":"server/services/testItems.xml"},{"key":"ext","val":"xml"}]},{"key":"updateItem","val":[{"key":"name","val":"updateItem"},{"key":"fields"},{"key":"returnType","attr":{"ref":"theModel.clientWorkspace.libs.standard.types.undefined"}},{"key":"path","val":"server/services/updateItem.xml"},{"key":"ext","val":"xml"}]}]}]}