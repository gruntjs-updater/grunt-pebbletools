<i>
  <theModel_libs_standard_types>
    <color/>
    <basicType>
      <inherits ref="theModel.libs.standard.types.basicTypeBase"/>
      <fields>
        <description>
          <name>description</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </description>
        <configType>
          <name>configType</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </configType>
      </fields>
    </basicType>
    <bool>
      <description/>
    </bool>
    <functionDef>
      <inherits ref="theModel.libs.standard.types.superBase"/>
      <fields>
        <name>
          <name>name</name>
          <type ref="theModel.libs.standard.types.text"/>
        </name>
        <description>
          <name>description</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </description>
        <code>
          <name>code</name>
          <type ref="theModel.libs.standard.types.text"/>
        </code>
        <execCode>
          <name>execCode</name>
          <type ref="theModel.libs.standard.types.function"/>
        </execCode>
        <access>
          <name>access</name>
          <type ref="theModel.libs.standard.types.text"/>
        </access>
        <returnType>
          <name>returnType</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </returnType>
      </fields>
    </functionDef>
    <dataAccess>
      <description>
        <![CDATA[data read/write access definition.  Access is checked top-to-bottom]]>
      </description>
      <fields>
        <baseReadFilter>
          <name>baseReadFilter</name>
          <type ref="theModel.libs.standard.types.queryCondition"/>
        </baseReadFilter>
        <baseWriteFilter>
          <name>baseReadFilter</name>
          <type ref="theModel.libs.standard.types.queryCondition"/>
        </baseWriteFilter>
        <readAccess>
          <name>read access</name>
          <description>
            <![CDATA[specify general to details as they get filtered.]]>
          </description>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.dataPathAccess"/>
          </type>
        </readAccess>
        <writeAccess>
          <name>write access</name>
          <description>
            <![CDATA[specify general to details as they get filtered.]]>
          </description>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.dataPathAccess"/>
          </type>
        </writeAccess>
      </fields>
    </dataAccess>
    <pixelOffset>
      <fields>
        <x>
          <name>x</name>
          <type ref="theModel.libs.standard.types.number"/>
        </x>
        <y>
          <name>y</name>
          <type ref="theModel.libs.standard.types.number"/>
        </y>
      </fields>
    </pixelOffset>
    <superBase>
      <description>
        <![CDATA[  ]]>
      </description>
      <inherits ref="theModel.libs.standard.types.pebbleBase"/>
      <fields>
        <fields>
          <name>fields</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.typeField"/>
          </type>
        </fields>
      </fields>
    </superBase>
    <basicTypeBase>
      <description>
        <![CDATA[ This is the base for all basicTypes. ]]>
      </description>
      <inherits ref="theModel.libs.standard.types.superBase"/>
      <fields>
        <inherits>
          <name>inherits</name>
          <type ref="theModel.libs.standard.types.itemRelRef">
            <itemPath ref="theModel.clientWorkspace.libs.standard.types"/>
          </type>
        </inherits>
      </fields>
    </basicTypeBase>
    <dragDrop>
      <description>
        <![CDATA[ ]]>
      </description>
      <fields>
        <draggable>
          <name>draggable</name>
          <type ref="theModel.libs.standard.types.bool"/>
        </draggable>
        <onDrop>
          <name>onDrop</name>
          <type ref="theModel.libs.standard.types.function"/>
        </onDrop>
      </fields>
    </dragDrop>
    <text/>
    <undefined/>
    <pebbleBase>
      <description>
        <![CDATA[This is the base for all items.]]>
      </description>
      <fields/>
    </pebbleBase>
    <queryCondition>
      <fields/>
    </queryCondition>
    <tag/>
    <validation>
      <description/>
      <fields>
        <isRequired>
          <name>required</name>
          <type ref="theModel.libs.standard.types.bool"/>
        </isRequired>
        <regex>
          <name>regex</name>
          <type ref="theModel.libs.standard.types.text"/>
        </regex>
        <annotations>
          <name>annotations</name>
          <type ref="theModel.libs.standard.types.text"/>
        </annotations>
        <filters>
          <name>filters</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.validationFilter"/>
          </type>
        </filters>
      </fields>
    </validation>
    <url>
      <description>External url</description>
    </url>
    <winMouseEvents>
      <fields>
        <ctxmenu>
          <name>ctxmenu</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.command"/>
          </type>
        </ctxmenu>
        <click>
          <name>click</name>
          <type ref="theModel.libs.standard.types.function"/>
        </click>
        <dblclick>
          <name>dblclick</name>
          <type ref="theModel.libs.standard.types.function"/>
        </dblclick>
        <mouseover>
          <name>mouseover</name>
          <type ref="theModel.libs.standard.types.function"/>
        </mouseover>
      </fields>
    </winMouseEvents>
    <command>
      <fields>
        <text>
          <name>text</name>
          <type ref="theModel.libs.standard.types.text"/>
        </text>
        <function>
          <name>function</name>
          <type ref="theModel.libs.standard.types.function"/>
        </function>
        <sub>
          <name>sub</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.command"/>
          </type>
        </sub>
      </fields>
    </command>
    <displayControlFilter>
      <description/>
      <fields>
        <filter>
          <name>filter</name>
          <type ref="theModel.libs.standard.types.queryCondition"/>
        </filter>
        <displayControl>
          <name>displayControl</name>
          <type ref="theModel.libs.standard.types.displayControl"/>
        </displayControl>
      </fields>
    </displayControlFilter>
    <validationFilter>
      <description>
        <![CDATA[ ]]>
      </description>
      <fields>
        <filter>
          <name>filter</name>
          <type ref="theModel.libs.standard.types.queryCondition"/>
        </filter>
        <status>
          <name>status</name>
          <type ref="theModel.libs.standard.types.validationStatus"/>
        </status>
      </fields>
    </validationFilter>
    <dataPathAccess>
      <description>
        <![CDATA[Access permissions for one data path.]]>
      </description>
      <fields>
        <path>
          <name>path</name>
          <description>
            <![CDATA[Access permissions for one data path.]]>
          </description>
          <type ref="theModel.libs.standard.types.text"/>
        </path>
        <excludeSubPaths>
          <name>exclude sub paths</name>
          <description>
            <![CDATA[exclude sub paths (default is include).]]>
          </description>
          <type ref="theModel.libs.standard.types.bool"/>
        </excludeSubPaths>
        <subPaths>
          <name>sub paths</name>
          <description>
            <![CDATA[sub paths to include/exclude from parent path.]]>
          </description>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.text"/>
          </type>
        </subPaths>
        <condition>
          <name>condition</name>
          <description>
            <![CDATA[Optional condition for access.]]>
          </description>
          <type ref="theModel.libs.standard.types.queryCondition"/>
        </condition>
      </fields>
    </dataPathAccess>
    <itemRelRef>
      <description>
        <![CDATA[An itemRelRef represents a selection of and item on an array in the datastore (has a global address path). ]]>
      </description>
      <configFields>
        <relArray>
          <name>relArray</name>
          <description>Convenient way to make embedded selections. Only
				supports text</description>
          <type ref="theModel.clientWorkspace.libs.standard.types.array">
            <arrayFormId ref="theModel.clientWorkspace.libs.standard.types.text"/>
          </type>
        </relArray>
        <itemPath>
          <name>itemPath</name>
          <type ref="theModel.clientWorkspace.libs.standard.types.itemRelRef"/>
        </itemPath>
      </configFields>
    </itemRelRef>
    <control>
      <inherits ref="theModel.libs.standard.types.superBase"/>
      <fields>
        <description>
          <name>description</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </description>
        <innerMarkup>
          <name>innerMarkup</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </innerMarkup>
        <functions>
          <name>functions</name>
          <type ref="theModel.libs.standard.types.collection">
            <arrayFormId ref="theModel.libs.standard.types.functionDef"/>
          </type>
        </functions>
        <fixedData>
          <name>fixedData</name>
          <type ref="theModel.libs.standard.types.undefined"/>
        </fixedData>
        <inherits>
          <name>inherits</name>
          <type ref="theModel.libs.standard.types.itemRelRef">
            <itemPath ref="theModel.clientWorkspace.libs.standard.controls"/>
          </type>
        </inherits>
      </fields>
    </control>
    <file>
      <fields>
        <filename>
          <name>filename</name>
          <type ref="theModel.libs.standard.types.text"/>
        </filename>
        <key>
          <name>key</name>
          <type ref="theModel.libs.standard.types.text"/>
        </key>
        <contentType>
          <name>contentType</name>
          <type ref="theModel.libs.standard.types.text"/>
        </contentType>
        <size>
          <name>size</name>
          <type ref="theModel.libs.standard.types.number"/>
        </size>
        <creationDate>
          <name>creationDate</name>
          <type ref="theModel.libs.standard.types.date"/>
        </creationDate>
      </fields>
    </file>
    <filter>
      <description>
        <![CDATA[ Filter ]]>
      </description>
      <inherits ref="theModel.libs.standard.types.superBase"/>
      <fields>
        <name>
          <name>name</name>
          <type ref="theModel.libs.standard.types.text"/>
        </name>
        <description>
          <name>description</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </description>
      </fields>
    </filter>
    <displayControl>
      <description>
        <![CDATA[ Specifies the control to display an item ]]>
      </description>
      <fields>
        <innerMarkup>
          <name>innerMarkup</name>
          <type ref="theModel.libs.standard.types.undefined"/>
        </innerMarkup>
        <mapPath>
          <name>mapPath</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </mapPath>
      </fields>
    </displayControl>
    <number/>
    <function>
      <fields>
        <exec>
          <name>function</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </exec>
      </fields>
    </function>
    <array>
      <description>
        <![CDATA[An array can be both a list or collection. ]]>
      </description>
      <configFields>
        <arrayFormId>
          <name>array type</name>
          <type ref="theModel.clientWorkspace.libs.standard.types.itemRelRef"/>
        </arrayFormId>
      </configFields>
    </array>
    <password/>
    <date/>
    <win>
      <fields>
        <name>
          <name>name</name>
          <type ref="theModel.libs.standard.types.text"/>
        </name>
        <item>
          <name>item</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </item>
      </fields>
    </win>
    <rtc>
      <description>
        <![CDATA[rtc.]]>
      </description>
      <fields>
        <offer>
          <name>offer</name>
          <type ref="theModel.libs.standard.types.text"/>
        </offer>
        <offerCandidate>
          <name>offerCandidate</name>
          <type ref="theModel.libs.standard.types.text"/>
        </offerCandidate>
        <answer>
          <name>answer</name>
          <type ref="theModel.libs.standard.types.text"/>
        </answer>
        <answerCandidate>
          <name>anserCandidate</name>
          <type ref="theModel.libs.standard.types.text"/>
        </answerCandidate>
        <cancelled>
          <name>cancelled</name>
          <type ref="theModel.libs.standard.types.bool"/>
        </cancelled>
      </fields>
    </rtc>
    <username/>
    <validationStatus>
      <description>
        <![CDATA[
             Return value of validation filter.
            ]]>
      </description>
      <fields>
        <level>
          <name>level</name>
          <type ref="theModel.libs.standard.types.text"/>
        </level>
        <message>
          <name>message</name>
          <type ref="theModel.libs.standard.types.text"/>
        </message>
      </fields>
    </validationStatus>
    <query>
      <fields>
        <path>
          <name>ancestor path</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </path>
        <index>
          <name>index</name>
          <type ref="theModel.libs.standard.types.number"/>
        </index>
        <rows>
          <name>rows</name>
          <type ref="theModel.libs.standard.types.number"/>
        </rows>
        <condition>
          <name>condition</name>
          <type ref="theModel.libs.standard.types.queryCondition"/>
        </condition>
      </fields>
    </query>
    <typeField>
      <fields>
        <name>
          <name>name</name>
          <type ref="theModel.libs.standard.types.text"/>
        </name>
        <description>
          <name>description</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </description>
        <type>
          <name>type</name>
          <type ref="theModel.libs.standard.types.itemRelRef">
            <configFieldsPath ref="configFields"/>
          </type>
        </type>
        <validation>
          <name>validation</name>
          <type ref="theModel.libs.standard.types.validation"/>
        </validation>
        <status>
          <name>status</name>
          <type ref="theModel.libs.standard.types.text"/>
        </status>
        <actorGroups>
          <name>actorGroups</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.itemRelRef"/>
          </type>
        </actorGroups>
      </fields>
    </typeField>
    <mailAddress/>
    <locationRange>
      <fields>
        <locStart>
          <name>locStart</name>
          <type ref="theModel.libs.standard.types.location"/>
        </locStart>
        <locEnd>
          <name>locEnd</name>
          <type ref="theModel.libs.standard.types.location"/>
        </locEnd>
      </fields>
    </locationRange>
    <arrayPage>
      <fields>
        <name>
          <name>name</name>
          <type ref="theModel.libs.standard.types.text"/>
        </name>
      </fields>
    </arrayPage>
    <markup/>
    <locationArea>
      <fields>
        <name>
          <name>name</name>
          <type ref="theModel.libs.standard.types.text"/>
        </name>
        <locAreas>
          <name>locAreas</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.locationArea"/>
          </type>
        </locAreas>
      </fields>
    </locationArea>
    <location>
      <fields>
        <lat>
          <name>lat</name>
          <type ref="theModel.libs.standard.types.number"/>
        </lat>
        <lng>
          <name>lng</name>
          <type ref="theModel.libs.standard.types.number"/>
        </lng>
      </fields>
    </location>
    <globalIndexItem>
      <description>
        <![CDATA[ ]]>
      </description>
      <fields>
        <text>
          <name>name</name>
          <type ref="theModel.libs.standard.types.text"/>
        </text>
        <description>
          <name>description</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </description>
        <hash>
          <name>hash</name>
          <type ref="theModel.libs.standard.types.text"/>
        </hash>
      </fields>
    </globalIndexItem>
    <sortField>
      <fields>
        <name>
          <name>name</name>
          <type ref="theModel.libs.standard.types.text"/>
        </name>
        <sortDir>
          <name>sortDir</name>
          <type ref="theModel.libs.standard.types.text"/>
        </sortDir>
      </fields>
    </sortField>
    <testItem>
      <fields>
        <text>
          <name>text</name>
          <description>
            <![CDATA[test text field, required]]>
          </description>
          <type ref="theModel.libs.standard.types.text"/>
          <validation>
            <isRequired>true</isRequired>
          </validation>
        </text>
        <markup>
          <name>markup</name>
          <description>
            <![CDATA[test markup field]]>
          </description>
          <type ref="theModel.libs.standard.types.markup"/>
        </markup>
        <number>
          <name>number</name>
          <description>
            <![CDATA[test number field]]>
          </description>
          <type ref="theModel.libs.standard.types.number"/>
        </number>
        <url>
          <name>url</name>
          <description>
            <![CDATA[test url field]]>
          </description>
          <type ref="theModel.libs.standard.types.url"/>
        </url>
        <date>
          <name>date</name>
          <description>
            <![CDATA[test date field]]>
          </description>
          <type ref="theModel.libs.standard.types.date"/>
        </date>
        <bool>
          <name>bool</name>
          <description>
            <![CDATA[test bool field]]>
          </description>
          <type ref="theModel.libs.standard.types.bool"/>
        </bool>
        <color>
          <name>color</name>
          <description>
            <![CDATA[test color field]]>
          </description>
          <type ref="theModel.libs.standard.types.color"/>
        </color>
        <file>
          <name>file</name>
          <type ref="theModel.libs.standard.types.file"/>
        </file>
        <referenceExternal>
          <name>referenceExternal</name>
          <type ref="theModel.libs.standard.types.itemRelRef">
            <itemPath ref="theModel.testItems"/>
          </type>
        </referenceExternal>
        <referenceEmbedded>
          <name>referenceEmbedded</name>
          <type ref="theModel.libs.standard.types.itemRelRef">
            <relArray>
              <a0>Category 1</a0>
              <a1>Category 2</a1>
              <a2>Category 3</a2>
              <a3>Category 4</a3>
              <a4>Category 5</a4>
            </relArray>
          </type>
        </referenceEmbedded>
        <referenceExternalMultiple>
          <name>referenceExternalMultiple</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.itemRelRef">
              <itemPath ref="theApp.theControlApp.libs"/>
            </arrayFormId>
          </type>
        </referenceExternalMultiple>
        <referenceEmbeddedMultiple>
          <name>referenceEmbeddedMultiple</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.itemRelRef">
              <relArray>
                <a0>Category 1</a0>
                <a1>Category 2</a1>
                <a2>Category 3</a2>
                <a3>Category 4</a3>
                <a4>Category 5</a4>
              </relArray>
            </arrayFormId>
          </type>
        </referenceEmbeddedMultiple>
      </fields>
    </testItem>
    <expressionFilter>
      <description>
        <![CDATA[ ]]>
      </description>
      <fields>
        <description>
          <name>description</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </description>
        <code>
          <name>code</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </code>
      </fields>
    </expressionFilter>
    <clientGlobal>
      <fields>
        <userId>
          <name>userId</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </userId>
        <isAuth>
          <name>isAuth</name>
          <type ref="theModel.libs.standard.types.bool"/>
        </isAuth>
        <roles>
          <name>roles</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.text"/>
          </type>
        </roles>
      </fields>
    </clientGlobal>
    <customValidation>
      <description>
        <![CDATA[ ]]>
      </description>
      <fields>
        <description>
          <name>description</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </description>
        <code>
          <name>code</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </code>
      </fields>
    </customValidation>
    <collection>
      <description>
        <![CDATA[An collection of documents. ]]>
      </description>
      <configFields>
        <arrayFormId>
          <name>collection type</name>
          <type ref="theModel.clientWorkspace.libs.standard.types.itemRelRef"/>
        </arrayFormId>
      </configFields>
    </collection>
    <standard>
      <fields>
        <name>
          <name>name</name>
          <type ref="theModel.libs.standard.types.text"/>
        </name>
        <description>
          <name>description</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </description>
        <testItem>
          <name>testItem</name>
          <type ref="theModel.libs.standard.types.testItem"/>
        </testItem>
        <testItems>
          <name>testItems</name>
          <type ref="theModel.libs.standard.types.collection">
            <arrayFormId ref="theModel.libs.standard.types.testItem"/>
          </type>
        </testItems>
        <testEmbItems>
          <name>testEmbItems</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.testItem"/>
          </type>
        </testEmbItems>
      </fields>
    </standard>
  </theModel_libs_standard_types>
  <theModel_libs_standard_controls_ArrayTreeBase_functions>
    <setSingleSelectedItemByMeta>
      <name>setSelectedItemByMeta</name>
      <fields>
        <meta>
          <name>meta</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </meta>
      </fields>
      <returnType ref="theModel.libs.standard.types.undefined"/>
    </setSingleSelectedItemByMeta>
    <setSingleSelectedItem>
      <name>setSelectedItem</name>
      <fields>
        <path>
          <name>path</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </path>
      </fields>
      <returnType ref="theModel.libs.standard.types.undefined"/>
    </setSingleSelectedItem>
    <create>
      <name>create</name>
      <description>
        <![CDATA[Call crud.create]]>
      </description>
      <fields>
        <withData>
          <name>withData</name>
          <type ref="theModel.libs.standard.types.undefined"/>
        </withData>
      </fields>
      <returnType ref="theModel.libs.standard.types.undefined"/>
    </create>
    <delete>
      <name>delete</name>
      <fields/>
      <returnType ref="theModel.libs.standard.types.undefined"/>
    </delete>
  </theModel_libs_standard_controls_ArrayTreeBase_functions>
  <theModel_libs_standard_controls>
    <ArrayTreeBase>
      <description>
        <![CDATA[Base for controls handling arrays.]]>
      </description>
      <fields>
        <_arrayPages>
          <name>_arrayPages</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.arrayPage"/>
          </type>
        </_arrayPages>
        <filter>
          <name>collection filter</name>
          <description>
            <![CDATA[only used by collections.  Only one control should control what is retrieved.]]>
          </description>
          <type ref="theModel.libs.standard.types.queryCondition"/>
        </filter>
        <showRecsFilter>
          <name>control filter</name>
          <description>
            <![CDATA[filters the records for this control.]]>
          </description>
          <type ref="theModel.libs.standard.types.queryCondition"/>
        </showRecsFilter>
        <selectionAction>
          <name>selectionAction</name>
          <type ref="theModel.libs.standard.types.function"/>
        </selectionAction>
        <beforeSelectionAction>
          <name>beforeSelectionAction</name>
          <type ref="theModel.libs.standard.types.function"/>
        </beforeSelectionAction>
        <itemsPerPage>
          <name>itemsPerPage</name>
          <type ref="theModel.libs.standard.types.number"/>
        </itemsPerPage>
        <sortFields>
          <name>sortFields</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.sortField"/>
          </type>
        </sortFields>
        <writeFields>
          <name>write fields</name>
          <description>
            <![CDATA[specify write fields to ensure only certain fields are updated (no specification results in the entire item being updated).]]>
          </description>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.text"/>
          </type>
        </writeFields>
        <collection>
          <name>collection</name>
          <type ref="theModel.libs.standard.types.array"/>
        </collection>
      </fields>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <functions>
        <_compressedCollection>true</_compressedCollection>
      </functions>
    </ArrayTreeBase>
    <ClientControl>
      <description>
        <![CDATA[This is the base for all controls (client / server).]]>
      </description>
      <fields>
        <beforeload>
          <name>beforeload</name>
          <type ref="theModel.libs.standard.types.function"/>
        </beforeload>
        <afterload>
          <name>afterload</name>
          <type ref="theModel.libs.standard.types.function"/>
        </afterload>
        <onDataChangeLogic>
          <name>onDataChangeLogic</name>
          <type ref="theModel.libs.standard.types.function"/>
        </onDataChangeLogic>
        <onSaved>
          <name>onSaved</name>
          <description>
            <![CDATA[Executed on edit item (top) after control data set to model.  A common use is to createArrayItem withData]]>
          </description>
          <type ref="theModel.libs.standard.types.function"/>
        </onSaved>
        <innerMarkup>
          <name>innerMarkup</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </innerMarkup>
      </fields>
      <functions>
        <_compressedCollection>true</_compressedCollection>
      </functions>
    </ClientControl>
    <richTextEditor>
      <description>
        <![CDATA[Rich Text Area enables a editable content area. ]]>
      </description>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>markup</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </model>
        <onKeyUp>
          <name>onKeyUp</name>
          <type ref="theModel.libs.standard.types.function"/>
        </onKeyUp>
      </fields>
      <functions>
        <_compressedCollection>true</_compressedCollection>
      </functions>
    </richTextEditor>
    <PeerConnectionBase>
      <description>
        <![CDATA[Base for controls handling signaling for rtc.]]>
      </description>
      <fields>
        <model>
          <name>rtc</name>
          <description>
            <![CDATA[rtc.]]>
          </description>
          <type ref="theModel.libs.standard.types.rtc"/>
        </model>
      </fields>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    </PeerConnectionBase>
    <AppControlBase>
      <description>
        <![CDATA[ ]]>
      </description>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <path>
          <name>path</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </path>
        <global>
          <name>global</name>
          <type ref="theModel.libs.standard.types.clientGlobal"/>
        </global>
      </fields>
    </AppControlBase>
    <Template>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>anything</name>
          <type ref="theModel.libs.standard.types.undefined"/>
        </model>
        <template>
          <name>template</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </template>
      </fields>
    </Template>
    <ReferenceArray>
      <description/>
      <fields/>
      <inherits ref="theModel.libs.standard.controls.ArrayTreeBase"/>
    </ReferenceArray>
    <Reference>
      <description/>
      <fields>
        <model>
          <name>reference</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </model>
        <onSelected>
          <name>onSelected</name>
          <type ref="theModel.libs.standard.types.function"/>
        </onSelected>
        <innerArray>
          <name>innerArray</name>
          <type ref="theModel.libs.standard.types.array"/>
        </innerArray>
      </fields>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <functions>
        <_compressedCollection>true</_compressedCollection>
      </functions>
    </Reference>
    <DynControl>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>reference</name>
          <type ref="theModel.libs.standard.types.undefined"/>
        </model>
        <displayControlFilters>
          <name>displayControlFilters</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.displayControlFilter"/>
          </type>
        </displayControlFilters>
      </fields>
    </DynControl>
    <FileInputCSV>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>anything</name>
          <type ref="theModel.libs.standard.types.undefined"/>
        </model>
      </fields>
    </FileInputCSV>
    <FileInputText>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>anything</name>
          <type ref="theModel.libs.standard.types.undefined"/>
        </model>
      </fields>
    </FileInputText>
    <FileInputImage>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>anything</name>
          <type ref="theModel.libs.standard.types.undefined"/>
        </model>
      </fields>
    </FileInputImage>
    <FileInputPebble>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>anything</name>
          <type ref="theModel.libs.standard.types.undefined"/>
        </model>
      </fields>
    </FileInputPebble>
    <dropzoneClientDatasource>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>anything</name>
          <type ref="theModel.libs.standard.types.undefined"/>
        </model>
        <template>
          <name>template</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </template>
      </fields>
    </dropzoneClientDatasource>
    <referenceTextInput>
      <description/>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>markup</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </model>
      </fields>
    </referenceTextInput>
    <text>
      <description/>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>text</name>
          <type ref="theModel.libs.standard.types.text"/>
        </model>
      </fields>
    </text>
    <ArrayControl>
      <description>
        <![CDATA[ ]]>
      </description>
      <fields>
        <displayControl>
          <name>display control</name>
          <type ref="theModel.libs.standard.types.displayControl"/>
        </displayControl>
      </fields>
      <inherits ref="theModel.libs.standard.controls.ArrayTreeBase"/>
    </ArrayControl>
    <ArrayStackControl>
      <inherits ref="theModel.libs.standard.controls.ArrayControl"/>
      <fields>
        <model>
          <name>array</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.text"/>
          </type>
        </model>
      </fields>
    </ArrayStackControl>
    <ArraySingleControl>
      <inherits ref="theModel.libs.standard.controls.ArrayControl"/>
      <fields>
        <model>
          <name>array</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.text"/>
          </type>
        </model>
      </fields>
    </ArraySingleControl>
    <StackPanel>
      <description>
        <![CDATA[ Displays one module at a time.  ]]>
      </description>
      <inherits ref="theModel.libs.standard.controls.ArrayTreeBase"/>
      <fields>
        <model>
          <name>model</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.win"/>
          </type>
        </model>
        <animationDuration>
          <name>animationDuration</name>
          <type ref="theModel.libs.standard.types.number"/>
        </animationDuration>
      </fields>
    </StackPanel>
    <checkBox>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>bool</name>
          <type ref="theModel.libs.standard.types.bool"/>
        </model>
      </fields>
    </checkBox>
    <textInput>
      <description/>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>text</name>
          <type ref="theModel.libs.standard.types.text"/>
        </model>
        <onKeyUp>
          <name>onKeyUp</name>
          <type ref="theModel.libs.standard.types.function"/>
        </onKeyUp>
      </fields>
    </textInput>
    <ArraySelect>
      <inherits ref="theModel.libs.standard.controls.ArrayControl"/>
      <fields>
        <model>
          <name>array</name>
          <type ref="theModel.libs.standard.types.array">
            <arrayFormId ref="theModel.libs.standard.types.command"/>
          </type>
        </model>
      </fields>
    </ArraySelect>
    <markup>
      <description/>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>markup</name>
          <type ref="theModel.libs.standard.types.markup"/>
        </model>
      </fields>
    </markup>
    <Panel>
      <description>
        <![CDATA[ panel.]]>
      </description>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>displayControl</name>
          <type ref="theModel.libs.standard.types.displayControl"/>
        </model>
      </fields>
    </Panel>
    <download>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>anything</name>
          <type ref="theModel.libs.standard.types.undefined"/>
        </model>
        <text>
          <name>text</name>
          <type ref="theModel.libs.standard.types.text"/>
        </text>
      </fields>
    </download>
    <testImage>
      <inherits ref="theModel.libs.standard.controls.AppControlBase"/>
      <fields>
        <model>
          <name>standard</name>
          <type ref="theModel.libs.standard.types.standard"/>
        </model>
        <url>
          <name>url</name>
          <type ref="theModel.libs.standard.types.url"/>
        </url>
      </fields>
      <innerMarkup>
        <div>
          <input type="text" placeholder="http://placehold.it/350x150">
            <control ref="standard:textInput">
              <containerEvents>
                <blur>
                  <exec ref="this.setControlDataToModel"/>
                </blur>
              </containerEvents>
              <model>
                <_bind ref="url"/>
              </model>
            </control>
          </input>
        </div>
        <div>
          <input type="file">
            <control ref="standard:FileInputImage">
              <model>
                <_bind ref="url"/>
              </model>
            </control>
          </input>
        </div>
        <div>
          <a href="#" download="file.file">
            <control ref="standard:download">
              <extactText>download me!</extactText>
              <model>
                <_bind ref="url"/>
              </model>
            </control>
          </a>
        </div>
        <img src="{{this.url}}"/>
        <select>
          <control ref="standard:ArraySelect">
            <childElement>
              <option/>
            </childElement>
            <displayControl>
              <innerMarkup>{{item.text}}</innerMarkup>
            </displayControl>
            <model>
              <a0>
                <text>Full Date/Time</text>
                <function>
                  <exec ref="win2.setDisabled"/>
                  <exec ref="win2.setValue">
                    <text>EEEE, MMMM d, y h:mm:ss a zzzz</text>
                  </exec>
                </function>
              </a0>
              <a1>
                <text>Long Date/Time</text>
                <function>
                  <exec ref="win2.setDisabled"/>
                  <exec ref="win2.setValue">
                    <text>MMMM d, y h:mm:ss a z</text>
                  </exec>
                </function>
              </a1>
              <a10>
                <text>Custom</text>
                <function>
                  <exec ref="win2.setEnabled"/>
                </function>
              </a10>
            </model>
          </control>
        </select>
        <div>
          <input type="text">
            <control id="win2" ref="standard:textInput">
              <model>
                <_bind ref="model"/>
              </model>
            </control>
          </input>
        </div>
      </innerMarkup>
    </testImage>
    <testNumber>
      <inherits ref="theModel.libs.standard.controls.AppControlBase"/>
      <fields>
        <model>
          <name>testApp</name>
          <type ref="theModel.libs.standard.types.standard"/>
        </model>
        <number>
          <name>number</name>
          <type ref="theModel.libs.standard.types.number"/>
        </number>
      </fields>
      <innerMarkup>
        <progress style="font-size:30px;width:300px;" max="100">
          <control ref="standard:numberInput">
            <model>
              <_bind ref="number"/>
            </model>
          </control>
        </progress>
        <div>
          <meter style="font-size:30px;width:300px;" max="100" min="0" high="80" low="20">
            <control ref="standard:numberInput">
              <model>
                <_bind ref="number"/>
              </model>
            </control>
          </meter>
        </div>
      </innerMarkup>
    </testNumber>
    <testDragDrop>
      <inherits ref="theModel.libs.standard.controls.AppControlBase"/>
      <fields>
        <model>
          <name>testApp</name>
          <type ref="theModel.libs.standard.types.standard"/>
        </model>
      </fields>
      <innerMarkup>
        <div class="horizontal">
          <control ref="standard:ArrayControl">
            <childElement>
              <div/>
            </childElement>
            <displayControl ref="standard:text">
              <mapPath ref="text"/>
              <dragDrop>
                <draggable>true</draggable>
                <ondrop>
                  <exec ref="this.alert">
                    <message>hello!</message>
                  </exec>
                </ondrop>
              </dragDrop>
              <triggers>
                <func ref="this.setClass">
                  <class>{{this.model._ddSide=="INNER"?"overProxySide_INNER":this.model._ddSide=="TOP"?"overProxySide_TOP":this.model._ddSide=="BOT"?"overProxySide_BOT":this.model._ddSide=="RIGHT"?"overProxySide_RIGHT":this.model._ddSide=="LEFT"?"overProxySide_LEFT":""}}</class>
                </func>
              </triggers>
            </displayControl>
            <model>
              <_bind ref="model.testEmbItems"/>
            </model>
          </control>
        </div>
      </innerMarkup>
    </testDragDrop>
    <testAppControl>
      <inherits ref="theModel.libs.standard.controls.AppControlBase"/>
      <fields>
        <model>
          <name>standard</name>
          <type ref="theModel.libs.standard.types.standard"/>
        </model>
        <testItem>
          <name>testItem</name>
          <type ref="theModel.libs.standard.types.testItem"/>
        </testItem>
      </fields>
    </testAppControl>
    <util-testItem>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>text</name>
          <type ref="theModel.libs.standard.types.testItem"/>
        </model>
        <titleClick>
          <name>titleClick</name>
          <type ref="theModel.libs.standard.types.function"/>
        </titleClick>
        <onDeleteBtnClick>
          <name>onDeleteBtnClick</name>
          <type ref="theModel.libs.standard.types.function"/>
        </onDeleteBtnClick>
      </fields>
      <fixedData>
        <triggers>
          <func1 ref="this.setClass">
            <class>{{this.model._selection.marked.selected ? "active" : ""}}</class>
          </func1>
          <func2 ref="this.setClass">
            <class>{{this.model._selection.default.selected ? "active" : ""}}</class>
          </func2>
        </triggers>
      </fixedData>
      <innerMarkup>
        <div>
          <control id="mainStackPanel" ref="standard:StackPanel">
            <initModule ref="show"/>
            <autoHeight>true</autoHeight>
            <model>
              <show>
                <innerMarkup>
                  <table>
                    <tr>
                      <td>{{this.model.text._field.name}}</td>
                      <td onclick="{{ctx.titleClick}}">
                        <control ref="standard:text">
                          <model>
                            <_bind ref="model.text"/>
                          </model>
                        </control>
                      </td>
                    </tr>
                    <tr>
                      <td>{{this.model.number._field.name}}</td>
                      <td>
                        <control ref="standard:text">
                          <model>
                            <_bind ref="model.number"/>
                          </model>
                        </control>
                      </td>
                    </tr>
                    <tr>
                      <td>{{this.model.date._field.name}}</td>
                      <td>
                        <control ref="standard:text">
                          <model>
                            <_bind ref="model.date"/>
                          </model>
                        </control>
                      </td>
                    </tr>
                    <tr>
                      <td>{{this.model.bool._field.name}}</td>
                      <td>
                        <control ref="standard:text">
                          <model>
                            <_bind ref="model.bool"/>
                          </model>
                        </control>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <control ref="standard:text">
                          <model>edit</model>
                          <mouseEvents>
                            <click>
                              <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                                <meta ref="edit"/>
                              </exec>
                            </click>
                          </mouseEvents>
                        </control>
                      </td>
                      <td>
                        <control ref="standard:text">
                          <model>delete</model>
                          <mouseEvents>
                            <click>
                              <exec ref="ctx.execFunction">
                                <path ref="onDeleteBtnClick"/>
                              </exec>
                            </click>
                          </mouseEvents>
                        </control>
                      </td>
                    </tr>
                    <tr>
                      <td>delete via bind: </td>
                      <td>
                        <control ref="standard:text">
                          <model>delete</model>
                          <mouseEvents>
                            <click>
                              <_bind ref="onDeleteBtnClick"/>
                            </click>
                          </mouseEvents>
                        </control>
                      </td>
                    </tr>
                  </table>
                </innerMarkup>
              </show>
              <edit>
                <innerMarkup>
                  <table>
                    <tr>
                      <td>{{this.model.text._field.name}}</td>
                      <td onclick="{{ctx.titleClick}}">
                        <input type="text">
                          <control ref="standard:textInput">
                            <model>
                              <_bind ref="model.text"/>
                            </model>
                          </control>
                        </input>
                      </td>
                    </tr>
                    <tr>
                      <td>{{this.model.number._field.name}}</td>
                      <td>
                        <input type="number">
                          <control ref="standard:numberInput">
                            <model>
                              <_bind ref="model.number"/>
                            </model>
                          </control>
                        </input>
                      </td>
                    </tr>
                    <tr>
                      <td>{{this.model.date._field.name}}</td>
                      <td>
                        <input type="date">
                          <control ref="standard:dateInput">
                            <model>
                              <_bind ref="model.date"/>
                            </model>
                          </control>
                        </input>
                      </td>
                    </tr>
                    <tr>
                      <td>{{this.model.bool._field.name}}</td>
                      <td>
                        <input type="checkbox">
                          <control ref="standard:checkBox">
                            <model>
                              <_bind ref="model.bool"/>
                            </model>
                          </control>
                        </input>
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <control ref="standard:text">
                          <model>cancel</model>
                          <mouseEvents>
                            <click>
                              <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                                <meta ref="show"/>
                              </exec>
                            </click>
                          </mouseEvents>
                        </control>
                      </td>
                      <td>
                        <control ref="standard:text">
                          <model>update</model>
                          <mouseEvents>
                            <click>
                              <exec ref="ctx.save"/>
                              <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                                <meta ref="show"/>
                              </exec>
                            </click>
                          </mouseEvents>
                        </control>
                      </td>
                    </tr>
                  </table>
                </innerMarkup>
              </edit>
            </model>
          </control>
        </div>
      </innerMarkup>
    </util-testItem>
    <TextArea>
      <description/>
      <inherits ref="theModel.libs.standard.controls.ClientControl"/>
      <fields>
        <model>
          <name>text</name>
          <type ref="theModel.libs.standard.types.text"/>
        </model>
        <onKeyUp>
          <name>onKeyUp</name>
          <type ref="theModel.libs.standard.types.function"/>
        </onKeyUp>
      </fields>
    </TextArea>
  </theModel_libs_standard_controls>
  <theModel_libs_standard_controls_ClientControl_functions>
    <setData>
      <name>setData</name>
      <description/>
      <fields>
        <path>
          <name>path</name>
          <type ref="theModel.libs.standard.types.itemRelRef">
            <itemPath ref="parent"/>
          </type>
        </path>
      </fields>
    </setData>
    <save>
      <name>save</name>
      <fields/>
      <returnType ref="theModel.libs.standard.types.undefined"/>
    </save>
    <getData>
      <name>getData</name>
      <fields>
        <path>
          <name>path</name>
          <type ref="theModel.libs.standard.types.itemRelRef">
            <itemPath ref="parent"/>
          </type>
        </path>
      </fields>
      <returnType ref="theModel.libs.standard.types.itemRelRef"/>
    </getData>
    <login>
      <name>login</name>
      <description>
        <![CDATA[ Login starts the default login process (redirect).  The control using the login functin must inherit from a server platforms control base that implements "loginServer".   ]]>
      </description>
      <returnType ref="theModel.libs.standard.types.undefined"/>
      <fields/>
    </login>
    <logout>
      <name>logout</name>
      <description>
        <![CDATA[ Login starts the default logout process (redirect).  The control using the login functin must inherit from a server platforms control base that implements "logoutServer".   ]]>
      </description>
      <returnType ref="theModel.libs.standard.types.undefined"/>
      <fields/>
    </logout>
    <toggle>
      <name>toggle</name>
      <description/>
      <fields>
        <path>
          <name>path</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </path>
      </fields>
    </toggle>
    <loadControl>
      <name>loadControl</name>
      <fields>
        <control>
          <name>loadControl</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </control>
      </fields>
      <returnType ref="theModel.libs.standard.types.undefined"/>
    </loadControl>
    <execFunction>
      <name>execFunction</name>
      <fields>
        <path>
          <name>path</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </path>
      </fields>
      <returnType ref="theModel.libs.standard.types.undefined"/>
    </execFunction>
    <loadExternal>
      <name>loadExternal</name>
      <fields>
        <url>
          <name>url</name>
          <type ref="theModel.libs.standard.types.url"/>
        </url>
      </fields>
      <returnType ref="theModel.libs.standard.types.undefined"/>
    </loadExternal>
    <alert>
      <name>alert</name>
      <fields>
        <message>
          <name>message</name>
          <type ref="theModel.libs.standard.types.text"/>
        </message>
      </fields>
      <returnType ref="theModel.libs.standard.types.undefined"/>
    </alert>
    <kill>
      <name>kill</name>
      <fields/>
      <returnType ref="theModel.libs.standard.types.undefined"/>
    </kill>
    <if>
      <name>if</name>
      <fields>
        <condition>
          <name>condition</name>
          <type ref="theModel.libs.standard.types.bool"/>
        </condition>
        <ontrue>
          <name>ontrue</name>
          <type ref="theModel.libs.standard.types.function"/>
        </ontrue>
        <onfalse>
          <name>onfalse</name>
          <type ref="theModel.libs.standard.types.function"/>
        </onfalse>
      </fields>
      <returnType ref="theModel.libs.standard.types.undefined"/>
    </if>
    <setClass>
      <name>setClass</name>
      <description/>
      <fields>
        <class>
          <name>class</name>
          <type ref="theModel.libs.standard.types.text"/>
        </class>
      </fields>
    </setClass>
    <setStyleProperty>
      <name>setStyleProperty</name>
      <description/>
      <fields>
        <property>
          <name>property</name>
          <type ref="theModel.libs.standard.types.text"/>
        </property>
        <value>
          <name>value</name>
          <type ref="theModel.libs.standard.types.text"/>
        </value>
      </fields>
    </setStyleProperty>
    <copyModel>
      <name>copyModel</name>
      <fields>
        <toControl>
          <name>toControl</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </toControl>
        <path>
          <name>path</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </path>
      </fields>
      <returnType ref="theModel.libs.standard.types.undefined"/>
    </copyModel>
  </theModel_libs_standard_controls_ClientControl_functions>
  <theModel_libs_standard_controls_richTextEditor_functions>
    <setCenterJustification>
      <name>setCenterJustification</name>
      <fields/>
      <returnType ref="theModel.libs.standard.types.undefined"/>
    </setCenterJustification>
    <setRightJustification>
      <name>setRightJustification</name>
      <fields/>
      <returnType ref="theModel.libs.standard.types.undefined"/>
    </setRightJustification>
    <setLeftJustification>
      <name>setLeftJustification</name>
      <fields/>
      <returnType ref="theModel.libs.standard.types.undefined"/>
    </setLeftJustification>
  </theModel_libs_standard_controls_richTextEditor_functions>
  <theModel_libs_standard_controls_Reference_functions>
    <onSelected>
      <name>onSelected</name>
      <fields/>
      <returnType ref="theModel.libs.standard.types.undefined"/>
    </onSelected>
  </theModel_libs_standard_controls_Reference_functions>
  <theModel_libs_standard_services>
    <updateItem>
      <name>updateItem</name>
      <fields/>
      <returnType ref="theModel.clientWorkspace.libs.standard.types.undefined"/>
    </updateItem>
    <doInit>
      <name>doInit</name>
      <description>
        <![CDATA[ Roles are retrieved when app is loaded.    ]]>
      </description>
      <returnType ref="theModel.clientWorkspace.libs.standard.types.undefined"/>
      <fields/>
    </doInit>
    <loginServer>
      <name>loginServer</name>
      <access ref="private"/>
      <returnType ref="theModel.clientWorkspace.libs.standard.types.undefined"/>
      <fields/>
    </loginServer>
    <importApp>
      <returnType ref="theModel.clientWorkspace.libs.standard.types.array"/>
      <name>importApp</name>
      <fields>
        <colPath>
          <name>colPath</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </colPath>
        <app>
          <name>app</name>
          <type ref="theModel.libs.standard.types.undefined"/>
        </app>
      </fields>
    </importApp>
    <extractApp>
      <returnType ref="theModel.clientWorkspace.libs.standard.types.array"/>
      <name>extractApp</name>
      <fields>
        <appPath>
          <name>appPath</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </appPath>
      </fields>
    </extractApp>
    <logoutServer>
      <name>logoutServer</name>
      <access ref="private"/>
      <returnType ref="theModel.clientWorkspace.libs.standard.types.undefined"/>
      <fields/>
    </logoutServer>
    <replaceDs>
      <returnType ref="theModel.clientWorkspace.libs.standard.types.array"/>
      <name>replaceDs</name>
      <fields>
        <colPath>
          <name>colPath</name>
          <type ref="theModel.libs.standard.types.itemRelRef"/>
        </colPath>
        <app>
          <name>app</name>
          <type ref="theModel.libs.standard.types.undefined"/>
        </app>
      </fields>
    </replaceDs>
    <doQuery>
      <returnType ref="theModel.clientWorkspace.libs.standard.types.array"/>
      <name>doQuery</name>
      <fields>
        <query>
          <name>query</name>
          <type ref="theModel.libs.standard.types.query"/>
        </query>
      </fields>
    </doQuery>
    <testItems>
      <name>testItems</name>
      <fields/>
      <returnType ref="theModel.clientWorkspace.libs.standard.types.undefined"/>
      <query>
        <select>
          <field ref="*"/>
        </select>
        <from>
          <path ref="testItems"/>
        </from>
      </query>
    </testItems>
    <retrieveItem>
      <name>retrieveItem</name>
      <fields/>
      <returnType ref="theModel.clientWorkspace.libs.standard.types.undefined"/>
    </retrieveItem>
    <deleteItem>
      <name>deleteItem</name>
      <fields/>
      <returnType ref="theModel.clientWorkspace.libs.standard.types.undefined"/>
    </deleteItem>
    <createItem>
      <name>createItem</name>
      <fields/>
      <returnType ref="theModel.clientWorkspace.libs.standard.types.undefined"/>
    </createItem>
  </theModel_libs_standard_services>
  <theModel_libs>
    <standard>
      <description>
        <![CDATA[The standard library with no styling.  This library is always required.]]>
      </description>
      <serverScripts>
        <a0>
          <code>
            <![CDATA[   ]]>
          </code>
        </a0>
      </serverScripts>
      <clientScripts>
        <testServer>
          <devCode>
            <![CDATA[

(function (){

  /**
   * @constructor
   */
  function Service(ws, ds) {
    pebble.shared.ServerControl.call(this, ws, ds);
  	//this.addTestData();
  }
  pebble.inherits(Service, pebble.shared.ServerControl);
	
  var clientServer = new Service(new pebble.libs.standard.impl.WebSocketServerClientSideImpl(), new pebble.shared.ServerDataImpl_Xml());
  
  //so it is reachable from our tests (testRealTime.js)
  pebble.testServer = clientServer;
					
	pebble.serverProxies["SERVER"] = new pebble.libs.standard.ServerProxy(new pebble.libs.standard.impl.CommClientSideImpl(clientServer), new pebble.libs.standard.impl.WebSocketClientSideImpl(clientServer));


})();
      ]]>
          </devCode>
        </testServer>
      </clientScripts>
      <cssTemplates>
        <remira>
          <css>
            <![CDATA[  
        
.droppable 
{
  border-width: 2px; 
  border-color: green; 
  border-style: solid;
  }
  
  .not-droppable {
  border-width: 2px; 
  border-color: red; 
  border-style: solid;
  }
  
  .overProxySide_INNER {
  border-width: 2px; 
  border-color: pink; 
  border-style: solid;
  }
  
  .overProxySide_TOP {
  border-width: 2px; 
  border-color: green; 
  border-style: solid none none none;
  }
  
  .overProxySide_BOT {
  border-width: 2px; 
  border-color: green; 
  border-style: none none solid none;
  }
  
  .overProxySide_RIGHT {
  border-width: 2px; 
  border-color: green; 
  border-style: none solid none none;
  }
  
  .overProxySide_LEFT {
  border-width: 2px; 
  border-color: green; 
  border-style: none none none solid;
  }


                 ]]>
          </css>
        </remira>
        <ArrayStackControl>
          <css>
            <![CDATA[  
.swipe {
  overflow: hidden;
  visibility: hidden;
  position: relative;
}
.swipe-wrap {
  overflow: hidden;
  position: relative;
}
.swipe-wrap > div {
  float:left;
  width:100%;
  position: relative;
}

                 ]]>
          </css>
        </ArrayStackControl>
        <StackPanel>
          <css>
            <![CDATA[  
.listStackPanelhide {
  position:absolute;
  top:0px;
  left:0px;
  right:0px;
  bottom:0px;
  background-color:#fff;
   display:none;
}
.listStackPanelshow {
  position:absolute;
  top:0px;
  left:0px;
 right:0px;
  bottom:0px;
  background-color:#fff;
  display:block;
}

                 ]]>
          </css>
        </StackPanel>
      </cssTemplates>
      <deployment>
        <theControlApp>
          <name>Test Standard Library</name>
          <description/>
          <testItem>
            <parent ref="a2"/>
            <text>hello</text>
            <number>10</number>
            <date>1/10/2012</date>
            <bool>true</bool>
          </testItem>
          <testItems>
            <a0>
              <parent ref="a2"/>
              <text>test0</text>
              <number>10</number>
              <date>1/10/2012</date>
              <bool>true</bool>
            </a0>
            <a1>
              <parent ref="_top"/>
              <text>test1</text>
              <number>1</number>
              <date>1/1/2012</date>
              <bool>true</bool>
            </a1>
            <a2>
              <parent ref="a1"/>
              <text>test2</text>
              <number>2</number>
              <date>1/2/2012</date>
              <bool>true</bool>
            </a2>
            <a3>
              <parent ref="_top"/>
              <text>test3</text>
              <number>3</number>
              <date>1/3/2012</date>
              <bool>true</bool>
            </a3>
            <a4>
              <parent ref="a2"/>
              <text>test4</text>
              <number>4</number>
              <date>1/4/2012</date>
              <bool>true</bool>
            </a4>
            <a5>
              <parent ref="a2"/>
              <text>test5</text>
              <number>5</number>
              <date>1/5/2012</date>
              <bool>true</bool>
            </a5>
            <a6>
              <parent ref="_top"/>
              <text>test6</text>
              <number>6</number>
              <date>1/6/2012</date>
              <bool>true</bool>
            </a6>
            <a7>
              <parent ref="a1"/>
              <text>test7</text>
              <number>7</number>
              <date>1/7/2012</date>
              <bool>true</bool>
            </a7>
            <a8>
              <parent ref="_top"/>
              <text>test8</text>
              <number>8</number>
              <date>1/8/2012</date>
              <bool>true</bool>
            </a8>
            <a9>
              <parent ref="a2"/>
              <text>test9</text>
              <number>9</number>
              <date>1/9/2012</date>
              <bool>true</bool>
            </a9>
          </testItems>
          <testEmbItems>
            <a0>
              <text>testEmbItem0</text>
            </a0>
            <a1>
              <text>testEmbItem1</text>
            </a1>
            <a2>
              <text>testEmbItem2</text>
            </a2>
            <a3>
              <text>testEmbItem3</text>
            </a3>
            <a4>
              <text>testEmbItem4</text>
            </a4>
          </testEmbItems>
        </theControlApp>
        <groupMaps/>
        <accessPoints>
          <testAppControl>
            <topControl ref="testAppControl"/>
            <dependencies>
              <a1 ref="standard"/>
            </dependencies>
          </testAppControl>
          <testImage>
            <topControl ref="testImage"/>
            <dependencies>
              <a1 ref="standard"/>
            </dependencies>
          </testImage>
          <testNumber>
            <topControl ref="testNumber"/>
            <dependencies>
              <a1 ref="standard"/>
            </dependencies>
          </testNumber>
          <testDragDrop>
            <topControl ref="testDragDrop">
              <array>
                <a0>test0</a0>
                <a1>test1</a1>
                <a2>test2</a2>
                <a3>test3</a3>
                <a4>test4</a4>
              </array>
            </topControl>
            <dependencies>
              <a1 ref="standard"/>
            </dependencies>
          </testDragDrop>
        </accessPoints>
      </deployment>
      <types>
        <_compressedCollection>true</_compressedCollection>
      </types>
      <controls>
        <_compressedCollection>true</_compressedCollection>
      </controls>
      <services>
        <_compressedCollection>true</_compressedCollection>
      </services>
    </standard>
    <bootstrap>
      <description>
        <![CDATA[bootstrap less files.  ]]>
      </description>
      <fields/>
      <cssTemplates>
        <bootstrap>
          <less>
            <bootstrap>
              <![CDATA[
              // Core variables and mixins
              @import "variables.less";
              @import "mixins.less";

              // Reset
              @import "normalize.less";
              @import "print.less";

              // Core CSS
              @import "scaffolding.less";
              @import "type.less";
              @import "code.less";
              @import "grid.less";
              @import "tables.less";
              @import "forms.less";
              @import "buttons.less";

              // Components
              @import "component-animations.less";
              @import "glyphicons.less";
              @import "dropdowns.less";
              @import "button-groups.less";
              @import "input-groups.less";
              @import "navs.less";
              @import "navbar.less";
              @import "breadcrumbs.less";
              @import "pagination.less";
              @import "pager.less";
              @import "labels.less";
              @import "badges.less";
              @import "jumbotron.less";
              @import "thumbnails.less";
              @import "alerts.less";
              @import "progress-bars.less";
              @import "media.less";
              @import "list-group.less";
              @import "panels.less";
              @import "wells.less";
              @import "close.less";

              // Components w/ JavaScript
              @import "modals.less";
              @import "tooltip.less";
              @import "popovers.less";
              @import "carousel.less";

              // Utility classes
              @import "utilities.less";
              @import "responsive-utilities.less";

              ]]>
            </bootstrap>
            <variables>
              <![CDATA[
              //
              // Variables
              // --------------------------------------------------


              // Global values
              // --------------------------------------------------

              // Grays
              // -------------------------

              @gray-darker:            lighten(#000, 13.5%); // #222
              @gray-dark:              lighten(#000, 20%);   // #333
              @gray:                   lighten(#000, 33.5%); // #555
              @gray-light:             lighten(#000, 60%);   // #999
              @gray-lighter:           lighten(#000, 93.5%); // #eee

              // Brand colors
              // -------------------------

              @brand-primary:         #428bca;
              @brand-success:         #5cb85c;
              @brand-warning:         #f0ad4e;
              @brand-danger:          #d9534f;
              @brand-info:            #5bc0de;

              // Scaffolding
              // -------------------------

              @body-bg:               #fff;
              @text-color:            @gray-dark;

              // Links
              // -------------------------

              @link-color:            @brand-primary;
              @link-hover-color:      darken(@link-color, 15%);

              // Typography
              // -------------------------

              @font-family-sans-serif:  "Helvetica Neue", Helvetica, Arial, sans-serif;
              @font-family-serif:       Georgia, "Times New Roman", Times, serif;
              @font-family-monospace:   Menlo, Monaco, Consolas, "Courier New", monospace;
              @font-family-base:        @font-family-sans-serif;

              @font-size-base:          14px;
              //@font-size-base:          12px; //RYANEDIT
              @font-size-large:         ceil(@font-size-base * 1.25); // ~18px
              @font-size-small:         ceil(@font-size-base * 0.85); // ~12px

              @font-size-h1:            floor(@font-size-base * 2.6); // ~36px
              @font-size-h2:            floor(@font-size-base * 2.15); // ~30px
              @font-size-h3:            ceil(@font-size-base * 1.7); // ~24px
              @font-size-h4:            ceil(@font-size-base * 1.25); // ~18px
              @font-size-h5:            @font-size-base;
              @font-size-h6:            ceil(@font-size-base * 0.85); // ~12px

              @line-height-base:        1.428571429; // 20/14
              //@line-height-base:        1.5; // 18/12 RYANEDIT
              //@line-height-base:        1.33333333; // 16/12 RYANEDIT
              @line-height-computed:    floor(@font-size-base * @line-height-base); // ~20px

              @headings-font-family:    @font-family-base;
              @headings-font-weight:    500;
              @headings-line-height:    1.1;
              @headings-color:          inherit;


              // Iconography
              // -------------------------

              @icon-font-path:          "../fonts/";
              @icon-font-name:          "glyphicons-halflings-regular";


              // Components
              // -------------------------
              // Based on 14px font-size and 1.428 line-height (~20px to start)

              @padding-base-vertical:          6px;
              @padding-base-horizontal:        12px;

              @padding-large-vertical:         10px;
              @padding-large-horizontal:       16px;

              @padding-small-vertical:         5px;
              @padding-small-horizontal:       10px;

              @padding-xs-vertical:            1px;
              @padding-xs-horizontal:          5px;

              @line-height-large:              1.33;
              @line-height-small:              1.5;

              @border-radius-base:             4px;
              @border-radius-large:            6px;
              @border-radius-small:            3px;

              @component-active-color:         #fff;
              @component-active-bg:            @brand-primary;

              @caret-width-base:               4px;
              @caret-width-large:              5px;

              // Tables
              // -------------------------

              @table-cell-padding:                 8px;
              @table-condensed-cell-padding:       5px;

              @table-bg:                           transparent; // overall background-color
              @table-bg-accent:                    #f9f9f9; // for striping
              @table-bg-hover:                     #f5f5f5;
              @table-bg-active:                    @table-bg-hover;

              @table-border-color:                 #ddd; // table and cell border


              // Buttons
              // -------------------------

              @btn-font-weight:                normal;

              @btn-default-color:              #333;
              @btn-default-bg:                 #fff;
              @btn-default-border:             #ccc;

              @btn-primary-color:              #fff;
              @btn-primary-bg:                 @brand-primary;
              @btn-primary-border:             darken(@btn-primary-bg, 5%);

              @btn-success-color:              #fff;
              @btn-success-bg:                 @brand-success;
              @btn-success-border:             darken(@btn-success-bg, 5%);

              @btn-warning-color:              #fff;
              @btn-warning-bg:                 @brand-warning;
              @btn-warning-border:             darken(@btn-warning-bg, 5%);

              @btn-danger-color:               #fff;
              @btn-danger-bg:                  @brand-danger;
              @btn-danger-border:              darken(@btn-danger-bg, 5%);

              @btn-info-color:                 #fff;
              @btn-info-bg:                    @brand-info;
              @btn-info-border:                darken(@btn-info-bg, 5%);

              @btn-link-disabled-color:        @gray-light;


              // Forms
              // -------------------------

              @input-bg:                       #fff;
              @input-bg-disabled:              @gray-lighter;

              @input-color:                    @gray;
              @input-border:                   #ccc;
              @input-border-radius:            @border-radius-base;
              @input-border-focus:             #66afe9;

              @input-color-placeholder:        @gray-light;

              @input-height-base:              (@line-height-computed + (@padding-base-vertical * 2) + 2);
              @input-height-large:             (ceil(@font-size-large * @line-height-large) + (@padding-large-vertical * 2) + 2);
              @input-height-small:             (floor(@font-size-small * @line-height-small) + (@padding-small-vertical * 2) + 2);

              @legend-color:                   @gray-dark;
              @legend-border-color:            #e5e5e5;

              @input-group-addon-bg:           @gray-lighter;
              @input-group-addon-border-color: @input-border;


              // Dropdowns
              // -------------------------

              @dropdown-bg:                    #fff;
              @dropdown-border:                rgba(0,0,0,.15);
              @dropdown-fallback-border:       #ccc;
              @dropdown-divider-bg:            #e5e5e5;

              @dropdown-link-color:            @gray-dark;
              @dropdown-link-hover-color:      darken(@gray-dark, 5%);
              @dropdown-link-hover-bg:         #f5f5f5;

              @dropdown-link-active-color:     @component-active-color;
              @dropdown-link-active-bg:        @component-active-bg;

              @dropdown-link-disabled-color:   @gray-light;

              @dropdown-header-color:          @gray-light;


              // COMPONENT VARIABLES
              // --------------------------------------------------


              // Z-index master list
              // -------------------------
              // Used for a bird's eye view of components dependent on the z-axis
              // Try to avoid customizing these :)

              @zindex-navbar:            1000;
              @zindex-dropdown:          1000;
              @zindex-popover:           1010;
              @zindex-tooltip:           1030;
              @zindex-navbar-fixed:      1030;
              @zindex-modal-background:  1040;
              @zindex-modal:             1050;

              // Media queries breakpoints
              // --------------------------------------------------

              // Extra small screen / phone
              // Note: Deprecated @screen-xs and @screen-phone as of v3.0.1
              @screen-xs:                  480px;
              @screen-xs-min:              @screen-xs;
              @screen-phone:               @screen-xs-min;

              // Small screen / tablet
              // Note: Deprecated @screen-sm and @screen-tablet as of v3.0.1
              @screen-sm:                  768px;
              @screen-sm-min:              @screen-sm;
              @screen-tablet:              @screen-sm-min;

              // Medium screen / desktop
              // Note: Deprecated @screen-md and @screen-desktop as of v3.0.1
              @screen-md:                  992px;
              @screen-md-min:              @screen-md;
              @screen-desktop:             @screen-md-min;

              // Large screen / wide desktop
              // Note: Deprecated @screen-lg and @screen-lg-desktop as of v3.0.1
              @screen-lg:                  1200px;
              @screen-lg-min:              @screen-lg;
              @screen-lg-desktop:          @screen-lg-min;

              // So media queries don't overlap when required, provide a maximum
              @screen-xs-max:              (@screen-sm-min - 1);
              @screen-sm-max:              (@screen-md-min - 1);
              @screen-md-max:              (@screen-lg-min - 1);


              // Grid system
              // --------------------------------------------------

              // Number of columns in the grid system
              @grid-columns:              12;
              // Padding, to be divided by two and applied to the left and right of all columns
              @grid-gutter-width:         30px;

              // Navbar collapse

              // Point at which the navbar becomes uncollapsed
              @grid-float-breakpoint:     @screen-sm-min;
              // Point at which the navbar begins collapsing
              @grid-float-breakpoint-max: (@grid-float-breakpoint - 1);


              // Navbar
              // -------------------------

              // Basics of a navbar
              //@navbar-height:                    50px;
              @navbar-height:                    40px; //RYANEDIT
              @navbar-margin-bottom:             @line-height-computed;
              @navbar-border-radius:             @border-radius-base;
              @navbar-padding-horizontal:        floor(@grid-gutter-width / 2);
              @navbar-padding-vertical:          ((@navbar-height - @line-height-computed) / 2);

              @navbar-default-color:             #777;
              @navbar-default-bg:                #f8f8f8;
              @navbar-default-border:            darken(@navbar-default-bg, 6.5%);

              // Navbar links
              @navbar-default-link-color:                #777;
              @navbar-default-link-hover-color:          #333;
              @navbar-default-link-hover-bg:             transparent;
              @navbar-default-link-active-color:         #555;
              @navbar-default-link-active-bg:            darken(@navbar-default-bg, 6.5%);
              @navbar-default-link-disabled-color:       #ccc;
              @navbar-default-link-disabled-bg:          transparent;

              // Navbar brand label
              @navbar-default-brand-color:               @navbar-default-link-color;
              @navbar-default-brand-hover-color:         darken(@navbar-default-brand-color, 10%);
              @navbar-default-brand-hover-bg:            transparent;

              // Navbar toggle
              @navbar-default-toggle-hover-bg:           #ddd;
              @navbar-default-toggle-icon-bar-bg:        #ccc;
              @navbar-default-toggle-border-color:       #ddd;


              // Inverted navbar
              //
              // Reset inverted navbar basics
              @navbar-inverse-color:                      @gray-light;
              @navbar-inverse-bg:                         #222;
              @navbar-inverse-border:                     darken(@navbar-inverse-bg, 10%);

              // Inverted navbar links
              @navbar-inverse-link-color:                 @gray-light;
              @navbar-inverse-link-hover-color:           #fff;
              @navbar-inverse-link-hover-bg:              transparent;
              @navbar-inverse-link-active-color:          @navbar-inverse-link-hover-color;
              @navbar-inverse-link-active-bg:             darken(@navbar-inverse-bg, 10%);
              @navbar-inverse-link-disabled-color:        #444;
              @navbar-inverse-link-disabled-bg:           transparent;

              // Inverted navbar brand label
              @navbar-inverse-brand-color:                @navbar-inverse-link-color;
              @navbar-inverse-brand-hover-color:          #fff;
              @navbar-inverse-brand-hover-bg:             transparent;

              // Inverted navbar toggle
              @navbar-inverse-toggle-hover-bg:            #333;
              @navbar-inverse-toggle-icon-bar-bg:         #fff;
              @navbar-inverse-toggle-border-color:        #333;


              // Navs
              // -------------------------

              //@nav-link-padding:                          10px 15px;
              @nav-link-padding:                          7px 12px; //RYANEDIT
              @nav-link-hover-bg:                         @gray-lighter;

              @nav-disabled-link-color:                   @gray-light;
              @nav-disabled-link-hover-color:             @gray-light;

              @nav-open-link-hover-color:                 #fff;

              // Tabs
              @nav-tabs-border-color:                     #ddd;

              @nav-tabs-link-hover-border-color:          @gray-lighter;

              @nav-tabs-active-link-hover-bg:             @body-bg;
              @nav-tabs-active-link-hover-color:          @gray;
              @nav-tabs-active-link-hover-border-color:   #ddd;

              @nav-tabs-justified-link-border-color:            #ddd;
              @nav-tabs-justified-active-link-border-color:     @body-bg;

              // Pills
              @nav-pills-border-radius:                   @border-radius-base;
              @nav-pills-active-link-hover-bg:            @component-active-bg;
              @nav-pills-active-link-hover-color:         @component-active-color;


              // Pagination
              // -------------------------

              @pagination-bg:                        #fff;
              @pagination-border:                    #ddd;

              @pagination-hover-bg:                  @gray-lighter;

              @pagination-active-bg:                 @brand-primary;
              @pagination-active-color:              #fff;

              @pagination-disabled-color:            @gray-light;


              // Pager
              // -------------------------

              @pager-border-radius:                  15px;
              @pager-disabled-color:                 @gray-light;


              // Jumbotron
              // -------------------------

              @jumbotron-padding:              30px;
              @jumbotron-color:                inherit;
              @jumbotron-bg:                   @gray-lighter;
              @jumbotron-heading-color:        inherit;
              @jumbotron-font-size:            ceil(@font-size-base * 1.5);


              // Form states and alerts
              // -------------------------

              @state-success-text:             #3c763d;
              @state-success-bg:               #dff0d8;
              @state-success-border:           darken(spin(@state-success-bg, -10), 5%);

              @state-info-text:                #31708f;
              @state-info-bg:                  #d9edf7;
              @state-info-border:              darken(spin(@state-info-bg, -10), 7%);

              @state-warning-text:             #8a6d3b;
              @state-warning-bg:               #fcf8e3;
              @state-warning-border:           darken(spin(@state-warning-bg, -10), 5%);

              @state-danger-text:              #a94442;
              @state-danger-bg:                #f2dede;
              @state-danger-border:            darken(spin(@state-danger-bg, -10), 5%);


              // Tooltips
              // -------------------------
              @tooltip-max-width:           200px;
              @tooltip-color:               #fff;
              @tooltip-bg:                  #000;

              @tooltip-arrow-width:         5px;
              @tooltip-arrow-color:         @tooltip-bg;


              // Popovers
              // -------------------------
              @popover-bg:                          #fff;
              @popover-max-width:                   276px;
              @popover-border-color:                rgba(0,0,0,.2);
              @popover-fallback-border-color:       #ccc;

              @popover-title-bg:                    darken(@popover-bg, 3%);

              @popover-arrow-width:                 10px;
              @popover-arrow-color:                 #fff;

              @popover-arrow-outer-width:           (@popover-arrow-width + 1);
              @popover-arrow-outer-color:           rgba(0,0,0,.25);
              @popover-arrow-outer-fallback-color:  #999;


              // Labels
              // -------------------------

              @label-default-bg:            @gray-light;
              @label-primary-bg:            @brand-primary;
              @label-success-bg:            @brand-success;
              @label-info-bg:               @brand-info;
              @label-warning-bg:            @brand-warning;
              @label-danger-bg:             @brand-danger;

              @label-color:                 #fff;
              @label-link-hover-color:      #fff;


              // Modals
              // -------------------------
              @modal-inner-padding:         20px;

              @modal-title-padding:         15px;
              @modal-title-line-height:     @line-height-base;

              @modal-content-bg:                             #fff;
              @modal-content-border-color:                   rgba(0,0,0,.2);
              @modal-content-fallback-border-color:          #999;

              @modal-backdrop-bg:           #000;
              @modal-header-border-color:   #e5e5e5;
              @modal-footer-border-color:   @modal-header-border-color;


              // Alerts
              // -------------------------
              @alert-padding:               15px;
              @alert-border-radius:         @border-radius-base;
              @alert-link-font-weight:      bold;

              @alert-success-bg:            @state-success-bg;
              @alert-success-text:          @state-success-text;
              @alert-success-border:        @state-success-border;

              @alert-info-bg:               @state-info-bg;
              @alert-info-text:             @state-info-text;
              @alert-info-border:           @state-info-border;

              @alert-warning-bg:            @state-warning-bg;
              @alert-warning-text:          @state-warning-text;
              @alert-warning-border:        @state-warning-border;

              @alert-danger-bg:             @state-danger-bg;
              @alert-danger-text:           @state-danger-text;
              @alert-danger-border:         @state-danger-border;


              // Progress bars
              // -------------------------
              @progress-bg:                 #f5f5f5;
              @progress-bar-color:          #fff;

              @progress-bar-bg:             @brand-primary;
              @progress-bar-success-bg:     @brand-success;
              @progress-bar-warning-bg:     @brand-warning;
              @progress-bar-danger-bg:      @brand-danger;
              @progress-bar-info-bg:        @brand-info;


              // List group
              // -------------------------
              @list-group-bg:               #fff;
              @list-group-border:           #ddd;
              @list-group-border-radius:    @border-radius-base;

              @list-group-hover-bg:         #f5f5f5;
              @list-group-active-color:     @component-active-color;
              @list-group-active-bg:        @component-active-bg;
              @list-group-active-border:    @list-group-active-bg;

              @list-group-link-color:          #555;
              @list-group-link-heading-color:  #333;


              // Panels
              // -------------------------
              @panel-bg:                    #fff;
              @panel-inner-border:          #ddd;
              @panel-border-radius:         @border-radius-base;
              @panel-footer-bg:             #f5f5f5;

              @panel-default-text:          @gray-dark;
              @panel-default-border:        #ddd;
              @panel-default-heading-bg:    #f5f5f5;

              @panel-primary-text:          #fff;
              @panel-primary-border:        @brand-primary;
              @panel-primary-heading-bg:    @brand-primary;

              @panel-success-text:          @state-success-text;
              @panel-success-border:        @state-success-border;
              @panel-success-heading-bg:    @state-success-bg;

              @panel-warning-text:          @state-warning-text;
              @panel-warning-border:        @state-warning-border;
              @panel-warning-heading-bg:    @state-warning-bg;

              @panel-danger-text:           @state-danger-text;
              @panel-danger-border:         @state-danger-border;
              @panel-danger-heading-bg:     @state-danger-bg;

              @panel-info-text:             @state-info-text;
              @panel-info-border:           @state-info-border;
              @panel-info-heading-bg:       @state-info-bg;


              // Thumbnails
              // -------------------------
              @thumbnail-padding:           4px;
              @thumbnail-bg:                @body-bg;
              @thumbnail-border:            #ddd;
              @thumbnail-border-radius:     @border-radius-base;

              @thumbnail-caption-color:     @text-color;
              @thumbnail-caption-padding:   9px;


              // Wells
              // -------------------------
              @well-bg:                     #f5f5f5;


              // Badges
              // -------------------------
              @badge-color:                 #fff;
              @badge-link-hover-color:      #fff;
              @badge-bg:                    @gray-light;

              @badge-active-color:          @link-color;
              @badge-active-bg:             #fff;

              @badge-font-weight:           bold;
              @badge-line-height:           1;
              @badge-border-radius:         10px;


              // Breadcrumbs
              // -------------------------
              @breadcrumb-bg:               #f5f5f5;
              @breadcrumb-color:            #ccc;
              @breadcrumb-active-color:     @gray-light;
              @breadcrumb-separator:        "/";


              // Carousel
              // ------------------------

              @carousel-text-shadow:                        0 1px 2px rgba(0,0,0,.6);

              @carousel-control-color:                      #fff;
              @carousel-control-width:                      15%;
              @carousel-control-opacity:                    .5;
              @carousel-control-font-size:                  20px;

              @carousel-indicator-active-bg:                #fff;
              @carousel-indicator-border-color:             #fff;

              @carousel-caption-color:                      #fff;


              // Close
              // ------------------------
              @close-font-weight:           bold;
              @close-color:                 #000;
              @close-text-shadow:           0 1px 0 #fff;


              // Code
              // ------------------------
              @code-color:                  #c7254e;
              @code-bg:                     #f9f2f4;

              @pre-bg:                      #f5f5f5;
              @pre-color:                   @gray-dark;
              @pre-border-color:            #ccc;
              @pre-scrollable-max-height:   340px;

              // Type
              // ------------------------
              @text-muted:                  @gray-light;
              @abbr-border-color:           @gray-light;
              @headings-small-color:        @gray-light;
              @blockquote-small-color:      @gray-light;
              @blockquote-border-color:     @gray-lighter;
              @page-header-border-color:    @gray-lighter;

              // Miscellaneous
              // -------------------------

              // Hr border color
              @hr-border:                   @gray-lighter;

              // Horizontal forms & lists
              @component-offset-horizontal: 180px;


              // Container sizes
              // --------------------------------------------------

              // Small screen / tablet
              @container-tablet:             ((720px + @grid-gutter-width));
              @container-sm:                 @container-tablet;

              // Medium screen / desktop
              @container-desktop:            ((940px + @grid-gutter-width));
              @container-md:                 @container-desktop;

              // Large screen / wide desktop
              @container-large-desktop:      ((1140px + @grid-gutter-width));
              @container-lg:                 @container-large-desktop;

              ]]>
            </variables>
            <mixins>
              <![CDATA[
              //
              // Mixins
              // --------------------------------------------------


              // Utilities
              // -------------------------

              // Clearfix
              // Source: http://nicolasgallagher.com/micro-clearfix-hack/
              //
              // For modern browsers
              // 1. The space content is one way to avoid an Opera bug when the
              //    contenteditable attribute is included anywhere else in the document.
              //    Otherwise it causes space to appear at the top and bottom of elements
              //    that are clearfixed.
              // 2. The use of `table` rather than `block` is only necessary if using
              //    `:before` to contain the top-margins of child elements.
              .clearfix() {
              &:before,
              &:after {
              content: " "; // 1
              display: table; // 2
              }
              &:after {
              clear: both;
              }
              }

              // WebKit-style focus
              .tab-focus() {
              // Default
              outline: thin dotted;
              // WebKit
              outline: 5px auto -webkit-focus-ring-color;
              outline-offset: -2px;
              }

              // Center-align a block level element
              .center-block() {
              display: block;
              margin-left: auto;
              margin-right: auto;
              }

              // Sizing shortcuts
              .size(@width; @height) {
              width: @width;
              height: @height;
              }
              .square(@size) {
              .size(@size; @size);
              }

              // Placeholder text
              .placeholder(@color: @input-color-placeholder) {
              &:-moz-placeholder            { color: @color; } // Firefox 4-18
              &::-moz-placeholder           { color: @color;   // Firefox 19+
              opacity: 1; } // See https://github.com/twbs/bootstrap/pull/11526
              &:-ms-input-placeholder       { color: @color; } // Internet Explorer 10+
              &::-webkit-input-placeholder  { color: @color; } // Safari and Chrome
              }

              // Text overflow
              // Requires inline-block or block for proper styling
              .text-overflow() {
              overflow: hidden;
              text-overflow: ellipsis;
              white-space: nowrap;
              }

              // CSS image replacement
              //
              // Heads up! v3 launched with with only `.hide-text()`, but per our pattern for
              // mixins being reused as classes with the same name, this doesn't hold up. As
              // of v3.0.1 we have added `.text-hide()` and deprecated `.hide-text()`. Note
              // that we cannot chain the mixins together in Less, so they are repeated.
              //
              // Source: https://github.com/h5bp/html5-boilerplate/commit/aa0396eae757

              // Deprecated as of v3.0.1 (will be removed in v4)
              .hide-text() {
              font: ~"0/0" a;
              color: transparent;
              text-shadow: none;
              background-color: transparent;
              border: 0;
              }
              // New mixin to use as of v3.0.1
              .text-hide() {
              .hide-text();
              }



              // CSS3 PROPERTIES
              // --------------------------------------------------

              // Single side border-radius
              .border-top-radius(@radius) {
              border-top-right-radius: @radius;
              border-top-left-radius: @radius;
              }
              .border-right-radius(@radius) {
              border-bottom-right-radius: @radius;
              border-top-right-radius: @radius;
              }
              .border-bottom-radius(@radius) {
              border-bottom-right-radius: @radius;
              border-bottom-left-radius: @radius;
              }
              .border-left-radius(@radius) {
              border-bottom-left-radius: @radius;
              border-top-left-radius: @radius;
              }

              // Drop shadows
              .box-shadow(@shadow) {
              -webkit-box-shadow: @shadow; // iOS <4.3 & Android <4.1
              box-shadow: @shadow;
              }

              // Transitions
              .transition(@transition) {
              -webkit-transition: @transition;
              transition: @transition;
              }
              .transition-property(@transition-property) {
              -webkit-transition-property: @transition-property;
              transition-property: @transition-property;
              }
              .transition-delay(@transition-delay) {
              -webkit-transition-delay: @transition-delay;
              transition-delay: @transition-delay;
              }
              .transition-duration(@transition-duration) {
              -webkit-transition-duration: @transition-duration;
              transition-duration: @transition-duration;
              }
              .transition-transform(@transition) {
              -webkit-transition: -webkit-transform @transition;
              -moz-transition: -moz-transform @transition;
              -o-transition: -o-transform @transition;
              transition: transform @transition;
              }

              // Transformations
              .rotate(@degrees) {
              -webkit-transform: rotate(@degrees);
              -ms-transform: rotate(@degrees); // IE9+
              transform: rotate(@degrees);
              }
              .scale(@ratio) {
              -webkit-transform: scale(@ratio);
              -ms-transform: scale(@ratio); // IE9+
              transform: scale(@ratio);
              }
              .translate(@x; @y) {
              -webkit-transform: translate(@x, @y);
              -ms-transform: translate(@x, @y); // IE9+
              transform: translate(@x, @y);
              }
              .skew(@x; @y) {
              -webkit-transform: skew(@x, @y);
              -ms-transform: skewX(@x) skewY(@y); // See https://github.com/twbs/bootstrap/issues/4885; IE9+
              transform: skew(@x, @y);
              }
              .translate3d(@x; @y; @z) {
              -webkit-transform: translate3d(@x, @y, @z);
              transform: translate3d(@x, @y, @z);
              }

              .rotateX(@degrees) {
              -webkit-transform: rotateX(@degrees);
              -ms-transform: rotateX(@degrees); // IE9+
              transform: rotateX(@degrees);
              }
              .rotateY(@degrees) {
              -webkit-transform: rotateY(@degrees);
              -ms-transform: rotateY(@degrees); // IE9+
              transform: rotateY(@degrees);
              }
              .perspective(@perspective) {
              -webkit-perspective: @perspective;
              -moz-perspective: @perspective;
              perspective: @perspective;
              }
              .perspective-origin(@perspective) {
              -webkit-perspective-origin: @perspective;
              -moz-perspective-origin: @perspective;
              perspective-origin: @perspective;
              }
              .transform-origin(@origin) {
              -webkit-transform-origin: @origin;
              -moz-transform-origin: @origin;
              transform-origin: @origin;
              }

              // Animations
              .animation(@animation) {
              -webkit-animation: @animation;
              animation: @animation;
              }

              // Backface visibility
              // Prevent browsers from flickering when using CSS 3D transforms.
              // Default value is `visible`, but can be changed to `hidden`
              .backface-visibility(@visibility){
              -webkit-backface-visibility: @visibility;
              -moz-backface-visibility: @visibility;
              backface-visibility: @visibility;
              }

              // Box sizing
              .box-sizing(@boxmodel) {
              -webkit-box-sizing: @boxmodel;
              -moz-box-sizing: @boxmodel;
              box-sizing: @boxmodel;
              }

              // User select
              // For selecting text on the page
              .user-select(@select) {
              -webkit-user-select: @select;
              -moz-user-select: @select;
              -ms-user-select: @select; // IE10+
              -o-user-select: @select;
              user-select: @select;
              }

              // Resize anything
              .resizable(@direction) {
              resize: @direction; // Options: horizontal, vertical, both
              overflow: auto; // Safari fix
              }

              // CSS3 Content Columns
              .content-columns(@column-count; @column-gap: @grid-gutter-width) {
              -webkit-column-count: @column-count;
              -moz-column-count: @column-count;
              column-count: @column-count;
              -webkit-column-gap: @column-gap;
              -moz-column-gap: @column-gap;
              column-gap: @column-gap;
              }

              // Optional hyphenation
              .hyphens(@mode: auto) {
              word-wrap: break-word;
              -webkit-hyphens: @mode;
              -moz-hyphens: @mode;
              -ms-hyphens: @mode; // IE10+
              -o-hyphens: @mode;
              hyphens: @mode;
              }

              // Opacity
              .opacity(@opacity) {
              opacity: @opacity;
              // IE8 filter
              @opacity-ie: (@opacity * 100);
              filter: ~"alpha(opacity=@{opacity-ie})";
              }



              // GRADIENTS
              // --------------------------------------------------

              #gradient {

              // Horizontal gradient, from left to right
              //
              // Creates two color stops, start and end, by specifying a color and position for each color stop.
              // Color stops are not available in IE9 and below.
              .horizontal(@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
              background-image: -webkit-linear-gradient(left, color-stop(@start-color @start-percent), color-stop(@end-color @end-percent)); // Safari 5.1-6, Chrome 10+
              background-image:  linear-gradient(to right, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
              background-repeat: repeat-x;
              filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); // IE9 and down
              }

              // Vertical gradient, from top to bottom
              //
              // Creates two color stops, start and end, by specifying a color and position for each color stop.
              // Color stops are not available in IE9 and below.
              .vertical(@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
              background-image: -webkit-linear-gradient(top, @start-color @start-percent, @end-color @end-percent);  // Safari 5.1-6, Chrome 10+
              background-image: linear-gradient(to bottom, @start-color @start-percent, @end-color @end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
              background-repeat: repeat-x;
              filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down
              }

              .directional(@start-color: #555; @end-color: #333; @deg: 45deg) {
              background-repeat: repeat-x;
              background-image: -webkit-linear-gradient(@deg, @start-color, @end-color); // Safari 5.1-6, Chrome 10+
              background-image: linear-gradient(@deg, @start-color, @end-color); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
              }
              .horizontal-three-colors(@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%; @end-color: #c3325f) {
              background-image: -webkit-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);
              background-image: linear-gradient(to right, @start-color, @mid-color @color-stop, @end-color);
              background-repeat: no-repeat;
              filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
              }
              .vertical-three-colors(@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%; @end-color: #c3325f) {
              background-image: -webkit-linear-gradient(@start-color, @mid-color @color-stop, @end-color);
              background-image: linear-gradient(@start-color, @mid-color @color-stop, @end-color);
              background-repeat: no-repeat;
              filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
              }
              .radial(@inner-color: #555; @outer-color: #333) {
              background-image: -webkit-radial-gradient(circle, @inner-color, @outer-color);
              background-image: radial-gradient(circle, @inner-color, @outer-color);
              background-repeat: no-repeat;
              }
              .striped(@color: rgba(255,255,255,.15); @angle: 45deg) {
              background-image: -webkit-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
              background-image: linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
              }
              }

              // Reset filters for IE
              //
              // When you need to remove a gradient background, do not forget to use this to reset
              // the IE filter for IE9 and below.
              .reset-filter() {
              filter: e(%("progid:DXImageTransform.Microsoft.gradient(enabled = false)"));
              }



              // Retina images
              //
              // Short retina mixin for setting background-image and -size

              .img-retina(@file-1x; @file-2x; @width-1x; @height-1x) {
              background-image: url("@{file-1x}");

              @media
              only screen and (-webkit-min-device-pixel-ratio: 2),
              only screen and (   min--moz-device-pixel-ratio: 2),
              only screen and (     -o-min-device-pixel-ratio: 2/1),
              only screen and (        min-device-pixel-ratio: 2),
              only screen and (                min-resolution: 192dpi),
              only screen and (                min-resolution: 2dppx) {
              background-image: url("@{file-2x}");
              background-size: @width-1x @height-1x;
              }
              }


              // Responsive image
              //
              // Keep images from scaling beyond the width of their parents.

              .img-responsive(@display: block;) {
              display: @display;
              max-width: 100%; // Part 1: Set a maximum relative to the parent
              height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
              }


              // COMPONENT MIXINS
              // --------------------------------------------------

              // Horizontal dividers
              // -------------------------
              // Dividers (basically an hr) within dropdowns and nav lists
              .nav-divider(@color: #e5e5e5) {
              height: 1px;
              margin: ((@line-height-computed / 2) - 1) 0;
              overflow: hidden;
              background-color: @color;
              }

              // Panels
              // -------------------------
              .panel-variant(@border; @heading-text-color; @heading-bg-color; @heading-border) {
              border-color: @border;

              & > .panel-heading {
              color: @heading-text-color;
              background-color: @heading-bg-color;
              border-color: @heading-border;

              + .panel-collapse .panel-body {
              border-top-color: @border;
              }
              }
              & > .panel-footer {
              + .panel-collapse .panel-body {
              border-bottom-color: @border;
              }
              }
              }

              // Alerts
              // -------------------------
              .alert-variant(@background; @border; @text-color) {
              background-color: @background;
              border-color: @border;
              color: @text-color;

              hr {
              border-top-color: darken(@border, 5%);
              }
              .alert-link {
              color: darken(@text-color, 10%);
              }
              }

              // Tables
              // -------------------------
              .table-row-variant(@state; @background) {
              // Exact selectors below required to override `.table-striped` and prevent
              // inheritance to nested tables.
              .table {
              > thead,
              > tbody,
              > tfoot {
              > tr > .@{state},
              > .@{state} > td,
              > .@{state} > th {
              background-color: @background;
              }
              }
              }

              // Hover states for `.table-hover`
              // Note: this is not available for cells or rows within `thead` or `tfoot`.
              .table-hover > tbody {
              > tr > .@{state}:hover,
              > .@{state}:hover > td,
              > .@{state}:hover > th {
              background-color: darken(@background, 5%);
              }
              }
              }

              // Button variants
              // -------------------------
              // Easily pump out default styles, as well as :hover, :focus, :active,
              // and disabled options for all buttons
              .button-variant(@color; @background; @border) {
              color: @color;
              background-color: @background;
              border-color: @border;

              &:hover,
              &:focus,
              &:active,
              &.active,
              .open .dropdown-toggle& {
              color: @color;
              background-color: darken(@background, 8%);
              border-color: darken(@border, 12%);
              }
              &:active,
              &.active,
              .open .dropdown-toggle& {
              background-image: none;
              }
              &.disabled,
              &[disabled],
              fieldset[disabled] & {
              &,
              &:hover,
              &:focus,
              &:active,
              &.active {
              background-color: @background;
              border-color: @border;
              }
              }

              .badge {
              color: @background;
              background-color: #fff;
              }
              }

              // Button sizes
              // -------------------------
              .button-size(@padding-vertical; @padding-horizontal; @font-size; @line-height; @border-radius) {
              padding: @padding-vertical @padding-horizontal;
              font-size: @font-size;
              line-height: @line-height;
              border-radius: @border-radius;
              }

              // Pagination
              // -------------------------
              .pagination-size(@padding-vertical; @padding-horizontal; @font-size; @border-radius) {
              > li {
              > a,
              > span {
              padding: @padding-vertical @padding-horizontal;
              font-size: @font-size;
              }
              &:first-child {
              > a,
              > span {
              .border-left-radius(@border-radius);
              }
              }
              &:last-child {
              > a,
              > span {
              .border-right-radius(@border-radius);
              }
              }
              }
              }

              // Labels
              // -------------------------
              .label-variant(@color) {
              background-color: @color;
              &[href] {
              &:hover,
              &:focus {
              background-color: darken(@color, 10%);
              }
              }
              }

              // Navbar vertical align
              // -------------------------
              // Vertically center elements in the navbar.
              // Example: an element has a height of 30px, so write out `.navbar-vertical-align(30px);` to calculate the appropriate top margin.
              .navbar-vertical-align(@element-height) {
              margin-top: ((@navbar-height - @element-height) / 2);
              margin-bottom: ((@navbar-height - @element-height) / 2);
              }

              // Progress bars
              // -------------------------
              .progress-bar-variant(@color) {
              background-color: @color;
              .progress-striped & {
              #gradient > .striped();
              }
              }

              // Responsive utilities
              // -------------------------
              // More easily include all the states for responsive-utilities.less.
              .responsive-visibility() {
              display: block !important;
              table&  { display: table; }
              tr&     { display: table-row !important; }
              th&,
              td&     { display: table-cell !important; }
              }

              .responsive-invisibility() {
              &,
              tr&,
              th&,
              td& { display: none !important; }
              }


              // Grid System
              // -----------

              // Centered container element
              .container-fixed() {
              margin-right: auto;
              margin-left: auto;
              padding-left:  (@grid-gutter-width / 2);
              padding-right: (@grid-gutter-width / 2);
              .clearfix();
              }

              // Creates a wrapper for a series of columns
              .make-row(@gutter: @grid-gutter-width) {
              margin-left:  (@gutter / -2);
              margin-right: (@gutter / -2);
              .clearfix();
              }

              // Generate the extra small columns
              .make-xs-column(@columns; @gutter: @grid-gutter-width) {
              position: relative;
              float: left;
              width: percentage((@columns / @grid-columns));
              // Prevent columns from collapsing when empty
              min-height: 1px;
              // Inner gutter via padding
              padding-left:  (@gutter / 2);
              padding-right: (@gutter / 2);
              }

              // Generate the small columns
              .make-sm-column(@columns; @gutter: @grid-gutter-width) {
              position: relative;
              // Prevent columns from collapsing when empty
              min-height: 1px;
              // Inner gutter via padding
              padding-left:  (@gutter / 2);
              padding-right: (@gutter / 2);

              // Calculate width based on number of columns available
              @media (min-width: @screen-sm-min) {
              float: left;
              width: percentage((@columns / @grid-columns));
              }
              }

              // Generate the small column offsets
              .make-sm-column-offset(@columns) {
              @media (min-width: @screen-sm-min) {
              margin-left: percentage((@columns / @grid-columns));
              }
              }
              .make-sm-column-push(@columns) {
              @media (min-width: @screen-sm-min) {
              left: percentage((@columns / @grid-columns));
              }
              }
              .make-sm-column-pull(@columns) {
              @media (min-width: @screen-sm-min) {
              right: percentage((@columns / @grid-columns));
              }
              }

              // Generate the medium columns
              .make-md-column(@columns; @gutter: @grid-gutter-width) {
              position: relative;
              // Prevent columns from collapsing when empty
              min-height: 1px;
              // Inner gutter via padding
              padding-left:  (@gutter / 2);
              padding-right: (@gutter / 2);

              // Calculate width based on number of columns available
              @media (min-width: @screen-md-min) {
              float: left;
              width: percentage((@columns / @grid-columns));
              }
              }

              // Generate the medium column offsets
              .make-md-column-offset(@columns) {
              @media (min-width: @screen-md-min) {
              margin-left: percentage((@columns / @grid-columns));
              }
              }
              .make-md-column-push(@columns) {
              @media (min-width: @screen-md) {
              left: percentage((@columns / @grid-columns));
              }
              }
              .make-md-column-pull(@columns) {
              @media (min-width: @screen-md-min) {
              right: percentage((@columns / @grid-columns));
              }
              }

              // Generate the large columns
              .make-lg-column(@columns; @gutter: @grid-gutter-width) {
              position: relative;
              // Prevent columns from collapsing when empty
              min-height: 1px;
              // Inner gutter via padding
              padding-left:  (@gutter / 2);
              padding-right: (@gutter / 2);

              // Calculate width based on number of columns available
              @media (min-width: @screen-lg-min) {
              float: left;
              width: percentage((@columns / @grid-columns));
              }
              }

              // Generate the large column offsets
              .make-lg-column-offset(@columns) {
              @media (min-width: @screen-lg-min) {
              margin-left: percentage((@columns / @grid-columns));
              }
              }
              .make-lg-column-push(@columns) {
              @media (min-width: @screen-lg-min) {
              left: percentage((@columns / @grid-columns));
              }
              }
              .make-lg-column-pull(@columns) {
              @media (min-width: @screen-lg-min) {
              right: percentage((@columns / @grid-columns));
              }
              }


              // Framework grid generation
              //
              // Used only by Bootstrap to generate the correct number of grid classes given
              // any value of `@grid-columns`.

              .make-grid-columns() {
              // Common styles for all sizes of grid columns, widths 1-12
              .col(@index) when (@index = 1) { // initial
              @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
              .col(@index + 1, @item);
              }
              .col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
              @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
              .col(@index + 1, ~"@{list}, @{item}");
              }
              .col(@index, @list) when (@index > @grid-columns) { // terminal
              @{list} {
              position: relative;
              // Prevent columns from collapsing when empty
              min-height: 1px;
              // Inner gutter via padding
              padding-left:  (@grid-gutter-width / 2);
              padding-right: (@grid-gutter-width / 2);
              }
              }
              .col(1); // kickstart it
              }

              .make-grid-columns-float(@class) {
              .col(@index) when (@index = 1) { // initial
              @item: ~".col-@{class}-@{index}";
              .col(@index + 1, @item);
              }
              .col(@index, @list) when (@index =< @grid-columns) { // general
              @item: ~".col-@{class}-@{index}";
              .col(@index + 1, ~"@{list}, @{item}");
              }
              .col(@index, @list) when (@index > @grid-columns) { // terminal
              @{list} {
              float: left;
              }
              }
              .col(1); // kickstart it
              }

              .calc-grid(@index, @class, @type) when (@type = width) and (@index > 0) {
              .col-@{class}-@{index} {
              width: percentage((@index / @grid-columns));
              }
              }
              .calc-grid(@index, @class, @type) when (@type = push) {
              .col-@{class}-push-@{index} {
              left: percentage((@index / @grid-columns));
              }
              }
              .calc-grid(@index, @class, @type) when (@type = pull) {
              .col-@{class}-pull-@{index} {
              right: percentage((@index / @grid-columns));
              }
              }
              .calc-grid(@index, @class, @type) when (@type = offset) {
              .col-@{class}-offset-@{index} {
              margin-left: percentage((@index / @grid-columns));
              }
              }

              // Basic looping in LESS
              .make-grid(@index, @class, @type) when (@index >= 0) {
              .calc-grid(@index, @class, @type);
              // next iteration
              .make-grid(@index - 1, @class, @type);
              }


              // Form validation states
              //
              // Used in forms.less to generate the form validation CSS for warnings, errors,
              // and successes.

              .form-control-validation(@text-color: #555; @border-color: #ccc; @background-color: #f5f5f5) {
              // Color the label and help text
              .help-block,
              .control-label,
              .radio,
              .checkbox,
              .radio-inline,
              .checkbox-inline  {
              color: @text-color;
              }
              // Set the border and box shadow on specific inputs to match
              .form-control {
              border-color: @border-color;
              .box-shadow(inset 0 1px 1px rgba(0,0,0,.075)); // Redeclare so transitions work
              &:focus {
              border-color: darken(@border-color, 10%);
              @shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 6px lighten(@border-color, 20%);
              .box-shadow(@shadow);
              }
              }
              // Set validation states also for addons
              .input-group-addon {
              color: @text-color;
              border-color: @border-color;
              background-color: @background-color;
              }
              }

              // Form control focus state
              //
              // Generate a customized focus state and for any input with the specified color,
              // which defaults to the `@input-focus-border` variable.
              //
              // We highly encourage you to not customize the default value, but instead use
              // this to tweak colors on an as-needed basis. This aesthetic change is based on
              // WebKit's default styles, but applicable to a wider range of browsers. Its
              // usability and accessibility should be taken into account with any change.
              //
              // Example usage: change the default blue border and shadow to white for better
              // contrast against a dark gray background.

              .form-control-focus(@color: @input-border-focus) {
              @color-rgba: rgba(red(@color), green(@color), blue(@color), .6);
              &:focus {
              border-color: @color;
              outline: 0;
              .box-shadow(~"inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px @{color-rgba}");
              }
              }

              // Form control sizing
              //
              // Relative text size, padding, and border-radii changes for form controls. For
              // horizontal sizing, wrap controls in the predefined grid classes. `<select>`
                // element gets special love because it's special, and that's a fact!

                .input-size(@input-height; @padding-vertical; @padding-horizontal; @font-size; @line-height; @border-radius) {
                height: @input-height;
                padding: @padding-vertical @padding-horizontal;
                font-size: @font-size;
                line-height: @line-height;
                border-radius: @border-radius;

                select& {
                height: @input-height;
                line-height: @input-height;
                }

                textarea& {
                height: auto;
                }
                }

                ]]>
            </mixins>
            <normalize>
              <![CDATA[
                /*! normalize.css v2.1.3 | MIT License | git.io/normalize */

                // ==========================================================================
                // HTML5 display definitions
                // ==========================================================================

                //
                // Correct `block` display not defined in IE 8/9.
                //

                article,
                aside,
                details,
                figcaption,
                figure,
                footer,
                header,
                hgroup,
                main,
                nav,
                section,
                summary {
                display: block;
                }

                //
                // Correct `inline-block` display not defined in IE 8/9.
                //

                audio,
                canvas,
                video {
                display: inline-block;
                }

                //
                // Prevent modern browsers from displaying `audio` without controls.
                // Remove excess height in iOS 5 devices.
                //

                audio:not([controls]) {
                display: none;
                height: 0;
                }

                //
                // Address `[hidden]` styling not present in IE 8/9.
                // Hide the `template` element in IE, Safari, and Firefox < 22.
                //

                [hidden],
                template {
                display: none;
                }

                // ==========================================================================
                // Base
                // ==========================================================================

                //
                // 1. Set default font family to sans-serif.
                // 2. Prevent iOS text size adjust after orientation change, without disabling
                //    user zoom.
                //

                html {
                font-family: sans-serif; // 1
                -ms-text-size-adjust: 100%; // 2
                -webkit-text-size-adjust: 100%; // 2
                }

                //
                // Remove default margin.
                //

                body {
                margin: 0;
                }

                // ==========================================================================
                // Links
                // ==========================================================================

                //
                // Remove the gray background color from active links in IE 10.
                //

                a {
                background: transparent;
                }

                //
                // Address `outline` inconsistency between Chrome and other browsers.
                //

                a:focus {
                outline: thin dotted;
                }

                //
                // Improve readability when focused and also mouse hovered in all browsers.
                //

                a:active,
                a:hover {
                outline: 0;
                }

                // ==========================================================================
                // Typography
                // ==========================================================================

                //
                // Address variable `h1` font-size and margin within `section` and `article`
                // contexts in Firefox 4+, Safari 5, and Chrome.
                //

                h1 {
                font-size: 2em;
                margin: 0.67em 0;
                }

                //
                // Address styling not present in IE 8/9, Safari 5, and Chrome.
                //

                abbr[title] {
                border-bottom: 1px dotted;
                }

                //
                // Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
                //

                b,
                strong {
                font-weight: bold;
                }

                //
                // Address styling not present in Safari 5 and Chrome.
                //

                dfn {
                font-style: italic;
                }

                //
                // Address differences between Firefox and other browsers.
                //

                hr {
                -moz-box-sizing: content-box;
                box-sizing: content-box;
                height: 0;
                }

                //
                // Address styling not present in IE 8/9.
                //

                mark {
                background: #ff0;
                color: #000;
                }

                //
                // Correct font family set oddly in Safari 5 and Chrome.
                //

                code,
                kbd,
                pre,
                samp {
                font-family: monospace, serif;
                font-size: 1em;
                }

                //
                // Improve readability of pre-formatted text in all browsers.
                //

                pre {
                white-space: pre-wrap;
                }

                //
                // Set consistent quote types.
                //

                q {
                quotes: "\201C" "\201D" "\2018" "\2019";
                }

                //
                // Address inconsistent and variable font size in all browsers.
                //

                small {
                font-size: 80%;
                }

                //
                // Prevent `sub` and `sup` affecting `line-height` in all browsers.
                //

                sub,
                sup {
                font-size: 75%;
                line-height: 0;
                position: relative;
                vertical-align: baseline;
                }

                sup {
                top: -0.5em;
                }

                sub {
                bottom: -0.25em;
                }

                // ==========================================================================
                // Embedded content
                // ==========================================================================

                //
                // Remove border when inside `a` element in IE 8/9.
                //

                img {
                border: 0;
                }

                //
                // Correct overflow displayed oddly in IE 9.
                //

                svg:not(:root) {
                overflow: hidden;
                }

                // ==========================================================================
                // Figures
                // ==========================================================================

                //
                // Address margin not present in IE 8/9 and Safari 5.
                //

                figure {
                margin: 0;
                }

                // ==========================================================================
                // Forms
                // ==========================================================================

                //
                // Define consistent border, margin, and padding.
                //

                fieldset {
                border: 1px solid #c0c0c0;
                margin: 0 2px;
                padding: 0.35em 0.625em 0.75em;
                }

                //
                // 1. Correct `color` not being inherited in IE 8/9.
                // 2. Remove padding so people aren't caught out if they zero out fieldsets.
                //

                legend {
                border: 0; // 1
                padding: 0; // 2
                }

                //
                // 1. Correct font family not being inherited in all browsers.
                // 2. Correct font size not being inherited in all browsers.
                // 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
                //

                button,
                input,
                select,
                textarea {
                font-family: inherit; // 1
                font-size: 100%; // 2
                margin: 0; // 3
                }

                //
                // Address Firefox 4+ setting `line-height` on `input` using `!important` in
                // the UA stylesheet.
                //

                button,
                input {
                line-height: normal;
                }

                //
                // Address inconsistent `text-transform` inheritance for `button` and `select`.
                // All other form control elements do not inherit `text-transform` values.
                // Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
                // Correct `select` style inheritance in Firefox 4+ and Opera.
                //

                button,
                select {
                text-transform: none;
                }

                //
                // 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
                //    and `video` controls.
                // 2. Correct inability to style clickable `input` types in iOS.
                // 3. Improve usability and consistency of cursor style between image-type
                //    `input` and others.
                //

                button,
                html input[type="button"], // 1
                input[type="reset"],
                input[type="submit"] {
                -webkit-appearance: button; // 2
                cursor: pointer; // 3
                }

                //
                // Re-set default cursor for disabled elements.
                //

                button[disabled],
                html input[disabled] {
                cursor: default;
                }

                //
                // 1. Address box sizing set to `content-box` in IE 8/9/10.
                // 2. Remove excess padding in IE 8/9/10.
                //

                input[type="checkbox"],
                input[type="radio"] {
                box-sizing: border-box; // 1
                padding: 0; // 2
                }

                //
                // 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
                // 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
                //    (include `-moz` to future-proof).
                //

                input[type="search"] {
                -webkit-appearance: textfield; // 1
                -moz-box-sizing: content-box;
                -webkit-box-sizing: content-box; // 2
                box-sizing: content-box;
                }

                //
                // Remove inner padding and search cancel button in Safari 5 and Chrome
                // on OS X.
                //

                input[type="search"]::-webkit-search-cancel-button,
                input[type="search"]::-webkit-search-decoration {
                -webkit-appearance: none;
                }

                //
                // Remove inner padding and border in Firefox 4+.
                //

                button::-moz-focus-inner,
                input::-moz-focus-inner {
                border: 0;
                padding: 0;
                }

                //
                // 1. Remove default vertical scrollbar in IE 8/9.
                // 2. Improve readability and alignment in all browsers.
                //

                textarea {
                overflow: auto; // 1
                vertical-align: top; // 2
                }

                // ==========================================================================
                // Tables
                // ==========================================================================

                //
                // Remove most spacing between table cells.
                //

                table {
                border-collapse: collapse;
                border-spacing: 0;
                }

                ]]>
            </normalize>
            <print>
              <![CDATA[
                //
                // Basic print styles
                // --------------------------------------------------
                // Source: https://github.com/h5bp/html5-boilerplate/blob/master/css/main.css

                @media print {

                * {
                text-shadow: none !important;
                color: #000 !important; // Black prints faster: h5bp.com/s
                background: transparent !important;
                box-shadow: none !important;
                }

                a,
                a:visited {
                text-decoration: underline;
                }

                a[href]:after {
                content: " (" attr(href) ")";
                }

                abbr[title]:after {
                content: " (" attr(title) ")";
                }

                // Don't show links for images, or javascript/internal links
                a[href^="javascript:"]:after,
                a[href^="#"]:after {
                content: "";
                }

                pre,
                blockquote {
                border: 1px solid #999;
                page-break-inside: avoid;
                }

                thead {
                display: table-header-group; // h5bp.com/t
                }

                tr,
                img {
                page-break-inside: avoid;
                }

                img {
                max-width: 100% !important;
                }

                @page {
                margin: 2cm .5cm;
                }

                p,
                h2,
                h3 {
                orphans: 3;
                widows: 3;
                }

                h2,
                h3 {
                page-break-after: avoid;
                }

                // Chrome (OSX) fix for https://github.com/twbs/bootstrap/issues/11245
                // Once fixed, we can just straight up remove this.
                select {
                background: #fff !important;
                }

                // Bootstrap components
                .navbar {
                display: none;
                }
                .table {
                td,
                th {
                background-color: #fff !important;
                }
                }
                .btn,
                .dropup > .btn {
                > .caret {
                border-top-color: #000 !important;
                }
                }
                .label {
                border: 1px solid #000;
                }

                .table {
                border-collapse: collapse !important;
                }
                .table-bordered {
                th,
                td {
                border: 1px solid #ddd !important;
                }
                }

                }

                ]]>
            </print>
            <scaffolding>
              <![CDATA[
                //
                // Scaffolding
                // --------------------------------------------------


                // Reset the box-sizing

                *,
                *:before,
                *:after {
                .box-sizing(border-box);
                }


                // Body reset

                html {
                font-size: 62.5%;
                -webkit-tap-highlight-color: rgba(0,0,0,0);
                }

                body {
                font-family: @font-family-base;
                font-size: @font-size-base;
                line-height: @line-height-base;
                color: @text-color;
                background-color: @body-bg;
                }

                // Reset fonts for relevant elements
                input,
                button,
                select,
                textarea {
                font-family: inherit;
                font-size: inherit;
                line-height: inherit;
                }


                // Links

                a {
                color: @link-color;
                text-decoration: none;

                &:hover,
                &:focus {
                color: @link-hover-color;
                text-decoration: underline;
                }

                &:focus {
                .tab-focus();
                }
                }


                // Images

                img {
                vertical-align: middle;
                }

                // Responsive images (ensure images don't scale beyond their parents)
                .img-responsive {
                .img-responsive();
                }

                // Rounded corners
                .img-rounded {
                border-radius: @border-radius-large;
                }

                // Image thumbnails
                //
                // Heads up! This is mixin-ed into thumbnails.less for `.thumbnail`.
                .img-thumbnail {
                padding: @thumbnail-padding;
                line-height: @line-height-base;
                background-color: @thumbnail-bg;
                border: 1px solid @thumbnail-border;
                border-radius: @thumbnail-border-radius;
                .transition(all .2s ease-in-out);

                // Keep them at most 100% wide
                .img-responsive(inline-block);
                }

                // Perfect circle
                .img-circle {
                border-radius: 50%; // set radius in percents
                }


                // Horizontal rules

                hr {
                margin-top:    @line-height-computed;
                margin-bottom: @line-height-computed;
                border: 0;
                border-top: 1px solid @hr-border;
                }


                // Only display content to screen readers
                //
                // See: http://a11yproject.com/posts/how-to-hide-content/

                .sr-only {
                position: absolute;
                width: 1px;
                height: 1px;
                margin: -1px;
                padding: 0;
                overflow: hidden;
                clip: rect(0,0,0,0);
                border: 0;
                }

                ]]>
            </scaffolding>
            <type>
              <![CDATA[
                //
                // Typography
                // --------------------------------------------------


                // Headings
                // -------------------------

                h1, h2, h3, h4, h5, h6,
                .h1, .h2, .h3, .h4, .h5, .h6 {
                font-family: @headings-font-family;
                font-weight: @headings-font-weight;
                line-height: @headings-line-height;
                color: @headings-color;

                small,
                .small {
                font-weight: normal;
                line-height: 1;
                color: @headings-small-color;
                }
                }

                h1,
                h2,
                h3 {
                margin-top: @line-height-computed;
                margin-bottom: (@line-height-computed / 2);

                small,
                .small {
                font-size: 65%;
                }
                }
                h4,
                h5,
                h6 {
                margin-top: (@line-height-computed / 2);
                margin-bottom: (@line-height-computed / 2);

                small,
                .small {
                font-size: 75%;
                }
                }

                h1, .h1 { font-size: @font-size-h1; }
                h2, .h2 { font-size: @font-size-h2; }
                h3, .h3 { font-size: @font-size-h3; }
                h4, .h4 { font-size: @font-size-h4; }
                h5, .h5 { font-size: @font-size-h5; }
                h6, .h6 { font-size: @font-size-h6; }


                // Body text
                // -------------------------

                p {
                margin: 0 0 (@line-height-computed / 2);
                }

                .lead {
                margin-bottom: @line-height-computed;
                font-size: floor(@font-size-base * 1.15);
                font-weight: 200;
                line-height: 1.4;

                @media (min-width: @screen-sm-min) {
                font-size: (@font-size-base * 1.5);
                }
                }


                // Emphasis & misc
                // -------------------------

                // Ex: 14px base font * 85% = about 12px
                small,
                .small  { font-size: 85%; }

                // Undo browser default styling
                cite    { font-style: normal; }

                // Contextual emphasis
                .text-muted {
                color: @text-muted;
                }
                .text-primary {
                color: @brand-primary;
                &:hover {
                color: darken(@brand-primary, 10%);
                }
                }
                .text-warning {
                color: @state-warning-text;
                &:hover {
                color: darken(@state-warning-text, 10%);
                }
                }
                .text-danger {
                color: @state-danger-text;
                &:hover {
                color: darken(@state-danger-text, 10%);
                }
                }
                .text-success {
                color: @state-success-text;
                &:hover {
                color: darken(@state-success-text, 10%);
                }
                }
                .text-info {
                color: @state-info-text;
                &:hover {
                color: darken(@state-info-text, 10%);
                }
                }

                // Alignment
                .text-left           { text-align: left; }
                .text-right          { text-align: right; }
                .text-center         { text-align: center; }


                // Page header
                // -------------------------

                .page-header {
                padding-bottom: ((@line-height-computed / 2) - 1);
                margin: (@line-height-computed * 2) 0 @line-height-computed;
                border-bottom: 1px solid @page-header-border-color;
                }


                // Lists
                // --------------------------------------------------

                // Unordered and Ordered lists
                ul,
                ol {
                margin-top: 0;
                margin-bottom: (@line-height-computed / 2);
                ul,
                ol {
                margin-bottom: 0;
                }
                }

                // List options

                // Unstyled keeps list items block level, just removes default browser padding and list-style
                .list-unstyled {
                padding-left: 0;
                list-style: none;
                }

                // Inline turns list items into inline-block
                .list-inline {
                .list-unstyled();

                > li {
                display: inline-block;
                padding-left: 5px;
                padding-right: 5px;

                &:first-child {
                padding-left: 0;
                }
                }
                }

                // Description Lists
                dl {
                margin-top: 0; // Remove browser default
                margin-bottom: @line-height-computed;
                }
                dt,
                dd {
                line-height: @line-height-base;
                }
                dt {
                font-weight: bold;
                }
                dd {
                margin-left: 0; // Undo browser default
                }

                // Horizontal description lists
                //
                // Defaults to being stacked without any of the below styles applied, until the
                // grid breakpoint is reached (default of ~768px).

                @media (min-width: @grid-float-breakpoint) {
                .dl-horizontal {
                dt {
                float: left;
                width: (@component-offset-horizontal - 20);
                clear: left;
                text-align: right;
                .text-overflow();
                }
                dd {
                margin-left: @component-offset-horizontal;
                .clearfix(); // Clear the floated `dt` if an empty `dd` is present
                }
                }
                }

                // MISC
                // ----

                // Abbreviations and acronyms
                abbr[title],
                // Add data-* attribute to help out our tooltip plugin, per https://github.com/twbs/bootstrap/issues/5257
                abbr[data-original-title] {
                cursor: help;
                border-bottom: 1px dotted @abbr-border-color;
                }
                .initialism {
                font-size: 90%;
                text-transform: uppercase;
                }

                // Blockquotes
                blockquote {
                padding: (@line-height-computed / 2) @line-height-computed;
                margin: 0 0 @line-height-computed;
                border-left: 5px solid @blockquote-border-color;
                p {
                font-size: (@font-size-base * 1.25);
                font-weight: 300;
                line-height: 1.25;
                }
                p:last-child {
                margin-bottom: 0;
                }
                small,
                .small {
                display: block;
                line-height: @line-height-base;
                color: @blockquote-small-color;
                &:before {
                content: '\2014 \00A0'; // EM DASH, NBSP
                }
                }

                // Float right with text-align: right
                &.pull-right {
                padding-right: 15px;
                padding-left: 0;
                border-right: 5px solid @blockquote-border-color;
                border-left: 0;
                p,
                small,
                .small {
                text-align: right;
                }
                small,
                .small {
                &:before {
                content: '';
                }
                &:after {
                content: '\00A0 \2014'; // NBSP, EM DASH
                }
                }
                }
                }

                // Quotes
                blockquote:before,
                blockquote:after {
                content: "";
                }

                // Addresses
                address {
                margin-bottom: @line-height-computed;
                font-style: normal;
                line-height: @line-height-base;
                }

                ]]>
            </type>
            <code>
              <![CDATA[
                //
                // Code (inline and block)
                // --------------------------------------------------


                // Inline and block code styles
                code,
                kbd,
                pre,
                samp {
                font-family: @font-family-monospace;
                }

                // Inline code
                code {
                padding: 2px 4px;
                font-size: 90%;
                color: @code-color;
                background-color: @code-bg;
                white-space: nowrap;
                border-radius: @border-radius-base;
                }

                // Blocks of code
                pre {
                display: block;
                padding: ((@line-height-computed - 1) / 2);
                margin: 0 0 (@line-height-computed / 2);
                font-size: (@font-size-base - 1); // 14px to 13px
                line-height: @line-height-base;
                word-break: break-all;
                word-wrap: break-word;
                color: @pre-color;
                background-color: @pre-bg;
                border: 1px solid @pre-border-color;
                border-radius: @border-radius-base;

                // Account for some code outputs that place code tags in pre tags
                code {
                padding: 0;
                font-size: inherit;
                color: inherit;
                white-space: pre-wrap;
                background-color: transparent;
                border-radius: 0;
                }
                }

                // Enable scrollable blocks of code
                .pre-scrollable {
                max-height: @pre-scrollable-max-height;
                overflow-y: scroll;
                }

                ]]>
            </code>
            <grid>
              <![CDATA[
                //
                // Grid system
                // --------------------------------------------------

                // Set the container width, and override it for fixed navbars in media queries
                .container {
                .container-fixed();

                @media (min-width: @screen-sm) {
                width: @container-sm;
                }
                @media (min-width: @screen-md) {
                width: @container-md;
                }
                @media (min-width: @screen-lg-min) {
                width: @container-lg;
                }
                }

                // mobile first defaults
                .row {
                .make-row();
                }

                // Common styles for small and large grid columns
                .make-grid-columns();


                // Extra small grid
                //
                // Columns, offsets, pushes, and pulls for extra small devices like
                // smartphones.

                .make-grid-columns-float(xs);
                .make-grid(@grid-columns, xs, width);
                .make-grid(@grid-columns, xs, pull);
                .make-grid(@grid-columns, xs, push);
                .make-grid(@grid-columns, xs, offset);


                // Small grid
                //
                // Columns, offsets, pushes, and pulls for the small device range, from phones
                // to tablets.

                @media (min-width: @screen-sm-min) {
                .make-grid-columns-float(sm);
                .make-grid(@grid-columns, sm, width);
                .make-grid(@grid-columns, sm, pull);
                .make-grid(@grid-columns, sm, push);
                .make-grid(@grid-columns, sm, offset);
                }


                // Medium grid
                //
                // Columns, offsets, pushes, and pulls for the desktop device range.

                @media (min-width: @screen-md-min) {
                .make-grid-columns-float(md);
                .make-grid(@grid-columns, md, width);
                .make-grid(@grid-columns, md, pull);
                .make-grid(@grid-columns, md, push);
                .make-grid(@grid-columns, md, offset);
                }


                // Large grid
                //
                // Columns, offsets, pushes, and pulls for the large desktop device range.

                @media (min-width: @screen-lg-min) {
                .make-grid-columns-float(lg);
                .make-grid(@grid-columns, lg, width);
                .make-grid(@grid-columns, lg, pull);
                .make-grid(@grid-columns, lg, push);
                .make-grid(@grid-columns, lg, offset);
                }


                ]]>
            </grid>
            <tables>
              <![CDATA[
                //
                // Tables
                // --------------------------------------------------


                table {
                max-width: 100%;
                background-color: @table-bg;
                }
                th {
                text-align: left;
                }


                // Baseline styles

                .table {
                width: 100%;
                margin-bottom: @line-height-computed;
                // Cells
                > thead,
                > tbody,
                > tfoot {
                > tr {
                > th,
                > td {
                padding: @table-cell-padding;
                line-height: @line-height-base;
                vertical-align: top;
                border-top: 1px solid @table-border-color;
                }
                }
                }
                // Bottom align for column headings
                > thead > tr > th {
                vertical-align: bottom;
                border-bottom: 2px solid @table-border-color;
                }
                // Remove top border from thead by default
                > caption + thead,
                > colgroup + thead,
                > thead:first-child {
                > tr:first-child {
                > th,
                > td {
                border-top: 0;
                }
                }
                }
                // Account for multiple tbody instances
                > tbody + tbody {
                border-top: 2px solid @table-border-color;
                }

                // Nesting
                .table {
                background-color: @body-bg;
                }
                }


                // Condensed table w/ half padding

                .table-condensed {
                > thead,
                > tbody,
                > tfoot {
                > tr {
                > th,
                > td {
                padding: @table-condensed-cell-padding;
                }
                }
                }
                }


                // Bordered version
                //
                // Add borders all around the table and between all the columns.

                .table-bordered {
                border: 1px solid @table-border-color;
                > thead,
                > tbody,
                > tfoot {
                > tr {
                > th,
                > td {
                border: 1px solid @table-border-color;
                }
                }
                }
                > thead > tr {
                > th,
                > td {
                border-bottom-width: 2px;
                }
                }
                }


                // Zebra-striping
                //
                // Default zebra-stripe styles (alternating gray and transparent backgrounds)

                .table-striped {
                > tbody > tr:nth-child(odd) {
                > td,
                > th {
                background-color: @table-bg-accent;
                }
                }
                }


                // Hover effect
                //
                // Placed here since it has to come after the potential zebra striping

                .table-hover {
                > tbody > tr:hover {
                > td,
                > th {
                background-color: @table-bg-hover;
                }
                }
                }


                // Table cell sizing
                //
                // Reset default table behavior

                table col[class*="col-"] {
                position: static; // Prevent border hiding in Firefox and IE9/10 (see https://github.com/twbs/bootstrap/issues/11623)
                float: none;
                display: table-column;
                }
                table {
                td,
                th {
                &[class*="col-"] {
                float: none;
                display: table-cell;
                }
                }
                }


                // Table backgrounds
                //
                // Exact selectors below required to override `.table-striped` and prevent
                // inheritance to nested tables.

                // Generate the contextual variants
                .table-row-variant(active; @table-bg-active);
                .table-row-variant(success; @state-success-bg);
                .table-row-variant(danger; @state-danger-bg);
                .table-row-variant(warning; @state-warning-bg);


                // Responsive tables
                //
                // Wrap your tables in `.table-responsive` and we'll make them mobile friendly
                // by enabling horizontal scrolling. Only applies <768px. Everything above that
                // will display normally.

                @media (max-width: @screen-xs-max) {
                .table-responsive {
                width: 100%;
                margin-bottom: (@line-height-computed * 0.75);
                overflow-y: hidden;
                overflow-x: scroll;
                -ms-overflow-style: -ms-autohiding-scrollbar;
                border: 1px solid @table-border-color;
                -webkit-overflow-scrolling: touch;

                // Tighten up spacing
                > .table {
                margin-bottom: 0;

                // Ensure the content doesn't wrap
                > thead,
                > tbody,
                > tfoot {
                > tr {
                > th,
                > td {
                white-space: nowrap;
                }
                }
                }
                }

                // Special overrides for the bordered tables
                > .table-bordered {
                border: 0;

                // Nuke the appropriate borders so that the parent can handle them
                > thead,
                > tbody,
                > tfoot {
                > tr {
                > th:first-child,
                > td:first-child {
                border-left: 0;
                }
                > th:last-child,
                > td:last-child {
                border-right: 0;
                }
                }
                }

                // Only nuke the last row's bottom-border in `tbody` and `tfoot` since
                // chances are there will be only one `tr` in a `thead` and that would
                // remove the border altogether.
                > tbody,
                > tfoot {
                > tr:last-child {
                > th,
                > td {
                border-bottom: 0;
                }
                }
                }

                }
                }
                }

                ]]>
            </tables>
            <forms>
              <![CDATA[
                //
                // Forms
                // --------------------------------------------------


                // Normalize non-controls
                //
                // Restyle and baseline non-control form elements.

                fieldset {
                padding: 0;
                margin: 0;
                border: 0;
                }

                legend {
                display: block;
                width: 100%;
                padding: 0;
                margin-bottom: @line-height-computed;
                font-size: (@font-size-base * 1.5);
                line-height: inherit;
                color: @legend-color;
                border: 0;
                border-bottom: 1px solid @legend-border-color;
                }

                label {
                display: inline-block;
                margin-bottom: 5px;
                font-weight: bold;
                }


                // Normalize form controls

                // Override content-box in Normalize (* isn't specific enough)
                input[type="search"] {
                .box-sizing(border-box);
                }

                // Position radios and checkboxes better
                input[type="radio"],
                input[type="checkbox"] {
                margin: 4px 0 0;
                margin-top: 1px \9; /* IE8-9 */
                line-height: normal;
                }

                // Set the height of select and file controls to match text inputs
                input[type="file"] {
                display: block;
                }

                // Make multiple select elements height not fixed
                select[multiple],
                select[size] {
                height: auto;
                }

                // Fix optgroup Firefox bug per https://github.com/twbs/bootstrap/issues/7611
                select optgroup {
                font-size: inherit;
                font-style: inherit;
                font-family: inherit;
                }

                // Focus for select, file, radio, and checkbox
                input[type="file"]:focus,
                input[type="radio"]:focus,
                input[type="checkbox"]:focus {
                .tab-focus();
                }

                // Fix for Chrome number input
                // Setting certain font-sizes causes the `I` bar to appear on hover of the bottom increment button.
                // See https://github.com/twbs/bootstrap/issues/8350 for more.
                input[type="number"] {
                &::-webkit-outer-spin-button,
                &::-webkit-inner-spin-button {
                height: auto;
                }
                }

                // Adjust output element
                output {
                display: block;
                padding-top: (@padding-base-vertical + 1);
                font-size: @font-size-base;
                line-height: @line-height-base;
                color: @input-color;
                vertical-align: middle;
                }


                // Common form controls
                //
                // Shared size and type resets for form controls. Apply `.form-control` to any
                // of the following form controls:
                //
                // select
                // textarea
                // input[type="text"]
                // input[type="password"]
                // input[type="datetime"]
                // input[type="datetime-local"]
                // input[type="date"]
                // input[type="month"]
                // input[type="time"]
                // input[type="week"]
                // input[type="number"]
                // input[type="email"]
                // input[type="url"]
                // input[type="search"]
                // input[type="tel"]
                // input[type="color"]

                .form-control {
                display: block;
                width: 100%;
                height: @input-height-base; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
                padding: @padding-base-vertical @padding-base-horizontal;
                font-size: @font-size-base;
                line-height: @line-height-base;
                color: @input-color;
                vertical-align: middle;
                background-color: @input-bg;
                background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
                border: 1px solid @input-border;
                border-radius: @input-border-radius;
                .box-shadow(inset 0 1px 1px rgba(0,0,0,.075));
                .transition(~"border-color ease-in-out .15s, box-shadow ease-in-out .15s");

                // Customize the `:focus` state to imitate native WebKit styles.
                .form-control-focus();

                // Placeholder
                //
                // Placeholder text gets special styles because when browsers invalidate entire
                // lines if it doesn't understand a selector/
                .placeholder();

                // Disabled and read-only inputs
                // Note: HTML5 says that controls under a fieldset > legend:first-child won't
                // be disabled if the fieldset is disabled. Due to implementation difficulty,
                // we don't honor that edge case; we style them as disabled anyway.
                &[disabled],
                &[readonly],
                fieldset[disabled] & {
                cursor: not-allowed;
                background-color: @input-bg-disabled;
                }

                // Reset height for `textarea`s
                textarea& {
                height: auto;
                }
                }


                // Form groups
                //
                // Designed to help with the organization and spacing of vertical forms. For
                // horizontal forms, use the predefined grid classes.

                .form-group {
                margin-bottom: 15px;
                }


                // Checkboxes and radios
                //
                // Indent the labels to position radios/checkboxes as hanging controls.

                .radio,
                .checkbox {
                display: block;
                min-height: @line-height-computed; // clear the floating input if there is no label text
                margin-top: 10px;
                margin-bottom: 10px;
                padding-left: 20px;
                vertical-align: middle;
                label {
                display: inline;
                margin-bottom: 0;
                font-weight: normal;
                cursor: pointer;
                }
                }
                .radio input[type="radio"],
                .radio-inline input[type="radio"],
                .checkbox input[type="checkbox"],
                .checkbox-inline input[type="checkbox"] {
                float: left;
                margin-left: -20px;
                }
                .radio + .radio,
                .checkbox + .checkbox {
                margin-top: -5px; // Move up sibling radios or checkboxes for tighter spacing
                }

                // Radios and checkboxes on same line
                .radio-inline,
                .checkbox-inline {
                display: inline-block;
                padding-left: 20px;
                margin-bottom: 0;
                vertical-align: middle;
                font-weight: normal;
                cursor: pointer;
                }
                .radio-inline + .radio-inline,
                .checkbox-inline + .checkbox-inline {
                margin-top: 0;
                margin-left: 10px; // space out consecutive inline controls
                }

                // Apply same disabled cursor tweak as for inputs
                //
                // Note: Neither radios nor checkboxes can be readonly.
                input[type="radio"],
                input[type="checkbox"],
                .radio,
                .radio-inline,
                .checkbox,
                .checkbox-inline {
                &[disabled],
                fieldset[disabled] & {
                cursor: not-allowed;
                }
                }

                // Form control sizing
                .input-sm {
                .input-size(@input-height-small; @padding-small-vertical; @padding-small-horizontal; @font-size-small; @line-height-small; @border-radius-small);
                }

                .input-lg {
                .input-size(@input-height-large; @padding-large-vertical; @padding-large-horizontal; @font-size-large; @line-height-large; @border-radius-large);
                }


                // Form control feedback states
                //
                // Apply contextual and semantic states to individual form controls.

                // Warning
                .has-warning {
                .form-control-validation(@state-warning-text; @state-warning-text; @state-warning-bg);
                }
                // Error
                .has-error {
                .form-control-validation(@state-danger-text; @state-danger-text; @state-danger-bg);
                }
                // Success
                .has-success {
                .form-control-validation(@state-success-text; @state-success-text; @state-success-bg);
                }


                // Static form control text
                //
                // Apply class to a `p` element to make any string of text align with labels in
                // a horizontal form layout.

                .form-control-static {
                margin-bottom: 0; // Remove default margin from `p`
                }


                // Help text
                //
                // Apply to any element you wish to create light text for placement immediately
                // below a form control. Use for general help, formatting, or instructional text.

                .help-block {
                display: block; // account for any element using help-block
                margin-top: 5px;
                margin-bottom: 10px;
                color: lighten(@text-color, 25%); // lighten the text some for contrast
                }



                // Inline forms
                //
                // Make forms appear inline(-block) by adding the `.form-inline` class. Inline
                // forms begin stacked on extra small (mobile) devices and then go inline when
                // viewports reach <768px.
                //
                // Requires wrapping inputs and labels with `.form-group` for proper display of
                // default HTML form controls and our custom form controls (e.g., input groups).
                //
                // Heads up! This is mixin-ed into `.navbar-form` in navbars.less.

                .form-inline {

                // Kick in the inline
                @media (min-width: @screen-sm) {
                // Inline-block all the things for "inline"
                .form-group  {
                display: inline-block;
                margin-bottom: 0;
                vertical-align: middle;
                }

                // In navbar-form, allow folks to *not* use `.form-group`
                .form-control {
                display: inline-block;
                }

                // Override `width: 100%;` when not within a `.form-group`
                select.form-control {
                width: auto;
                }

                // Remove default margin on radios/checkboxes that were used for stacking, and
                // then undo the floating of radios and checkboxes to match (which also avoids
                // a bug in WebKit: https://github.com/twbs/bootstrap/issues/1969).
                .radio,
                .checkbox {
                display: inline-block;
                margin-top: 0;
                margin-bottom: 0;
                padding-left: 0;
                }
                .radio input[type="radio"],
                .checkbox input[type="checkbox"] {
                float: none;
                margin-left: 0;
                }
                }
                }


                // Horizontal forms
                //
                // Horizontal forms are built on grid classes and allow you to create forms with
                // labels on the left and inputs on the right.

                .form-horizontal {

                // Consistent vertical alignment of labels, radios, and checkboxes
                .control-label,
                .radio,
                .checkbox,
                .radio-inline,
                .checkbox-inline {
                margin-top: 0;
                margin-bottom: 0;
                padding-top: (@padding-base-vertical + 1); // Default padding plus a border
                }
                // Account for padding we're adding to ensure the alignment and of help text
                // and other content below items
                .radio,
                .checkbox {
                min-height: @line-height-computed + (@padding-base-vertical + 1);
                }

                // Make form groups behave like rows
                .form-group {
                .make-row();
                }

                .form-control-static {
                padding-top: (@padding-base-vertical + 1);
                }

                // Only right align form labels here when the columns stop stacking
                @media (min-width: @screen-sm-min) {
                .control-label {
                text-align: right;
                }
                }
                }

                ]]>
            </forms>
            <buttons>
              <![CDATA[
                //
                // Buttons
                // --------------------------------------------------


                // Base styles
                // --------------------------------------------------

                .btn {
                display: inline-block;
                margin-bottom: 0; // For input.btn
                font-weight: @btn-font-weight;
                text-align: center;
                vertical-align: middle;
                cursor: pointer;
                background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
                border: 1px solid transparent;
                white-space: nowrap;
                .button-size(@padding-base-vertical; @padding-base-horizontal; @font-size-base; @line-height-base; @border-radius-base);
                .user-select(none);

                &:focus {
                .tab-focus();
                }

                &:hover,
                &:focus {
                color: @btn-default-color;
                text-decoration: none;
                }

                &:active,
                &.active {
                outline: 0;
                background-image: none;
                .box-shadow(inset 0 3px 5px rgba(0,0,0,.125));
                }

                &.disabled,
                &[disabled],
                fieldset[disabled] & {
                cursor: not-allowed;
                pointer-events: none; // Future-proof disabling of clicks
                .opacity(.65);
                .box-shadow(none);
                }
                }


                // Alternate buttons
                // --------------------------------------------------

                .btn-default {
                .button-variant(@btn-default-color; @btn-default-bg; @btn-default-border);
                }
                .btn-primary {
                .button-variant(@btn-primary-color; @btn-primary-bg; @btn-primary-border);
                }
                // Warning appears as orange
                .btn-warning {
                .button-variant(@btn-warning-color; @btn-warning-bg; @btn-warning-border);
                }
                // Danger and error appear as red
                .btn-danger {
                .button-variant(@btn-danger-color; @btn-danger-bg; @btn-danger-border);
                }
                // Success appears as green
                .btn-success {
                .button-variant(@btn-success-color; @btn-success-bg; @btn-success-border);
                }
                // Info appears as blue-green
                .btn-info {
                .button-variant(@btn-info-color; @btn-info-bg; @btn-info-border);
                }


                // Link buttons
                // -------------------------

                // Make a button look and behave like a link
                .btn-link {
                color: @link-color;
                font-weight: normal;
                cursor: pointer;
                border-radius: 0;

                &,
                &:active,
                &[disabled],
                fieldset[disabled] & {
                background-color: transparent;
                .box-shadow(none);
                }
                &,
                &:hover,
                &:focus,
                &:active {
                border-color: transparent;
                }
                &:hover,
                &:focus {
                color: @link-hover-color;
                text-decoration: underline;
                background-color: transparent;
                }
                &[disabled],
                fieldset[disabled] & {
                &:hover,
                &:focus {
                color: @btn-link-disabled-color;
                text-decoration: none;
                }
                }
                }


                // Button Sizes
                // --------------------------------------------------

                .btn-lg {
                // line-height: ensure even-numbered height of button next to large input
                .button-size(@padding-large-vertical; @padding-large-horizontal; @font-size-large; @line-height-large; @border-radius-large);
                }
                .btn-sm {
                // line-height: ensure proper height of button next to small input
                .button-size(@padding-small-vertical; @padding-small-horizontal; @font-size-small; @line-height-small; @border-radius-small);
                }
                .btn-xs {
                .button-size(@padding-xs-vertical; @padding-xs-horizontal; @font-size-small; @line-height-small; @border-radius-small);
                }


                // Block button
                // --------------------------------------------------

                .btn-block {
                display: block;
                width: 100%;
                padding-left: 0;
                padding-right: 0;
                }

                // Vertically space out multiple block buttons
                .btn-block + .btn-block {
                margin-top: 5px;
                }

                // Specificity overrides
                input[type="submit"],
                input[type="reset"],
                input[type="button"] {
                &.btn-block {
                width: 100%;
                }
                }

                ]]>
            </buttons>
            <component-animations>
              <![CDATA[
                //
                // Component animations
                // --------------------------------------------------

                // Heads up!
                //
                // We don't use the `.opacity()` mixin here since it causes a bug with text
                // fields in IE7-8. Source: https://github.com/twitter/bootstrap/pull/3552.

                .fade {
                opacity: 0;
                .transition(opacity .15s linear);
                &.in {
                opacity: 1;
                }
                }

                .collapse {
                display: none;
                &.in {
                display: block;
                }
                }
                .collapsing {
                position: relative;
                height: 0;
                overflow: hidden;
                .transition(height .35s ease);
                }

                ]]>
            </component-animations>
            <glyphicons>
              <![CDATA[
                //
                // Glyphicons for Bootstrap
                //
                // Since icons are fonts, they can be placed anywhere text is placed and are
                // thus automatically sized to match the surrounding child. To use, create an
                // inline element with the appropriate classes, like so:
                //
                // <a href="#"><span class="glyphicon glyphicon-star"></span> Star</a>

                // Import the fonts
                @font-face {
                font-family: 'Glyphicons Halflings';
                src: ~"url('@{icon-font-path}@{icon-font-name}.eot')";
                src: ~"url('@{icon-font-path}@{icon-font-name}.eot?#iefix') format('embedded-opentype')",
                ~"url('@{icon-font-path}@{icon-font-name}.woff') format('woff')",
                ~"url('@{icon-font-path}@{icon-font-name}.ttf') format('truetype')",
                ~"url('@{icon-font-path}@{icon-font-name}.svg#glyphicons-halflingsregular') format('svg')";
                }

                // Catchall baseclass
                .glyphicon {
                position: relative;
                top: 1px;
                display: inline-block;
                font-family: 'Glyphicons Halflings';
                font-style: normal;
                font-weight: normal;
                line-height: 1;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;

                &:empty {
                width: 1em;
                }
                }

                // Individual icons
                .glyphicon-asterisk               { &:before { content: "\2a"; } }
                .glyphicon-plus                   { &:before { content: "\2b"; } }
                .glyphicon-euro                   { &:before { content: "\20ac"; } }
                .glyphicon-minus                  { &:before { content: "\2212"; } }
                .glyphicon-cloud                  { &:before { content: "\2601"; } }
                .glyphicon-envelope               { &:before { content: "\2709"; } }
                .glyphicon-pencil                 { &:before { content: "\270f"; } }
                .glyphicon-glass                  { &:before { content: "\e001"; } }
                .glyphicon-music                  { &:before { content: "\e002"; } }
                .glyphicon-search                 { &:before { content: "\e003"; } }
                .glyphicon-heart                  { &:before { content: "\e005"; } }
                .glyphicon-star                   { &:before { content: "\e006"; } }
                .glyphicon-star-empty             { &:before { content: "\e007"; } }
                .glyphicon-user                   { &:before { content: "\e008"; } }
                .glyphicon-film                   { &:before { content: "\e009"; } }
                .glyphicon-th-large               { &:before { content: "\e010"; } }
                .glyphicon-th                     { &:before { content: "\e011"; } }
                .glyphicon-th-list                { &:before { content: "\e012"; } }
                .glyphicon-ok                     { &:before { content: "\e013"; } }
                .glyphicon-remove                 { &:before { content: "\e014"; } }
                .glyphicon-zoom-in                { &:before { content: "\e015"; } }
                .glyphicon-zoom-out               { &:before { content: "\e016"; } }
                .glyphicon-off                    { &:before { content: "\e017"; } }
                .glyphicon-signal                 { &:before { content: "\e018"; } }
                .glyphicon-cog                    { &:before { content: "\e019"; } }
                .glyphicon-trash                  { &:before { content: "\e020"; } }
                .glyphicon-home                   { &:before { content: "\e021"; } }
                .glyphicon-file                   { &:before { content: "\e022"; } }
                .glyphicon-time                   { &:before { content: "\e023"; } }
                .glyphicon-road                   { &:before { content: "\e024"; } }
                .glyphicon-download-alt           { &:before { content: "\e025"; } }
                .glyphicon-download               { &:before { content: "\e026"; } }
                .glyphicon-upload                 { &:before { content: "\e027"; } }
                .glyphicon-inbox                  { &:before { content: "\e028"; } }
                .glyphicon-play-circle            { &:before { content: "\e029"; } }
                .glyphicon-repeat                 { &:before { content: "\e030"; } }
                .glyphicon-refresh                { &:before { content: "\e031"; } }
                .glyphicon-list-alt               { &:before { content: "\e032"; } }
                .glyphicon-lock                   { &:before { content: "\e033"; } }
                .glyphicon-flag                   { &:before { content: "\e034"; } }
                .glyphicon-headphones             { &:before { content: "\e035"; } }
                .glyphicon-volume-off             { &:before { content: "\e036"; } }
                .glyphicon-volume-down            { &:before { content: "\e037"; } }
                .glyphicon-volume-up              { &:before { content: "\e038"; } }
                .glyphicon-qrcode                 { &:before { content: "\e039"; } }
                .glyphicon-barcode                { &:before { content: "\e040"; } }
                .glyphicon-tag                    { &:before { content: "\e041"; } }
                .glyphicon-tags                   { &:before { content: "\e042"; } }
                .glyphicon-book                   { &:before { content: "\e043"; } }
                .glyphicon-bookmark               { &:before { content: "\e044"; } }
                .glyphicon-print                  { &:before { content: "\e045"; } }
                .glyphicon-camera                 { &:before { content: "\e046"; } }
                .glyphicon-font                   { &:before { content: "\e047"; } }
                .glyphicon-bold                   { &:before { content: "\e048"; } }
                .glyphicon-italic                 { &:before { content: "\e049"; } }
                .glyphicon-text-height            { &:before { content: "\e050"; } }
                .glyphicon-text-width             { &:before { content: "\e051"; } }
                .glyphicon-align-left             { &:before { content: "\e052"; } }
                .glyphicon-align-center           { &:before { content: "\e053"; } }
                .glyphicon-align-right            { &:before { content: "\e054"; } }
                .glyphicon-align-justify          { &:before { content: "\e055"; } }
                .glyphicon-list                   { &:before { content: "\e056"; } }
                .glyphicon-indent-left            { &:before { content: "\e057"; } }
                .glyphicon-indent-right           { &:before { content: "\e058"; } }
                .glyphicon-facetime-video         { &:before { content: "\e059"; } }
                .glyphicon-picture                { &:before { content: "\e060"; } }
                .glyphicon-map-marker             { &:before { content: "\e062"; } }
                .glyphicon-adjust                 { &:before { content: "\e063"; } }
                .glyphicon-tint                   { &:before { content: "\e064"; } }
                .glyphicon-edit                   { &:before { content: "\e065"; } }
                .glyphicon-share                  { &:before { content: "\e066"; } }
                .glyphicon-check                  { &:before { content: "\e067"; } }
                .glyphicon-move                   { &:before { content: "\e068"; } }
                .glyphicon-step-backward          { &:before { content: "\e069"; } }
                .glyphicon-fast-backward          { &:before { content: "\e070"; } }
                .glyphicon-backward               { &:before { content: "\e071"; } }
                .glyphicon-play                   { &:before { content: "\e072"; } }
                .glyphicon-pause                  { &:before { content: "\e073"; } }
                .glyphicon-stop                   { &:before { content: "\e074"; } }
                .glyphicon-forward                { &:before { content: "\e075"; } }
                .glyphicon-fast-forward           { &:before { content: "\e076"; } }
                .glyphicon-step-forward           { &:before { content: "\e077"; } }
                .glyphicon-eject                  { &:before { content: "\e078"; } }
                .glyphicon-chevron-left           { &:before { content: "\e079"; } }
                .glyphicon-chevron-right          { &:before { content: "\e080"; } }
                .glyphicon-plus-sign              { &:before { content: "\e081"; } }
                .glyphicon-minus-sign             { &:before { content: "\e082"; } }
                .glyphicon-remove-sign            { &:before { content: "\e083"; } }
                .glyphicon-ok-sign                { &:before { content: "\e084"; } }
                .glyphicon-question-sign          { &:before { content: "\e085"; } }
                .glyphicon-info-sign              { &:before { content: "\e086"; } }
                .glyphicon-screenshot             { &:before { content: "\e087"; } }
                .glyphicon-remove-circle          { &:before { content: "\e088"; } }
                .glyphicon-ok-circle              { &:before { content: "\e089"; } }
                .glyphicon-ban-circle             { &:before { content: "\e090"; } }
                .glyphicon-arrow-left             { &:before { content: "\e091"; } }
                .glyphicon-arrow-right            { &:before { content: "\e092"; } }
                .glyphicon-arrow-up               { &:before { content: "\e093"; } }
                .glyphicon-arrow-down             { &:before { content: "\e094"; } }
                .glyphicon-share-alt              { &:before { content: "\e095"; } }
                .glyphicon-resize-full            { &:before { content: "\e096"; } }
                .glyphicon-resize-small           { &:before { content: "\e097"; } }
                .glyphicon-exclamation-sign       { &:before { content: "\e101"; } }
                .glyphicon-gift                   { &:before { content: "\e102"; } }
                .glyphicon-leaf                   { &:before { content: "\e103"; } }
                .glyphicon-fire                   { &:before { content: "\e104"; } }
                .glyphicon-eye-open               { &:before { content: "\e105"; } }
                .glyphicon-eye-close              { &:before { content: "\e106"; } }
                .glyphicon-warning-sign           { &:before { content: "\e107"; } }
                .glyphicon-plane                  { &:before { content: "\e108"; } }
                .glyphicon-calendar               { &:before { content: "\e109"; } }
                .glyphicon-random                 { &:before { content: "\e110"; } }
                .glyphicon-comment                { &:before { content: "\e111"; } }
                .glyphicon-magnet                 { &:before { content: "\e112"; } }
                .glyphicon-chevron-up             { &:before { content: "\e113"; } }
                .glyphicon-chevron-down           { &:before { content: "\e114"; } }
                .glyphicon-retweet                { &:before { content: "\e115"; } }
                .glyphicon-shopping-cart          { &:before { content: "\e116"; } }
                .glyphicon-folder-close           { &:before { content: "\e117"; } }
                .glyphicon-folder-open            { &:before { content: "\e118"; } }
                .glyphicon-resize-vertical        { &:before { content: "\e119"; } }
                .glyphicon-resize-horizontal      { &:before { content: "\e120"; } }
                .glyphicon-hdd                    { &:before { content: "\e121"; } }
                .glyphicon-bullhorn               { &:before { content: "\e122"; } }
                .glyphicon-bell                   { &:before { content: "\e123"; } }
                .glyphicon-certificate            { &:before { content: "\e124"; } }
                .glyphicon-thumbs-up              { &:before { content: "\e125"; } }
                .glyphicon-thumbs-down            { &:before { content: "\e126"; } }
                .glyphicon-hand-right             { &:before { content: "\e127"; } }
                .glyphicon-hand-left              { &:before { content: "\e128"; } }
                .glyphicon-hand-up                { &:before { content: "\e129"; } }
                .glyphicon-hand-down              { &:before { content: "\e130"; } }
                .glyphicon-circle-arrow-right     { &:before { content: "\e131"; } }
                .glyphicon-circle-arrow-left      { &:before { content: "\e132"; } }
                .glyphicon-circle-arrow-up        { &:before { content: "\e133"; } }
                .glyphicon-circle-arrow-down      { &:before { content: "\e134"; } }
                .glyphicon-globe                  { &:before { content: "\e135"; } }
                .glyphicon-wrench                 { &:before { content: "\e136"; } }
                .glyphicon-tasks                  { &:before { content: "\e137"; } }
                .glyphicon-filter                 { &:before { content: "\e138"; } }
                .glyphicon-briefcase              { &:before { content: "\e139"; } }
                .glyphicon-fullscreen             { &:before { content: "\e140"; } }
                .glyphicon-dashboard              { &:before { content: "\e141"; } }
                .glyphicon-paperclip              { &:before { content: "\e142"; } }
                .glyphicon-heart-empty            { &:before { content: "\e143"; } }
                .glyphicon-link                   { &:before { content: "\e144"; } }
                .glyphicon-phone                  { &:before { content: "\e145"; } }
                .glyphicon-pushpin                { &:before { content: "\e146"; } }
                .glyphicon-usd                    { &:before { content: "\e148"; } }
                .glyphicon-gbp                    { &:before { content: "\e149"; } }
                .glyphicon-sort                   { &:before { content: "\e150"; } }
                .glyphicon-sort-by-alphabet       { &:before { content: "\e151"; } }
                .glyphicon-sort-by-alphabet-alt   { &:before { content: "\e152"; } }
                .glyphicon-sort-by-order          { &:before { content: "\e153"; } }
                .glyphicon-sort-by-order-alt      { &:before { content: "\e154"; } }
                .glyphicon-sort-by-attributes     { &:before { content: "\e155"; } }
                .glyphicon-sort-by-attributes-alt { &:before { content: "\e156"; } }
                .glyphicon-unchecked              { &:before { content: "\e157"; } }
                .glyphicon-expand                 { &:before { content: "\e158"; } }
                .glyphicon-collapse-down          { &:before { content: "\e159"; } }
                .glyphicon-collapse-up            { &:before { content: "\e160"; } }
                .glyphicon-log-in                 { &:before { content: "\e161"; } }
                .glyphicon-flash                  { &:before { content: "\e162"; } }
                .glyphicon-log-out                { &:before { content: "\e163"; } }
                .glyphicon-new-window             { &:before { content: "\e164"; } }
                .glyphicon-record                 { &:before { content: "\e165"; } }
                .glyphicon-save                   { &:before { content: "\e166"; } }
                .glyphicon-open                   { &:before { content: "\e167"; } }
                .glyphicon-saved                  { &:before { content: "\e168"; } }
                .glyphicon-import                 { &:before { content: "\e169"; } }
                .glyphicon-export                 { &:before { content: "\e170"; } }
                .glyphicon-send                   { &:before { content: "\e171"; } }
                .glyphicon-floppy-disk            { &:before { content: "\e172"; } }
                .glyphicon-floppy-saved           { &:before { content: "\e173"; } }
                .glyphicon-floppy-remove          { &:before { content: "\e174"; } }
                .glyphicon-floppy-save            { &:before { content: "\e175"; } }
                .glyphicon-floppy-open            { &:before { content: "\e176"; } }
                .glyphicon-credit-card            { &:before { content: "\e177"; } }
                .glyphicon-transfer               { &:before { content: "\e178"; } }
                .glyphicon-cutlery                { &:before { content: "\e179"; } }
                .glyphicon-header                 { &:before { content: "\e180"; } }
                .glyphicon-compressed             { &:before { content: "\e181"; } }
                .glyphicon-earphone               { &:before { content: "\e182"; } }
                .glyphicon-phone-alt              { &:before { content: "\e183"; } }
                .glyphicon-tower                  { &:before { content: "\e184"; } }
                .glyphicon-stats                  { &:before { content: "\e185"; } }
                .glyphicon-sd-video               { &:before { content: "\e186"; } }
                .glyphicon-hd-video               { &:before { content: "\e187"; } }
                .glyphicon-subtitles              { &:before { content: "\e188"; } }
                .glyphicon-sound-stereo           { &:before { content: "\e189"; } }
                .glyphicon-sound-dolby            { &:before { content: "\e190"; } }
                .glyphicon-sound-5-1              { &:before { content: "\e191"; } }
                .glyphicon-sound-6-1              { &:before { content: "\e192"; } }
                .glyphicon-sound-7-1              { &:before { content: "\e193"; } }
                .glyphicon-copyright-mark         { &:before { content: "\e194"; } }
                .glyphicon-registration-mark      { &:before { content: "\e195"; } }
                .glyphicon-cloud-download         { &:before { content: "\e197"; } }
                .glyphicon-cloud-upload           { &:before { content: "\e198"; } }
                .glyphicon-tree-conifer           { &:before { content: "\e199"; } }
                .glyphicon-tree-deciduous         { &:before { content: "\e200"; } }

                ]]>
            </glyphicons>
            <dropdowns>
              <![CDATA[
                //
                // Dropdown menus
                // --------------------------------------------------


                // Dropdown arrow/caret
                .caret {
                display: inline-block;
                width: 0;
                height: 0;
                margin-left: 2px;
                vertical-align: middle;
                border-top:   @caret-width-base solid;
                border-right: @caret-width-base solid transparent;
                border-left:  @caret-width-base solid transparent;
                }

                // The dropdown wrapper (div)
                .dropdown {
                position: relative;
                }

                // Prevent the focus on the dropdown toggle when closing dropdowns
                .dropdown-toggle:focus {
                outline: 0;
                }

                // The dropdown menu (ul)
                .dropdown-menu {
                position: absolute;
                top: 100%;
                left: 0;
                z-index: @zindex-dropdown;
                display: none; // none by default, but block on "open" of the menu
                float: left;
                min-width: 160px;
                padding: 5px 0;
                margin: 2px 0 0; // override default ul
                list-style: none;
                font-size: @font-size-base;
                background-color: @dropdown-bg;
                border: 1px solid @dropdown-fallback-border; // IE8 fallback
                border: 1px solid @dropdown-border;
                border-radius: @border-radius-base;
                .box-shadow(0 6px 12px rgba(0,0,0,.175));
                background-clip: padding-box;

                // Aligns the dropdown menu to right
                &.pull-right {
                right: 0;
                left: auto;
                }

                // Dividers (basically an hr) within the dropdown
                .divider {
                .nav-divider(@dropdown-divider-bg);
                }

                // Links within the dropdown menu
                > li > a {
                display: block;
                padding: 3px 20px;
                clear: both;
                font-weight: normal;
                line-height: @line-height-base;
                color: @dropdown-link-color;
                white-space: nowrap; // prevent links from randomly breaking onto new lines
                }
                }

                // Hover/Focus state
                .dropdown-menu > li > a {
                &:hover,
                &:focus {
                text-decoration: none;
                color: @dropdown-link-hover-color;
                background-color: @dropdown-link-hover-bg;
                }
                }

                // Active state
                .dropdown-menu > .active > a {
                &,
                &:hover,
                &:focus {
                color: @dropdown-link-active-color;
                text-decoration: none;
                outline: 0;
                background-color: @dropdown-link-active-bg;
                }
                }

                // Disabled state
                //
                // Gray out text and ensure the hover/focus state remains gray

                .dropdown-menu > .disabled > a {
                &,
                &:hover,
                &:focus {
                color: @dropdown-link-disabled-color;
                }
                }
                // Nuke hover/focus effects
                .dropdown-menu > .disabled > a {
                &:hover,
                &:focus {
                text-decoration: none;
                background-color: transparent;
                background-image: none; // Remove CSS gradient
                .reset-filter();
                cursor: not-allowed;
                }
                }

                // Open state for the dropdown
                .open {
                // Show the menu
                > .dropdown-menu {
                display: block;
                }

                // Remove the outline when :focus is triggered
                > a {
                outline: 0;
                }
                }

                // Dropdown section headers
                .dropdown-header {
                display: block;
                padding: 3px 20px;
                font-size: @font-size-small;
                line-height: @line-height-base;
                color: @dropdown-header-color;
                }

                // Backdrop to catch body clicks on mobile, etc.
                .dropdown-backdrop {
                position: fixed;
                left: 0;
                right: 0;
                bottom: 0;
                top: 0;
                z-index: @zindex-dropdown - 10;
                }

                // Right aligned dropdowns
                .pull-right > .dropdown-menu {
                right: 0;
                left: auto;
                }

                // Allow for dropdowns to go bottom up (aka, dropup-menu)
                //
                // Just add .dropup after the standard .dropdown class and you're set, bro.
                // TODO: abstract this so that the navbar fixed styles are not placed here?

                .dropup,
                .navbar-fixed-bottom .dropdown {
                // Reverse the caret
                .caret {
                border-top: 0;
                border-bottom: @caret-width-base solid;
                content: "";
                }
                // Different positioning for bottom up menu
                .dropdown-menu {
                top: auto;
                bottom: 100%;
                margin-bottom: 1px;
                }
                }


                // Component alignment
                //
                // Reiterate per navbar.less and the modified component alignment there.

                @media (min-width: @grid-float-breakpoint) {
                .navbar-right {
                .dropdown-menu {
                .pull-right > .dropdown-menu();
                }
                }
                }


                ]]>
            </dropdowns>
            <button-groups>
              <![CDATA[
                //
                // Button groups
                // --------------------------------------------------

                // Make the div behave like a button
                .btn-group,
                .btn-group-vertical {
                position: relative;
                display: inline-block;
                vertical-align: middle; // match .btn alignment given font-size hack above
                > .btn {
                position: relative;
                float: left;
                // Bring the "active" button to the front
                &:hover,
                &:focus,
                &:active,
                &.active {
                z-index: 2;
                }
                &:focus {
                // Remove focus outline when dropdown JS adds it after closing the menu
                outline: none;
                }
                }
                }

                // Prevent double borders when buttons are next to each other
                .btn-group {
                .btn + .btn,
                .btn + .btn-group,
                .btn-group + .btn,
                .btn-group + .btn-group {
                margin-left: -1px;
                }
                }

                // Optional: Group multiple button groups together for a toolbar
                .btn-toolbar {
                .clearfix();

                .btn-group {
                float: left;
                }
                // Space out series of button groups
                > .btn,
                > .btn-group {
                + .btn,
                + .btn-group {
                margin-left: 5px;
                }
                }
                }

                .btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {
                border-radius: 0;
                }

                // Set corners individual because sometimes a single button can be in a .btn-group and we need :first-child and :last-child to both match
                .btn-group > .btn:first-child {
                margin-left: 0;
                &:not(:last-child):not(.dropdown-toggle) {
                .border-right-radius(0);
                }
                }
                // Need .dropdown-toggle since :last-child doesn't apply given a .dropdown-menu immediately after it
                .btn-group > .btn:last-child:not(:first-child),
                .btn-group > .dropdown-toggle:not(:first-child) {
                .border-left-radius(0);
                }

                // Custom edits for including btn-groups within btn-groups (useful for including dropdown buttons within a btn-group)
                .btn-group > .btn-group {
                float: left;
                }
                .btn-group > .btn-group:not(:first-child):not(:last-child) > .btn {
                border-radius: 0;
                }
                .btn-group > .btn-group:first-child {
                > .btn:last-child,
                > .dropdown-toggle {
                .border-right-radius(0);
                }
                }
                .btn-group > .btn-group:last-child > .btn:first-child {
                .border-left-radius(0);
                }

                // On active and open, don't show outline
                .btn-group .dropdown-toggle:active,
                .btn-group.open .dropdown-toggle {
                outline: 0;
                }


                // Sizing
                //
                // Remix the default button sizing classes into new ones for easier manipulation.

                .btn-group-xs > .btn { .btn-xs(); }
                .btn-group-sm > .btn { .btn-sm(); }
                .btn-group-lg > .btn { .btn-lg(); }


                // Split button dropdowns
                // ----------------------

                // Give the line between buttons some depth
                .btn-group > .btn + .dropdown-toggle {
                padding-left: 8px;
                padding-right: 8px;
                }
                .btn-group > .btn-lg + .dropdown-toggle {
                padding-left: 12px;
                padding-right: 12px;
                }

                // The clickable button for toggling the menu
                // Remove the gradient and set the same inset shadow as the :active state
                .btn-group.open .dropdown-toggle {
                .box-shadow(inset 0 3px 5px rgba(0,0,0,.125));

                // Show no shadow for `.btn-link` since it has no other button styles.
                &.btn-link {
                .box-shadow(none);
                }
                }


                // Reposition the caret
                .btn .caret {
                margin-left: 0;
                }
                // Carets in other button sizes
                .btn-lg .caret {
                border-width: @caret-width-large @caret-width-large 0;
                border-bottom-width: 0;
                }
                // Upside down carets for .dropup
                .dropup .btn-lg .caret {
                border-width: 0 @caret-width-large @caret-width-large;
                }


                // Vertical button groups
                // ----------------------

                .btn-group-vertical {
                > .btn,
                > .btn-group,
                > .btn-group > .btn {
                display: block;
                float: none;
                width: 100%;
                max-width: 100%;
                }

                // Clear floats so dropdown menus can be properly placed
                > .btn-group {
                .clearfix();
                > .btn {
                float: none;
                }
                }

                > .btn + .btn,
                > .btn + .btn-group,
                > .btn-group + .btn,
                > .btn-group + .btn-group {
                margin-top: -1px;
                margin-left: 0;
                }
                }

                .btn-group-vertical > .btn {
                &:not(:first-child):not(:last-child) {
                border-radius: 0;
                }
                &:first-child:not(:last-child) {
                border-top-right-radius: @border-radius-base;
                .border-bottom-radius(0);
                }
                &:last-child:not(:first-child) {
                border-bottom-left-radius: @border-radius-base;
                .border-top-radius(0);
                }
                }
                .btn-group-vertical > .btn-group:not(:first-child):not(:last-child) > .btn {
                border-radius: 0;
                }
                .btn-group-vertical > .btn-group:first-child {
                > .btn:last-child,
                > .dropdown-toggle {
                .border-bottom-radius(0);
                }
                }
                .btn-group-vertical > .btn-group:last-child > .btn:first-child {
                .border-top-radius(0);
                }



                // Justified button groups
                // ----------------------

                .btn-group-justified {
                display: table;
                width: 100%;
                table-layout: fixed;
                border-collapse: separate;
                > .btn,
                > .btn-group {
                float: none;
                display: table-cell;
                width: 1%;
                }
                > .btn-group .btn {
                width: 100%;
                }
                }


                // Checkbox and radio options
                [data-toggle="buttons"] > .btn > input[type="radio"],
                [data-toggle="buttons"] > .btn > input[type="checkbox"] {
                display: none;
                }

                ]]>
            </button-groups>
            <input-groups>
              <![CDATA[
                //
                // Input groups
                // --------------------------------------------------

                // Base styles
                // -------------------------
                .input-group {
                position: relative; // For dropdowns
                display: table;
                border-collapse: separate; // prevent input groups from inheriting border styles from table cells when placed within a table

                // Undo padding and float of grid classes
                &[class*="col-"] {
                float: none;
                padding-left: 0;
                padding-right: 0;
                }

                .form-control {
                width: 100%;
                margin-bottom: 0;
                }
                }

                // Sizing options
                //
                // Remix the default form control sizing classes into new ones for easier
                // manipulation.

                .input-group-lg > .form-control,
                .input-group-lg > .input-group-addon,
                .input-group-lg > .input-group-btn > .btn { .input-lg(); }
                .input-group-sm > .form-control,
                .input-group-sm > .input-group-addon,
                .input-group-sm > .input-group-btn > .btn { .input-sm(); }


                // Display as table-cell
                // -------------------------
                .input-group-addon,
                .input-group-btn,
                .input-group .form-control {
                display: table-cell;

                &:not(:first-child):not(:last-child) {
                border-radius: 0;
                }
                }
                // Addon and addon wrapper for buttons
                .input-group-addon,
                .input-group-btn {
                width: 1%;
                white-space: nowrap;
                vertical-align: middle; // Match the inputs
                }

                // Text input groups
                // -------------------------
                .input-group-addon {
                padding: @padding-base-vertical @padding-base-horizontal;
                font-size: @font-size-base;
                font-weight: normal;
                line-height: 1;
                color: @input-color;
                text-align: center;
                background-color: @input-group-addon-bg;
                border: 1px solid @input-group-addon-border-color;
                border-radius: @border-radius-base;

                // Sizing
                &.input-sm {
                padding: @padding-small-vertical @padding-small-horizontal;
                font-size: @font-size-small;
                border-radius: @border-radius-small;
                }
                &.input-lg {
                padding: @padding-large-vertical @padding-large-horizontal;
                font-size: @font-size-large;
                border-radius: @border-radius-large;
                }

                // Nuke default margins from checkboxes and radios to vertically center within.
                input[type="radio"],
                input[type="checkbox"] {
                margin-top: 0;
                }
                }

                // Reset rounded corners
                .input-group .form-control:first-child,
                .input-group-addon:first-child,
                .input-group-btn:first-child > .btn,
                .input-group-btn:first-child > .dropdown-toggle,
                .input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle) {
                .border-right-radius(0);
                }
                .input-group-addon:first-child {
                border-right: 0;
                }
                .input-group .form-control:last-child,
                .input-group-addon:last-child,
                .input-group-btn:last-child > .btn,
                .input-group-btn:last-child > .dropdown-toggle,
                .input-group-btn:first-child > .btn:not(:first-child) {
                .border-left-radius(0);
                }
                .input-group-addon:last-child {
                border-left: 0;
                }

                // Button input groups
                // -------------------------
                .input-group-btn {
                position: relative;
                white-space: nowrap;

                // Negative margin to only have a 1px border between the two
                &:first-child > .btn {
                margin-right: -1px;
                }
                &:last-child > .btn {
                margin-left: -1px;
                }
                }
                .input-group-btn > .btn {
                position: relative;
                // Jankily prevent input button groups from wrapping
                + .btn {
                margin-left: -4px;
                }
                // Bring the "active" button to the front
                &:hover,
                &:active {
                z-index: 2;
                }
                }

                ]]>
            </input-groups>
            <navs>
              <![CDATA[
                //
                // Navs
                // --------------------------------------------------


                // Base class
                // --------------------------------------------------

                .nav {
                margin-bottom: 0;
                padding-left: 0; // Override default ul/ol
                list-style: none;
                .clearfix();

                > li {
                position: relative;
                display: block;

                > a {
                position: relative;
                display: block;
                padding: @nav-link-padding;
                &:hover,
                &:focus {
                text-decoration: none;
                background-color: @nav-link-hover-bg;
                }
                }

                // Disabled state sets text to gray and nukes hover/tab effects
                &.disabled > a {
                color: @nav-disabled-link-color;

                &:hover,
                &:focus {
                color: @nav-disabled-link-hover-color;
                text-decoration: none;
                background-color: transparent;
                cursor: not-allowed;
                }
                }
                }

                // Open dropdowns
                .open > a {
                &,
                &:hover,
                &:focus {
                background-color: @nav-link-hover-bg;
                border-color: @link-color;
                }
                }

                // Nav dividers (deprecated with v3.0.1)
                //
                // This should have been removed in v3 with the dropping of `.nav-list`, but
                // we missed it. We don't currently support this anywhere, but in the interest
                // of maintaining backward compatibility in case you use it, it's deprecated.
                .nav-divider {
                .nav-divider();
                }

                // Prevent IE8 from misplacing imgs
                //
                // See https://github.com/h5bp/html5-boilerplate/issues/984#issuecomment-3985989
                > li > a > img {
                max-width: none;
                }
                }


                // Tabs
                // -------------------------

                // Give the tabs something to sit on
                .nav-tabs {
                border-bottom: 1px solid @nav-tabs-border-color;
                > li {
                float: left;
                // Make the list-items overlay the bottom border
                margin-bottom: -1px;

                // Actual tabs (as links)
                > a {
                margin-right: 2px;
                line-height: @line-height-base;
                border: 1px solid transparent;
                border-radius: @border-radius-base @border-radius-base 0 0;
                &:hover {
                border-color: @nav-tabs-link-hover-border-color @nav-tabs-link-hover-border-color @nav-tabs-border-color;
                }
                }

                // Active state, and it's :hover to override normal :hover
                &.active > a {
                &,
                &:hover,
                &:focus {
                color: @nav-tabs-active-link-hover-color;
                background-color: @nav-tabs-active-link-hover-bg;
                border: 1px solid @nav-tabs-active-link-hover-border-color;
                border-bottom-color: transparent;
                cursor: default;
                }
                }
                }
                // pulling this in mainly for less shorthand
                &.nav-justified {
                .nav-justified();
                .nav-tabs-justified();
                }
                }


                // Pills
                // -------------------------
                .nav-pills {
                > li {
                float: left;

                // Links rendered as pills
                > a {
                border-radius: @nav-pills-border-radius;
                }
                + li {
                margin-left: 2px;
                }

                // Active state
                &.active > a {
                &,
                &:hover,
                &:focus {
                color: @nav-pills-active-link-hover-color;
                background-color: @nav-pills-active-link-hover-bg;
                }
                }
                }
                }


                // Stacked pills
                .nav-stacked {
                > li {
                float: none;
                + li {
                margin-top: 2px;
                margin-left: 0; // no need for this gap between nav items
                }
                }
                }


                // Nav variations
                // --------------------------------------------------

                // Justified nav links
                // -------------------------

                .nav-justified {
                width: 100%;

                > li {
                float: none;
                > a {
                text-align: center;
                margin-bottom: 5px;
                }
                }

                > .dropdown .dropdown-menu {
                top: auto;
                left: auto;
                }

                @media (min-width: @screen-sm-min) {
                > li {
                display: table-cell;
                width: 1%;
                > a {
                margin-bottom: 0;
                }
                }
                }
                }

                // Move borders to anchors instead of bottom of list
                //
                // Mixin for adding on top the shared `.nav-justified` styles for our tabs
                .nav-tabs-justified {
                border-bottom: 0;

                > li > a {
                // Override margin from .nav-tabs
                margin-right: 0;
                border-radius: @border-radius-base;
                }

                > .active > a,
                > .active > a:hover,
                > .active > a:focus {
                border: 1px solid @nav-tabs-justified-link-border-color;
                }

                @media (min-width: @screen-sm-min) {
                > li > a {
                border-bottom: 1px solid @nav-tabs-justified-link-border-color;
                border-radius: @border-radius-base @border-radius-base 0 0;
                }
                > .active > a,
                > .active > a:hover,
                > .active > a:focus {
                border-bottom-color: @nav-tabs-justified-active-link-border-color;
                }
                }
                }


                // Tabbable tabs
                // -------------------------

                // Hide tabbable panes to start, show them when `.active`
                .tab-content {
                > .tab-pane {
                display: none;
                }
                > .active {
                display: block;
                }
                }


                // Dropdowns
                // -------------------------

                // Specific dropdowns
                .nav-tabs .dropdown-menu {
                // make dropdown border overlap tab border
                margin-top: -1px;
                // Remove the top rounded corners here since there is a hard edge above the menu
                .border-top-radius(0);
                }

                ]]>
            </navs>
            <navbar>
              <![CDATA[
                //
                // Navbars
                // --------------------------------------------------


                // Wrapper and base class
                //
                // Provide a static navbar from which we expand to create full-width, fixed, and
                // other navbar variations.

                .navbar {
                position: relative;
                min-height: @navbar-height; // Ensure a navbar always shows (e.g., without a .navbar-brand in collapsed mode)
                margin-bottom: @navbar-margin-bottom;
                border: 1px solid transparent;

                // Prevent floats from breaking the navbar
                .clearfix();

                @media (min-width: @grid-float-breakpoint) {
                border-radius: @navbar-border-radius;
                }
                }


                // Navbar heading
                //
                // Groups `.navbar-brand` and `.navbar-toggle` into a single component for easy
                // styling of responsive aspects.

                .navbar-header {
                .clearfix();

                @media (min-width: @grid-float-breakpoint) {
                float: left;
                }
                }


                // Navbar collapse (body)
                //
                // Group your navbar content into this for easy collapsing and expanding across
                // various device sizes. By default, this content is collapsed when <768px, but
                // will expand past that for a horizontal display.
                //
                // To start (on mobile devices) the navbar links, forms, and buttons are stacked
                // vertically and include a `max-height` to overflow in case you have too much
                // content for the user's viewport.

                .navbar-collapse {
                max-height: 340px;
                overflow-x: visible;
                padding-right: @navbar-padding-horizontal;
                padding-left:  @navbar-padding-horizontal;
                border-top: 1px solid transparent;
                box-shadow: inset 0 1px 0 rgba(255,255,255,.1);
                .clearfix();
                -webkit-overflow-scrolling: touch;

                &.in {
                overflow-y: auto;
                }

                @media (min-width: @grid-float-breakpoint) {
                width: auto;
                border-top: 0;
                box-shadow: none;

                &.collapse {
                display: block !important;
                height: auto !important;
                padding-bottom: 0; // Override default setting
                overflow: visible !important;
                }

                &.in {
                overflow-y: visible;
                }

                // Undo the collapse side padding for navbars with containers to ensure
                // alignment of right-aligned contents.
                .navbar-fixed-top &,
                .navbar-static-top &,
                .navbar-fixed-bottom & {
                padding-left: 0;
                padding-right: 0;
                }
                }
                }


                // Both navbar header and collapse
                //
                // When a container is present, change the behavior of the header and collapse.

                .container > .navbar-header,
                .container > .navbar-collapse {
                margin-right: -@navbar-padding-horizontal;
                margin-left:  -@navbar-padding-horizontal;

                @media (min-width: @grid-float-breakpoint) {
                margin-right: 0;
                margin-left:  0;
                }
                }


                //
                // Navbar alignment options
                //
                // Display the navbar across the entirety of the page or fixed it to the top or
                // bottom of the page.

                // Static top (unfixed, but 100% wide) navbar
                .navbar-static-top {
                z-index: @zindex-navbar;
                border-width: 0 0 1px;

                @media (min-width: @grid-float-breakpoint) {
                border-radius: 0;
                }
                }

                // Fix the top/bottom navbars when screen real estate supports it
                .navbar-fixed-top,
                .navbar-fixed-bottom {
                position: fixed;
                right: 0;
                left: 0;
                z-index: @zindex-navbar-fixed;

                // Undo the rounded corners
                @media (min-width: @grid-float-breakpoint) {
                border-radius: 0;
                }
                }
                .navbar-fixed-top {
                top: 0;
                border-width: 0 0 1px;
                }
                .navbar-fixed-bottom {
                bottom: 0;
                margin-bottom: 0; // override .navbar defaults
                border-width: 1px 0 0;
                }


                // Brand/project name

                .navbar-brand {
                float: left;
                padding: @navbar-padding-vertical @navbar-padding-horizontal;
                font-size: @font-size-large;
                line-height: @line-height-computed;

                &:hover,
                &:focus {
                text-decoration: none;
                }

                @media (min-width: @grid-float-breakpoint) {
                .navbar > .container & {
                margin-left: -@navbar-padding-horizontal;
                }
                }
                }


                // Navbar toggle
                //
                // Custom button for toggling the `.navbar-collapse`, powered by the collapse
                // JavaScript plugin.

                .navbar-toggle {
                position: relative;
                float: right;
                margin-right: @navbar-padding-horizontal;
                padding: 9px 10px;
                .navbar-vertical-align(34px);
                background-color: transparent;
                background-image: none; // Reset unusual Firefox-on-Android default style; see https://github.com/necolas/normalize.css/issues/214
                border: 1px solid transparent;
                border-radius: @border-radius-base;

                // Bars
                .icon-bar {
                display: block;
                width: 22px;
                height: 2px;
                border-radius: 1px;
                }
                .icon-bar + .icon-bar {
                margin-top: 4px;
                }

                @media (min-width: @grid-float-breakpoint) {
                display: none;
                }
                }


                // Navbar nav links
                //
                // Builds on top of the `.nav` components with it's own modifier class to make
                // the nav the full height of the horizontal nav (above 768px).

                .navbar-nav {
                margin: (@navbar-padding-vertical / 2) -@navbar-padding-horizontal;

                > li > a {
                padding-top:    10px;
                padding-bottom: 10px;
                line-height: @line-height-computed;
                }

                @media (max-width: @grid-float-breakpoint-max) {
                // Dropdowns get custom display when collapsed
                .open .dropdown-menu {
                position: static;
                float: none;
                width: auto;
                margin-top: 0;
                background-color: transparent;
                border: 0;
                box-shadow: none;
                > li > a,
                .dropdown-header {
                padding: 5px 15px 5px 25px;
                }
                > li > a {
                line-height: @line-height-computed;
                &:hover,
                &:focus {
                background-image: none;
                }
                }
                }
                }

                // Uncollapse the nav
                @media (min-width: @grid-float-breakpoint) {
                float: left;
                margin: 0;

                > li {
                float: left;
                > a {
                padding-top:    @navbar-padding-vertical;
                padding-bottom: @navbar-padding-vertical;
                }
                }

                &.navbar-right:last-child {
                margin-right: -@navbar-padding-horizontal;
                }
                }
                }


                // Component alignment
                //
                // Repurpose the pull utilities as their own navbar utilities to avoid specificity
                // issues with parents and chaining. Only do this when the navbar is uncollapsed
                // though so that navbar contents properly stack and align in mobile.

                @media (min-width: @grid-float-breakpoint) {
                .navbar-left  { .pull-left(); }
                .navbar-right { .pull-right(); }
                }


                // Navbar form
                //
                // Extension of the `.form-inline` with some extra flavor for optimum display in
                // our navbars.

                .navbar-form {
                margin-left: -@navbar-padding-horizontal;
                margin-right: -@navbar-padding-horizontal;
                padding: 10px @navbar-padding-horizontal;
                border-top: 1px solid transparent;
                border-bottom: 1px solid transparent;
                @shadow: inset 0 1px 0 rgba(255,255,255,.1), 0 1px 0 rgba(255,255,255,.1);
                .box-shadow(@shadow);

                // Mixin behavior for optimum display
                .form-inline();

                .form-group {
                @media (max-width: @grid-float-breakpoint-max) {
                margin-bottom: 5px;
                }
                }

                // Vertically center in expanded, horizontal navbar
                .navbar-vertical-align(@input-height-base);

                // Undo 100% width for pull classes
                @media (min-width: @grid-float-breakpoint) {
                width: auto;
                border: 0;
                margin-left: 0;
                margin-right: 0;
                padding-top: 0;
                padding-bottom: 0;
                .box-shadow(none);

                // Outdent the form if last child to line up with content down the page
                &.navbar-right:last-child {
                margin-right: -@navbar-padding-horizontal;
                }
                }
                }


                // Dropdown menus

                // Menu position and menu carets
                .navbar-nav > li > .dropdown-menu {
                margin-top: 0;
                .border-top-radius(0);
                }
                // Menu position and menu caret support for dropups via extra dropup class
                .navbar-fixed-bottom .navbar-nav > li > .dropdown-menu {
                .border-bottom-radius(0);
                }

                // Right aligned menus need alt position
                .navbar-nav.pull-right > li > .dropdown-menu,
                .navbar-nav > li > .dropdown-menu.pull-right {
                left: auto;
                right: 0;
                }


                // Buttons in navbars
                //
                // Vertically center a button within a navbar (when *not* in a form).

                .navbar-btn {
                .navbar-vertical-align(@input-height-base);

                &.btn-sm {
                .navbar-vertical-align(@input-height-small);
                }
                &.btn-xs {
                .navbar-vertical-align(22);
                }
                }


                // Text in navbars
                //
                // Add a class to make any element properly align itself vertically within the navbars.

                .navbar-text {
                .navbar-vertical-align(@line-height-computed);

                @media (min-width: @grid-float-breakpoint) {
                float: left;
                margin-left: @navbar-padding-horizontal;
                margin-right: @navbar-padding-horizontal;

                // Outdent the form if last child to line up with content down the page
                &.navbar-right:last-child {
                margin-right: 0;
                }
                }
                }

                // Alternate navbars
                // --------------------------------------------------

                // Default navbar
                .navbar-default {
                background-color: @navbar-default-bg;
                border-color: @navbar-default-border;

                .navbar-brand {
                color: @navbar-default-brand-color;
                &:hover,
                &:focus {
                color: @navbar-default-brand-hover-color;
                background-color: @navbar-default-brand-hover-bg;
                }
                }

                .navbar-text {
                color: @navbar-default-color;
                }

                .navbar-nav {
                > li > a {
                color: @navbar-default-link-color;

                &:hover,
                &:focus {
                color: @navbar-default-link-hover-color;
                background-color: @navbar-default-link-hover-bg;
                }
                }
                > .active > a {
                &,
                &:hover,
                &:focus {
                color: @navbar-default-link-active-color;
                background-color: @navbar-default-link-active-bg;
                }
                }
                > .disabled > a {
                &,
                &:hover,
                &:focus {
                color: @navbar-default-link-disabled-color;
                background-color: @navbar-default-link-disabled-bg;
                }
                }
                }

                .navbar-toggle {
                border-color: @navbar-default-toggle-border-color;
                &:hover,
                &:focus {
                background-color: @navbar-default-toggle-hover-bg;
                }
                .icon-bar {
                background-color: @navbar-default-toggle-icon-bar-bg;
                }
                }

                .navbar-collapse,
                .navbar-form {
                border-color: @navbar-default-border;
                }

                // Dropdown menu items
                .navbar-nav {
                // Remove background color from open dropdown
                > .open > a {
                &,
                &:hover,
                &:focus {
                background-color: @navbar-default-link-active-bg;
                color: @navbar-default-link-active-color;
                }
                }

                @media (max-width: @grid-float-breakpoint-max) {
                // Dropdowns get custom display when collapsed
                .open .dropdown-menu {
                > li > a {
                color: @navbar-default-link-color;
                &:hover,
                &:focus {
                color: @navbar-default-link-hover-color;
                background-color: @navbar-default-link-hover-bg;
                }
                }
                > .active > a {
                &,
                &:hover,
                &:focus {
                color: @navbar-default-link-active-color;
                background-color: @navbar-default-link-active-bg;
                }
                }
                > .disabled > a {
                &,
                &:hover,
                &:focus {
                color: @navbar-default-link-disabled-color;
                background-color: @navbar-default-link-disabled-bg;
                }
                }
                }
                }
                }


                // Links in navbars
                //
                // Add a class to ensure links outside the navbar nav are colored correctly.

                .navbar-link {
                color: @navbar-default-link-color;
                &:hover {
                color: @navbar-default-link-hover-color;
                }
                }

                }

                // Inverse navbar

                .navbar-inverse {
                background-color: @navbar-inverse-bg;
                border-color: @navbar-inverse-border;

                .navbar-brand {
                color: @navbar-inverse-brand-color;
                &:hover,
                &:focus {
                color: @navbar-inverse-brand-hover-color;
                background-color: @navbar-inverse-brand-hover-bg;
                }
                }

                .navbar-text {
                color: @navbar-inverse-color;
                }

                .navbar-nav {
                > li > a {
                color: @navbar-inverse-link-color;

                &:hover,
                &:focus {
                color: @navbar-inverse-link-hover-color;
                background-color: @navbar-inverse-link-hover-bg;
                }
                }
                > .active > a {
                &,
                &:hover,
                &:focus {
                color: @navbar-inverse-link-active-color;
                background-color: @navbar-inverse-link-active-bg;
                }
                }
                > .disabled > a {
                &,
                &:hover,
                &:focus {
                color: @navbar-inverse-link-disabled-color;
                background-color: @navbar-inverse-link-disabled-bg;
                }
                }
                }

                // Darken the responsive nav toggle
                .navbar-toggle {
                border-color: @navbar-inverse-toggle-border-color;
                &:hover,
                &:focus {
                background-color: @navbar-inverse-toggle-hover-bg;
                }
                .icon-bar {
                background-color: @navbar-inverse-toggle-icon-bar-bg;
                }
                }

                .navbar-collapse,
                .navbar-form {
                border-color: darken(@navbar-inverse-bg, 7%);
                }

                // Dropdowns
                .navbar-nav {
                > .open > a {
                &,
                &:hover,
                &:focus {
                background-color: @navbar-inverse-link-active-bg;
                color: @navbar-inverse-link-active-color;
                }
                }

                @media (max-width: @grid-float-breakpoint-max) {
                // Dropdowns get custom display
                .open .dropdown-menu {
                > .dropdown-header {
                border-color: @navbar-inverse-border;
                }
                .divider {
                background-color: @navbar-inverse-border;
                }
                > li > a {
                color: @navbar-inverse-link-color;
                &:hover,
                &:focus {
                color: @navbar-inverse-link-hover-color;
                background-color: @navbar-inverse-link-hover-bg;
                }
                }
                > .active > a {
                &,
                &:hover,
                &:focus {
                color: @navbar-inverse-link-active-color;
                background-color: @navbar-inverse-link-active-bg;
                }
                }
                > .disabled > a {
                &,
                &:hover,
                &:focus {
                color: @navbar-inverse-link-disabled-color;
                background-color: @navbar-inverse-link-disabled-bg;
                }
                }
                }
                }
                }

                .navbar-link {
                color: @navbar-inverse-link-color;
                &:hover {
                color: @navbar-inverse-link-hover-color;
                }
                }

                }

                ]]>
            </navbar>
            <breadcrumbs>
              <![CDATA[
                //
                // Breadcrumbs
                // --------------------------------------------------


                .breadcrumb {
                padding: 8px 15px;
                margin-bottom: @line-height-computed;
                list-style: none;
                background-color: @breadcrumb-bg;
                border-radius: @border-radius-base;
                > li {
                display: inline-block;
                + li:before {
                content: "@{breadcrumb-separator}\00a0"; // Unicode space added since inline-block means non-collapsing white-space
                padding: 0 5px;
                color: @breadcrumb-color;
                }
                }
                > .active {
                color: @breadcrumb-active-color;
                }
                }

                ]]>
            </breadcrumbs>
            <pagination>
              <![CDATA[
                //
                // Pagination (multiple pages)
                // --------------------------------------------------
                .pagination {
                display: inline-block;
                padding-left: 0;
                margin: @line-height-computed 0;
                border-radius: @border-radius-base;

                > li {
                display: inline; // Remove list-style and block-level defaults
                > a,
                > span {
                position: relative;
                float: left; // Collapse white-space
                padding: @padding-base-vertical @padding-base-horizontal;
                line-height: @line-height-base;
                text-decoration: none;
                background-color: @pagination-bg;
                border: 1px solid @pagination-border;
                margin-left: -1px;
                }
                &:first-child {
                > a,
                > span {
                margin-left: 0;
                .border-left-radius(@border-radius-base);
                }
                }
                &:last-child {
                > a,
                > span {
                .border-right-radius(@border-radius-base);
                }
                }
                }

                > li > a,
                > li > span {
                &:hover,
                &:focus {
                background-color: @pagination-hover-bg;
                }
                }

                > .active > a,
                > .active > span {
                &,
                &:hover,
                &:focus {
                z-index: 2;
                color: @pagination-active-color;
                background-color: @pagination-active-bg;
                border-color: @pagination-active-bg;
                cursor: default;
                }
                }

                > .disabled {
                > span,
                > span:hover,
                > span:focus,
                > a,
                > a:hover,
                > a:focus {
                color: @pagination-disabled-color;
                background-color: @pagination-bg;
                border-color: @pagination-border;
                cursor: not-allowed;
                }
                }
                }

                // Sizing
                // --------------------------------------------------

                // Large
                .pagination-lg {
                .pagination-size(@padding-large-vertical; @padding-large-horizontal; @font-size-large; @border-radius-large);
                }

                // Small
                .pagination-sm {
                .pagination-size(@padding-small-vertical; @padding-small-horizontal; @font-size-small; @border-radius-small);
                }

                ]]>
            </pagination>
            <pager>
              <![CDATA[
                //
                // Pager pagination
                // --------------------------------------------------


                .pager {
                padding-left: 0;
                margin: @line-height-computed 0;
                list-style: none;
                text-align: center;
                .clearfix();
                li {
                display: inline;
                > a,
                > span {
                display: inline-block;
                padding: 5px 14px;
                background-color: @pagination-bg;
                border: 1px solid @pagination-border;
                border-radius: @pager-border-radius;
                }

                > a:hover,
                > a:focus {
                text-decoration: none;
                background-color: @pagination-hover-bg;
                }
                }

                .next {
                > a,
                > span {
                float: right;
                }
                }

                .previous {
                > a,
                > span {
                float: left;
                }
                }

                .disabled {
                > a,
                > a:hover,
                > a:focus,
                > span {
                color: @pager-disabled-color;
                background-color: @pagination-bg;
                cursor: not-allowed;
                }
                }

                }

                ]]>
            </pager>
            <labels>
              <![CDATA[
                //
                // Labels
                // --------------------------------------------------

                .label {
                display: inline;
                padding: .2em .6em .3em;
                font-size: 75%;
                font-weight: bold;
                line-height: 1;
                color: @label-color;
                text-align: center;
                white-space: nowrap;
                vertical-align: baseline;
                border-radius: .25em;

                // Add hover effects, but only for links
                &[href] {
                &:hover,
                &:focus {
                color: @label-link-hover-color;
                text-decoration: none;
                cursor: pointer;
                }
                }

                // Empty labels collapse automatically (not available in IE8)
                &:empty {
                display: none;
                }

                // Quick fix for labels in buttons
                .btn & {
                position: relative;
                top: -1px;
                }
                }

                // Colors
                // Contextual variations (linked labels get darker on :hover)

                .label-default {
                .label-variant(@label-default-bg);
                }

                .label-primary {
                .label-variant(@label-primary-bg);
                }

                .label-success {
                .label-variant(@label-success-bg);
                }

                .label-info {
                .label-variant(@label-info-bg);
                }

                .label-warning {
                .label-variant(@label-warning-bg);
                }

                .label-danger {
                .label-variant(@label-danger-bg);
                }

                ]]>
            </labels>
            <badges>
              <![CDATA[
                //
                // Badges
                // --------------------------------------------------


                // Base classes
                .badge {
                display: inline-block;
                min-width: 10px;
                padding: 3px 7px;
                font-size: @font-size-small;
                font-weight: @badge-font-weight;
                color: @badge-color;
                line-height: @badge-line-height;
                vertical-align: baseline;
                white-space: nowrap;
                text-align: center;
                background-color: @badge-bg;
                border-radius: @badge-border-radius;

                // Empty badges collapse automatically (not available in IE8)
                &:empty {
                display: none;
                }

                // Quick fix for badges in buttons
                .btn & {
                position: relative;
                top: -1px;
                }
                }

                // Hover state, but only for links
                a.badge {
                &:hover,
                &:focus {
                color: @badge-link-hover-color;
                text-decoration: none;
                cursor: pointer;
                }
                }

                // Account for counters in navs
                a.list-group-item.active > .badge,
                .nav-pills > .active > a > .badge {
                color: @badge-active-color;
                background-color: @badge-active-bg;
                }
                .nav-pills > li > a > .badge {
                margin-left: 3px;
                }

                ]]>
            </badges>
            <jumbotron>
              <![CDATA[
                //
                // Jumbotron
                // --------------------------------------------------


                .jumbotron {
                padding: @jumbotron-padding;
                margin-bottom: @jumbotron-padding;
                font-size: @jumbotron-font-size;
                font-weight: 200;
                line-height: (@line-height-base * 1.5);
                color: @jumbotron-color;
                background-color: @jumbotron-bg;

                h1,
                .h1 {
                line-height: 1;
                color: @jumbotron-heading-color;
                }
                p {
                line-height: 1.4;
                }

                .container & {
                border-radius: @border-radius-large; // Only round corners at higher resolutions if contained in a container
                }

                .container {
                max-width: 100%;
                }

                @media screen and (min-width: @screen-sm-min) {
                padding-top:    (@jumbotron-padding * 1.6);
                padding-bottom: (@jumbotron-padding * 1.6);

                .container & {
                padding-left:  (@jumbotron-padding * 2);
                padding-right: (@jumbotron-padding * 2);
                }

                h1,
                .h1 {
                font-size: (@font-size-base * 4.5);
                }
                }
                }

                ]]>
            </jumbotron>
            <thumbnails>
              <![CDATA[
                //
                // Thumbnails
                // --------------------------------------------------


                // Mixin and adjust the regular image class
                .thumbnail {
                display: block;
                padding: @thumbnail-padding;
                margin-bottom: @line-height-computed;
                line-height: @line-height-base;
                background-color: @thumbnail-bg;
                border: 1px solid @thumbnail-border;
                border-radius: @thumbnail-border-radius;
                .transition(all .2s ease-in-out);

                > img,
                a > img {
                .img-responsive();
                margin-left: auto;
                margin-right: auto;
                }

                // Add a hover state for linked versions only
                a&:hover,
                a&:focus,
                a&.active {
                border-color: @link-color;
                }

                // Image captions
                .caption {
                padding: @thumbnail-caption-padding;
                color: @thumbnail-caption-color;
                }
                }

                ]]>
            </thumbnails>
            <alerts>
              <![CDATA[
                //
                // Alerts
                // --------------------------------------------------


                // Base styles
                // -------------------------

                .alert {
                padding: @alert-padding;
                margin-bottom: @line-height-computed;
                border: 1px solid transparent;
                border-radius: @alert-border-radius;

                // Headings for larger alerts
                h4 {
                margin-top: 0;
                // Specified for the h4 to prevent conflicts of changing @headings-color
                color: inherit;
                }
                // Provide class for links that match alerts
                .alert-link {
                font-weight: @alert-link-font-weight;
                }

                // Improve alignment and spacing of inner content
                > p,
                > ul {
                margin-bottom: 0;
                }
                > p + p {
                margin-top: 5px;
                }
                }

                // Dismissable alerts
                //
                // Expand the right padding and account for the close button's positioning.

                .alert-dismissable {
                padding-right: (@alert-padding + 20);

                // Adjust close link position
                .close {
                position: relative;
                top: -2px;
                right: -21px;
                color: inherit;
                }
                }

                // Alternate styles
                //
                // Generate contextual modifier classes for colorizing the alert.

                .alert-success {
                .alert-variant(@alert-success-bg; @alert-success-border; @alert-success-text);
                }
                .alert-info {
                .alert-variant(@alert-info-bg; @alert-info-border; @alert-info-text);
                }
                .alert-warning {
                .alert-variant(@alert-warning-bg; @alert-warning-border; @alert-warning-text);
                }
                .alert-danger {
                .alert-variant(@alert-danger-bg; @alert-danger-border; @alert-danger-text);
                }

                ]]>
            </alerts>
            <progress-bars>
              <![CDATA[
                //
                // Progress bars
                // --------------------------------------------------


                // Bar animations
                // -------------------------

                // WebKit
                @-webkit-keyframes progress-bar-stripes {
                from  { background-position: 40px 0; }
                to    { background-position: 0 0; }
                }

                // Spec and IE10+
                @keyframes progress-bar-stripes {
                from  { background-position: 40px 0; }
                to    { background-position: 0 0; }
                }



                // Bar itself
                // -------------------------

                // Outer container
                .progress {
                overflow: hidden;
                height: @line-height-computed;
                margin-bottom: @line-height-computed;
                background-color: @progress-bg;
                border-radius: @border-radius-base;
                .box-shadow(inset 0 1px 2px rgba(0,0,0,.1));
                }

                // Bar of progress
                .progress-bar {
                float: left;
                width: 0%;
                height: 100%;
                font-size: @font-size-small;
                line-height: @line-height-computed;
                color: @progress-bar-color;
                text-align: center;
                background-color: @progress-bar-bg;
                .box-shadow(inset 0 -1px 0 rgba(0,0,0,.15));
                .transition(width .6s ease);
                }

                // Striped bars
                .progress-striped .progress-bar {
                #gradient > .striped();
                background-size: 40px 40px;
                }

                // Call animation for the active one
                .progress.active .progress-bar {
                .animation(progress-bar-stripes 2s linear infinite);
                }



                // Variations
                // -------------------------

                .progress-bar-success {
                .progress-bar-variant(@progress-bar-success-bg);
                }

                .progress-bar-info {
                .progress-bar-variant(@progress-bar-info-bg);
                }

                .progress-bar-warning {
                .progress-bar-variant(@progress-bar-warning-bg);
                }

                .progress-bar-danger {
                .progress-bar-variant(@progress-bar-danger-bg);
                }

                ]]>
            </progress-bars>
            <media>
              <![CDATA[
                // Media objects
                // Source: http://stubbornella.org/content/?p=497
                // --------------------------------------------------


                // Common styles
                // -------------------------

                // Clear the floats
                .media,
                .media-body {
                overflow: hidden;
                zoom: 1;
                }

                // Proper spacing between instances of .media
                .media,
                .media .media {
                margin-top: 15px;
                }
                .media:first-child {
                margin-top: 0;
                }

                // For images and videos, set to block
                .media-object {
                display: block;
                }

                // Reset margins on headings for tighter default spacing
                .media-heading {
                margin: 0 0 5px;
                }


                // Media image alignment
                // -------------------------

                .media {
                > .pull-left {
                margin-right: 10px;
                }
                > .pull-right {
                margin-left: 10px;
                }
                }


                // Media list variation
                // -------------------------

                // Undo default ul/ol styles
                .media-list {
                padding-left: 0;
                list-style: none;
                }

                ]]>
            </media>
            <list-group>
              <![CDATA[
                //
                // List groups
                // --------------------------------------------------

                // Base class
                //
                // Easily usable on <ul>, <ol>, or <div>.
                      .list-group {
                      // No need to set list-style: none; since .list-group-item is block level
                      margin-bottom: 20px;
                      padding-left: 0; // reset padding because ul and ol
                      }

                      // Individual list items
                      // -------------------------

                      .list-group-item {
                      position: relative;
                      display: block;
                      padding: 10px 15px;
                      // Place the border on the list items and negative margin up for better styling
                      margin-bottom: -1px;
                      background-color: @list-group-bg;
                      border: 1px solid @list-group-border;

                      // Round the first and last items
                      &:first-child {
                      .border-top-radius(@list-group-border-radius);
                      }
                      &:last-child {
                      margin-bottom: 0;
                      .border-bottom-radius(@list-group-border-radius);
                      }

                      // Align badges within list items
                      > .badge {
                      float: right;
                      }
                      > .badge + .badge {
                      margin-right: 5px;
                      }
                      }

                      // Linked list items
                      a.list-group-item {
                      color: @list-group-link-color;

                      .list-group-item-heading {
                      color: @list-group-link-heading-color;
                      }

                      // Hover state
                      &:hover,
                      &:focus {
                      text-decoration: none;
                      background-color: @list-group-hover-bg;
                      }

                      // Active class on item itself, not parent
                      &.active,
                      &.active:hover,
                      &.active:focus {
                      z-index: 2; // Place active items above their siblings for proper border styling
                      color: @list-group-active-color;
                      background-color: @list-group-active-bg;
                      border-color: @list-group-active-border;

                      // Force color to inherit for custom content
                      .list-group-item-heading {
                      color: inherit;
                      }
                      .list-group-item-text {
                      color: lighten(@list-group-active-bg, 40%);
                      }
                      }
                      }

                      // Custom content options
                      // -------------------------

                      .list-group-item-heading {
                      margin-top: 0;
                      margin-bottom: 5px;
                      }
                      .list-group-item-text {
                      margin-bottom: 0;
                      line-height: 1.3;
                      }

                      ]]>
            </list-group>
            <panels>
              <![CDATA[
                      //
                      // Panels
                      // --------------------------------------------------


                      // Base class
                      .panel {
                      margin-bottom: @line-height-computed;
                      background-color: @panel-bg;
                      border: 1px solid transparent;
                      border-radius: @panel-border-radius;
                      .box-shadow(0 1px 1px rgba(0,0,0,.05));
                      }

                      // Panel contents
                      .panel-body {
                      padding: 15px;
                      .clearfix();
                      }


                      // List groups in panels
                      //
                      // By default, space out list group content from panel headings to account for
                      // any kind of custom content between the two.

                      .panel {
                      > .list-group {
                      margin-bottom: 0;

                      .list-group-item {
                      border-width: 1px 0;

                      // Remove border radius for top one
                      &:first-child {
                      .border-top-radius(0);
                      }
                      // But keep it for the last one
                      &:last-child {
                      border-bottom: 0;
                      }
                      }
                      }
                      }
                      // Collapse space between when there's no additional content.
                      .panel-heading + .list-group {
                      .list-group-item:first-child {
                      border-top-width: 0;
                      }
                      }


                      // Tables in panels
                      //
                      // Place a non-bordered `.table` within a panel (not within a `.panel-body`) and
                      // watch it go full width.

                      .panel {
                      > .table,
                      > .table-responsive > .table {
                      margin-bottom: 0;
                      }
                      > .panel-body + .table,
                      > .panel-body + .table-responsive {
                      border-top: 1px solid @table-border-color;
                      }
                      > .table > tbody:first-child th,
                      > .table > tbody:first-child td {
                      border-top: 0;
                      }
                      > .table-bordered,
                      > .table-responsive > .table-bordered {
                      border: 0;
                      > thead,
                      > tbody,
                      > tfoot {
                      > tr {
                      > th:first-child,
                      > td:first-child {
                      border-left: 0;
                      }
                      > th:last-child,
                      > td:last-child {
                      border-right: 0;
                      }

                      &:last-child > th,
                      &:last-child > td {
                      border-bottom: 0;
                      }
                      }
                      }
                      }
                      > .table-responsive {
                      border: 0;
                      margin-bottom: 0;
                      }
                      }


                      // Optional heading
                      .panel-heading {
                      padding: 10px 15px;
                      border-bottom: 1px solid transparent;
                      .border-top-radius(@panel-border-radius - 1);

                      > .dropdown .dropdown-toggle {
                      color: inherit;
                      }
                      }

                      // Within heading, strip any `h*` tag of it's default margins for spacing.
                      .panel-title {
                      margin-top: 0;
                      margin-bottom: 0;
                      font-size: ceil((@font-size-base * 1.125));
                      color: inherit;

                      > a {
                      color: inherit;
                      }
                      }

                      // Optional footer (stays gray in every modifier class)
                      .panel-footer {
                      padding: 10px 15px;
                      background-color: @panel-footer-bg;
                      border-top: 1px solid @panel-inner-border;
                      .border-bottom-radius(@panel-border-radius - 1);
                      }


                      // Collapsable panels (aka, accordion)
                      //
                      // Wrap a series of panels in `.panel-group` to turn them into an accordion with
                      // the help of our collapse JavaScript plugin.

                      .panel-group {
                      // Tighten up margin so it's only between panels
                      .panel {
                      margin-bottom: 0;
                      border-radius: @panel-border-radius;
                      overflow: hidden; // crop contents when collapsed
                      + .panel {
                      margin-top: 5px;
                      }
                      }

                      .panel-heading {
                      border-bottom: 0;
                      + .panel-collapse .panel-body {
                      border-top: 1px solid @panel-inner-border;
                      }
                      }
                      .panel-footer {
                      border-top: 0;
                      + .panel-collapse .panel-body {
                      border-bottom: 1px solid @panel-inner-border;
                      }
                      }
                      }


                      // Contextual variations
                      .panel-default {
                      .panel-variant(@panel-default-border; @panel-default-text; @panel-default-heading-bg; @panel-default-border);
                      }
                      .panel-primary {
                      .panel-variant(@panel-primary-border; @panel-primary-text; @panel-primary-heading-bg; @panel-primary-border);
                      }
                      .panel-success {
                      .panel-variant(@panel-success-border; @panel-success-text; @panel-success-heading-bg; @panel-success-border);
                      }
                      .panel-warning {
                      .panel-variant(@panel-warning-border; @panel-warning-text; @panel-warning-heading-bg; @panel-warning-border);
                      }
                      .panel-danger {
                      .panel-variant(@panel-danger-border; @panel-danger-text; @panel-danger-heading-bg; @panel-danger-border);
                      }
                      .panel-info {
                      .panel-variant(@panel-info-border; @panel-info-text; @panel-info-heading-bg; @panel-info-border);
                      }

                      ]]>
            </panels>
            <wells>
              <![CDATA[
                      //
                      // Wells
                      // --------------------------------------------------


                      // Base class
                      .well {
                      min-height: 20px;
                      padding: 19px;
                      margin-bottom: 20px;
                      background-color: @well-bg;
                      border: 1px solid darken(@well-bg, 7%);
                      border-radius: @border-radius-base;
                      .box-shadow(inset 0 1px 1px rgba(0,0,0,.05));
                      blockquote {
                      border-color: #ddd;
                      border-color: rgba(0,0,0,.15);
                      }
                      }

                      // Sizes
                      .well-lg {
                      padding: 24px;
                      border-radius: @border-radius-large;
                      }
                      .well-sm {
                      padding: 9px;
                      border-radius: @border-radius-small;
                      }

                      ]]>
            </wells>
            <close>
              <![CDATA[
                      //
                      // Close icons
                      // --------------------------------------------------


                      .close {
                      float: right;
                      font-size: (@font-size-base * 1.5);
                      font-weight: @close-font-weight;
                      line-height: 1;
                      color: @close-color;
                      text-shadow: @close-text-shadow;
                      .opacity(.2);

                      &:hover,
                      &:focus {
                      color: @close-color;
                      text-decoration: none;
                      cursor: pointer;
                      .opacity(.5);
                      }

                      // Additional properties for button version
                      // iOS requires the button element instead of an anchor tag.
                      // If you want the anchor version, it requires `href="#"`.
                      button& {
                      padding: 0;
                      cursor: pointer;
                      background: transparent;
                      border: 0;
                      -webkit-appearance: none;
                      }
                      }

                      ]]>
            </close>
            <modals>
              <![CDATA[
                      //
                      // Modals
                      // --------------------------------------------------

                      // .modal-open      - body class for killing the scroll
                      // .modal           - container to scroll within
                      // .modal-dialog    - positioning shell for the actual modal
                      // .modal-content   - actual modal w/ bg and corners and shit

                      // Kill the scroll on the body
                      .modal-open {
                      overflow: hidden;
                      }

                      // Container that the modal scrolls within
                      .modal {
                      display: none;
                      overflow: auto;
                      overflow-y: scroll;
                      position: fixed;
                      top: 0;
                      right: 0;
                      bottom: 0;
                      left: 0;
                      z-index: @zindex-modal-background;

                      // When fading in the modal, animate it to slide down
                      &.fade .modal-dialog {
                      .translate(0, -25%);
                      .transition-transform(~"0.3s ease-out");
                      }
                      &.in .modal-dialog { .translate(0, 0)}
                      }

                      // Shell div to position the modal with bottom padding
                      .modal-dialog {
                      position: relative;
                      width: auto;
                      margin: 10px;
                      z-index: (@zindex-modal-background + 10);
                      }

                      // Actual modal
                      .modal-content {
                      position: relative;
                      background-color: @modal-content-bg;
                      border: 1px solid @modal-content-fallback-border-color; //old browsers fallback (ie8 etc)
                      border: 1px solid @modal-content-border-color;
                      border-radius: @border-radius-large;
                      .box-shadow(0 3px 9px rgba(0,0,0,.5));
                      background-clip: padding-box;
                      // Remove focus outline from opened modal
                      outline: none;
                      }

                      // Modal background
                      .modal-backdrop {
                      position: fixed;
                      top: 0;
                      right: 0;
                      bottom: 0;
                      left: 0;
                      z-index: (@zindex-modal-background - 10);
                      background-color: @modal-backdrop-bg;
                      // Fade for backdrop
                      &.fade { .opacity(0); }
                      &.in { .opacity(.5); }
                      }

                      // Modal header
                      // Top section of the modal w/ title and dismiss
                      .modal-header {
                      padding: @modal-title-padding;
                      border-bottom: 1px solid @modal-header-border-color;
                      min-height: (@modal-title-padding + @modal-title-line-height);
                      }
                      // Close icon
                      .modal-header .close {
                      margin-top: -2px;
                      }

                      // Title text within header
                      .modal-title {
                      margin: 0;
                      line-height: @modal-title-line-height;
                      }

                      // Modal body
                      // Where all modal content resides (sibling of .modal-header and .modal-footer)
                      .modal-body {
                      position: relative;
                      padding: @modal-inner-padding;
                      }

                      // Footer (for actions)
                      .modal-footer {
                      margin-top: 15px;
                      padding: (@modal-inner-padding - 1) @modal-inner-padding @modal-inner-padding;
                      text-align: right; // right align buttons
                      border-top: 1px solid @modal-footer-border-color;
                      .clearfix(); // clear it in case folks use .pull-* classes on buttons

                      // Properly space out buttons
                      .btn + .btn {
                      margin-left: 5px;
                      margin-bottom: 0; // account for input[type="submit"] which gets the bottom margin like all other inputs
                      }
                      // but override that for button groups
                      .btn-group .btn + .btn {
                      margin-left: -1px;
                      }
                      // and override it for block buttons as well
                      .btn-block + .btn-block {
                      margin-left: 0;
                      }
                      }

                      // Scale up the modal
                      @media screen and (min-width: @screen-sm-min) {

                      .modal-dialog {
                      width: 600px;
                      margin: 30px auto;
                      }
                      .modal-content {
                      .box-shadow(0 5px 15px rgba(0,0,0,.5));
                      }

                      }

                      ]]>
            </modals>
            <tooltip>
              <![CDATA[
                      //
                      // Tooltips
                      // --------------------------------------------------


                      // Base class
                      .tooltip {
                      position: absolute;
                      z-index: @zindex-tooltip;
                      display: block;
                      visibility: visible;
                      font-size: @font-size-small;
                      line-height: 1.4;
                      .opacity(0);

                      &.in     { .opacity(.9); }
                      &.top    { margin-top:  -3px; padding: @tooltip-arrow-width 0; }
                      &.right  { margin-left:  3px; padding: 0 @tooltip-arrow-width; }
                      &.bottom { margin-top:   3px; padding: @tooltip-arrow-width 0; }
                      &.left   { margin-left: -3px; padding: 0 @tooltip-arrow-width; }
                      }

                      // Wrapper for the tooltip content
                      .tooltip-inner {
                      max-width: @tooltip-max-width;
                      padding: 3px 8px;
                      color: @tooltip-color;
                      text-align: center;
                      text-decoration: none;
                      background-color: @tooltip-bg;
                      border-radius: @border-radius-base;
                      }

                      // Arrows
                      .tooltip-arrow {
                      position: absolute;
                      width: 0;
                      height: 0;
                      border-color: transparent;
                      border-style: solid;
                      }
                      .tooltip {
                      &.top .tooltip-arrow {
                      bottom: 0;
                      left: 50%;
                      margin-left: -@tooltip-arrow-width;
                      border-width: @tooltip-arrow-width @tooltip-arrow-width 0;
                      border-top-color: @tooltip-arrow-color;
                      }
                      &.top-left .tooltip-arrow {
                      bottom: 0;
                      left: @tooltip-arrow-width;
                      border-width: @tooltip-arrow-width @tooltip-arrow-width 0;
                      border-top-color: @tooltip-arrow-color;
                      }
                      &.top-right .tooltip-arrow {
                      bottom: 0;
                      right: @tooltip-arrow-width;
                      border-width: @tooltip-arrow-width @tooltip-arrow-width 0;
                      border-top-color: @tooltip-arrow-color;
                      }
                      &.right .tooltip-arrow {
                      top: 50%;
                      left: 0;
                      margin-top: -@tooltip-arrow-width;
                      border-width: @tooltip-arrow-width @tooltip-arrow-width @tooltip-arrow-width 0;
                      border-right-color: @tooltip-arrow-color;
                      }
                      &.left .tooltip-arrow {
                      top: 50%;
                      right: 0;
                      margin-top: -@tooltip-arrow-width;
                      border-width: @tooltip-arrow-width 0 @tooltip-arrow-width @tooltip-arrow-width;
                      border-left-color: @tooltip-arrow-color;
                      }
                      &.bottom .tooltip-arrow {
                      top: 0;
                      left: 50%;
                      margin-left: -@tooltip-arrow-width;
                      border-width: 0 @tooltip-arrow-width @tooltip-arrow-width;
                      border-bottom-color: @tooltip-arrow-color;
                      }
                      &.bottom-left .tooltip-arrow {
                      top: 0;
                      left: @tooltip-arrow-width;
                      border-width: 0 @tooltip-arrow-width @tooltip-arrow-width;
                      border-bottom-color: @tooltip-arrow-color;
                      }
                      &.bottom-right .tooltip-arrow {
                      top: 0;
                      right: @tooltip-arrow-width;
                      border-width: 0 @tooltip-arrow-width @tooltip-arrow-width;
                      border-bottom-color: @tooltip-arrow-color;
                      }
                      }

                      ]]>
            </tooltip>
            <popovers>
              <![CDATA[
                      //
                      // Popovers
                      // --------------------------------------------------


                      .popover {
                      position: absolute;
                      top: 0;
                      left: 0;
                      z-index: @zindex-popover;
                      display: none;
                      max-width: @popover-max-width;
                      padding: 1px;
                      text-align: left; // Reset given new insertion method
                      background-color: @popover-bg;
                      background-clip: padding-box;
                      border: 1px solid @popover-fallback-border-color;
                      border: 1px solid @popover-border-color;
                      border-radius: @border-radius-large;
                      .box-shadow(0 5px 10px rgba(0,0,0,.2));

                      // Overrides for proper insertion
                      white-space: normal;

                      // Offset the popover to account for the popover arrow
                      &.top     { margin-top: -10px; }
                      &.right   { margin-left: 10px; }
                      &.bottom  { margin-top: 10px; }
                      &.left    { margin-left: -10px; }
                      }

                      .popover-title {
                      margin: 0; // reset heading margin
                      padding: 8px 14px;
                      font-size: @font-size-base;
                      font-weight: normal;
                      line-height: 18px;
                      background-color: @popover-title-bg;
                      border-bottom: 1px solid darken(@popover-title-bg, 5%);
                      border-radius: 5px 5px 0 0;
                      }

                      .popover-content {
                      padding: 9px 14px;
                      }

                      // Arrows
                      //
                      // .arrow is outer, .arrow:after is inner

                      .popover .arrow {
                      &,
                      &:after {
                      position: absolute;
                      display: block;
                      width: 0;
                      height: 0;
                      border-color: transparent;
                      border-style: solid;
                      }
                      }
                      .popover .arrow {
                      border-width: @popover-arrow-outer-width;
                      }
                      .popover .arrow:after {
                      border-width: @popover-arrow-width;
                      content: "";
                      }

                      .popover {
                      &.top .arrow {
                      left: 50%;
                      margin-left: -@popover-arrow-outer-width;
                      border-bottom-width: 0;
                      border-top-color: @popover-arrow-outer-fallback-color; // IE8 fallback
                      border-top-color: @popover-arrow-outer-color;
                      bottom: -@popover-arrow-outer-width;
                      &:after {
                      content: " ";
                      bottom: 1px;
                      margin-left: -@popover-arrow-width;
                      border-bottom-width: 0;
                      border-top-color: @popover-arrow-color;
                      }
                      }
                      &.right .arrow {
                      top: 50%;
                      left: -@popover-arrow-outer-width;
                      margin-top: -@popover-arrow-outer-width;
                      border-left-width: 0;
                      border-right-color: @popover-arrow-outer-fallback-color; // IE8 fallback
                      border-right-color: @popover-arrow-outer-color;
                      &:after {
                      content: " ";
                      left: 1px;
                      bottom: -@popover-arrow-width;
                      border-left-width: 0;
                      border-right-color: @popover-arrow-color;
                      }
                      }
                      &.bottom .arrow {
                      left: 50%;
                      margin-left: -@popover-arrow-outer-width;
                      border-top-width: 0;
                      border-bottom-color: @popover-arrow-outer-fallback-color; // IE8 fallback
                      border-bottom-color: @popover-arrow-outer-color;
                      top: -@popover-arrow-outer-width;
                      &:after {
                      content: " ";
                      top: 1px;
                      margin-left: -@popover-arrow-width;
                      border-top-width: 0;
                      border-bottom-color: @popover-arrow-color;
                      }
                      }

                      &.left .arrow {
                      top: 50%;
                      right: -@popover-arrow-outer-width;
                      margin-top: -@popover-arrow-outer-width;
                      border-right-width: 0;
                      border-left-color: @popover-arrow-outer-fallback-color; // IE8 fallback
                      border-left-color: @popover-arrow-outer-color;
                      &:after {
                      content: " ";
                      right: 1px;
                      border-right-width: 0;
                      border-left-color: @popover-arrow-color;
                      bottom: -@popover-arrow-width;
                      }
                      }

                      }

                      ]]>
            </popovers>
            <carousel>
              <![CDATA[
                      //
                      // Carousel
                      // --------------------------------------------------


                      // Wrapper for the slide container and indicators
                      .carousel {
                      position: relative;
                      }

                      .carousel-inner {
                      position: relative;
                      overflow: hidden;
                      width: 100%;

                      > .item {
                      display: none;
                      position: relative;
                      .transition(.6s ease-in-out left);

                      // Account for jankitude on images
                      > img,
                      > a > img {
                      .img-responsive();
                      line-height: 1;
                      }
                      }

                      > .active,
                      > .next,
                      > .prev { display: block; }

                      > .active {
                      left: 0;
                      }

                      > .next,
                      > .prev {
                      position: absolute;
                      top: 0;
                      width: 100%;
                      }

                      > .next {
                      left: 100%;
                      }
                      > .prev {
                      left: -100%;
                      }
                      > .next.left,
                      > .prev.right {
                      left: 0;
                      }

                      > .active.left {
                      left: -100%;
                      }
                      > .active.right {
                      left: 100%;
                      }

                      }

                      // Left/right controls for nav
                      // ---------------------------

                      .carousel-control {
                      position: absolute;
                      top: 0;
                      left: 0;
                      bottom: 0;
                      width: @carousel-control-width;
                      .opacity(@carousel-control-opacity);
                      font-size: @carousel-control-font-size;
                      color: @carousel-control-color;
                      text-align: center;
                      text-shadow: @carousel-text-shadow;
                      // We can't have this transition here because WebKit cancels the carousel
                      // animation if you trip this while in the middle of another animation.

                      // Set gradients for backgrounds
                      &.left {
                      #gradient > .horizontal(@start-color: rgba(0,0,0,.5); @end-color: rgba(0,0,0,.0001));
                      }
                      &.right {
                      left: auto;
                      right: 0;
                      #gradient > .horizontal(@start-color: rgba(0,0,0,.0001); @end-color: rgba(0,0,0,.5));
                      }

                      // Hover/focus state
                      &:hover,
                      &:focus {
                      outline: none;
                      color: @carousel-control-color;
                      text-decoration: none;
                      .opacity(.9);
                      }

                      // Toggles
                      .icon-prev,
                      .icon-next,
                      .glyphicon-chevron-left,
                      .glyphicon-chevron-right {
                      position: absolute;
                      top: 50%;
                      z-index: 5;
                      display: inline-block;
                      }
                      .icon-prev,
                      .glyphicon-chevron-left {
                      left: 50%;
                      }
                      .icon-next,
                      .glyphicon-chevron-right {
                      right: 50%;
                      }
                      .icon-prev,
                      .icon-next {
                      width:  20px;
                      height: 20px;
                      margin-top: -10px;
                      margin-left: -10px;
                      font-family: serif;
                      }

                      .icon-prev {
                      &:before {
                      content: '\2039';// SINGLE LEFT-POINTING ANGLE QUOTATION MARK (U+2039)
                      }
                      }
                      .icon-next {
                      &:before {
                      content: '\203a';// SINGLE RIGHT-POINTING ANGLE QUOTATION MARK (U+203A)
                      }
                      }
                      }

                      // Optional indicator pips
                      //
                      // Add an unordered list with the following class and add a list item for each
                      // slide your carousel holds.

                      .carousel-indicators {
                      position: absolute;
                      bottom: 10px;
                      left: 50%;
                      z-index: 15;
                      width: 60%;
                      margin-left: -30%;
                      padding-left: 0;
                      list-style: none;
                      text-align: center;

                      li {
                      display: inline-block;
                      width:  10px;
                      height: 10px;
                      margin: 1px;
                      text-indent: -999px;
                      border: 1px solid @carousel-indicator-border-color;
                      border-radius: 10px;
                      cursor: pointer;

                      // IE8-9 hack for event handling
                      //
                      // Internet Explorer 8-9 does not support clicks on elements without a set
                      // `background-color`. We cannot use `filter` since that's not viewed as a
                      // background color by the browser. Thus, a hack is needed.
                      //
                      // For IE8, we set solid black as it doesn't support `rgba()`. For IE9, we
                      // set alpha transparency for the best results possible.
                      background-color: #000 \9; // IE8
                      background-color: rgba(0,0,0,0); // IE9
                      }
                      .active {
                      margin: 0;
                      width:  12px;
                      height: 12px;
                      background-color: @carousel-indicator-active-bg;
                      }
                      }

                      // Optional captions
                      // -----------------------------
                      // Hidden by default for smaller viewports
                      .carousel-caption {
                      position: absolute;
                      left: 15%;
                      right: 15%;
                      bottom: 20px;
                      z-index: 10;
                      padding-top: 20px;
                      padding-bottom: 20px;
                      color: @carousel-caption-color;
                      text-align: center;
                      text-shadow: @carousel-text-shadow;
                      & .btn {
                      text-shadow: none; // No shadow for button elements in carousel-caption
                      }
                      }


                      // Scale up controls for tablets and up
                      @media screen and (min-width: @screen-sm-min) {

                      // Scale up the controls a smidge
                      .carousel-control {
                      .glyphicons-chevron-left,
                      .glyphicons-chevron-right,
                      .icon-prev,
                      .icon-next {
                      width: 30px;
                      height: 30px;
                      margin-top: -15px;
                      margin-left: -15px;
                      font-size: 30px;
                      }
                      }

                      // Show and left align the captions
                      .carousel-caption {
                      left: 20%;
                      right: 20%;
                      padding-bottom: 30px;
                      }

                      // Move up the indicators
                      .carousel-indicators {
                      bottom: 20px;
                      }
                      }

                      ]]>
            </carousel>
            <utilities>
              <![CDATA[
                      //
                      // Utility classes
                      // --------------------------------------------------


                      // Floats
                      // -------------------------

                      .clearfix {
                      .clearfix();
                      }
                      .center-block {
                      .center-block();
                      }
                      .pull-right {
                      float: right !important;
                      }
                      .pull-left {
                      float: left !important;
                      }


                      // Toggling content
                      // -------------------------

                      // Note: Deprecated .hide in favor of .hidden or .sr-only (as appropriate) in v3.0.1
                      .hide {
                      display: none !important;
                      }
                      .show {
                      display: block !important;
                      }
                      .invisible {
                      visibility: hidden;
                      }
                      .text-hide {
                      .text-hide();
                      }


                      // Hide from screenreaders and browsers
                      //
                      // Credit: HTML5 Boilerplate

                      .hidden {
                      display: none !important;
                      visibility: hidden !important;
                      }


                      // For Affix plugin
                      // -------------------------

                      .affix {
                      position: fixed;
                      }

                      ]]>
            </utilities>
            <responsive-utilities>
              <![CDATA[
                      //
                      // Responsive: Utility classes
                      // --------------------------------------------------


                      // IE10 in Windows (Phone) 8
                      //
                      // Support for responsive views via media queries is kind of borked in IE10, for
                      // Surface/desktop in split view and for Windows Phone 8. This particular fix
                      // must be accompanied by a snippet of JavaScript to sniff the user agent and
                      // apply some conditional CSS to *only* the Surface/desktop Windows 8. Look at
                      // our Getting Started page for more information on this bug.
                      //
                      // For more information, see the following:
                      //
                      // Issue: https://github.com/twbs/bootstrap/issues/10497
                      // Docs: http://getbootstrap.com/getting-started/#browsers
                      // Source: http://timkadlec.com/2012/10/ie10-snap-mode-and-responsive-design/

                      @-ms-viewport {
                      width: device-width;
                      }


                      // Visibility utilities

                      .visible-xs {
                      .responsive-invisibility();
                      @media (max-width: @screen-xs-max) {
                      .responsive-visibility();
                      }
                      &.visible-sm {
                      @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
                      .responsive-visibility();
                      }
                      }
                      &.visible-md {
                      @media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
                      .responsive-visibility();
                      }
                      }
                      &.visible-lg {
                      @media (min-width: @screen-lg-min) {
                      .responsive-visibility();
                      }
                      }
                      }
                      .visible-sm {
                      .responsive-invisibility();
                      &.visible-xs {
                      @media (max-width: @screen-xs-max) {
                      .responsive-visibility();
                      }
                      }
                      @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
                      .responsive-visibility();
                      }
                      &.visible-md {
                      @media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
                      .responsive-visibility();
                      }
                      }
                      &.visible-lg {
                      @media (min-width: @screen-lg-min) {
                      .responsive-visibility();
                      }
                      }
                      }
                      .visible-md {
                      .responsive-invisibility();
                      &.visible-xs {
                      @media (max-width: @screen-xs-max) {
                      .responsive-visibility();
                      }
                      }
                      &.visible-sm {
                      @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
                      .responsive-visibility();
                      }
                      }
                      @media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
                      .responsive-visibility();
                      }
                      &.visible-lg {
                      @media (min-width: @screen-lg-min) {
                      .responsive-visibility();
                      }
                      }
                      }
                      .visible-lg {
                      .responsive-invisibility();
                      &.visible-xs {
                      @media (max-width: @screen-xs-max) {
                      .responsive-visibility();
                      }
                      }
                      &.visible-sm {
                      @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
                      .responsive-visibility();
                      }
                      }
                      &.visible-md {
                      @media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
                      .responsive-visibility();
                      }
                      }
                      @media (min-width: @screen-lg-min) {
                      .responsive-visibility();
                      }
                      }

                      .hidden-xs {
                      .responsive-visibility();
                      @media (max-width: @screen-xs-max) {
                      .responsive-invisibility();
                      }
                      &.hidden-sm {
                      @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
                      .responsive-invisibility();
                      }
                      }
                      &.hidden-md {
                      @media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
                      .responsive-invisibility();
                      }
                      }
                      &.hidden-lg {
                      @media (min-width: @screen-lg-min) {
                      .responsive-invisibility();
                      }
                      }
                      }
                      .hidden-sm {
                      .responsive-visibility();
                      &.hidden-xs {
                      @media (max-width: @screen-xs-max) {
                      .responsive-invisibility();
                      }
                      }
                      @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
                      .responsive-invisibility();
                      }
                      &.hidden-md {
                      @media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
                      .responsive-invisibility();
                      }
                      }
                      &.hidden-lg {
                      @media (min-width: @screen-lg-min) {
                      .responsive-invisibility();
                      }
                      }
                      }
                      .hidden-md {
                      .responsive-visibility();
                      &.hidden-xs {
                      @media (max-width: @screen-xs-max) {
                      .responsive-invisibility();
                      }
                      }
                      &.hidden-sm {
                      @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
                      .responsive-invisibility();
                      }
                      }
                      @media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
                      .responsive-invisibility();
                      }
                      &.hidden-lg {
                      @media (min-width: @screen-lg-min) {
                      .responsive-invisibility();
                      }
                      }
                      }
                      .hidden-lg {
                      .responsive-visibility();
                      &.hidden-xs {
                      @media (max-width: @screen-xs-max) {
                      .responsive-invisibility();
                      }
                      }
                      &.hidden-sm {
                      @media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) {
                      .responsive-invisibility();
                      }
                      }
                      &.hidden-md {
                      @media (min-width: @screen-md-min) and (max-width: @screen-md-max) {
                      .responsive-invisibility();
                      }
                      }
                      @media (min-width: @screen-lg-min) {
                      .responsive-invisibility();
                      }
                      }

                      // Print utilities
                      .visible-print {
                      .responsive-invisibility();
                      }

                      @media print {
                      .visible-print {
                      .responsive-visibility();
                      }
                      .hidden-print {
                      .responsive-invisibility();
                      }
                      }

                      ]]>
            </responsive-utilities>
          </less><css>/*! normalize.css v2.1.3 | MIT License | git.io/normalize */article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}audio,canvas,video{display:inline-block}audio:not([controls]){display:none;height:0}[hidden],template{display:none}html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}a{background:transparent}a:focus{outline:thin dotted}a:active,a:hover{outline:0}h1{font-size:2em;margin:0.67em 0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:bold}dfn{font-style:italic}hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}mark{background:#ff0;color:#000}code,kbd,pre,samp{font-family:monospace, serif;font-size:1em}pre{white-space:pre-wrap}q{quotes:"\201C" "\201D" "\2018" "\2019"}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:0}fieldset{border:1px solid #c0c0c0;margin:0 2px;padding:0.35em 0.625em 0.75em}legend{border:0;padding:0}button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}button,input{line-height:normal}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}input[type="search"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}textarea{overflow:auto;vertical-align:top}table{border-collapse:collapse;border-spacing:0}@media print{*{text-shadow:none !important;color:#000 !important;background:transparent !important;box-shadow:none !important}a,a:visited{text-decoration:underline}a[href]:after{content:" (" attr(href) ")"}abbr[title]:after{content:" (" attr(title) ")"}a[href^="javascript:"]:after,a[href^="#"]:after{content:""}pre,blockquote{border:1px solid #999;page-break-inside:avoid}thead{display:table-header-group}tr,img{page-break-inside:avoid}img{max-width:100% !important}@page{margin:2cm .5cm}p,h2,h3{orphans:3;widows:3}h2,h3{page-break-after:avoid}select{background:#fff !important}.navbar{display:none}.table td,.table th{background-color:#fff !important}.btn>.caret,.dropup>.btn>.caret{border-top-color:#000 !important}.label{border:1px solid #000}.table{border-collapse:collapse !important}.table-bordered th,.table-bordered td{border:1px solid #ddd !important}}*,*:before,*:after{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}html{font-size:62.5%;-webkit-tap-highlight-color:rgba(0,0,0,0)}body{font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-size:14px;line-height:1.42857143;color:#333;background-color:#fff}input,button,select,textarea{font-family:inherit;font-size:inherit;line-height:inherit}a{color:#428bca;text-decoration:none}a:hover,a:focus{color:#2a6496;text-decoration:underline}a:focus{outline:thin dotted;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}img{vertical-align:middle}.img-responsive{display:block;max-width:100%;height:auto}.img-rounded{border-radius:6px}.img-thumbnail{padding:4px;line-height:1.42857143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out;display:inline-block;max-width:100%;height:auto}.img-circle{border-radius:50%}hr{margin-top:20px;margin-bottom:20px;border:0;border-top:1px solid #eee}.sr-only{position:absolute;width:1px;height:1px;margin:-1px;padding:0;overflow:hidden;clip:rect(0, 0, 0, 0);border:0}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6{font-family:"Helvetica Neue",Helvetica,Arial,sans-serif;font-weight:500;line-height:1.1;color:inherit}h1 small,h2 small,h3 small,h4 small,h5 small,h6 small,.h1 small,.h2 small,.h3 small,.h4 small,.h5 small,.h6 small,h1 .small,h2 .small,h3 .small,h4 .small,h5 .small,h6 .small,.h1 .small,.h2 .small,.h3 .small,.h4 .small,.h5 .small,.h6 .small{font-weight:normal;line-height:1;color:#999}h1,h2,h3{margin-top:20px;margin-bottom:10px}h1 small,h2 small,h3 small,h1 .small,h2 .small,h3 .small{font-size:65%}h4,h5,h6{margin-top:10px;margin-bottom:10px}h4 small,h5 small,h6 small,h4 .small,h5 .small,h6 .small{font-size:75%}h1,.h1{font-size:36px}h2,.h2{font-size:30px}h3,.h3{font-size:24px}h4,.h4{font-size:18px}h5,.h5{font-size:14px}h6,.h6{font-size:12px}p{margin:0 0 10px}.lead{margin-bottom:20px;font-size:16px;font-weight:200;line-height:1.4}@media (min-width:768px){.lead{font-size:21px}}small,.small{font-size:85%}cite{font-style:normal}.text-muted{color:#999}.text-primary{color:#428bca}.text-primary:hover{color:#3071a9}.text-warning{color:#8a6d3b}.text-warning:hover{color:#66512c}.text-danger{color:#a94442}.text-danger:hover{color:#843534}.text-success{color:#3c763d}.text-success:hover{color:#2b542c}.text-info{color:#31708f}.text-info:hover{color:#245269}.text-left{text-align:left}.text-right{text-align:right}.text-center{text-align:center}.page-header{padding-bottom:9px;margin:40px 0 20px;border-bottom:1px solid #eee}ul,ol{margin-top:0;margin-bottom:10px}ul ul,ol ul,ul ol,ol ol{margin-bottom:0}.list-unstyled{padding-left:0;list-style:none}.list-inline{padding-left:0;list-style:none}.list-inline>li{display:inline-block;padding-left:5px;padding-right:5px}.list-inline>li:first-child{padding-left:0}dl{margin-top:0;margin-bottom:20px}dt,dd{line-height:1.42857143}dt{font-weight:bold}dd{margin-left:0}@media (min-width:768px){.dl-horizontal dt{float:left;width:160px;clear:left;text-align:right;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.dl-horizontal dd{margin-left:180px}.dl-horizontal dd:before,.dl-horizontal dd:after{content:" ";display:table}.dl-horizontal dd:after{clear:both}.dl-horizontal dd:before,.dl-horizontal dd:after{content:" ";display:table}.dl-horizontal dd:after{clear:both}}abbr[title],abbr[data-original-title]{cursor:help;border-bottom:1px dotted #999}.initialism{font-size:90%;text-transform:uppercase}blockquote{padding:10px 20px;margin:0 0 20px;border-left:5px solid #eee}blockquote p{font-size:17.5px;font-weight:300;line-height:1.25}blockquote p:last-child{margin-bottom:0}blockquote small,blockquote .small{display:block;line-height:1.42857143;color:#999}blockquote small:before,blockquote .small:before{content:'\2014 \00A0'}blockquote.pull-right{padding-right:15px;padding-left:0;border-right:5px solid #eee;border-left:0}blockquote.pull-right p,blockquote.pull-right small,blockquote.pull-right .small{text-align:right}blockquote.pull-right small:before,blockquote.pull-right .small:before{content:''}blockquote.pull-right small:after,blockquote.pull-right .small:after{content:'\00A0 \2014'}blockquote:before,blockquote:after{content:""}address{margin-bottom:20px;font-style:normal;line-height:1.42857143}code,kbd,pre,samp{font-family:Menlo,Monaco,Consolas,"Courier New",monospace}code{padding:2px 4px;font-size:90%;color:#c7254e;background-color:#f9f2f4;white-space:nowrap;border-radius:4px}pre{display:block;padding:9.5px;margin:0 0 10px;font-size:13px;line-height:1.42857143;word-break:break-all;word-wrap:break-word;color:#333;background-color:#f5f5f5;border:1px solid #ccc;border-radius:4px}pre code{padding:0;font-size:inherit;color:inherit;white-space:pre-wrap;background-color:transparent;border-radius:0}.pre-scrollable{max-height:340px;overflow-y:scroll}.container{margin-right:auto;margin-left:auto;padding-left:15px;padding-right:15px}.container:before,.container:after{content:" ";display:table}.container:after{clear:both}.container:before,.container:after{content:" ";display:table}.container:after{clear:both}@media (min-width:768px){.container{width:750px}}@media (min-width:992px){.container{width:970px}}@media (min-width:1200px){.container{width:1170px}}.row{margin-left:-15px;margin-right:-15px}.row:before,.row:after{content:" ";display:table}.row:after{clear:both}.row:before,.row:after{content:" ";display:table}.row:after{clear:both}.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12{position:relative;min-height:1px;padding-left:15px;padding-right:15px}.col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12{float:left}.col-xs-12{width:100%}.col-xs-11{width:91.66666667%}.col-xs-10{width:83.33333333%}.col-xs-9{width:75%}.col-xs-8{width:66.66666667%}.col-xs-7{width:58.33333333%}.col-xs-6{width:50%}.col-xs-5{width:41.66666667%}.col-xs-4{width:33.33333333%}.col-xs-3{width:25%}.col-xs-2{width:16.66666667%}.col-xs-1{width:8.33333333%}.col-xs-pull-12{right:100%}.col-xs-pull-11{right:91.66666667%}.col-xs-pull-10{right:83.33333333%}.col-xs-pull-9{right:75%}.col-xs-pull-8{right:66.66666667%}.col-xs-pull-7{right:58.33333333%}.col-xs-pull-6{right:50%}.col-xs-pull-5{right:41.66666667%}.col-xs-pull-4{right:33.33333333%}.col-xs-pull-3{right:25%}.col-xs-pull-2{right:16.66666667%}.col-xs-pull-1{right:8.33333333%}.col-xs-pull-0{right:0}.col-xs-push-12{left:100%}.col-xs-push-11{left:91.66666667%}.col-xs-push-10{left:83.33333333%}.col-xs-push-9{left:75%}.col-xs-push-8{left:66.66666667%}.col-xs-push-7{left:58.33333333%}.col-xs-push-6{left:50%}.col-xs-push-5{left:41.66666667%}.col-xs-push-4{left:33.33333333%}.col-xs-push-3{left:25%}.col-xs-push-2{left:16.66666667%}.col-xs-push-1{left:8.33333333%}.col-xs-push-0{left:0}.col-xs-offset-12{margin-left:100%}.col-xs-offset-11{margin-left:91.66666667%}.col-xs-offset-10{margin-left:83.33333333%}.col-xs-offset-9{margin-left:75%}.col-xs-offset-8{margin-left:66.66666667%}.col-xs-offset-7{margin-left:58.33333333%}.col-xs-offset-6{margin-left:50%}.col-xs-offset-5{margin-left:41.66666667%}.col-xs-offset-4{margin-left:33.33333333%}.col-xs-offset-3{margin-left:25%}.col-xs-offset-2{margin-left:16.66666667%}.col-xs-offset-1{margin-left:8.33333333%}.col-xs-offset-0{margin-left:0}@media (min-width:768px){.col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12{float:left}.col-sm-12{width:100%}.col-sm-11{width:91.66666667%}.col-sm-10{width:83.33333333%}.col-sm-9{width:75%}.col-sm-8{width:66.66666667%}.col-sm-7{width:58.33333333%}.col-sm-6{width:50%}.col-sm-5{width:41.66666667%}.col-sm-4{width:33.33333333%}.col-sm-3{width:25%}.col-sm-2{width:16.66666667%}.col-sm-1{width:8.33333333%}.col-sm-pull-12{right:100%}.col-sm-pull-11{right:91.66666667%}.col-sm-pull-10{right:83.33333333%}.col-sm-pull-9{right:75%}.col-sm-pull-8{right:66.66666667%}.col-sm-pull-7{right:58.33333333%}.col-sm-pull-6{right:50%}.col-sm-pull-5{right:41.66666667%}.col-sm-pull-4{right:33.33333333%}.col-sm-pull-3{right:25%}.col-sm-pull-2{right:16.66666667%}.col-sm-pull-1{right:8.33333333%}.col-sm-pull-0{right:0}.col-sm-push-12{left:100%}.col-sm-push-11{left:91.66666667%}.col-sm-push-10{left:83.33333333%}.col-sm-push-9{left:75%}.col-sm-push-8{left:66.66666667%}.col-sm-push-7{left:58.33333333%}.col-sm-push-6{left:50%}.col-sm-push-5{left:41.66666667%}.col-sm-push-4{left:33.33333333%}.col-sm-push-3{left:25%}.col-sm-push-2{left:16.66666667%}.col-sm-push-1{left:8.33333333%}.col-sm-push-0{left:0}.col-sm-offset-12{margin-left:100%}.col-sm-offset-11{margin-left:91.66666667%}.col-sm-offset-10{margin-left:83.33333333%}.col-sm-offset-9{margin-left:75%}.col-sm-offset-8{margin-left:66.66666667%}.col-sm-offset-7{margin-left:58.33333333%}.col-sm-offset-6{margin-left:50%}.col-sm-offset-5{margin-left:41.66666667%}.col-sm-offset-4{margin-left:33.33333333%}.col-sm-offset-3{margin-left:25%}.col-sm-offset-2{margin-left:16.66666667%}.col-sm-offset-1{margin-left:8.33333333%}.col-sm-offset-0{margin-left:0}}@media (min-width:992px){.col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12{float:left}.col-md-12{width:100%}.col-md-11{width:91.66666667%}.col-md-10{width:83.33333333%}.col-md-9{width:75%}.col-md-8{width:66.66666667%}.col-md-7{width:58.33333333%}.col-md-6{width:50%}.col-md-5{width:41.66666667%}.col-md-4{width:33.33333333%}.col-md-3{width:25%}.col-md-2{width:16.66666667%}.col-md-1{width:8.33333333%}.col-md-pull-12{right:100%}.col-md-pull-11{right:91.66666667%}.col-md-pull-10{right:83.33333333%}.col-md-pull-9{right:75%}.col-md-pull-8{right:66.66666667%}.col-md-pull-7{right:58.33333333%}.col-md-pull-6{right:50%}.col-md-pull-5{right:41.66666667%}.col-md-pull-4{right:33.33333333%}.col-md-pull-3{right:25%}.col-md-pull-2{right:16.66666667%}.col-md-pull-1{right:8.33333333%}.col-md-pull-0{right:0}.col-md-push-12{left:100%}.col-md-push-11{left:91.66666667%}.col-md-push-10{left:83.33333333%}.col-md-push-9{left:75%}.col-md-push-8{left:66.66666667%}.col-md-push-7{left:58.33333333%}.col-md-push-6{left:50%}.col-md-push-5{left:41.66666667%}.col-md-push-4{left:33.33333333%}.col-md-push-3{left:25%}.col-md-push-2{left:16.66666667%}.col-md-push-1{left:8.33333333%}.col-md-push-0{left:0}.col-md-offset-12{margin-left:100%}.col-md-offset-11{margin-left:91.66666667%}.col-md-offset-10{margin-left:83.33333333%}.col-md-offset-9{margin-left:75%}.col-md-offset-8{margin-left:66.66666667%}.col-md-offset-7{margin-left:58.33333333%}.col-md-offset-6{margin-left:50%}.col-md-offset-5{margin-left:41.66666667%}.col-md-offset-4{margin-left:33.33333333%}.col-md-offset-3{margin-left:25%}.col-md-offset-2{margin-left:16.66666667%}.col-md-offset-1{margin-left:8.33333333%}.col-md-offset-0{margin-left:0}}@media (min-width:1200px){.col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12{float:left}.col-lg-12{width:100%}.col-lg-11{width:91.66666667%}.col-lg-10{width:83.33333333%}.col-lg-9{width:75%}.col-lg-8{width:66.66666667%}.col-lg-7{width:58.33333333%}.col-lg-6{width:50%}.col-lg-5{width:41.66666667%}.col-lg-4{width:33.33333333%}.col-lg-3{width:25%}.col-lg-2{width:16.66666667%}.col-lg-1{width:8.33333333%}.col-lg-pull-12{right:100%}.col-lg-pull-11{right:91.66666667%}.col-lg-pull-10{right:83.33333333%}.col-lg-pull-9{right:75%}.col-lg-pull-8{right:66.66666667%}.col-lg-pull-7{right:58.33333333%}.col-lg-pull-6{right:50%}.col-lg-pull-5{right:41.66666667%}.col-lg-pull-4{right:33.33333333%}.col-lg-pull-3{right:25%}.col-lg-pull-2{right:16.66666667%}.col-lg-pull-1{right:8.33333333%}.col-lg-pull-0{right:0}.col-lg-push-12{left:100%}.col-lg-push-11{left:91.66666667%}.col-lg-push-10{left:83.33333333%}.col-lg-push-9{left:75%}.col-lg-push-8{left:66.66666667%}.col-lg-push-7{left:58.33333333%}.col-lg-push-6{left:50%}.col-lg-push-5{left:41.66666667%}.col-lg-push-4{left:33.33333333%}.col-lg-push-3{left:25%}.col-lg-push-2{left:16.66666667%}.col-lg-push-1{left:8.33333333%}.col-lg-push-0{left:0}.col-lg-offset-12{margin-left:100%}.col-lg-offset-11{margin-left:91.66666667%}.col-lg-offset-10{margin-left:83.33333333%}.col-lg-offset-9{margin-left:75%}.col-lg-offset-8{margin-left:66.66666667%}.col-lg-offset-7{margin-left:58.33333333%}.col-lg-offset-6{margin-left:50%}.col-lg-offset-5{margin-left:41.66666667%}.col-lg-offset-4{margin-left:33.33333333%}.col-lg-offset-3{margin-left:25%}.col-lg-offset-2{margin-left:16.66666667%}.col-lg-offset-1{margin-left:8.33333333%}.col-lg-offset-0{margin-left:0}}table{max-width:100%;background-color:transparent}th{text-align:left}.table{width:100%;margin-bottom:20px}.table>thead>tr>th,.table>tbody>tr>th,.table>tfoot>tr>th,.table>thead>tr>td,.table>tbody>tr>td,.table>tfoot>tr>td{padding:8px;line-height:1.42857143;vertical-align:top;border-top:1px solid #ddd}.table>thead>tr>th{vertical-align:bottom;border-bottom:2px solid #ddd}.table>caption+thead>tr:first-child>th,.table>colgroup+thead>tr:first-child>th,.table>thead:first-child>tr:first-child>th,.table>caption+thead>tr:first-child>td,.table>colgroup+thead>tr:first-child>td,.table>thead:first-child>tr:first-child>td{border-top:0}.table>tbody+tbody{border-top:2px solid #ddd}.table .table{background-color:#fff}.table-condensed>thead>tr>th,.table-condensed>tbody>tr>th,.table-condensed>tfoot>tr>th,.table-condensed>thead>tr>td,.table-condensed>tbody>tr>td,.table-condensed>tfoot>tr>td{padding:5px}.table-bordered{border:1px solid #ddd}.table-bordered>thead>tr>th,.table-bordered>tbody>tr>th,.table-bordered>tfoot>tr>th,.table-bordered>thead>tr>td,.table-bordered>tbody>tr>td,.table-bordered>tfoot>tr>td{border:1px solid #ddd}.table-bordered>thead>tr>th,.table-bordered>thead>tr>td{border-bottom-width:2px}.table-striped>tbody>tr:nth-child(odd)>td,.table-striped>tbody>tr:nth-child(odd)>th{background-color:#f9f9f9}.table-hover>tbody>tr:hover>td,.table-hover>tbody>tr:hover>th{background-color:#f5f5f5}table col[class*="col-"]{position:static;float:none;display:table-column}table td[class*="col-"],table th[class*="col-"]{float:none;display:table-cell}.table>thead>tr>.active,.table>tbody>tr>.active,.table>tfoot>tr>.active,.table>thead>.active>td,.table>tbody>.active>td,.table>tfoot>.active>td,.table>thead>.active>th,.table>tbody>.active>th,.table>tfoot>.active>th{background-color:#f5f5f5}.table-hover>tbody>tr>.active:hover,.table-hover>tbody>.active:hover>td,.table-hover>tbody>.active:hover>th{background-color:#e8e8e8}.table>thead>tr>.success,.table>tbody>tr>.success,.table>tfoot>tr>.success,.table>thead>.success>td,.table>tbody>.success>td,.table>tfoot>.success>td,.table>thead>.success>th,.table>tbody>.success>th,.table>tfoot>.success>th{background-color:#dff0d8}.table-hover>tbody>tr>.success:hover,.table-hover>tbody>.success:hover>td,.table-hover>tbody>.success:hover>th{background-color:#d0e9c6}.table>thead>tr>.danger,.table>tbody>tr>.danger,.table>tfoot>tr>.danger,.table>thead>.danger>td,.table>tbody>.danger>td,.table>tfoot>.danger>td,.table>thead>.danger>th,.table>tbody>.danger>th,.table>tfoot>.danger>th{background-color:#f2dede}.table-hover>tbody>tr>.danger:hover,.table-hover>tbody>.danger:hover>td,.table-hover>tbody>.danger:hover>th{background-color:#ebcccc}.table>thead>tr>.warning,.table>tbody>tr>.warning,.table>tfoot>tr>.warning,.table>thead>.warning>td,.table>tbody>.warning>td,.table>tfoot>.warning>td,.table>thead>.warning>th,.table>tbody>.warning>th,.table>tfoot>.warning>th{background-color:#fcf8e3}.table-hover>tbody>tr>.warning:hover,.table-hover>tbody>.warning:hover>td,.table-hover>tbody>.warning:hover>th{background-color:#faf2cc}@media (max-width:767px){.table-responsive{width:100%;margin-bottom:15px;overflow-y:hidden;overflow-x:scroll;-ms-overflow-style:-ms-autohiding-scrollbar;border:1px solid #ddd;-webkit-overflow-scrolling:touch}.table-responsive>.table{margin-bottom:0}.table-responsive>.table>thead>tr>th,.table-responsive>.table>tbody>tr>th,.table-responsive>.table>tfoot>tr>th,.table-responsive>.table>thead>tr>td,.table-responsive>.table>tbody>tr>td,.table-responsive>.table>tfoot>tr>td{white-space:nowrap}.table-responsive>.table-bordered{border:0}.table-responsive>.table-bordered>thead>tr>th:first-child,.table-responsive>.table-bordered>tbody>tr>th:first-child,.table-responsive>.table-bordered>tfoot>tr>th:first-child,.table-responsive>.table-bordered>thead>tr>td:first-child,.table-responsive>.table-bordered>tbody>tr>td:first-child,.table-responsive>.table-bordered>tfoot>tr>td:first-child{border-left:0}.table-responsive>.table-bordered>thead>tr>th:last-child,.table-responsive>.table-bordered>tbody>tr>th:last-child,.table-responsive>.table-bordered>tfoot>tr>th:last-child,.table-responsive>.table-bordered>thead>tr>td:last-child,.table-responsive>.table-bordered>tbody>tr>td:last-child,.table-responsive>.table-bordered>tfoot>tr>td:last-child{border-right:0}.table-responsive>.table-bordered>tbody>tr:last-child>th,.table-responsive>.table-bordered>tfoot>tr:last-child>th,.table-responsive>.table-bordered>tbody>tr:last-child>td,.table-responsive>.table-bordered>tfoot>tr:last-child>td{border-bottom:0}}fieldset{padding:0;margin:0;border:0}legend{display:block;width:100%;padding:0;margin-bottom:20px;font-size:21px;line-height:inherit;color:#333;border:0;border-bottom:1px solid #e5e5e5}label{display:inline-block;margin-bottom:5px;font-weight:bold}input[type="search"]{-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box}input[type="radio"],input[type="checkbox"]{margin:4px 0 0;margin-top:1px \9;line-height:normal}input[type="file"]{display:block}select[multiple],select[size]{height:auto}select optgroup{font-size:inherit;font-style:inherit;font-family:inherit}input[type="file"]:focus,input[type="radio"]:focus,input[type="checkbox"]:focus{outline:thin dotted;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}input[type="number"]::-webkit-outer-spin-button,input[type="number"]::-webkit-inner-spin-button{height:auto}output{display:block;padding-top:7px;font-size:14px;line-height:1.42857143;color:#555;vertical-align:middle}.form-control{display:block;width:100%;height:34px;padding:6px 12px;font-size:14px;line-height:1.42857143;color:#555;vertical-align:middle;background-color:#fff;background-image:none;border:1px solid #ccc;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);-webkit-transition:border-color ease-in-out .15s, box-shadow ease-in-out .15s;transition:border-color ease-in-out .15s, box-shadow ease-in-out .15s}.form-control:focus{border-color:#66afe9;outline:0;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, 0.6);box-shadow:inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, 0.6)}.form-control:-moz-placeholder{color:#999}.form-control::-moz-placeholder{color:#999;opacity:1}.form-control:-ms-input-placeholder{color:#999}.form-control::-webkit-input-placeholder{color:#999}.form-control[disabled],.form-control[readonly],fieldset[disabled] .form-control{cursor:not-allowed;background-color:#eee}textarea.form-control{height:auto}.form-group{margin-bottom:15px}.radio,.checkbox{display:block;min-height:20px;margin-top:10px;margin-bottom:10px;padding-left:20px;vertical-align:middle}.radio label,.checkbox label{display:inline;margin-bottom:0;font-weight:normal;cursor:pointer}.radio input[type="radio"],.radio-inline input[type="radio"],.checkbox input[type="checkbox"],.checkbox-inline input[type="checkbox"]{float:left;margin-left:-20px}.radio+.radio,.checkbox+.checkbox{margin-top:-5px}.radio-inline,.checkbox-inline{display:inline-block;padding-left:20px;margin-bottom:0;vertical-align:middle;font-weight:normal;cursor:pointer}.radio-inline+.radio-inline,.checkbox-inline+.checkbox-inline{margin-top:0;margin-left:10px}input[type="radio"][disabled],input[type="checkbox"][disabled],.radio[disabled],.radio-inline[disabled],.checkbox[disabled],.checkbox-inline[disabled],fieldset[disabled] input[type="radio"],fieldset[disabled] input[type="checkbox"],fieldset[disabled] .radio,fieldset[disabled] .radio-inline,fieldset[disabled] .checkbox,fieldset[disabled] .checkbox-inline{cursor:not-allowed}.input-sm{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}select.input-sm{height:30px;line-height:30px}textarea.input-sm{height:auto}.input-lg{height:46px;padding:10px 16px;font-size:18px;line-height:1.33;border-radius:6px}select.input-lg{height:46px;line-height:46px}textarea.input-lg{height:auto}.has-warning .help-block,.has-warning .control-label,.has-warning .radio,.has-warning .checkbox,.has-warning .radio-inline,.has-warning .checkbox-inline{color:#8a6d3b}.has-warning .form-control{border-color:#8a6d3b;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.has-warning .form-control:focus{border-color:#66512c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #c0a16b;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #c0a16b}.has-warning .input-group-addon{color:#8a6d3b;border-color:#8a6d3b;background-color:#fcf8e3}.has-error .help-block,.has-error .control-label,.has-error .radio,.has-error .checkbox,.has-error .radio-inline,.has-error .checkbox-inline{color:#a94442}.has-error .form-control{border-color:#a94442;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.has-error .form-control:focus{border-color:#843534;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #ce8483;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #ce8483}.has-error .input-group-addon{color:#a94442;border-color:#a94442;background-color:#f2dede}.has-success .help-block,.has-success .control-label,.has-success .radio,.has-success .checkbox,.has-success .radio-inline,.has-success .checkbox-inline{color:#3c763d}.has-success .form-control{border-color:#3c763d;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075);box-shadow:inset 0 1px 1px rgba(0,0,0,0.075)}.has-success .form-control:focus{border-color:#2b542c;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #67b168;box-shadow:inset 0 1px 1px rgba(0,0,0,0.075),0 0 6px #67b168}.has-success .input-group-addon{color:#3c763d;border-color:#3c763d;background-color:#dff0d8}.form-control-static{margin-bottom:0}.help-block{display:block;margin-top:5px;margin-bottom:10px;color:#737373}@media (min-width:768px){.form-inline .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.form-inline .form-control{display:inline-block}.form-inline select.form-control{width:auto}.form-inline .radio,.form-inline .checkbox{display:inline-block;margin-top:0;margin-bottom:0;padding-left:0}.form-inline .radio input[type="radio"],.form-inline .checkbox input[type="checkbox"]{float:none;margin-left:0}}.form-horizontal .control-label,.form-horizontal .radio,.form-horizontal .checkbox,.form-horizontal .radio-inline,.form-horizontal .checkbox-inline{margin-top:0;margin-bottom:0;padding-top:7px}.form-horizontal .radio,.form-horizontal .checkbox{min-height:27px}.form-horizontal .form-group{margin-left:-15px;margin-right:-15px}.form-horizontal .form-group:before,.form-horizontal .form-group:after{content:" ";display:table}.form-horizontal .form-group:after{clear:both}.form-horizontal .form-group:before,.form-horizontal .form-group:after{content:" ";display:table}.form-horizontal .form-group:after{clear:both}.form-horizontal .form-control-static{padding-top:7px}@media (min-width:768px){.form-horizontal .control-label{text-align:right}}.btn{display:inline-block;margin-bottom:0;font-weight:normal;text-align:center;vertical-align:middle;cursor:pointer;background-image:none;border:1px solid transparent;white-space:nowrap;padding:6px 12px;font-size:14px;line-height:1.42857143;border-radius:4px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;-o-user-select:none;user-select:none}.btn:focus{outline:thin dotted;outline:5px auto -webkit-focus-ring-color;outline-offset:-2px}.btn:hover,.btn:focus{color:#333;text-decoration:none}.btn:active,.btn.active{outline:0;background-image:none;-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,0.125);box-shadow:inset 0 3px 5px rgba(0,0,0,0.125)}.btn.disabled,.btn[disabled],fieldset[disabled] .btn{cursor:not-allowed;pointer-events:none;opacity:.65;filter:alpha(opacity=65);-webkit-box-shadow:none;box-shadow:none}.btn-default{color:#333;background-color:#fff;border-color:#ccc}.btn-default:hover,.btn-default:focus,.btn-default:active,.btn-default.active,.open .dropdown-toggle.btn-default{color:#333;background-color:#ebebeb;border-color:#adadad}.btn-default:active,.btn-default.active,.open .dropdown-toggle.btn-default{background-image:none}.btn-default.disabled,.btn-default[disabled],fieldset[disabled] .btn-default,.btn-default.disabled:hover,.btn-default[disabled]:hover,fieldset[disabled] .btn-default:hover,.btn-default.disabled:focus,.btn-default[disabled]:focus,fieldset[disabled] .btn-default:focus,.btn-default.disabled:active,.btn-default[disabled]:active,fieldset[disabled] .btn-default:active,.btn-default.disabled.active,.btn-default[disabled].active,fieldset[disabled] .btn-default.active{background-color:#fff;border-color:#ccc}.btn-default .badge{color:#fff;background-color:#fff}.btn-primary{color:#fff;background-color:#428bca;border-color:#357ebd}.btn-primary:hover,.btn-primary:focus,.btn-primary:active,.btn-primary.active,.open .dropdown-toggle.btn-primary{color:#fff;background-color:#3276b1;border-color:#285e8e}.btn-primary:active,.btn-primary.active,.open .dropdown-toggle.btn-primary{background-image:none}.btn-primary.disabled,.btn-primary[disabled],fieldset[disabled] .btn-primary,.btn-primary.disabled:hover,.btn-primary[disabled]:hover,fieldset[disabled] .btn-primary:hover,.btn-primary.disabled:focus,.btn-primary[disabled]:focus,fieldset[disabled] .btn-primary:focus,.btn-primary.disabled:active,.btn-primary[disabled]:active,fieldset[disabled] .btn-primary:active,.btn-primary.disabled.active,.btn-primary[disabled].active,fieldset[disabled] .btn-primary.active{background-color:#428bca;border-color:#357ebd}.btn-primary .badge{color:#428bca;background-color:#fff}.btn-warning{color:#fff;background-color:#f0ad4e;border-color:#eea236}.btn-warning:hover,.btn-warning:focus,.btn-warning:active,.btn-warning.active,.open .dropdown-toggle.btn-warning{color:#fff;background-color:#ed9c28;border-color:#d58512}.btn-warning:active,.btn-warning.active,.open .dropdown-toggle.btn-warning{background-image:none}.btn-warning.disabled,.btn-warning[disabled],fieldset[disabled] .btn-warning,.btn-warning.disabled:hover,.btn-warning[disabled]:hover,fieldset[disabled] .btn-warning:hover,.btn-warning.disabled:focus,.btn-warning[disabled]:focus,fieldset[disabled] .btn-warning:focus,.btn-warning.disabled:active,.btn-warning[disabled]:active,fieldset[disabled] .btn-warning:active,.btn-warning.disabled.active,.btn-warning[disabled].active,fieldset[disabled] .btn-warning.active{background-color:#f0ad4e;border-color:#eea236}.btn-warning .badge{color:#f0ad4e;background-color:#fff}.btn-danger{color:#fff;background-color:#d9534f;border-color:#d43f3a}.btn-danger:hover,.btn-danger:focus,.btn-danger:active,.btn-danger.active,.open .dropdown-toggle.btn-danger{color:#fff;background-color:#d2322d;border-color:#ac2925}.btn-danger:active,.btn-danger.active,.open .dropdown-toggle.btn-danger{background-image:none}.btn-danger.disabled,.btn-danger[disabled],fieldset[disabled] .btn-danger,.btn-danger.disabled:hover,.btn-danger[disabled]:hover,fieldset[disabled] .btn-danger:hover,.btn-danger.disabled:focus,.btn-danger[disabled]:focus,fieldset[disabled] .btn-danger:focus,.btn-danger.disabled:active,.btn-danger[disabled]:active,fieldset[disabled] .btn-danger:active,.btn-danger.disabled.active,.btn-danger[disabled].active,fieldset[disabled] .btn-danger.active{background-color:#d9534f;border-color:#d43f3a}.btn-danger .badge{color:#d9534f;background-color:#fff}.btn-success{color:#fff;background-color:#5cb85c;border-color:#4cae4c}.btn-success:hover,.btn-success:focus,.btn-success:active,.btn-success.active,.open .dropdown-toggle.btn-success{color:#fff;background-color:#47a447;border-color:#398439}.btn-success:active,.btn-success.active,.open .dropdown-toggle.btn-success{background-image:none}.btn-success.disabled,.btn-success[disabled],fieldset[disabled] .btn-success,.btn-success.disabled:hover,.btn-success[disabled]:hover,fieldset[disabled] .btn-success:hover,.btn-success.disabled:focus,.btn-success[disabled]:focus,fieldset[disabled] .btn-success:focus,.btn-success.disabled:active,.btn-success[disabled]:active,fieldset[disabled] .btn-success:active,.btn-success.disabled.active,.btn-success[disabled].active,fieldset[disabled] .btn-success.active{background-color:#5cb85c;border-color:#4cae4c}.btn-success .badge{color:#5cb85c;background-color:#fff}.btn-info{color:#fff;background-color:#5bc0de;border-color:#46b8da}.btn-info:hover,.btn-info:focus,.btn-info:active,.btn-info.active,.open .dropdown-toggle.btn-info{color:#fff;background-color:#39b3d7;border-color:#269abc}.btn-info:active,.btn-info.active,.open .dropdown-toggle.btn-info{background-image:none}.btn-info.disabled,.btn-info[disabled],fieldset[disabled] .btn-info,.btn-info.disabled:hover,.btn-info[disabled]:hover,fieldset[disabled] .btn-info:hover,.btn-info.disabled:focus,.btn-info[disabled]:focus,fieldset[disabled] .btn-info:focus,.btn-info.disabled:active,.btn-info[disabled]:active,fieldset[disabled] .btn-info:active,.btn-info.disabled.active,.btn-info[disabled].active,fieldset[disabled] .btn-info.active{background-color:#5bc0de;border-color:#46b8da}.btn-info .badge{color:#5bc0de;background-color:#fff}.btn-link{color:#428bca;font-weight:normal;cursor:pointer;border-radius:0}.btn-link,.btn-link:active,.btn-link[disabled],fieldset[disabled] .btn-link{background-color:transparent;-webkit-box-shadow:none;box-shadow:none}.btn-link,.btn-link:hover,.btn-link:focus,.btn-link:active{border-color:transparent}.btn-link:hover,.btn-link:focus{color:#2a6496;text-decoration:underline;background-color:transparent}.btn-link[disabled]:hover,fieldset[disabled] .btn-link:hover,.btn-link[disabled]:focus,fieldset[disabled] .btn-link:focus{color:#999;text-decoration:none}.btn-lg{padding:10px 16px;font-size:18px;line-height:1.33;border-radius:6px}.btn-sm{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.btn-xs{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}.btn-block{display:block;width:100%;padding-left:0;padding-right:0}.btn-block+.btn-block{margin-top:5px}input[type="submit"].btn-block,input[type="reset"].btn-block,input[type="button"].btn-block{width:100%}.fade{opacity:0;-webkit-transition:opacity .15s linear;transition:opacity .15s linear}.fade.in{opacity:1}.collapse{display:none}.collapse.in{display:block}.collapsing{position:relative;height:0;overflow:hidden;-webkit-transition:height .35s ease;transition:height .35s ease}@font-face{font-family:'Glyphicons Halflings';src:url('../fonts/glyphicons-halflings-regular.eot');src:url('../fonts/glyphicons-halflings-regular.eot?#iefix') format('embedded-opentype'),url('../fonts/glyphicons-halflings-regular.woff') format('woff'),url('../fonts/glyphicons-halflings-regular.ttf') format('truetype'),url('../fonts/glyphicons-halflings-regular.svg#glyphicons-halflingsregular') format('svg')}.glyphicon{position:relative;top:1px;display:inline-block;font-family:'Glyphicons Halflings';font-style:normal;font-weight:normal;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.glyphicon:empty{width:1em}.glyphicon-asterisk:before{content:"\2a"}.glyphicon-plus:before{content:"\2b"}.glyphicon-euro:before{content:"\20ac"}.glyphicon-minus:before{content:"\2212"}.glyphicon-cloud:before{content:"\2601"}.glyphicon-envelope:before{content:"\2709"}.glyphicon-pencil:before{content:"\270f"}.glyphicon-glass:before{content:"\e001"}.glyphicon-music:before{content:"\e002"}.glyphicon-search:before{content:"\e003"}.glyphicon-heart:before{content:"\e005"}.glyphicon-star:before{content:"\e006"}.glyphicon-star-empty:before{content:"\e007"}.glyphicon-user:before{content:"\e008"}.glyphicon-film:before{content:"\e009"}.glyphicon-th-large:before{content:"\e010"}.glyphicon-th:before{content:"\e011"}.glyphicon-th-list:before{content:"\e012"}.glyphicon-ok:before{content:"\e013"}.glyphicon-remove:before{content:"\e014"}.glyphicon-zoom-in:before{content:"\e015"}.glyphicon-zoom-out:before{content:"\e016"}.glyphicon-off:before{content:"\e017"}.glyphicon-signal:before{content:"\e018"}.glyphicon-cog:before{content:"\e019"}.glyphicon-trash:before{content:"\e020"}.glyphicon-home:before{content:"\e021"}.glyphicon-file:before{content:"\e022"}.glyphicon-time:before{content:"\e023"}.glyphicon-road:before{content:"\e024"}.glyphicon-download-alt:before{content:"\e025"}.glyphicon-download:before{content:"\e026"}.glyphicon-upload:before{content:"\e027"}.glyphicon-inbox:before{content:"\e028"}.glyphicon-play-circle:before{content:"\e029"}.glyphicon-repeat:before{content:"\e030"}.glyphicon-refresh:before{content:"\e031"}.glyphicon-list-alt:before{content:"\e032"}.glyphicon-lock:before{content:"\e033"}.glyphicon-flag:before{content:"\e034"}.glyphicon-headphones:before{content:"\e035"}.glyphicon-volume-off:before{content:"\e036"}.glyphicon-volume-down:before{content:"\e037"}.glyphicon-volume-up:before{content:"\e038"}.glyphicon-qrcode:before{content:"\e039"}.glyphicon-barcode:before{content:"\e040"}.glyphicon-tag:before{content:"\e041"}.glyphicon-tags:before{content:"\e042"}.glyphicon-book:before{content:"\e043"}.glyphicon-bookmark:before{content:"\e044"}.glyphicon-print:before{content:"\e045"}.glyphicon-camera:before{content:"\e046"}.glyphicon-font:before{content:"\e047"}.glyphicon-bold:before{content:"\e048"}.glyphicon-italic:before{content:"\e049"}.glyphicon-text-height:before{content:"\e050"}.glyphicon-text-width:before{content:"\e051"}.glyphicon-align-left:before{content:"\e052"}.glyphicon-align-center:before{content:"\e053"}.glyphicon-align-right:before{content:"\e054"}.glyphicon-align-justify:before{content:"\e055"}.glyphicon-list:before{content:"\e056"}.glyphicon-indent-left:before{content:"\e057"}.glyphicon-indent-right:before{content:"\e058"}.glyphicon-facetime-video:before{content:"\e059"}.glyphicon-picture:before{content:"\e060"}.glyphicon-map-marker:before{content:"\e062"}.glyphicon-adjust:before{content:"\e063"}.glyphicon-tint:before{content:"\e064"}.glyphicon-edit:before{content:"\e065"}.glyphicon-share:before{content:"\e066"}.glyphicon-check:before{content:"\e067"}.glyphicon-move:before{content:"\e068"}.glyphicon-step-backward:before{content:"\e069"}.glyphicon-fast-backward:before{content:"\e070"}.glyphicon-backward:before{content:"\e071"}.glyphicon-play:before{content:"\e072"}.glyphicon-pause:before{content:"\e073"}.glyphicon-stop:before{content:"\e074"}.glyphicon-forward:before{content:"\e075"}.glyphicon-fast-forward:before{content:"\e076"}.glyphicon-step-forward:before{content:"\e077"}.glyphicon-eject:before{content:"\e078"}.glyphicon-chevron-left:before{content:"\e079"}.glyphicon-chevron-right:before{content:"\e080"}.glyphicon-plus-sign:before{content:"\e081"}.glyphicon-minus-sign:before{content:"\e082"}.glyphicon-remove-sign:before{content:"\e083"}.glyphicon-ok-sign:before{content:"\e084"}.glyphicon-question-sign:before{content:"\e085"}.glyphicon-info-sign:before{content:"\e086"}.glyphicon-screenshot:before{content:"\e087"}.glyphicon-remove-circle:before{content:"\e088"}.glyphicon-ok-circle:before{content:"\e089"}.glyphicon-ban-circle:before{content:"\e090"}.glyphicon-arrow-left:before{content:"\e091"}.glyphicon-arrow-right:before{content:"\e092"}.glyphicon-arrow-up:before{content:"\e093"}.glyphicon-arrow-down:before{content:"\e094"}.glyphicon-share-alt:before{content:"\e095"}.glyphicon-resize-full:before{content:"\e096"}.glyphicon-resize-small:before{content:"\e097"}.glyphicon-exclamation-sign:before{content:"\e101"}.glyphicon-gift:before{content:"\e102"}.glyphicon-leaf:before{content:"\e103"}.glyphicon-fire:before{content:"\e104"}.glyphicon-eye-open:before{content:"\e105"}.glyphicon-eye-close:before{content:"\e106"}.glyphicon-warning-sign:before{content:"\e107"}.glyphicon-plane:before{content:"\e108"}.glyphicon-calendar:before{content:"\e109"}.glyphicon-random:before{content:"\e110"}.glyphicon-comment:before{content:"\e111"}.glyphicon-magnet:before{content:"\e112"}.glyphicon-chevron-up:before{content:"\e113"}.glyphicon-chevron-down:before{content:"\e114"}.glyphicon-retweet:before{content:"\e115"}.glyphicon-shopping-cart:before{content:"\e116"}.glyphicon-folder-close:before{content:"\e117"}.glyphicon-folder-open:before{content:"\e118"}.glyphicon-resize-vertical:before{content:"\e119"}.glyphicon-resize-horizontal:before{content:"\e120"}.glyphicon-hdd:before{content:"\e121"}.glyphicon-bullhorn:before{content:"\e122"}.glyphicon-bell:before{content:"\e123"}.glyphicon-certificate:before{content:"\e124"}.glyphicon-thumbs-up:before{content:"\e125"}.glyphicon-thumbs-down:before{content:"\e126"}.glyphicon-hand-right:before{content:"\e127"}.glyphicon-hand-left:before{content:"\e128"}.glyphicon-hand-up:before{content:"\e129"}.glyphicon-hand-down:before{content:"\e130"}.glyphicon-circle-arrow-right:before{content:"\e131"}.glyphicon-circle-arrow-left:before{content:"\e132"}.glyphicon-circle-arrow-up:before{content:"\e133"}.glyphicon-circle-arrow-down:before{content:"\e134"}.glyphicon-globe:before{content:"\e135"}.glyphicon-wrench:before{content:"\e136"}.glyphicon-tasks:before{content:"\e137"}.glyphicon-filter:before{content:"\e138"}.glyphicon-briefcase:before{content:"\e139"}.glyphicon-fullscreen:before{content:"\e140"}.glyphicon-dashboard:before{content:"\e141"}.glyphicon-paperclip:before{content:"\e142"}.glyphicon-heart-empty:before{content:"\e143"}.glyphicon-link:before{content:"\e144"}.glyphicon-phone:before{content:"\e145"}.glyphicon-pushpin:before{content:"\e146"}.glyphicon-usd:before{content:"\e148"}.glyphicon-gbp:before{content:"\e149"}.glyphicon-sort:before{content:"\e150"}.glyphicon-sort-by-alphabet:before{content:"\e151"}.glyphicon-sort-by-alphabet-alt:before{content:"\e152"}.glyphicon-sort-by-order:before{content:"\e153"}.glyphicon-sort-by-order-alt:before{content:"\e154"}.glyphicon-sort-by-attributes:before{content:"\e155"}.glyphicon-sort-by-attributes-alt:before{content:"\e156"}.glyphicon-unchecked:before{content:"\e157"}.glyphicon-expand:before{content:"\e158"}.glyphicon-collapse-down:before{content:"\e159"}.glyphicon-collapse-up:before{content:"\e160"}.glyphicon-log-in:before{content:"\e161"}.glyphicon-flash:before{content:"\e162"}.glyphicon-log-out:before{content:"\e163"}.glyphicon-new-window:before{content:"\e164"}.glyphicon-record:before{content:"\e165"}.glyphicon-save:before{content:"\e166"}.glyphicon-open:before{content:"\e167"}.glyphicon-saved:before{content:"\e168"}.glyphicon-import:before{content:"\e169"}.glyphicon-export:before{content:"\e170"}.glyphicon-send:before{content:"\e171"}.glyphicon-floppy-disk:before{content:"\e172"}.glyphicon-floppy-saved:before{content:"\e173"}.glyphicon-floppy-remove:before{content:"\e174"}.glyphicon-floppy-save:before{content:"\e175"}.glyphicon-floppy-open:before{content:"\e176"}.glyphicon-credit-card:before{content:"\e177"}.glyphicon-transfer:before{content:"\e178"}.glyphicon-cutlery:before{content:"\e179"}.glyphicon-header:before{content:"\e180"}.glyphicon-compressed:before{content:"\e181"}.glyphicon-earphone:before{content:"\e182"}.glyphicon-phone-alt:before{content:"\e183"}.glyphicon-tower:before{content:"\e184"}.glyphicon-stats:before{content:"\e185"}.glyphicon-sd-video:before{content:"\e186"}.glyphicon-hd-video:before{content:"\e187"}.glyphicon-subtitles:before{content:"\e188"}.glyphicon-sound-stereo:before{content:"\e189"}.glyphicon-sound-dolby:before{content:"\e190"}.glyphicon-sound-5-1:before{content:"\e191"}.glyphicon-sound-6-1:before{content:"\e192"}.glyphicon-sound-7-1:before{content:"\e193"}.glyphicon-copyright-mark:before{content:"\e194"}.glyphicon-registration-mark:before{content:"\e195"}.glyphicon-cloud-download:before{content:"\e197"}.glyphicon-cloud-upload:before{content:"\e198"}.glyphicon-tree-conifer:before{content:"\e199"}.glyphicon-tree-deciduous:before{content:"\e200"}.caret{display:inline-block;width:0;height:0;margin-left:2px;vertical-align:middle;border-top:4px solid;border-right:4px solid transparent;border-left:4px solid transparent}.dropdown{position:relative}.dropdown-toggle:focus{outline:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:160px;padding:5px 0;margin:2px 0 0;list-style:none;font-size:14px;background-color:#fff;border:1px solid #ccc;border:1px solid rgba(0,0,0,0.15);border-radius:4px;-webkit-box-shadow:0 6px 12px rgba(0,0,0,0.175);box-shadow:0 6px 12px rgba(0,0,0,0.175);background-clip:padding-box}.dropdown-menu.pull-right{right:0;left:auto}.dropdown-menu .divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}.dropdown-menu>li>a{display:block;padding:3px 20px;clear:both;font-weight:normal;line-height:1.42857143;color:#333;white-space:nowrap}.dropdown-menu>li>a:hover,.dropdown-menu>li>a:focus{text-decoration:none;color:#262626;background-color:#f5f5f5}.dropdown-menu>.active>a,.dropdown-menu>.active>a:hover,.dropdown-menu>.active>a:focus{color:#fff;text-decoration:none;outline:0;background-color:#428bca}.dropdown-menu>.disabled>a,.dropdown-menu>.disabled>a:hover,.dropdown-menu>.disabled>a:focus{color:#999}.dropdown-menu>.disabled>a:hover,.dropdown-menu>.disabled>a:focus{text-decoration:none;background-color:transparent;background-image:none;filter:progid:DXImageTransform.Microsoft.gradient(enabled = false);cursor:not-allowed}.open>.dropdown-menu{display:block}.open>a{outline:0}.dropdown-header{display:block;padding:3px 20px;font-size:12px;line-height:1.42857143;color:#999}.dropdown-backdrop{position:fixed;left:0;right:0;bottom:0;top:0;z-index:990}.pull-right>.dropdown-menu{right:0;left:auto}.dropup .caret,.navbar-fixed-bottom .dropdown .caret{border-top:0;border-bottom:4px solid;content:""}.dropup .dropdown-menu,.navbar-fixed-bottom .dropdown .dropdown-menu{top:auto;bottom:100%;margin-bottom:1px}@media (min-width:768px){.navbar-right .dropdown-menu{right:0;left:auto}}.btn-group,.btn-group-vertical{position:relative;display:inline-block;vertical-align:middle}.btn-group>.btn,.btn-group-vertical>.btn{position:relative;float:left}.btn-group>.btn:hover,.btn-group-vertical>.btn:hover,.btn-group>.btn:focus,.btn-group-vertical>.btn:focus,.btn-group>.btn:active,.btn-group-vertical>.btn:active,.btn-group>.btn.active,.btn-group-vertical>.btn.active{z-index:2}.btn-group>.btn:focus,.btn-group-vertical>.btn:focus{outline:none}.btn-group .btn+.btn,.btn-group .btn+.btn-group,.btn-group .btn-group+.btn,.btn-group .btn-group+.btn-group{margin-left:-1px}.btn-toolbar:before,.btn-toolbar:after{content:" ";display:table}.btn-toolbar:after{clear:both}.btn-toolbar:before,.btn-toolbar:after{content:" ";display:table}.btn-toolbar:after{clear:both}.btn-toolbar .btn-group{float:left}.btn-toolbar>.btn+.btn,.btn-toolbar>.btn-group+.btn,.btn-toolbar>.btn+.btn-group,.btn-toolbar>.btn-group+.btn-group{margin-left:5px}.btn-group>.btn:not(:first-child):not(:last-child):not(.dropdown-toggle){border-radius:0}.btn-group>.btn:first-child{margin-left:0}.btn-group>.btn:first-child:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-top-right-radius:0}.btn-group>.btn:last-child:not(:first-child),.btn-group>.dropdown-toggle:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0}.btn-group>.btn-group{float:left}.btn-group>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group>.btn-group:first-child>.btn:last-child,.btn-group>.btn-group:first-child>.dropdown-toggle{border-bottom-right-radius:0;border-top-right-radius:0}.btn-group>.btn-group:last-child>.btn:first-child{border-bottom-left-radius:0;border-top-left-radius:0}.btn-group .dropdown-toggle:active,.btn-group.open .dropdown-toggle{outline:0}.btn-group-xs>.btn{padding:1px 5px;font-size:12px;line-height:1.5;border-radius:3px}.btn-group-sm>.btn{padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}.btn-group-lg>.btn{padding:10px 16px;font-size:18px;line-height:1.33;border-radius:6px}.btn-group>.btn+.dropdown-toggle{padding-left:8px;padding-right:8px}.btn-group>.btn-lg+.dropdown-toggle{padding-left:12px;padding-right:12px}.btn-group.open .dropdown-toggle{-webkit-box-shadow:inset 0 3px 5px rgba(0,0,0,0.125);box-shadow:inset 0 3px 5px rgba(0,0,0,0.125)}.btn-group.open .dropdown-toggle.btn-link{-webkit-box-shadow:none;box-shadow:none}.btn .caret{margin-left:0}.btn-lg .caret{border-width:5px 5px 0;border-bottom-width:0}.dropup .btn-lg .caret{border-width:0 5px 5px}.btn-group-vertical>.btn,.btn-group-vertical>.btn-group,.btn-group-vertical>.btn-group>.btn{display:block;float:none;width:100%;max-width:100%}.btn-group-vertical>.btn-group:before,.btn-group-vertical>.btn-group:after{content:" ";display:table}.btn-group-vertical>.btn-group:after{clear:both}.btn-group-vertical>.btn-group:before,.btn-group-vertical>.btn-group:after{content:" ";display:table}.btn-group-vertical>.btn-group:after{clear:both}.btn-group-vertical>.btn-group>.btn{float:none}.btn-group-vertical>.btn+.btn,.btn-group-vertical>.btn+.btn-group,.btn-group-vertical>.btn-group+.btn,.btn-group-vertical>.btn-group+.btn-group{margin-top:-1px;margin-left:0}.btn-group-vertical>.btn:not(:first-child):not(:last-child){border-radius:0}.btn-group-vertical>.btn:first-child:not(:last-child){border-top-right-radius:4px;border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn:last-child:not(:first-child){border-bottom-left-radius:4px;border-top-right-radius:0;border-top-left-radius:0}.btn-group-vertical>.btn-group:not(:first-child):not(:last-child)>.btn{border-radius:0}.btn-group-vertical>.btn-group:first-child>.btn:last-child,.btn-group-vertical>.btn-group:first-child>.dropdown-toggle{border-bottom-right-radius:0;border-bottom-left-radius:0}.btn-group-vertical>.btn-group:last-child>.btn:first-child{border-top-right-radius:0;border-top-left-radius:0}.btn-group-justified{display:table;width:100%;table-layout:fixed;border-collapse:separate}.btn-group-justified>.btn,.btn-group-justified>.btn-group{float:none;display:table-cell;width:1%}.btn-group-justified>.btn-group .btn{width:100%}[data-toggle="buttons"]>.btn>input[type="radio"],[data-toggle="buttons"]>.btn>input[type="checkbox"]{display:none}.input-group{position:relative;display:table;border-collapse:separate}.input-group[class*="col-"]{float:none;padding-left:0;padding-right:0}.input-group .form-control{width:100%;margin-bottom:0}.input-group-lg>.form-control,.input-group-lg>.input-group-addon,.input-group-lg>.input-group-btn>.btn{height:46px;padding:10px 16px;font-size:18px;line-height:1.33;border-radius:6px}select.input-group-lg>.form-control,select.input-group-lg>.input-group-addon,select.input-group-lg>.input-group-btn>.btn{height:46px;line-height:46px}textarea.input-group-lg>.form-control,textarea.input-group-lg>.input-group-addon,textarea.input-group-lg>.input-group-btn>.btn{height:auto}.input-group-sm>.form-control,.input-group-sm>.input-group-addon,.input-group-sm>.input-group-btn>.btn{height:30px;padding:5px 10px;font-size:12px;line-height:1.5;border-radius:3px}select.input-group-sm>.form-control,select.input-group-sm>.input-group-addon,select.input-group-sm>.input-group-btn>.btn{height:30px;line-height:30px}textarea.input-group-sm>.form-control,textarea.input-group-sm>.input-group-addon,textarea.input-group-sm>.input-group-btn>.btn{height:auto}.input-group-addon,.input-group-btn,.input-group .form-control{display:table-cell}.input-group-addon:not(:first-child):not(:last-child),.input-group-btn:not(:first-child):not(:last-child),.input-group .form-control:not(:first-child):not(:last-child){border-radius:0}.input-group-addon,.input-group-btn{width:1%;white-space:nowrap;vertical-align:middle}.input-group-addon{padding:6px 12px;font-size:14px;font-weight:normal;line-height:1;color:#555;text-align:center;background-color:#eee;border:1px solid #ccc;border-radius:4px}.input-group-addon.input-sm{padding:5px 10px;font-size:12px;border-radius:3px}.input-group-addon.input-lg{padding:10px 16px;font-size:18px;border-radius:6px}.input-group-addon input[type="radio"],.input-group-addon input[type="checkbox"]{margin-top:0}.input-group .form-control:first-child,.input-group-addon:first-child,.input-group-btn:first-child>.btn,.input-group-btn:first-child>.dropdown-toggle,.input-group-btn:last-child>.btn:not(:last-child):not(.dropdown-toggle){border-bottom-right-radius:0;border-top-right-radius:0}.input-group-addon:first-child{border-right:0}.input-group .form-control:last-child,.input-group-addon:last-child,.input-group-btn:last-child>.btn,.input-group-btn:last-child>.dropdown-toggle,.input-group-btn:first-child>.btn:not(:first-child){border-bottom-left-radius:0;border-top-left-radius:0}.input-group-addon:last-child{border-left:0}.input-group-btn{position:relative;white-space:nowrap}.input-group-btn:first-child>.btn{margin-right:-1px}.input-group-btn:last-child>.btn{margin-left:-1px}.input-group-btn>.btn{position:relative}.input-group-btn>.btn+.btn{margin-left:-4px}.input-group-btn>.btn:hover,.input-group-btn>.btn:active{z-index:2}.nav{margin-bottom:0;padding-left:0;list-style:none}.nav:before,.nav:after{content:" ";display:table}.nav:after{clear:both}.nav:before,.nav:after{content:" ";display:table}.nav:after{clear:both}.nav>li{position:relative;display:block}.nav>li>a{position:relative;display:block;padding:7px 12px}.nav>li>a:hover,.nav>li>a:focus{text-decoration:none;background-color:#eee}.nav>li.disabled>a{color:#999}.nav>li.disabled>a:hover,.nav>li.disabled>a:focus{color:#999;text-decoration:none;background-color:transparent;cursor:not-allowed}.nav .open>a,.nav .open>a:hover,.nav .open>a:focus{background-color:#eee;border-color:#428bca}.nav .nav-divider{height:1px;margin:9px 0;overflow:hidden;background-color:#e5e5e5}.nav>li>a>img{max-width:none}.nav-tabs{border-bottom:1px solid #ddd}.nav-tabs>li{float:left;margin-bottom:-1px}.nav-tabs>li>a{margin-right:2px;line-height:1.42857143;border:1px solid transparent;border-radius:4px 4px 0 0}.nav-tabs>li>a:hover{border-color:#eee #eee #ddd}.nav-tabs>li.active>a,.nav-tabs>li.active>a:hover,.nav-tabs>li.active>a:focus{color:#555;background-color:#fff;border:1px solid #ddd;border-bottom-color:transparent;cursor:default}.nav-tabs.nav-justified{width:100%;border-bottom:0}.nav-tabs.nav-justified>li{float:none}.nav-tabs.nav-justified>li>a{text-align:center;margin-bottom:5px}.nav-tabs.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media (min-width:768px){.nav-tabs.nav-justified>li{display:table-cell;width:1%}.nav-tabs.nav-justified>li>a{margin-bottom:0}}.nav-tabs.nav-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:hover,.nav-tabs.nav-justified>.active>a:focus{border:1px solid #ddd}@media (min-width:768px){.nav-tabs.nav-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs.nav-justified>.active>a,.nav-tabs.nav-justified>.active>a:hover,.nav-tabs.nav-justified>.active>a:focus{border-bottom-color:#fff}}.nav-pills>li{float:left}.nav-pills>li>a{border-radius:4px}.nav-pills>li+li{margin-left:2px}.nav-pills>li.active>a,.nav-pills>li.active>a:hover,.nav-pills>li.active>a:focus{color:#fff;background-color:#428bca}.nav-stacked>li{float:none}.nav-stacked>li+li{margin-top:2px;margin-left:0}.nav-justified{width:100%}.nav-justified>li{float:none}.nav-justified>li>a{text-align:center;margin-bottom:5px}.nav-justified>.dropdown .dropdown-menu{top:auto;left:auto}@media (min-width:768px){.nav-justified>li{display:table-cell;width:1%}.nav-justified>li>a{margin-bottom:0}}.nav-tabs-justified{border-bottom:0}.nav-tabs-justified>li>a{margin-right:0;border-radius:4px}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:hover,.nav-tabs-justified>.active>a:focus{border:1px solid #ddd}@media (min-width:768px){.nav-tabs-justified>li>a{border-bottom:1px solid #ddd;border-radius:4px 4px 0 0}.nav-tabs-justified>.active>a,.nav-tabs-justified>.active>a:hover,.nav-tabs-justified>.active>a:focus{border-bottom-color:#fff}}.tab-content>.tab-pane{display:none}.tab-content>.active{display:block}.nav-tabs .dropdown-menu{margin-top:-1px;border-top-right-radius:0;border-top-left-radius:0}.navbar{position:relative;min-height:40px;margin-bottom:20px;border:1px solid transparent}.navbar:before,.navbar:after{content:" ";display:table}.navbar:after{clear:both}.navbar:before,.navbar:after{content:" ";display:table}.navbar:after{clear:both}@media (min-width:768px){.navbar{border-radius:4px}}.navbar-header:before,.navbar-header:after{content:" ";display:table}.navbar-header:after{clear:both}.navbar-header:before,.navbar-header:after{content:" ";display:table}.navbar-header:after{clear:both}@media (min-width:768px){.navbar-header{float:left}}.navbar-collapse{max-height:340px;overflow-x:visible;padding-right:15px;padding-left:15px;border-top:1px solid transparent;box-shadow:inset 0 1px 0 rgba(255,255,255,0.1);-webkit-overflow-scrolling:touch}.navbar-collapse:before,.navbar-collapse:after{content:" ";display:table}.navbar-collapse:after{clear:both}.navbar-collapse:before,.navbar-collapse:after{content:" ";display:table}.navbar-collapse:after{clear:both}.navbar-collapse.in{overflow-y:auto}@media (min-width:768px){.navbar-collapse{width:auto;border-top:0;box-shadow:none}.navbar-collapse.collapse{display:block !important;height:auto !important;padding-bottom:0;overflow:visible !important}.navbar-collapse.in{overflow-y:visible}.navbar-fixed-top .navbar-collapse,.navbar-static-top .navbar-collapse,.navbar-fixed-bottom .navbar-collapse{padding-left:0;padding-right:0}}.container>.navbar-header,.container>.navbar-collapse{margin-right:-15px;margin-left:-15px}@media (min-width:768px){.container>.navbar-header,.container>.navbar-collapse{margin-right:0;margin-left:0}}.navbar-static-top{z-index:1000;border-width:0 0 1px}@media (min-width:768px){.navbar-static-top{border-radius:0}}.navbar-fixed-top,.navbar-fixed-bottom{position:fixed;right:0;left:0;z-index:1030}@media (min-width:768px){.navbar-fixed-top,.navbar-fixed-bottom{border-radius:0}}.navbar-fixed-top{top:0;border-width:0 0 1px}.navbar-fixed-bottom{bottom:0;margin-bottom:0;border-width:1px 0 0}.navbar-brand{float:left;padding:10px 15px;font-size:18px;line-height:20px}.navbar-brand:hover,.navbar-brand:focus{text-decoration:none}@media (min-width:768px){.navbar>.container .navbar-brand{margin-left:-15px}}.navbar-toggle{position:relative;float:right;margin-right:15px;padding:9px 10px;margin-top:3px;margin-bottom:3px;background-color:transparent;background-image:none;border:1px solid transparent;border-radius:4px}.navbar-toggle .icon-bar{display:block;width:22px;height:2px;border-radius:1px}.navbar-toggle .icon-bar+.icon-bar{margin-top:4px}@media (min-width:768px){.navbar-toggle{display:none}}.navbar-nav{margin:5px -15px}.navbar-nav>li>a{padding-top:10px;padding-bottom:10px;line-height:20px}@media (max-width:767px){.navbar-nav .open .dropdown-menu{position:static;float:none;width:auto;margin-top:0;background-color:transparent;border:0;box-shadow:none}.navbar-nav .open .dropdown-menu>li>a,.navbar-nav .open .dropdown-menu .dropdown-header{padding:5px 15px 5px 25px}.navbar-nav .open .dropdown-menu>li>a{line-height:20px}.navbar-nav .open .dropdown-menu>li>a:hover,.navbar-nav .open .dropdown-menu>li>a:focus{background-image:none}}@media (min-width:768px){.navbar-nav{float:left;margin:0}.navbar-nav>li{float:left}.navbar-nav>li>a{padding-top:10px;padding-bottom:10px}.navbar-nav.navbar-right:last-child{margin-right:-15px}}@media (min-width:768px){.navbar-left{float:left !important}.navbar-right{float:right !important}}.navbar-form{margin-left:-15px;margin-right:-15px;padding:10px 15px;border-top:1px solid transparent;border-bottom:1px solid transparent;-webkit-box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.1);box-shadow:inset 0 1px 0 rgba(255,255,255,0.1),0 1px 0 rgba(255,255,255,0.1);margin-top:3px;margin-bottom:3px}@media (min-width:768px){.navbar-form .form-group{display:inline-block;margin-bottom:0;vertical-align:middle}.navbar-form .form-control{display:inline-block}.navbar-form select.form-control{width:auto}.navbar-form .radio,.navbar-form .checkbox{display:inline-block;margin-top:0;margin-bottom:0;padding-left:0}.navbar-form .radio input[type="radio"],.navbar-form .checkbox input[type="checkbox"]{float:none;margin-left:0}}@media (max-width:767px){.navbar-form .form-group{margin-bottom:5px}}@media (min-width:768px){.navbar-form{width:auto;border:0;margin-left:0;margin-right:0;padding-top:0;padding-bottom:0;-webkit-box-shadow:none;box-shadow:none}.navbar-form.navbar-right:last-child{margin-right:-15px}}.navbar-nav>li>.dropdown-menu{margin-top:0;border-top-right-radius:0;border-top-left-radius:0}.navbar-fixed-bottom .navbar-nav>li>.dropdown-menu{border-bottom-right-radius:0;border-bottom-left-radius:0}.navbar-nav.pull-right>li>.dropdown-menu,.navbar-nav>li>.dropdown-menu.pull-right{left:auto;right:0}.navbar-btn{margin-top:3px;margin-bottom:3px}.navbar-btn.btn-sm{margin-top:5px;margin-bottom:5px}.navbar-btn.btn-xs{margin-top:9px;margin-bottom:9px}.navbar-text{margin-top:10px;margin-bottom:10px}@media (min-width:768px){.navbar-text{float:left;margin-left:15px;margin-right:15px}.navbar-text.navbar-right:last-child{margin-right:0}}.navbar-default{background-color:#f8f8f8;border-color:#e7e7e7}.navbar-default .navbar-brand{color:#777}.navbar-default .navbar-brand:hover,.navbar-default .navbar-brand:focus{color:#5e5e5e;background-color:transparent}.navbar-default .navbar-text{color:#777}.navbar-default .navbar-nav>li>a{color:#777}.navbar-default .navbar-nav>li>a:hover,.navbar-default .navbar-nav>li>a:focus{color:#333;background-color:transparent}.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.active>a:hover,.navbar-default .navbar-nav>.active>a:focus{color:#555;background-color:#e7e7e7}.navbar-default .navbar-nav>.disabled>a,.navbar-default .navbar-nav>.disabled>a:hover,.navbar-default .navbar-nav>.disabled>a:focus{color:#ccc;background-color:transparent}.navbar-default .navbar-toggle{border-color:#ddd}.navbar-default .navbar-toggle:hover,.navbar-default .navbar-toggle:focus{background-color:#ddd}.navbar-default .navbar-toggle .icon-bar{background-color:#ccc}.navbar-default .navbar-collapse,.navbar-default .navbar-form{border-color:#e7e7e7}.navbar-default .navbar-nav>.open>a,.navbar-default .navbar-nav>.open>a:hover,.navbar-default .navbar-nav>.open>a:focus{background-color:#e7e7e7;color:#555}@media (max-width:767px){.navbar-default .navbar-nav .open .dropdown-menu>li>a{color:#777}.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover,.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus{color:#333;background-color:transparent}.navbar-default .navbar-nav .open .dropdown-menu>.active>a,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:hover,.navbar-default .navbar-nav .open .dropdown-menu>.active>a:focus{color:#555;background-color:#e7e7e7}.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:hover,.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:focus{color:#ccc;background-color:transparent}}.navbar-default .navbar-link{color:#777}.navbar-default .navbar-link:hover{color:#333}.navbar-inverse{background-color:#222;border-color:#080808}.navbar-inverse .navbar-brand{color:#999}.navbar-inverse .navbar-brand:hover,.navbar-inverse .navbar-brand:focus{color:#fff;background-color:transparent}.navbar-inverse .navbar-text{color:#999}.navbar-inverse .navbar-nav>li>a{color:#999}.navbar-inverse .navbar-nav>li>a:hover,.navbar-inverse .navbar-nav>li>a:focus{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav>.active>a,.navbar-inverse .navbar-nav>.active>a:hover,.navbar-inverse .navbar-nav>.active>a:focus{color:#fff;background-color:#080808}.navbar-inverse .navbar-nav>.disabled>a,.navbar-inverse .navbar-nav>.disabled>a:hover,.navbar-inverse .navbar-nav>.disabled>a:focus{color:#444;background-color:transparent}.navbar-inverse .navbar-toggle{border-color:#333}.navbar-inverse .navbar-toggle:hover,.navbar-inverse .navbar-toggle:focus{background-color:#333}.navbar-inverse .navbar-toggle .icon-bar{background-color:#fff}.navbar-inverse .navbar-collapse,.navbar-inverse .navbar-form{border-color:#101010}.navbar-inverse .navbar-nav>.open>a,.navbar-inverse .navbar-nav>.open>a:hover,.navbar-inverse .navbar-nav>.open>a:focus{background-color:#080808;color:#fff}@media (max-width:767px){.navbar-inverse .navbar-nav .open .dropdown-menu>.dropdown-header{border-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu .divider{background-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a{color:#999}.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:hover,.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:focus{color:#fff;background-color:transparent}.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:hover,.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:focus{color:#fff;background-color:#080808}.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:hover,.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:focus{color:#444;background-color:transparent}}.navbar-inverse .navbar-link{color:#999}.navbar-inverse .navbar-link:hover{color:#fff}.breadcrumb{padding:8px 15px;margin-bottom:20px;list-style:none;background-color:#f5f5f5;border-radius:4px}.breadcrumb>li{display:inline-block}.breadcrumb>li+li:before{content:"/\00a0";padding:0 5px;color:#ccc}.breadcrumb>.active{color:#999}.pagination{display:inline-block;padding-left:0;margin:20px 0;border-radius:4px}.pagination>li{display:inline}.pagination>li>a,.pagination>li>span{position:relative;float:left;padding:6px 12px;line-height:1.42857143;text-decoration:none;background-color:#fff;border:1px solid #ddd;margin-left:-1px}.pagination>li:first-child>a,.pagination>li:first-child>span{margin-left:0;border-bottom-left-radius:4px;border-top-left-radius:4px}.pagination>li:last-child>a,.pagination>li:last-child>span{border-bottom-right-radius:4px;border-top-right-radius:4px}.pagination>li>a:hover,.pagination>li>span:hover,.pagination>li>a:focus,.pagination>li>span:focus{background-color:#eee}.pagination>.active>a,.pagination>.active>span,.pagination>.active>a:hover,.pagination>.active>span:hover,.pagination>.active>a:focus,.pagination>.active>span:focus{z-index:2;color:#fff;background-color:#428bca;border-color:#428bca;cursor:default}.pagination>.disabled>span,.pagination>.disabled>span:hover,.pagination>.disabled>span:focus,.pagination>.disabled>a,.pagination>.disabled>a:hover,.pagination>.disabled>a:focus{color:#999;background-color:#fff;border-color:#ddd;cursor:not-allowed}.pagination-lg>li>a,.pagination-lg>li>span{padding:10px 16px;font-size:18px}.pagination-lg>li:first-child>a,.pagination-lg>li:first-child>span{border-bottom-left-radius:6px;border-top-left-radius:6px}.pagination-lg>li:last-child>a,.pagination-lg>li:last-child>span{border-bottom-right-radius:6px;border-top-right-radius:6px}.pagination-sm>li>a,.pagination-sm>li>span{padding:5px 10px;font-size:12px}.pagination-sm>li:first-child>a,.pagination-sm>li:first-child>span{border-bottom-left-radius:3px;border-top-left-radius:3px}.pagination-sm>li:last-child>a,.pagination-sm>li:last-child>span{border-bottom-right-radius:3px;border-top-right-radius:3px}.pager{padding-left:0;margin:20px 0;list-style:none;text-align:center}.pager:before,.pager:after{content:" ";display:table}.pager:after{clear:both}.pager:before,.pager:after{content:" ";display:table}.pager:after{clear:both}.pager li{display:inline}.pager li>a,.pager li>span{display:inline-block;padding:5px 14px;background-color:#fff;border:1px solid #ddd;border-radius:15px}.pager li>a:hover,.pager li>a:focus{text-decoration:none;background-color:#eee}.pager .next>a,.pager .next>span{float:right}.pager .previous>a,.pager .previous>span{float:left}.pager .disabled>a,.pager .disabled>a:hover,.pager .disabled>a:focus,.pager .disabled>span{color:#999;background-color:#fff;cursor:not-allowed}.label{display:inline;padding:.2em .6em .3em;font-size:75%;font-weight:bold;line-height:1;color:#fff;text-align:center;white-space:nowrap;vertical-align:baseline;border-radius:.25em}.label[href]:hover,.label[href]:focus{color:#fff;text-decoration:none;cursor:pointer}.label:empty{display:none}.btn .label{position:relative;top:-1px}.label-default{background-color:#999}.label-default[href]:hover,.label-default[href]:focus{background-color:#808080}.label-primary{background-color:#428bca}.label-primary[href]:hover,.label-primary[href]:focus{background-color:#3071a9}.label-success{background-color:#5cb85c}.label-success[href]:hover,.label-success[href]:focus{background-color:#449d44}.label-info{background-color:#5bc0de}.label-info[href]:hover,.label-info[href]:focus{background-color:#31b0d5}.label-warning{background-color:#f0ad4e}.label-warning[href]:hover,.label-warning[href]:focus{background-color:#ec971f}.label-danger{background-color:#d9534f}.label-danger[href]:hover,.label-danger[href]:focus{background-color:#c9302c}.badge{display:inline-block;min-width:10px;padding:3px 7px;font-size:12px;font-weight:bold;color:#fff;line-height:1;vertical-align:baseline;white-space:nowrap;text-align:center;background-color:#999;border-radius:10px}.badge:empty{display:none}.btn .badge{position:relative;top:-1px}a.badge:hover,a.badge:focus{color:#fff;text-decoration:none;cursor:pointer}a.list-group-item.active>.badge,.nav-pills>.active>a>.badge{color:#428bca;background-color:#fff}.nav-pills>li>a>.badge{margin-left:3px}.jumbotron{padding:30px;margin-bottom:30px;font-size:21px;font-weight:200;line-height:2.14285714;color:inherit;background-color:#eee}.jumbotron h1,.jumbotron .h1{line-height:1;color:inherit}.jumbotron p{line-height:1.4}.container .jumbotron{border-radius:6px}.jumbotron .container{max-width:100%}@media screen and (min-width:768px){.jumbotron{padding-top:48px;padding-bottom:48px}.container .jumbotron{padding-left:60px;padding-right:60px}.jumbotron h1,.jumbotron .h1{font-size:63px}}.thumbnail{display:block;padding:4px;margin-bottom:20px;line-height:1.42857143;background-color:#fff;border:1px solid #ddd;border-radius:4px;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.thumbnail>img,.thumbnail a>img{display:block;max-width:100%;height:auto;margin-left:auto;margin-right:auto}a.thumbnail:hover,a.thumbnail:focus,a.thumbnail.active{border-color:#428bca}.thumbnail .caption{padding:9px;color:#333}.alert{padding:15px;margin-bottom:20px;border:1px solid transparent;border-radius:4px}.alert h4{margin-top:0;color:inherit}.alert .alert-link{font-weight:bold}.alert>p,.alert>ul{margin-bottom:0}.alert>p+p{margin-top:5px}.alert-dismissable{padding-right:35px}.alert-dismissable .close{position:relative;top:-2px;right:-21px;color:inherit}.alert-success{background-color:#dff0d8;border-color:#d6e9c6;color:#3c763d}.alert-success hr{border-top-color:#c9e2b3}.alert-success .alert-link{color:#2b542c}.alert-info{background-color:#d9edf7;border-color:#bce8f1;color:#31708f}.alert-info hr{border-top-color:#a6e1ec}.alert-info .alert-link{color:#245269}.alert-warning{background-color:#fcf8e3;border-color:#faebcc;color:#8a6d3b}.alert-warning hr{border-top-color:#f7e1b5}.alert-warning .alert-link{color:#66512c}.alert-danger{background-color:#f2dede;border-color:#ebccd1;color:#a94442}.alert-danger hr{border-top-color:#e4b9c0}.alert-danger .alert-link{color:#843534}@-webkit-keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}@keyframes progress-bar-stripes{from{background-position:40px 0}to{background-position:0 0}}.progress{overflow:hidden;height:20px;margin-bottom:20px;background-color:#f5f5f5;border-radius:4px;-webkit-box-shadow:inset 0 1px 2px rgba(0,0,0,0.1);box-shadow:inset 0 1px 2px rgba(0,0,0,0.1)}.progress-bar{float:left;width:0%;height:100%;font-size:12px;line-height:20px;color:#fff;text-align:center;background-color:#428bca;-webkit-box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);box-shadow:inset 0 -1px 0 rgba(0,0,0,0.15);-webkit-transition:width .6s ease;transition:width .6s ease}.progress-striped .progress-bar{background-image:-webkit-linear-gradient(45deg, rgba(255,255,255,0.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,0.15) 50%, rgba(255,255,255,0.15) 75%, transparent 75%, transparent);background-image:linear-gradient(45deg, rgba(255,255,255,0.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,0.15) 50%, rgba(255,255,255,0.15) 75%, transparent 75%, transparent);background-size:40px 40px}.progress.active .progress-bar{-webkit-animation:progress-bar-stripes 2s linear infinite;animation:progress-bar-stripes 2s linear infinite}.progress-bar-success{background-color:#5cb85c}.progress-striped .progress-bar-success{background-image:-webkit-linear-gradient(45deg, rgba(255,255,255,0.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,0.15) 50%, rgba(255,255,255,0.15) 75%, transparent 75%, transparent);background-image:linear-gradient(45deg, rgba(255,255,255,0.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,0.15) 50%, rgba(255,255,255,0.15) 75%, transparent 75%, transparent)}.progress-bar-info{background-color:#5bc0de}.progress-striped .progress-bar-info{background-image:-webkit-linear-gradient(45deg, rgba(255,255,255,0.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,0.15) 50%, rgba(255,255,255,0.15) 75%, transparent 75%, transparent);background-image:linear-gradient(45deg, rgba(255,255,255,0.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,0.15) 50%, rgba(255,255,255,0.15) 75%, transparent 75%, transparent)}.progress-bar-warning{background-color:#f0ad4e}.progress-striped .progress-bar-warning{background-image:-webkit-linear-gradient(45deg, rgba(255,255,255,0.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,0.15) 50%, rgba(255,255,255,0.15) 75%, transparent 75%, transparent);background-image:linear-gradient(45deg, rgba(255,255,255,0.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,0.15) 50%, rgba(255,255,255,0.15) 75%, transparent 75%, transparent)}.progress-bar-danger{background-color:#d9534f}.progress-striped .progress-bar-danger{background-image:-webkit-linear-gradient(45deg, rgba(255,255,255,0.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,0.15) 50%, rgba(255,255,255,0.15) 75%, transparent 75%, transparent);background-image:linear-gradient(45deg, rgba(255,255,255,0.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,0.15) 50%, rgba(255,255,255,0.15) 75%, transparent 75%, transparent)}.media,.media-body{overflow:hidden;zoom:1}.media,.media .media{margin-top:15px}.media:first-child{margin-top:0}.media-object{display:block}.media-heading{margin:0 0 5px}.media>.pull-left{margin-right:10px}.media>.pull-right{margin-left:10px}.media-list{padding-left:0;list-style:none}.list-group{margin-bottom:20px;padding-left:0}.list-group-item{position:relative;display:block;padding:10px 15px;margin-bottom:-1px;background-color:#fff;border:1px solid #ddd}.list-group-item:first-child{border-top-right-radius:4px;border-top-left-radius:4px}.list-group-item:last-child{margin-bottom:0;border-bottom-right-radius:4px;border-bottom-left-radius:4px}.list-group-item>.badge{float:right}.list-group-item>.badge+.badge{margin-right:5px}a.list-group-item{color:#555}a.list-group-item .list-group-item-heading{color:#333}a.list-group-item:hover,a.list-group-item:focus{text-decoration:none;background-color:#f5f5f5}a.list-group-item.active,a.list-group-item.active:hover,a.list-group-item.active:focus{z-index:2;color:#fff;background-color:#428bca;border-color:#428bca}a.list-group-item.active .list-group-item-heading,a.list-group-item.active:hover .list-group-item-heading,a.list-group-item.active:focus .list-group-item-heading{color:inherit}a.list-group-item.active .list-group-item-text,a.list-group-item.active:hover .list-group-item-text,a.list-group-item.active:focus .list-group-item-text{color:#e1edf7}.list-group-item-heading{margin-top:0;margin-bottom:5px}.list-group-item-text{margin-bottom:0;line-height:1.3}.panel{margin-bottom:20px;background-color:#fff;border:1px solid transparent;border-radius:4px;-webkit-box-shadow:0 1px 1px rgba(0,0,0,0.05);box-shadow:0 1px 1px rgba(0,0,0,0.05)}.panel-body{padding:15px}.panel-body:before,.panel-body:after{content:" ";display:table}.panel-body:after{clear:both}.panel-body:before,.panel-body:after{content:" ";display:table}.panel-body:after{clear:both}.panel>.list-group{margin-bottom:0}.panel>.list-group .list-group-item{border-width:1px 0}.panel>.list-group .list-group-item:first-child{border-top-right-radius:0;border-top-left-radius:0}.panel>.list-group .list-group-item:last-child{border-bottom:0}.panel-heading+.list-group .list-group-item:first-child{border-top-width:0}.panel>.table,.panel>.table-responsive>.table{margin-bottom:0}.panel>.panel-body+.table,.panel>.panel-body+.table-responsive{border-top:1px solid #ddd}.panel>.table>tbody:first-child th,.panel>.table>tbody:first-child td{border-top:0}.panel>.table-bordered,.panel>.table-responsive>.table-bordered{border:0}.panel>.table-bordered>thead>tr>th:first-child,.panel>.table-responsive>.table-bordered>thead>tr>th:first-child,.panel>.table-bordered>tbody>tr>th:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:first-child,.panel>.table-bordered>tfoot>tr>th:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:first-child,.panel>.table-bordered>thead>tr>td:first-child,.panel>.table-responsive>.table-bordered>thead>tr>td:first-child,.panel>.table-bordered>tbody>tr>td:first-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:first-child,.panel>.table-bordered>tfoot>tr>td:first-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:first-child{border-left:0}.panel>.table-bordered>thead>tr>th:last-child,.panel>.table-responsive>.table-bordered>thead>tr>th:last-child,.panel>.table-bordered>tbody>tr>th:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>th:last-child,.panel>.table-bordered>tfoot>tr>th:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>th:last-child,.panel>.table-bordered>thead>tr>td:last-child,.panel>.table-responsive>.table-bordered>thead>tr>td:last-child,.panel>.table-bordered>tbody>tr>td:last-child,.panel>.table-responsive>.table-bordered>tbody>tr>td:last-child,.panel>.table-bordered>tfoot>tr>td:last-child,.panel>.table-responsive>.table-bordered>tfoot>tr>td:last-child{border-right:0}.panel>.table-bordered>thead>tr:last-child>th,.panel>.table-responsive>.table-bordered>thead>tr:last-child>th,.panel>.table-bordered>tbody>tr:last-child>th,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>th,.panel>.table-bordered>tfoot>tr:last-child>th,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>th,.panel>.table-bordered>thead>tr:last-child>td,.panel>.table-responsive>.table-bordered>thead>tr:last-child>td,.panel>.table-bordered>tbody>tr:last-child>td,.panel>.table-responsive>.table-bordered>tbody>tr:last-child>td,.panel>.table-bordered>tfoot>tr:last-child>td,.panel>.table-responsive>.table-bordered>tfoot>tr:last-child>td{border-bottom:0}.panel>.table-responsive{border:0;margin-bottom:0}.panel-heading{padding:10px 15px;border-bottom:1px solid transparent;border-top-right-radius:3px;border-top-left-radius:3px}.panel-heading>.dropdown .dropdown-toggle{color:inherit}.panel-title{margin-top:0;margin-bottom:0;font-size:16px;color:inherit}.panel-title>a{color:inherit}.panel-footer{padding:10px 15px;background-color:#f5f5f5;border-top:1px solid #ddd;border-bottom-right-radius:3px;border-bottom-left-radius:3px}.panel-group .panel{margin-bottom:0;border-radius:4px;overflow:hidden}.panel-group .panel+.panel{margin-top:5px}.panel-group .panel-heading{border-bottom:0}.panel-group .panel-heading+.panel-collapse .panel-body{border-top:1px solid #ddd}.panel-group .panel-footer{border-top:0}.panel-group .panel-footer+.panel-collapse .panel-body{border-bottom:1px solid #ddd}.panel-default{border-color:#ddd}.panel-default>.panel-heading{color:#333;background-color:#f5f5f5;border-color:#ddd}.panel-default>.panel-heading+.panel-collapse .panel-body{border-top-color:#ddd}.panel-default>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#ddd}.panel-primary{border-color:#428bca}.panel-primary>.panel-heading{color:#fff;background-color:#428bca;border-color:#428bca}.panel-primary>.panel-heading+.panel-collapse .panel-body{border-top-color:#428bca}.panel-primary>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#428bca}.panel-success{border-color:#d6e9c6}.panel-success>.panel-heading{color:#3c763d;background-color:#dff0d8;border-color:#d6e9c6}.panel-success>.panel-heading+.panel-collapse .panel-body{border-top-color:#d6e9c6}.panel-success>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#d6e9c6}.panel-warning{border-color:#faebcc}.panel-warning>.panel-heading{color:#8a6d3b;background-color:#fcf8e3;border-color:#faebcc}.panel-warning>.panel-heading+.panel-collapse .panel-body{border-top-color:#faebcc}.panel-warning>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#faebcc}.panel-danger{border-color:#ebccd1}.panel-danger>.panel-heading{color:#a94442;background-color:#f2dede;border-color:#ebccd1}.panel-danger>.panel-heading+.panel-collapse .panel-body{border-top-color:#ebccd1}.panel-danger>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#ebccd1}.panel-info{border-color:#bce8f1}.panel-info>.panel-heading{color:#31708f;background-color:#d9edf7;border-color:#bce8f1}.panel-info>.panel-heading+.panel-collapse .panel-body{border-top-color:#bce8f1}.panel-info>.panel-footer+.panel-collapse .panel-body{border-bottom-color:#bce8f1}.well{min-height:20px;padding:19px;margin-bottom:20px;background-color:#f5f5f5;border:1px solid #e3e3e3;border-radius:4px;-webkit-box-shadow:inset 0 1px 1px rgba(0,0,0,0.05);box-shadow:inset 0 1px 1px rgba(0,0,0,0.05)}.well blockquote{border-color:#ddd;border-color:rgba(0,0,0,0.15)}.well-lg{padding:24px;border-radius:6px}.well-sm{padding:9px;border-radius:3px}.close{float:right;font-size:21px;font-weight:bold;line-height:1;color:#000;text-shadow:0 1px 0 #fff;opacity:.2;filter:alpha(opacity=20)}.close:hover,.close:focus{color:#000;text-decoration:none;cursor:pointer;opacity:.5;filter:alpha(opacity=50)}button.close{padding:0;cursor:pointer;background:transparent;border:0;-webkit-appearance:none}.modal-open{overflow:hidden}.modal{display:none;overflow:auto;overflow-y:scroll;position:fixed;top:0;right:0;bottom:0;left:0;z-index:1040}.modal.fade .modal-dialog{-webkit-transform:translate(0, -25%);-ms-transform:translate(0, -25%);transform:translate(0, -25%);-webkit-transition:-webkit-transform 0.3s ease-out;-moz-transition:-moz-transform 0.3s ease-out;-o-transition:-o-transform 0.3s ease-out;transition:transform 0.3s ease-out}.modal.in .modal-dialog{-webkit-transform:translate(0, 0);-ms-transform:translate(0, 0);transform:translate(0, 0)}.modal-dialog{position:relative;width:auto;margin:10px;z-index:1050}.modal-content{position:relative;background-color:#fff;border:1px solid #999;border:1px solid rgba(0,0,0,0.2);border-radius:6px;-webkit-box-shadow:0 3px 9px rgba(0,0,0,0.5);box-shadow:0 3px 9px rgba(0,0,0,0.5);background-clip:padding-box;outline:none}.modal-backdrop{position:fixed;top:0;right:0;bottom:0;left:0;z-index:1030;background-color:#000}.modal-backdrop.fade{opacity:0;filter:alpha(opacity=0)}.modal-backdrop.in{opacity:.5;filter:alpha(opacity=50)}.modal-header{padding:15px;border-bottom:1px solid #e5e5e5;min-height:16.42857143px}.modal-header .close{margin-top:-2px}.modal-title{margin:0;line-height:1.42857143}.modal-body{position:relative;padding:20px}.modal-footer{margin-top:15px;padding:19px 20px 20px;text-align:right;border-top:1px solid #e5e5e5}.modal-footer:before,.modal-footer:after{content:" ";display:table}.modal-footer:after{clear:both}.modal-footer:before,.modal-footer:after{content:" ";display:table}.modal-footer:after{clear:both}.modal-footer .btn+.btn{margin-left:5px;margin-bottom:0}.modal-footer .btn-group .btn+.btn{margin-left:-1px}.modal-footer .btn-block+.btn-block{margin-left:0}@media screen and (min-width:768px){.modal-dialog{width:600px;margin:30px auto}.modal-content{-webkit-box-shadow:0 5px 15px rgba(0,0,0,0.5);box-shadow:0 5px 15px rgba(0,0,0,0.5)}}.tooltip{position:absolute;z-index:1030;display:block;visibility:visible;font-size:12px;line-height:1.4;opacity:0;filter:alpha(opacity=0)}.tooltip.in{opacity:.9;filter:alpha(opacity=90)}.tooltip.top{margin-top:-3px;padding:5px 0}.tooltip.right{margin-left:3px;padding:0 5px}.tooltip.bottom{margin-top:3px;padding:5px 0}.tooltip.left{margin-left:-3px;padding:0 5px}.tooltip-inner{max-width:200px;padding:3px 8px;color:#fff;text-align:center;text-decoration:none;background-color:#000;border-radius:4px}.tooltip-arrow{position:absolute;width:0;height:0;border-color:transparent;border-style:solid}.tooltip.top .tooltip-arrow{bottom:0;left:50%;margin-left:-5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-left .tooltip-arrow{bottom:0;left:5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.top-right .tooltip-arrow{bottom:0;right:5px;border-width:5px 5px 0;border-top-color:#000}.tooltip.right .tooltip-arrow{top:50%;left:0;margin-top:-5px;border-width:5px 5px 5px 0;border-right-color:#000}.tooltip.left .tooltip-arrow{top:50%;right:0;margin-top:-5px;border-width:5px 0 5px 5px;border-left-color:#000}.tooltip.bottom .tooltip-arrow{top:0;left:50%;margin-left:-5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-left .tooltip-arrow{top:0;left:5px;border-width:0 5px 5px;border-bottom-color:#000}.tooltip.bottom-right .tooltip-arrow{top:0;right:5px;border-width:0 5px 5px;border-bottom-color:#000}.popover{position:absolute;top:0;left:0;z-index:1010;display:none;max-width:276px;padding:1px;text-align:left;background-color:#fff;background-clip:padding-box;border:1px solid #ccc;border:1px solid rgba(0,0,0,0.2);border-radius:6px;-webkit-box-shadow:0 5px 10px rgba(0,0,0,0.2);box-shadow:0 5px 10px rgba(0,0,0,0.2);white-space:normal}.popover.top{margin-top:-10px}.popover.right{margin-left:10px}.popover.bottom{margin-top:10px}.popover.left{margin-left:-10px}.popover-title{margin:0;padding:8px 14px;font-size:14px;font-weight:normal;line-height:18px;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-radius:5px 5px 0 0}.popover-content{padding:9px 14px}.popover .arrow,.popover .arrow:after{position:absolute;display:block;width:0;height:0;border-color:transparent;border-style:solid}.popover .arrow{border-width:11px}.popover .arrow:after{border-width:10px;content:""}.popover.top .arrow{left:50%;margin-left:-11px;border-bottom-width:0;border-top-color:#999;border-top-color:rgba(0,0,0,0.25);bottom:-11px}.popover.top .arrow:after{content:" ";bottom:1px;margin-left:-10px;border-bottom-width:0;border-top-color:#fff}.popover.right .arrow{top:50%;left:-11px;margin-top:-11px;border-left-width:0;border-right-color:#999;border-right-color:rgba(0,0,0,0.25)}.popover.right .arrow:after{content:" ";left:1px;bottom:-10px;border-left-width:0;border-right-color:#fff}.popover.bottom .arrow{left:50%;margin-left:-11px;border-top-width:0;border-bottom-color:#999;border-bottom-color:rgba(0,0,0,0.25);top:-11px}.popover.bottom .arrow:after{content:" ";top:1px;margin-left:-10px;border-top-width:0;border-bottom-color:#fff}.popover.left .arrow{top:50%;right:-11px;margin-top:-11px;border-right-width:0;border-left-color:#999;border-left-color:rgba(0,0,0,0.25)}.popover.left .arrow:after{content:" ";right:1px;border-right-width:0;border-left-color:#fff;bottom:-10px}.carousel{position:relative}.carousel-inner{position:relative;overflow:hidden;width:100%}.carousel-inner>.item{display:none;position:relative;-webkit-transition:.6s ease-in-out left;transition:.6s ease-in-out left}.carousel-inner>.item>img,.carousel-inner>.item>a>img{display:block;max-width:100%;height:auto;line-height:1}.carousel-inner>.active,.carousel-inner>.next,.carousel-inner>.prev{display:block}.carousel-inner>.active{left:0}.carousel-inner>.next,.carousel-inner>.prev{position:absolute;top:0;width:100%}.carousel-inner>.next{left:100%}.carousel-inner>.prev{left:-100%}.carousel-inner>.next.left,.carousel-inner>.prev.right{left:0}.carousel-inner>.active.left{left:-100%}.carousel-inner>.active.right{left:100%}.carousel-control{position:absolute;top:0;left:0;bottom:0;width:15%;opacity:.5;filter:alpha(opacity=50);font-size:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,0.6)}.carousel-control.left{background-image:-webkit-linear-gradient(left, color-stop(rgba(0,0,0,0.5) 0), color-stop(rgba(0,0,0,0.0001) 100%));background-image:linear-gradient(to right, rgba(0,0,0,0.5) 0, rgba(0,0,0,0.0001) 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1)}.carousel-control.right{left:auto;right:0;background-image:-webkit-linear-gradient(left, color-stop(rgba(0,0,0,0.0001) 0), color-stop(rgba(0,0,0,0.5) 100%));background-image:linear-gradient(to right, rgba(0,0,0,0.0001) 0, rgba(0,0,0,0.5) 100%);background-repeat:repeat-x;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1)}.carousel-control:hover,.carousel-control:focus{outline:none;color:#fff;text-decoration:none;opacity:.9;filter:alpha(opacity=90)}.carousel-control .icon-prev,.carousel-control .icon-next,.carousel-control .glyphicon-chevron-left,.carousel-control .glyphicon-chevron-right{position:absolute;top:50%;z-index:5;display:inline-block}.carousel-control .icon-prev,.carousel-control .glyphicon-chevron-left{left:50%}.carousel-control .icon-next,.carousel-control .glyphicon-chevron-right{right:50%}.carousel-control .icon-prev,.carousel-control .icon-next{width:20px;height:20px;margin-top:-10px;margin-left:-10px;font-family:serif}.carousel-control .icon-prev:before{content:'\2039'}.carousel-control .icon-next:before{content:'\203a'}.carousel-indicators{position:absolute;bottom:10px;left:50%;z-index:15;width:60%;margin-left:-30%;padding-left:0;list-style:none;text-align:center}.carousel-indicators li{display:inline-block;width:10px;height:10px;margin:1px;text-indent:-999px;border:1px solid #fff;border-radius:10px;cursor:pointer;background-color:#000 \9;background-color:rgba(0,0,0,0)}.carousel-indicators .active{margin:0;width:12px;height:12px;background-color:#fff}.carousel-caption{position:absolute;left:15%;right:15%;bottom:20px;z-index:10;padding-top:20px;padding-bottom:20px;color:#fff;text-align:center;text-shadow:0 1px 2px rgba(0,0,0,0.6)}.carousel-caption .btn{text-shadow:none}@media screen and (min-width:768px){.carousel-control .glyphicons-chevron-left,.carousel-control .glyphicons-chevron-right,.carousel-control .icon-prev,.carousel-control .icon-next{width:30px;height:30px;margin-top:-15px;margin-left:-15px;font-size:30px}.carousel-caption{left:20%;right:20%;padding-bottom:30px}.carousel-indicators{bottom:20px}}.clearfix:before,.clearfix:after{content:" ";display:table}.clearfix:after{clear:both}.center-block{display:block;margin-left:auto;margin-right:auto}.pull-right{float:right !important}.pull-left{float:left !important}.hide{display:none !important}.show{display:block !important}.invisible{visibility:hidden}.text-hide{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;border:0}.hidden{display:none !important;visibility:hidden !important}.affix{position:fixed}@-ms-viewport{width:device-width}.visible-xs,tr.visible-xs,th.visible-xs,td.visible-xs{display:none !important}@media (max-width:767px){.visible-xs{display:block !important}table.visible-xs{display:table}tr.visible-xs{display:table-row !important}th.visible-xs,td.visible-xs{display:table-cell !important}}@media (min-width:768px) and (max-width:991px){.visible-xs.visible-sm{display:block !important}table.visible-xs.visible-sm{display:table}tr.visible-xs.visible-sm{display:table-row !important}th.visible-xs.visible-sm,td.visible-xs.visible-sm{display:table-cell !important}}@media (min-width:992px) and (max-width:1199px){.visible-xs.visible-md{display:block !important}table.visible-xs.visible-md{display:table}tr.visible-xs.visible-md{display:table-row !important}th.visible-xs.visible-md,td.visible-xs.visible-md{display:table-cell !important}}@media (min-width:1200px){.visible-xs.visible-lg{display:block !important}table.visible-xs.visible-lg{display:table}tr.visible-xs.visible-lg{display:table-row !important}th.visible-xs.visible-lg,td.visible-xs.visible-lg{display:table-cell !important}}.visible-sm,tr.visible-sm,th.visible-sm,td.visible-sm{display:none !important}@media (max-width:767px){.visible-sm.visible-xs{display:block !important}table.visible-sm.visible-xs{display:table}tr.visible-sm.visible-xs{display:table-row !important}th.visible-sm.visible-xs,td.visible-sm.visible-xs{display:table-cell !important}}@media (min-width:768px) and (max-width:991px){.visible-sm{display:block !important}table.visible-sm{display:table}tr.visible-sm{display:table-row !important}th.visible-sm,td.visible-sm{display:table-cell !important}}@media (min-width:992px) and (max-width:1199px){.visible-sm.visible-md{display:block !important}table.visible-sm.visible-md{display:table}tr.visible-sm.visible-md{display:table-row !important}th.visible-sm.visible-md,td.visible-sm.visible-md{display:table-cell !important}}@media (min-width:1200px){.visible-sm.visible-lg{display:block !important}table.visible-sm.visible-lg{display:table}tr.visible-sm.visible-lg{display:table-row !important}th.visible-sm.visible-lg,td.visible-sm.visible-lg{display:table-cell !important}}.visible-md,tr.visible-md,th.visible-md,td.visible-md{display:none !important}@media (max-width:767px){.visible-md.visible-xs{display:block !important}table.visible-md.visible-xs{display:table}tr.visible-md.visible-xs{display:table-row !important}th.visible-md.visible-xs,td.visible-md.visible-xs{display:table-cell !important}}@media (min-width:768px) and (max-width:991px){.visible-md.visible-sm{display:block !important}table.visible-md.visible-sm{display:table}tr.visible-md.visible-sm{display:table-row !important}th.visible-md.visible-sm,td.visible-md.visible-sm{display:table-cell !important}}@media (min-width:992px) and (max-width:1199px){.visible-md{display:block !important}table.visible-md{display:table}tr.visible-md{display:table-row !important}th.visible-md,td.visible-md{display:table-cell !important}}@media (min-width:1200px){.visible-md.visible-lg{display:block !important}table.visible-md.visible-lg{display:table}tr.visible-md.visible-lg{display:table-row !important}th.visible-md.visible-lg,td.visible-md.visible-lg{display:table-cell !important}}.visible-lg,tr.visible-lg,th.visible-lg,td.visible-lg{display:none !important}@media (max-width:767px){.visible-lg.visible-xs{display:block !important}table.visible-lg.visible-xs{display:table}tr.visible-lg.visible-xs{display:table-row !important}th.visible-lg.visible-xs,td.visible-lg.visible-xs{display:table-cell !important}}@media (min-width:768px) and (max-width:991px){.visible-lg.visible-sm{display:block !important}table.visible-lg.visible-sm{display:table}tr.visible-lg.visible-sm{display:table-row !important}th.visible-lg.visible-sm,td.visible-lg.visible-sm{display:table-cell !important}}@media (min-width:992px) and (max-width:1199px){.visible-lg.visible-md{display:block !important}table.visible-lg.visible-md{display:table}tr.visible-lg.visible-md{display:table-row !important}th.visible-lg.visible-md,td.visible-lg.visible-md{display:table-cell !important}}@media (min-width:1200px){.visible-lg{display:block !important}table.visible-lg{display:table}tr.visible-lg{display:table-row !important}th.visible-lg,td.visible-lg{display:table-cell !important}}.hidden-xs{display:block !important}table.hidden-xs{display:table}tr.hidden-xs{display:table-row !important}th.hidden-xs,td.hidden-xs{display:table-cell !important}@media (max-width:767px){.hidden-xs,tr.hidden-xs,th.hidden-xs,td.hidden-xs{display:none !important}}@media (min-width:768px) and (max-width:991px){.hidden-xs.hidden-sm,tr.hidden-xs.hidden-sm,th.hidden-xs.hidden-sm,td.hidden-xs.hidden-sm{display:none !important}}@media (min-width:992px) and (max-width:1199px){.hidden-xs.hidden-md,tr.hidden-xs.hidden-md,th.hidden-xs.hidden-md,td.hidden-xs.hidden-md{display:none !important}}@media (min-width:1200px){.hidden-xs.hidden-lg,tr.hidden-xs.hidden-lg,th.hidden-xs.hidden-lg,td.hidden-xs.hidden-lg{display:none !important}}.hidden-sm{display:block !important}table.hidden-sm{display:table}tr.hidden-sm{display:table-row !important}th.hidden-sm,td.hidden-sm{display:table-cell !important}@media (max-width:767px){.hidden-sm.hidden-xs,tr.hidden-sm.hidden-xs,th.hidden-sm.hidden-xs,td.hidden-sm.hidden-xs{display:none !important}}@media (min-width:768px) and (max-width:991px){.hidden-sm,tr.hidden-sm,th.hidden-sm,td.hidden-sm{display:none !important}}@media (min-width:992px) and (max-width:1199px){.hidden-sm.hidden-md,tr.hidden-sm.hidden-md,th.hidden-sm.hidden-md,td.hidden-sm.hidden-md{display:none !important}}@media (min-width:1200px){.hidden-sm.hidden-lg,tr.hidden-sm.hidden-lg,th.hidden-sm.hidden-lg,td.hidden-sm.hidden-lg{display:none !important}}.hidden-md{display:block !important}table.hidden-md{display:table}tr.hidden-md{display:table-row !important}th.hidden-md,td.hidden-md{display:table-cell !important}@media (max-width:767px){.hidden-md.hidden-xs,tr.hidden-md.hidden-xs,th.hidden-md.hidden-xs,td.hidden-md.hidden-xs{display:none !important}}@media (min-width:768px) and (max-width:991px){.hidden-md.hidden-sm,tr.hidden-md.hidden-sm,th.hidden-md.hidden-sm,td.hidden-md.hidden-sm{display:none !important}}@media (min-width:992px) and (max-width:1199px){.hidden-md,tr.hidden-md,th.hidden-md,td.hidden-md{display:none !important}}@media (min-width:1200px){.hidden-md.hidden-lg,tr.hidden-md.hidden-lg,th.hidden-md.hidden-lg,td.hidden-md.hidden-lg{display:none !important}}.hidden-lg{display:block !important}table.hidden-lg{display:table}tr.hidden-lg{display:table-row !important}th.hidden-lg,td.hidden-lg{display:table-cell !important}@media (max-width:767px){.hidden-lg.hidden-xs,tr.hidden-lg.hidden-xs,th.hidden-lg.hidden-xs,td.hidden-lg.hidden-xs{display:none !important}}@media (min-width:768px) and (max-width:991px){.hidden-lg.hidden-sm,tr.hidden-lg.hidden-sm,th.hidden-lg.hidden-sm,td.hidden-lg.hidden-sm{display:none !important}}@media (min-width:992px) and (max-width:1199px){.hidden-lg.hidden-md,tr.hidden-lg.hidden-md,th.hidden-lg.hidden-md,td.hidden-lg.hidden-md{display:none !important}}@media (min-width:1200px){.hidden-lg,tr.hidden-lg,th.hidden-lg,td.hidden-lg{display:none !important}}.visible-print,tr.visible-print,th.visible-print,td.visible-print{display:none !important}@media print{.visible-print{display:block !important}table.visible-print{display:table}tr.visible-print{display:table-row !important}th.visible-print,td.visible-print{display:table-cell !important}.hidden-print,tr.hidden-print,th.hidden-print,td.hidden-print{display:none !important}}</css>
      </bootstrap>
    </cssTemplates>
  </bootstrap>
  <backboneBuilder>
    <description>
      <![CDATA[ backboneBuilder is the application where applications (application schemas) are created. ]]>
    </description>
    <actorGroups>
      <viewOnly>
        <name>viewers</name>
        <description>
          <![CDATA[ This group can only view the app. ]]>
        </description>
      </viewOnly>
      <editors>
        <name>editors</name>
        <description>
          <![CDATA[ This group can edit and delete the app.  ]]>
        </description>
      </editors>
      <creators>
        <name>creators</name>
        <description>
          <![CDATA[ This group can create the app. ]]>
        </description>
      </creators>
    </actorGroups>
    <clientScripts>
      <utils>
        <devCode>
          <![CDATA[
/**
 * get the full client workspace
 */
pebble.libs.backboneBuilder.getDs = function(ctrl, cb) {
		var obj = new pebble.Pebble();
		var params = obj.getParams();
		params.setRef(".", "CW.getDs");
		params.setRef("path", "theModel.clientWorkspace");
		ctrl.retrieving = true;
		obj.setCallback(function(data) {
			cb(data);
			ctrl.retrieving = false;
		});
		ctrl.resolve(obj);
};

]]>
        </devCode>
      </utils>
      <defaultProxy>
        <devCode>
          <![CDATA[
(function (){

if (pebble.isDev) {

  //CommSimulator and WebSocketImpl_PageToPage are defined in client.html
  pebble.serverProxies["SERVER"] = new pebble.libs.standard.ServerProxy(new CommSimulator(), new WebSocketImpl_PageToPage());
  
} else {

	//CommSimulator and WebSocketImpl_PageToPage are defined in client.html
	pebble.serverProxies["SERVER"] = new pebble.libs.standard.ServerProxy(new CommImpl(), new WebSocketGenericImpl());
}


})();
]]>
        </devCode>
      </defaultProxy>
      <clientWorkspace>
        <devCode>
          <![CDATA[
(function (){

/**
 * @constructor
 */
function Service(ws, ds) {
	pebble.shared.ServerControl.call(this, ws, ds);
}

pebble.inherits(Service, pebble.shared.ServerControl);

/**
 * @param {string} funcName
 * @param {pebble.Pebble} obj
 * @return {number}
 * @override
 */
Service.prototype.executeMethod = function(funcName, obj, deployment) {
  this.deployment = deployment;
	var ret = 1;
	//list all ui public methods
	if (funcName == "replaceDs") {
		this.replaceDs(obj);
	} else if (funcName == "getDs") {
		this.getDs(obj);
	} else if (funcName == "generateIndexes") {
		this.generateIndexes(obj);
	} else {
		return Service.superClass_.executeMethod.call(this, funcName, obj, deployment);
	}
	return ret;
};
/**
 * @param {pebble.Pebble} obj
 */
Service.prototype.replaceDs = function(obj) {
	var params = obj.getParams();
	var app = params.get("app");
	var collection = params.getRef("collection");
	this.ds.addDs(collection, app);
};

Service.prototype.getDs = function(obj) {
	var params = obj.getParams();
	var path = params.getRef("path");
	obj.set(".", this.ds.getDs(path));
};
/**
 * @param {pebble.Pebble} obj
 * @private
 */
Service.prototype.generateIndexes = function(obj) {
  
  //TODO: These need to show maps for each collection 
  var collections = new pebble.Pebble();
  
  var libs = new pebble.Pebble();
  libs.setRef(".", "theModel.clientWorkspace.libs");
  libs.setRef("from", "key_");
  libs.setRef("to", "text");
  collections.set("a0", libs);
  collections.setRef("a1", "theModel.clientWorkspace.libs.*.controls");
  collections.setRef("a2", "theModel.clientWorkspace.libs.*.types");
  this.getCollections(this.ds, collections.getRecords("."));
  
  //notify
//  pebble.shared.handlesDataEvents.notifyDataChange(null, "model.globalIndexItems");
};

Service.prototype.getCollections = function(ds, paths) {
  this.ds = ds;
  this.collections = [];
  this.count = paths.length;
  for (var i = 0; i < paths.length; i++) {
		var path = paths[i].getRef(".");
		if (path.indexOf("*") == -1) {
			this.collections.push(path);
			this.count -= 1;
		} else {
			this.handleWild(path);
		}
	}
	if (this.count == 0) {
		this.buildIndexes();
	}
};
Service.prototype.handleWild = function(path) {
	var wildIndex = path.indexOf("*");
	if (wildIndex != -1) {
		var rem = path.substring(wildIndex + 1);
		var colPath = path.substring(0, wildIndex - 1);
		var query = new pebble.Pebble();
		query.setRef("from.path", colPath);
		var recs = this.ds.doQuery(query, null, null);
		if (rem.indexOf("*") == -1) {
			for (var i = 0; i < recs.length; i++) {
				var rec = recs[i];
				this.collections.push(colPath + "." + rec.getTagName() + rem);
			}
		} else {
			this.count += recs.length;
			for (var i = 0; i < recs.length; i++) {
				var rec = new pebble.Pebble(recs[i]);
				this.handleWild(colPath + "." + rec.getTagName() + rem);
			}
		}
		this.count -= 1; //for parent
		
	}
};

Service.prototype.buildIndexes = function() {
	//build indexes
	var count = 0;
	var colCount = this.collections.length;
	this.ds.deleteCollections(['theModel.clientWorkspace.globalIndexItems']);
	for (var i = 0; i < this.collections.length; i++) {
    //theModel.libs...
		var collection = this.collections[i];
    var elements = collection.split(".");
    var lib = elements[3];
    var collectionName = elements[4];
		var query = new pebble.Pebble();
		query.setRef("from.path", collection);
		var recs = this.ds.doQuery(query, null, null);
		for (var j = 0; j < recs.length; j++) {
			var item = recs[j];
      var data = new pebble.Pebble();
      data.setValue("text", item.getTagName());
      data.setRef("collection", collection);
      data.setRef("dataPath", collection.replace("theModel.", "model.") + "." + item.getTagName());
      this.ds.create("theModel.clientWorkspace.globalIndexItems", data, null, null);
		}
		this.colCount -= 1; //for parent
		if (this.colCount == 0) {
			//ready
		}
	}
};

function PersistanceManager(localStorageKey) {
	this.localStorageKey = localStorageKey;
}

PersistanceManager.prototype.setItem = function(s) {
	localStorage.setItem(this.localStorageKey, s);
};

PersistanceManager.prototype.getItem = function() {
	return localStorage.getItem(this.localStorageKey);
};

var ds = new pebble.shared.ServerDataImpl_Xml();
ds.setOffsetPath("theModel.clientWorkspace");
if (pebble.isDev) {
  ds.setPersistanceManager(new PersistanceManager("devWorkspace"));
} else {
  ds.setPersistanceManager(new PersistanceManager("workspace"));
}

var clientServer = new Service(new pebble.libs.standard.impl.WebSocketServerClientSideImpl(), ds);
					
pebble.serverProxies["CW"] = new pebble.libs.standard.ServerProxy(new pebble.libs.standard.impl.CommClientSideImpl(clientServer), new pebble.libs.standard.impl.WebSocketClientSideImpl(clientServer));

})();
]]>
        </devCode>
      </clientWorkspace>
      <Analyzer>
        <devCode>
          <![CDATA[
(function() {
  
  
  
/**
 * @constructor
 * @extends{pebble.libs.standard.ArrayTreeBase}
 */
pebble.libs.backboneBuilder.Analyzer = function(moduleAccess, dm, isLoadTop) {
  pebble.libs.standard.ArrayTreeBase.call(this, moduleAccess, dm, isLoadTop);
 
  /*var div = document.createElement("div");
  this.textArea = document.createElement("textarea");
  this.textArea.rows = 4;
  this.textArea.style.width = "100%";
  this.textArea.value = 'function (s) {\n  if (s.indexOf("something") != -1) return true;\n}';
  div.appendChild(this.textArea);
  
  this.checkUsageBtn = document.createElement("button");
  this.checkUsageBtn.classname = "btn btn-block";
  this.checkUsageBtn.disabled = true;
  this.checkUsageBtn.title = "check usage";
  this.checkUsageBtn.innerText = "check usage";
  this.checkUsageBtn.addEventListener("click", function() {
					
		that.checkUsage();

					}, false);
  div.appendChild(this.checkUsageBtn);
  
  this.checkRefsWithFunction = document.createElement("button");
  this.checkRefsWithFunction.className = "btn btn-block";
  this.checkRefsWithFunction.title = "check with function";
  this.checkRefsWithFunction.innerText = "check with function";
  this.checkRefsWithFunction.addEventListener("click", function() {
					
		that.checkWithFn();

	}, false);
  div.appendChild(this.checkRefsWithFunction);
  
  this.checkRefsWithFunctionFullDoc = document.createElement("button");
  this.checkRefsWithFunctionFullDoc.className = "btn btn-block";
  this.checkRefsWithFunctionFullDoc.title = "check in full doc";
  this.checkRefsWithFunctionFullDoc.innerText = "check in full doc";
  this.checkRefsWithFunctionFullDoc.addEventListener("click", function() {
					
		that.checkWithFnFullDoc();
    
	}, false);

  div.appendChild(this.checkRefsWithFunctionFullDoc);
  
  this.element.appendChild(div);
  
  this.log = document.createElement("div");
  this.element.appendChild(this.log);*/
};

pebble.inherits(pebble.libs.backboneBuilder.Analyzer, pebble.libs.standard.ArrayTreeBase);

/**
 * @override
 */
pebble.libs.backboneBuilder.Analyzer.prototype.onReady = function () {

  var pxml = this.getOriginInfo("model").getCreateOnNull();
 
  this.setLoaded();	

};
pebble.libs.backboneBuilder.Analyzer.prototype.executeMethod = function(funcName, obj) {
  var ret = 1;
	//list all ui public methods
	if (funcName == "searchUsage") {
		this.searchUsage(obj);
	} else if (funcName == "searchHasValue") {
		this.searchWithCriteria(obj, checkHasValue);
	} else if (funcName == "searchHasReference") {
		this.searchWithCriteria(obj, checkHasReference);
	} else if (funcName == "findUnused") {
		this.findUnused(obj);
	} else if (funcName == "search") {
		this.searchWithCriteria(obj, searchDocByKeyword);
	} else {
		return pebble.libs.backboneBuilder.Analyzer.superClass_.executeMethod.call(this, funcName, obj);
	}
	return ret;
};
/**
 * param {pebble.Pebble} item
 * param {pebble.Pebble} searchCriteria
 */
function searchDocByKeyword (item, searchCriteria) {
  var keyword = searchCriteria.getValue("keyword");
  var s = item.toString();
  return s.indexOf(keyword) != -1;
}
/**
 * param {pebble.Pebble} item
 * param {pebble.Pebble} searchCriteria
 */
function checkHasValue (item, searchCriteria) {
  var meta = searchCriteria.getValue("meta");
  var recs = item.getRecords(".");
  for (var i = 0; i < recs.length; i++) {
    var rec = recs[i];
    if (rec.getTagName() == meta && rec.getValue(".")) {
      return true;
    } else {  
  		if (checkHasValue(rec, searchCriteria)) {
    	  return true; 
  		}
		}
	}
	return false;
}
/**
 * param {pebble.Pebble} item
 * param {pebble.Pebble} searchCriteria
 */
function checkHasReference (item, searchCriteria) {
  var ref = searchCriteria.getRef("ref");
  var recs = item.getRecords(".");
  for (var i = 0; i < recs.length; i++) {
    var rec = recs[i];
    if (rec.getRef(".") == ref) {
      return true;
    } else {  
  		if (checkHasReference(rec, searchCriteria)) {
    	  return true; 
  		}
		}
	}
	return false;
}

function searchDocs (workspace, searchCriteria, fn) {
	var workspacePeb = workspace.getDataSource();
  var filteredData = new pebble.Pebble();
  var searchAll = searchCriteria.getBool("searchAll");
  var searchTypes = searchCriteria.getBool("searchTypes");
  var searchControls = searchCriteria.getBool("searchControls");
  var searchLibs = searchCriteria.getBool("searchLibs");
	var tables = workspacePeb.getRecords(".");
  var count = 0;
	for (var i = 0; i < tables.length; i++) {
		var table = tables[i];
		var tableName = table.getTagName().replace(/_/g, ".");
		var collectionMeta = tableName.split(".").pop();
		if (searchAll || (collectionMeta == "controls" && searchControls) || (collectionMeta == "types" && searchTypes) || (collectionMeta == "libs" && searchLibs)) {
  		var query = new pebble.Pebble();
  		query.setRef("from.path", tableName);
  		var docs = workspace.doQuery(query);
  		for (var j = 0; j < docs.length; j++) {
  			var doc = docs[j];
  		  if (fn(doc, searchCriteria)) {
          var item = new pebble.Pebble();
          item.setRef("dataPath", tableName.replace("theModel", "model") + "." + doc.getTagName());
          item.setValue("text", doc.getTagName());
      		filteredData.set("a" + count, item);
          count += 1;
    		}
  		}
  	}
  }
  return filteredData;
}

function searchUnusedDocs (workspace, searchCriteria, fn) {
	var workspacePeb = workspace.getDataSource();
  var filteredData = new pebble.Pebble();
  var searchTypes = searchCriteria.getBool("searchTypes");
  var searchControls = searchCriteria.getBool("searchControls");
  var searchLibs = searchCriteria.getBool("searchLibs");
	var tables = workspacePeb.getRecords(".");
  var count = 0;
	for (var i = 0; i < tables.length; i++) {
		var table = tables[i];
		var tableName = table.getTagName().replace(/_/g, ".");
		var collectionMeta = tableName.split(".").pop();
		if ((collectionMeta == "controls" && searchControls) || (collectionMeta == "types" && searchTypes) || (collectionMeta == "libs" && searchLibs)) {
  		var query = new pebble.Pebble();
  		query.setRef("from.path", tableName);
  		var docs = workspace.doQuery(query);
  		for (var j = 0; j < docs.length; j++) {
  			var doc = docs[j];
  			var path = tableName + "." + doc.getTagName();
  			searchCriteria.setRef("ref", path);
  		  if (!checkUsed(workspace, searchCriteria, checkHasReference)) {
          var item = new pebble.Pebble();
          item.setRef("dataPath", tableName.replace("theModel", "model") + "." + doc.getTagName());
          item.setValue("text", doc.getTagName());
      		filteredData.set("a" + count, item);
          count += 1;
    		}
  		}
  	}
  }
  return filteredData;
}

/**
 * expects searchCriteria.ref
 */
function checkUsed (workspace, searchCriteria, fn) {
	var workspacePeb = workspace.getDataSource();
	var tables = workspacePeb.getRecords(".");
  var count = 0;
	for (var i = 0; i < tables.length; i++) {
		var table = tables[i];
		var tableName = table.getTagName().replace(/_/g, ".");
		var collectionMeta = tableName.split(".").pop();
		var query = new pebble.Pebble();
		query.setRef("from.path", tableName);
		var docs = workspace.doQuery(query);
		for (var j = 0; j < docs.length; j++) {
			var doc = docs[j];
		  if (fn(doc, searchCriteria)) {
		    return true;
  		}
		}
  }
  return false;
}
/**
 * param {pebble.Pebble} obj
 * param {Function} fn
 */
pebble.libs.backboneBuilder.Analyzer.prototype.searchWithCriteria = function (obj, fn) {
  var params = obj.getParams();
  var searchCriteria = params.get("searchCriteria");
  var that = this;  
  pebble.libs.backboneBuilder.getDs(this, function(ws) {
  	var workspace = new pebble.shared.ServerDataImpl_Xml(ws);
    var filteredData = searchDocs(workspace, searchCriteria, fn);
    that.getOriginInfo("filteredGlobalIndexItems").set(filteredData, that, false, obj.getCallback());
  });
};
/**
 * param {pebble.Pebble} obj
 * param {Function} fn
 */
pebble.libs.backboneBuilder.Analyzer.prototype.findUnused = function (obj, fn) {
  var params = obj.getParams();
  var searchCriteria = params.get("searchCriteria");
  var that = this;  
  pebble.libs.backboneBuilder.getDs(this, function(ws) {
  	var workspace = new pebble.shared.ServerDataImpl_Xml(ws);
    var filteredData = searchUnusedDocs(workspace, searchCriteria, fn);
    that.getOriginInfo("filteredGlobalIndexItems").set(filteredData, that, false, obj.getCallback());
  });
};

pebble.libs.backboneBuilder.Analyzer.prototype.checkWithFn = function () {
  this.log.innerHtml = "";
	var workspacePeb = binder.data.workspace.getDataSource();
	var fn = document.getElementById("findFnInput").value;
	var tables = workspacePeb.getRecords(".");
	for (var i = 0; i < tables.length; i++) {
		var table = tables[i];
		var tableName = table.getTagName().replace(/_/g, ".");
		var query = new pebble.Pebble();
		query.setRef("from.path", tableName);
		var docs = binder.data.workspace.doQuery(query);
		eval("var fn = " + fn);
		for (var j = 0; j < docs.length; j++) {
			var doc = docs[j];
			this.findDocUsages(doc, fn, tableName + "." + doc.getTagName());
		}
	}
};

pebble.libs.backboneBuilder.Analyzer.prototype.checkWithFnFullDoc = function () {
  this.log.innerHtml = "";
	var workspacePeb = binder.data.workspace.getDataSource();
	var fn = document.getElementById("findFnInput").value;
	var tables = workspacePeb.getRecords(".");
	for (var i = 0; i < tables.length; i++) {
		var table = tables[i];
		var tableName = table.getTagName().replace(/_/g, ".");
		var query = new pebble.Pebble();
		query.setRef("from.path", tableName);
		var docs = binder.data.workspace.doQuery(query);
		eval("var fn = " + fn);
		for (var j = 0; j < docs.length; j++) {
			var doc = docs[j];
			this.findDocUsagesFullDoc(doc.toString(), fn, tableName + "." + doc.getTagName());
		}
	}
};

pebble.libs.backboneBuilder.Analyzer.prototype.findDocUsages = function (item, fn, docPath) {
  var ref = item.getRef(".");
	if (ref != null && fn(ref)) {
		pebble.shared.logger.log("INFO", docPath.replace("theModel.", "") + "\n", function(data) { 
		
  		var collection = data.substring(0, data.lastIndexOf("."));
  		var name = data.substring(data.lastIndexOf(".") + 1);
  	
	
	  }, docPath);
	}
	var recs = item.getRecords(".");
	for (var i = 0; i < recs.length; i++) {
		this.findDocUsages(recs[i], fn, docPath);
	}
};

pebble.libs.backboneBuilder.Analyzer.prototype.findDocUsagesFullDoc = function (docStr, fn, docPath) {
	if (fn(docStr)) {
  	pebble.shared.logger.log("INFO", docPath.replace("theModel.", "") + "\n", function(data) { 
  							
  		var collection = data.substring(0, data.lastIndexOf("."));
  		var name = data.substring(data.lastIndexOf(".") + 1);
  		var selDoc = getSelDoc(collection, name);
  		binder.setData("selectedDocument", selDoc);
  		
  	}, docPath);

	}	
};

/**
 * @param {pebble.libs.standard.interfaces.DataChangable} source
 * @param {string} field
 * @param {string} relPath
 * @param {Function} cb
 * @return {boolean}
 * @override
 */
pebble.libs.backboneBuilder.Analyzer.prototype.onDataModelChanged = function(source, field, relPath, cb) {

	var that = this;
	pebble.libs.backboneBuilder.Analyzer.superClass_.onDataModelChanged.call(this, source, field, relPath, function() {
	
		if (field == "filteredGlobalIndexItems" && relPath.indexOf("singleSelectedMeta") != -1 && relPath.split(".").length == 3 ){	//not collections with/in collections
		
			var model = that.getOriginInfo("filteredGlobalIndexItems").getCreateOnNull()
			var relMeta = model.getRef(relPath);
					
			var selectedItem = model.get(relMeta);
    
      var dataPath = selectedItem.getRef("dataPath");
       pebble.libs.standard.Module.topMod.item.layoutStateManager.setLayoutStateByDataPath(dataPath);
     

		} else {
			cb();
		}
	});
};


})();
]]>
        </devCode>
      </Analyzer>
      <AceEditor>
        <devCode>
          <![CDATA[
/**
 * convert reference protocol to data path
 */
function getDataPathFromSelection(selection) {
  var parts = selection.split(":");
  return "model.clientWorkspace.libs." + parts[0] + ".controls." + parts[1];
}

/**
 * AceEditor allows you to use html w/in the ui
 * @constructor
 * @extends{pebble.libs.standard.ClientControl}
 */
pebble.libs.backboneBuilder.AceEditor = function(moduleAccess, dm, isLoadTop) {
  pebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);
  this.aceDiv = document.createElement("div");
  this.aceDiv.setAttribute("style", "z-index:10;position:absolute;top:0px;bottom:0px;left:0px;right:0px;");
  this.element.appendChild(this.aceDiv);
};

pebble.inherits(pebble.libs.backboneBuilder.AceEditor, pebble.libs.standard.ClientControl);

/**
 * @override
 */
pebble.libs.backboneBuilder.AceEditor.prototype.onReady = function () {

  var that = this;

	function getTags(path, delimiter, cb) {

		var query = new pebble.Pebble();
		query.setRef("from.path", path);
		var obj = new pebble.Pebble();
		var params = obj.getParams();
		params.setRef(".", "CW.doQuery");
		params.set("query", query);
		params.setRef("clientInstance", that.getRef("."));
		obj.setCallback(function(fetchedData) {

      var meta = path.split(".").pop();
			var recs = fetchedData.getRecords(".");
			var tags = recs.map(function(peb) {
			
			  return {name: peb.getTagName(), value: peb.getTagName() + delimiter, score: 100000, meta: meta};
			
			});
			cb(tags);

		}); 
		that.resolve(obj);
	}
	
	
	
	
  var theme = this.getOriginInfo("theme").getValue();
	var mode = this.getOriginInfo("mode").getValue() || "text"; //pxml, css, xml, javascript
	if (mode === "pxml") {
	  mode = "xml";
	}
	
  if (ace != "undefined") {
    this.editor = ace.edit(this.aceDiv);
//    this.editor.setTheme("ace/theme/twilight");//twilight, ambiance
	  //this.editor.setReadOnly(true);  // false to make it editable
  	this.editor.getSession().setMode("ace/mode/" + mode);
		this.editor.setShowPrintMargin(false);
  	this.editor.getSession().setTabSize(2);

    var that = this;
    
		ace.require("ace/lib/net").loadScript("/bower_components/ace-builds/src-noconflict/ext-emmet.js", function() { 
		
      var snippetManager = ace.require("ace/snippets").snippetManager; 
      var config = ace.require("ace/config"); 
      
			that.editor.setOptions({enableSnippets: true});
			
      ace.config.loadModule("ace/snippets/javascript", function(m) { 
      /*
          if (m) { 
              //snippetManager.files.javascript = m; 
              //m.snippetText += mySnippetText; // if you have snippets in the  ace snippet format 
              //m.snippets = snippetManager.parseSnippetFile(m.snippetText); 
      
              // or do this if you already have them parsed 
              m.snippets.push({ 
                  content: "${1:class_name}.prototype.${2:method_name} =  function(${3:first_argument}) {    ${4:// body...}", 
                  name: "proto", 
                  tabTrigger: "proto" 
              }); 
              snippetManager.register(m.snippets, m.scope); 
          } 
    */  
      }); 
		});

    
		ace.require("ace/lib/net").loadScript("/bower_components/ace-builds/src-noconflict/ext-language_tools.js", function() { 
			var langTools = ace.require("ace/ext/language_tools");
			that.editor.setOptions({enableBasicAutocompletion: true});
			// uses http://rhymebrain.com/api.html
  		var completer = {
				getCompletions: function(editor, session, cursor, prefix, callback) {

		      var toks = session.getTokens(cursor.row);
		      var tok = session.getTokenAt(cursor.row, cursor.column);
    		  var row = session.getLine(cursor.row);
    		  var rowTillCursor = row.substring(0, cursor.column);
    		  var afterRefIndex = rowTillCursor.lastIndexOf(" ref=\"") + 6;
    		  var startTagIndex = rowTillCursor.lastIndexOf("<");
    		  if (afterRefIndex > startTagIndex && afterRefIndex <= cursor.column && startTagIndex != -1) { 
    		    var endTagIndex = row.indexOf(">", startTagIndex);
    		    if (endTagIndex >= cursor.column) {
    		      //we are in the start tag/attributes
    		      var tagName = row.substring(startTagIndex + 1, row.indexOf(" ", startTagIndex));
    		      if (tagName == "control" || tagName == "displayControl") {
    		    
    		        var refVal = rowTillCursor.substring(afterRefIndex, cursor.column);
    		        if (refVal.indexOf(":") == -1) {
    		          
      		        getTags("theModel.clientWorkspace.libs", ":", function(data) {
      		        
          		      callback(null, data);
          		      
      		        });
    		        
    		        } else {
    		          
    		          var lib = refVal.split(":")[0];
    		        
      		        getTags("theModel.clientWorkspace.libs." + lib + ".controls", "", function(data) {
      		        
          		      callback(null, data);
          		      
      		        });
    		        }
    		     
    		      } else if (tagName == "arrayFormId"){
    		      
    		      } //_generate, _bind, exec  >  if (isControlMember()) else if (isFunctionMember())
    		    }
    		  }
    		 
				}
  		}
  		langTools.addCompleter(completer);
		}) 

    
		ace.require("ace/lib/net").loadScript("/bower_components/ace-builds/src-noconflict/keybinding-vim.js", function() { 
			that.editor.setKeyboardHandler(ace.require("ace/keyboard/vim").handler); 
		}) 
  	//this.editor.setKeyboardHandler(require("ace/keyboard/keybinding/vim").Vim);
  	//this.editor.setKeyboardHandler("vim");

  	this.aceDiv.ondblclick = function(e) {
  	  if (mode === "pxml") {
    	  var range = that.editor.getSelectionRange();
    	 	var text = that.editor.getSession().getTextRange(range);
    		var cursor = that.editor.selection.getCursor();
    		var row = that.editor.getSession().getLine(cursor.row);
        
        var rowToEndParen = row.substring(cursor.column, row.indexOf("\"", cursor.column));
        var rowToBegParen = row.substring(0, cursor.column);
        rowToBegParen = rowToBegParen.substring(rowToBegParen.lastIndexOf("\"") + 1);
        var selection = rowToBegParen + rowToEndParen;
        
       pebble.libs.standard.Module.topMod.item.layoutStateManager.setLayoutStateByDataPath(getDataPathFromSelection(selection));
     }
      
  	};
  	
  	this.editor.on("blur", function() {
      that.exec("onBlur");  
    });
	
  	this.setControl();
	
  } else {
    console.log("pebble.libs.backboneBuilder.AceEditor: no ace");
  }
	
	this.setLoaded();
};

pebble.libs.backboneBuilder.AceEditor.prototype.setControl = function() {

	var mode = this.getOriginInfo("mode").getValue() || "text"; //pxml, css, xml, javascript
	var code = "";
	if (mode === "pxml") {
    var pxml = this.getOriginInfo("model").getCreateOnNull();
		//var xml = pxml.getInnerXml();
		//code = vkbeautify.xml(xml);
		var xml = PebbleDataSourceImpl_Json.getXml(pxml.impl.data, PebbleDataSourceImpl_BrowserDom);
		code = vkbeautify.xml(xml.toString());
	} else {
  	code = this.getOriginInfo("model").getValue();
    if (code != null) {
      switch(mode) {
        case "xml":
          code = vkbeautify.xml(code);
        break;
        case "css":
          code = vkbeautify.css(code);
        break;
      }
    }
	}
  this.editor.getSession().setValue(code);
};
/**
 * @override
 */
pebble.libs.backboneBuilder.AceEditor.prototype.onDataModelChanged = function(source, path, relPath, cb) {
	//if (this != source && path == "model") {
	if (path == "model") {
		this.setControl();
	} 
	cb();
	return false;
};
/**
 * @param {boolean} setSilent
 * @param {Function} cb
 * @override
 */
pebble.libs.backboneBuilder.AceEditor.prototype.setControlDataToModel = function(setSilent, cb) {
  var val = this.editor.getValue(); // or session.getValue
  var data;
  if (this.getOriginInfo("mode").getValue() == "pxml") {
    //val is inner xml
    
		var peb_xml = new PebbleDataSourceImpl_BrowserDom("<i>" + vkbeautify.xmlmin(val) + "</i>");
		var json = PebbleDataSourceImpl_BrowserDom.getJson(peb_xml.xml);
    data = new pebble.Pebble(JSON.stringify(json));
    
  } else {
    data = new pebble.Pebble();
    data.setMarkup(".", val);
  }
  this.getOriginInfo("model").set(data, this, setSilent, cb);
};
]]>
        </devCode>
      </AceEditor>
      <showdown>
        <devCode>
          <![CDATA[
/**
 * @constructor
 * @extends{pebble.libs.standard.ClientControl}
 */
pebble.libs.backboneBuilder.showdown = function(moduleAccess, dm, isLoadTop){
  pebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);
};

pebble.inherits(pebble.libs.backboneBuilder.showdown, pebble.libs.standard.ClientControl);

/**
 * @override
 */
pebble.libs.backboneBuilder.showdown.prototype.onReady = function () {

	var text = "";
	var originInfo = this.getOriginInfo("model");
	var peb = originInfo.get();
	if (peb != null) {
		text = peb.getValue(".");
	}
//text = hljs.highlightAuto(text).value;
   var converter = new Showdown.converter();
  this.element.innerHTML = converter.makeHtml(text);
	this.setLoaded();
	
	var els = this.element.querySelectorAll("code")
	for (var i = 0; i < els.length; i++) {
	  var el = els[i];
	  hljs.highlightBlock(el);
	}
};

]]>
        </devCode>
      </showdown>
      <TemporaryAutoComplete>
        <devCode>
          <![CDATA[
/**
 * @constructor
 * @extends{pebble.libs.standard.ArrayTreeBase}
 */
pebble.libs.backboneBuilder.TemporaryAutoComplete = function(moduleAccess, dm, isLoadTop){
  pebble.libs.standard.ArrayTreeBase.call(this, moduleAccess, dm, isLoadTop);
    
  this.autoComplete = document.createElement("input");
  this.autoComplete.type = "text";
  this.autoComplete.setAttribute("style", "width:250px;");
  this.autoComplete.className = "form-control"; //bootstrap
  this.element.appendChild(this.autoComplete);

  $.widget( "custom.catcomplete", $.ui.autocomplete, {
  	
  
	});
};

pebble.inherits(pebble.libs.backboneBuilder.TemporaryAutoComplete, pebble.libs.standard.ArrayTreeBase);

/**
 * @param {Function} cb
 * @override
 */
pebble.libs.backboneBuilder.TemporaryAutoComplete.prototype.loadSub = function(cb){
  var array = this.origin.getCreateOnNull();
  this.loadAutoComplete(array);
};

pebble.libs.backboneBuilder.TemporaryAutoComplete.prototype.loadAutoComplete = function (array) {

  var recs = array.getRecords(".");
   //load data
  var data = [];
	var count = 0;
  for (var i = 0; i < recs.length; i++) {
    var doc = recs[i];
    count += 1;
		data.push({label: doc.getValue("text"), id: doc.getTagName(), dataPath: doc.getRef("dataPath")});
  }
  this.autoComplete.placeholder = "Search " + count + " documents"; 
  var that = this;
	$( this.autoComplete ).catcomplete({
		delay: 0,
		source: data,
		select: function( event, ui ) {
       pebble.libs.standard.Module.topMod.item.layoutStateManager.setLayoutStateByDataPath(ui.item.dataPath);
			return false;
		}
	});
};

/**
 * subclasses override
 * @param {pebble.libs.standard.interfaces.DataChangable} source
 * @param {string} field
 * @return {boolean}
 * @override
 */
pebble.libs.backboneBuilder.TemporaryAutoComplete.prototype.onDataModelChanged = function(source, field, relPath, cb) {
  
	var that = this;
	pebble.libs.backboneBuilder.TemporaryAutoComplete.superClass_.onDataModelChanged.call(this, source, field, relPath, function() {
		var model = that.modelOrigin.getCreateOnNull()
		if (relPath.indexOf("singleSelectedMeta") != -1 && relPath.split(".").length == 3 ){	//not collections with/in collections
			var relMeta = model.getRef(relPath);
			that.autoComplete.value = model.get(relMeta).getRef("dataPath").split(".").pop();
			cb();
		} else {
			cb();
		}
	});
};

]]>
        </devCode>
      </TemporaryAutoComplete>
      <ReferenceInput>
        <devCode>
          <![CDATA[
/**
 * @constructor
 * @extends{pebble.libs.standard.ArrayTreeBase}
 */
pebble.libs.backboneBuilder.ReferenceInput = function(moduleAccess, dm, isLoadTop){
  pebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);
    
	var that = this;	

  this.libsOnly = that.getOriginInfo("libsOnly").getBool();
  this.thisLib = that.getOriginInfo("thisLib").getBool();
	var libsPath = that.getOriginInfo("libsPath").getRef() || "theModel.clientWorkspace.libs";
	var libCollection = that.getOriginInfo("libCollection").getRef() || "controls";
	var fixedLibs = this.getOriginInfo("fixedLibs").get();
		
	function getTags(request, response) {

    if (request.term.indexOf(":") == -1) {
			//libs
			if (that.thisLib) {
  				
  				that.selectedLib = that._getSelectedItemMetaFromTop("model.clientWorkspace.libs", false);
    			var obj = new pebble.Pebble();
    			var params = obj.getParams();
          switch (libCollection) {
            case "controls":
        			params.setRef(".", "CW.getControls");
            break;
            case "types":
        			params.setRef(".", "CW.getTypes");
            break;
          }
    			params.setRef("libRef", that.selectedLib);
    			params.setRef("clientInstance", that.getRef("."));
    			obj.setCallback(function(fetchedData) {
    
    				var recs = fetchedData.getRecords(".");
    				var tags = [];
    				for (var i = 0; i < recs.length; i++) {
    					tags.push(recs[i].getTagName());
    				}
    				// delegate back to autocomplete, but extract the last term
    				response($.ui.autocomplete.filter(tags, extractLast(request.term)));
    
    			}); 
    			that.resolve(obj);
			
			
			} else if (fixedLibs != null) {
			
  				var recs = fixedLibs.getRecords(".");
  				var tags = [];
  				for (var i = 0; i < recs.length; i++) {
  				  var libName = recs[i].getRef(".");  
  					tags.push(libName);
  				}
  				// delegate back to autocomplete, but extract the last term
  				response($.ui.autocomplete.filter(tags, extractLast(request.term)));
			
			} else {
			
  			var obj = new pebble.Pebble();
  			var params = obj.getParams();
  			params.setRef(".", "CW.getLibs");
  			params.setRef("clientInstance", that.getRef("."));
  			obj.setCallback(function(fetchedData) {
  
  				var recs = fetchedData.getRecords(".");
  				var tags = [];
  				for (var i = 0; i < recs.length; i++) {
  					tags.push(recs[i].getTagName());
  				}
  				// delegate back to autocomplete, but extract the last term
  				response($.ui.autocomplete.filter(tags, extractLast(request.term)));
  
  			}); 
  			that.resolve(obj);
			}
			
		} else if (request.term.match(/:/g).length < 2 && !that.libsOnly){
			//items
			var lib = request.term.split(":").shift();
			var obj = new pebble.Pebble();
			var params = obj.getParams();
      switch (libCollection) {
        case "controls":
    			params.setRef(".", "CW.getControls");
        break;
        case "types":
    			params.setRef(".", "CW.getTypes");
        break;
      }
			params.setRef("libRef", lib);
			params.setRef("clientInstance", that.getRef("."));
			obj.setCallback(function(fetchedData) {

				var recs = fetchedData.getRecords(".");
				var tags = [];
				for (var i = 0; i < recs.length; i++) {
					tags.push(recs[i].getTagName());
				}
				// delegate back to autocomplete, but extract the last term
				response($.ui.autocomplete.filter(tags, extractLast(request.term)));

			}); 
			that.resolve(obj);

		}
	}


    function split( val ) {
      return val.split( /:/ );
    }
    function extractLast( term ) {
      return split( term ).pop();
    }
 
    $(this.element)
      // don't navigate away from the field on tab when selecting an item
      .bind( "keydown", function( event ) {
        if ( event.keyCode === $.ui.keyCode.TAB &&
            $( this ).data( "ui-autocomplete" ).menu.active ) {
          event.preventDefault();
        }
      })
      .autocomplete({
        minLength: 0,
        source: getTags,
        focus: function() {
          // prevent value inserted on focus
          return false;
        },
        select: function( event, ui ) {
          var terms = split( this.value );
          // remove the current input
          terms.pop();
          // add the selected item
          terms.push( ui.item.value );
          
          this.value = terms.join(":");
          if (this.value.indexOf(":") == -1 && !that.libsOnly && !that.thisLib) {
            this.value += ":";
          }
          return false;
        }
      });
};

pebble.inherits(pebble.libs.backboneBuilder.ReferenceInput, pebble.libs.standard.ClientControl);

/**
 * @override
 */
pebble.libs.backboneBuilder.ReferenceInput.prototype.onReady = function () {


	
	this.setControl();
	this.setLoaded();

};

pebble.libs.backboneBuilder.ReferenceInput.prototype.setControl = function() {
	var text = this.getOriginInfo("model").getRef();
	if (text == null) {
		text = "";
	} else {
	  var elements = text.split(".");
  	if (this.thisLib) {
	    var item = elements.pop();
	  	text = item;
  	} else if (this.libsOnly) {
	    var lib = elements.pop();
	  	text = lib;
  	} else {
	  	var item = elements.pop();
	   	elements.pop();
	  	var lib = elements.pop();
	  	text = lib + ":" + item;
  	}
		
	}

	this.element.value = text;
};

/**
 * @param {pebble.libs.standard.interfaces.DataChangable} source
 * @param {string} path
 * @param {string} relPath
 * @return {boolean}
 * @override
 */
pebble.libs.backboneBuilder.ReferenceInput.prototype.onDataModelChanged = function(source, path, relPath, cb) {
	if (this != source && path == "model") {
		this.setControl();
	} 
	cb();
	return false;
};

/**
 * @param {boolean} setSilent
 * @param {Function} cb
 * @override
 */
pebble.libs.backboneBuilder.ReferenceInput.prototype.setControlDataToModel = function(setSilent, cb) {
	var data = new pebble.Pebble();
	var abbrev = this.element.value;
	var libsPath = this.getOriginInfo("libsPath").getRef() || "theModel.clientWorkspace.libs";
	if (this.thisLib) {

		var useRelPath = this.getOriginInfo("useRelPath").getBool();
		var ref = useRelPath ? abbrev : this.selectedLib + "." + abbrev;
		data.setRef(".", ref);
		this.getOriginInfo("model").set(data, this, setSilent, cb);
      	
	} else if (abbrev.indexOf(":") != -1 && !this.libsOnly) {
		var libCollection = this.getOriginInfo("libCollection").getRef() || "controls";
		var elements = abbrev.split(":");
		var lib = elements[0];
		var item = elements[1];
		
		var useRelPath = this.getOriginInfo("useRelPath").getBool();
		var ref = useRelPath ? item : libsPath + "." + lib + "." + libCollection + "." + item;
		data.setRef(".", ref);
		this.getOriginInfo("model").set(data, this, setSilent, cb);
	} else {
	  var useRelPath = this.getOriginInfo("useRelPath").getBool();
		var ref = useRelPath ? abbrev : libsPath + "." + abbrev;
		data.setRef(".", ref);
		this.getOriginInfo("model").set(data, this, setSilent, cb);
	}
};


]]>
        </devCode>
      </ReferenceInput>
      <CustomStackPanel>
        <devCode>
          <![CDATA[
pebble.libs.backboneBuilder.CustomStackPanel = function(moduleAccess, dm, isLoadTop) {
  pebble.libs.standard.StackPanel.call(this, moduleAccess, dm, isLoadTop);
  this.isAnimationVertical = this.getOriginInfo("isAnimationVertical").getBool();
	this.animationDuration = this.getOriginInfo("animationDuration").getInt();

};

pebble.inherits(pebble.libs.backboneBuilder.CustomStackPanel, pebble.libs.standard.StackPanel);

/**
 * @param {string} relMeta
 */
pebble.libs.backboneBuilder.CustomStackPanel.prototype.showElement = function(relMeta) {

  if (this.getOriginInfo("autoHeight").getBool()) {

		if (this.currentMeta != null) {

			this.modules[this.currentMeta].element.style.display = "none";

		}
		var mod = this.getModules()[relMeta];
		mod.element.style.display = "block";

	} else {	
		if (this.currentMeta != null) {

			this.modules[this.currentMeta].element.setAttribute("class", "listStackPanelhide");

		}
		var mod = this.getModules()[relMeta];
		mod.element.setAttribute("class", "listStackPanelshow");
	}
};

pebble.libs.backboneBuilder.CustomStackPanel.prototype.animatePanels = function(meta) {
  this.isAnimationVertical = false;
	//all panels are same full size
	var newModule = this.modules[meta];
	var newEl = newModule.element;

	// Calculate the direction that the new widget will enter.
	var slots = this.getOriginInfo("model").get();
	var oldIndex;
	if (this.currentMeta != null) {
		oldIndex = slots.getIndex(".", this.currentMeta);
	} else {
		oldIndex = -1;
	}
	var newIndex = slots.getIndex(".", meta);
	var direction = (oldIndex < newIndex) ? 1: -1;

	var newElHeight = newModule.item.getOffsetHeight();
	var newElWidth = newModule.item.getOffsetWidth();

	var offset = this.isAnimationVertical ? direction * newElHeight : direction * newElWidth;

	var transitionProp = this.isAnimationVertical ? "top" : "left";
	var transitionStyle = "-moz-transition:" + transitionProp + " 0.7s ease-out;  -o-transition:" + transitionProp + " 0.7s ease-out;  -webkit-transition:" + transitionProp + " 0.7s ease-out;  transition:" + transitionProp + " 0.7s ease-out;";


	// The new layer starts off to one side.

	//turn transitions off while we set
	newEl.setAttribute("style", "");

	var newStyle = "";
	if (this.isAnimationVertical) {
		newStyle += "top:" + offset + "px;";
	} else {
		newStyle += "left:" + offset + "px;";
	}
	//set visible, turn transition on
	newEl.setAttribute("style", newStyle + "position:absolute;width:100%;height:100%;visibility:visible;" + transitionStyle);

	// Set the end positions of the layers.
	if (this.currentMeta != null) {
		// The old layer ends off to one side.
		var currentEl = this.modules[this.currentMeta].element;

		this.applyStyleProperties(currentEl, transitionStyle);

		offset = -offset;
		if (this.isAnimationVertical) {
			this.applyStyleProperties(currentEl, "top:" + offset + "px;");
		} else {
			this.applyStyleProperties(currentEl, "left:" + offset + "px;");
		}
		//turn transition off
		delete currentEl.style["-moz-transition"];
		delete currentEl.style["-o-transition"];
		delete currentEl.style["-webkit-transition"];
		delete currentEl.style["transition"];

	}

	// The new layer ends centered in the panel.
	//	this.applyStyleProperties(newEl, transitionStyle);

	if (this.isAnimationVertical) {
		this.applyStyleProperties(newEl, "top:0px;");
	} else {
		this.applyStyleProperties(newEl, "left:0px;");
	}

	//turn transition off
	delete newEl.style["-moz-transition"];
	delete newEl.style["-o-transition"];
	delete newEl.style["-webkit-transition"];
	delete newEl.style["transition"];

};

/**
 * @param {Element} ele
 * @param {string} overlayStyle
 */
pebble.libs.backboneBuilder.CustomStackPanel.prototype.applyStyleProperties = function(ele, overlayStyle) {
	var style;

	var currentStyle = ele.getAttribute("style");
	if (currentStyle != null) {
		style = pebble.libs.standard.StackPanel.getDiffStyle(currentStyle, overlayStyle);

	} else {
		style = currentStyle;
	}
	ele.setAttribute("style", style);
};

/**
 * @param {string} existingStyle
 * @param {string} overlayStyle
 * @return {string}
 */
pebble.libs.backboneBuilder.CustomStackPanel.getDiffStyle = function(existingStyle, overlayStyle) {
	var ret = "";

	if (existingStyle != null) {
		var existingElements = existingStyle.split(";");
		var existingMap = {};

		for (var i = 0; i < existingElements.length; i++) {
			var prop = existingElements[i];
			prop = prop.trim();
			if (prop != ""){
				var pair = prop.split(":");
				var name = pair[0].trim();
				var val = pair[1].trim();
				existingMap[name] = val;
			}
		}
		var overlayElements = overlayStyle.split(";");
		for (var i = 0; i < overlayElements.length; i++) {
			var prop = overlayElements[i];
			prop = prop.trim();
			if (prop != ""){
				var pair = prop.split(":");
				var name = pair[0].trim();
				var val = pair[1].trim();
				//overwrite if exist in existing
				existingMap[name] = val;
			}
		}

		for (var key in existingMap) {
			ret += key + ":" + existingMap[key] + ";";
		}
	} else {
		ret = overlayStyle;
	}	
	return ret;
};


]]>
        </devCode>
      </CustomStackPanel>
      <Run>
        <devCode>
          <![CDATA[(function () {
  function addClientScripts (clientScripts, id) {
    var js = '';
    for (var i = 0; i < clientScripts.length; i++) {
      var clientScript = clientScripts[i];
      js += clientScript.getValue('devCode');
    }
    if (js != '') {
      addScriptCode(id, js);
    }
  }
  /**
   * Insert style tag
   * @param {string} id
   * @param {string} code
   */
  function addScriptCode (id, code) {

    var head = document.getElementsByTagName('head')[0];
    var script = document.getElementById(id);
    if (script ==  null) {
      var ele = document.createElement('script');
      ele.setAttribute('id', id);
      head.appendChild(ele);
      script = document.getElementById(id);
    }
    script.innerHTML = code;
  }
  /**
   * @param {pebble.Pebble} sharedLib
   */
  function getScriptsAndCss_client(sharedLib) {

    var sharedLibName = sharedLib.getTagName();

    //create namespaces
    addScriptCode(sharedLibName + '-lib', 'if (!pebble.libs.' + sharedLibName + ') pebble.libs.' + sharedLibName + '={};');//create namespace
    addScriptCode(sharedLibName + '-lib', 'if (!pebble.libs.' + sharedLibName + '.e2ecode) pebble.libs.' + sharedLibName + '.e2ecode={};');

    var clientScripts = sharedLib.getRecords('e2ecode');	
    addClientScripts(clientScripts, sharedLibName + '-clientCode');

  }

//ex.  simulate(document.getElementById("btn"), "click");i
//ex.  simulate(document.getElementById("btn"), "click", { pointerX: 123, pointerY: 321 });
function simulate(element, eventName) {
    var options = extend(defaultOptions, arguments[2] || {});
    var oEvent, eventType = null;

    for (var name in eventMatchers) {
        if (eventMatchers[name].test(eventName)) { eventType = name; break; }
    }

    if (!eventType)
        throw new SyntaxError('Only HTMLEvents and MouseEvents interfaces are supported');

    if (document.createEvent) {
        oEvent = document.createEvent(eventType);
        if (eventType == 'HTMLEvents') {
            oEvent.initEvent(eventName, options.bubbles, options.cancelable);
        } else {
            oEvent.initMouseEvent(eventName, options.bubbles, options.cancelable, document.defaultView,
            options.button, options.pointerX, options.pointerY, options.pointerX, options.pointerY,
            options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, element);
        }
        element.dispatchEvent(oEvent);
    } else {
        options.clientX = options.pointerX;
        options.clientY = options.pointerY;
        var evt = document.createEventObject();
        oEvent = extend(evt, options);
        element.fireEvent('on' + eventName, oEvent);
    }
    return element;
}

function extend(destination, source) {
    for (var property in source)
      destination[property] = source[property];
    return destination;
}

var eventMatchers = {
    'HTMLEvents': /^(?:load|unload|abort|error|select|change|submit|reset|focus|blur|resize|scroll)$/,
    'MouseEvents': /^(?:click|dblclick|mouse(?:down|up|over|move|out))$/
}
var defaultOptions = {
    pointerX: 0,
    pointerY: 0,
    button: 0,
    ctrlKey: false,
    altKey: false,
    shiftKey: false,
    metaKey: false,
    bubbles: true,
    cancelable: true
}




pebble.libs.backboneBuilder.Run = function(moduleAccess, dm, isLoadTop){
  pebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);
	
  //put e2e code in this env
  var customizeLibs = this.getOriginInfo("model.customizeLibs").getRecords();
  for (var i = 0; i < customizeLibs.length; i++) {
    var lib = customizeLibs[i];
    getScriptsAndCss_client(lib);
  }

	//pebble.isDev = true;
	pebble.Pebble.setDataSourceFactory(new PebbleDataSourceImpl_Json());

	this.log = document.createElement("div");
  this.element.appendChild(this.log);

	this.startServer();  
	this.devices = [];

  this.accessPointDeployments = {};
  var that = this;
	window.addEventListener("message", function(event) {
	
		var s = event.data;
		var req0 = new pebble.Pebble(s);
		var reqId = req0.getRef("reqId");
		var type = req0.getRef("reqType");
		if (reqId === that.getId() || type === "DEPLOYMENT" || type == "SIMM-REQUEST") {

			switch (type) {

				case "SIMM-REQUEST":

					var obj = req0.get("data");
					var userId = req0.getRef("userId");
					var roles = req0.getRef("roles");

					//authorization
					var auth = new HandlesAuthorizationImpl_DummyServer(userId, roles);

					var groupMaps = new pebble.Pebble();
					obj.set("_user", auth.getUserObject(groupMaps));

					var params = obj.getParams();
					var rg = params.getRef(".");
					if (rg != null) {

						var funcName = rg.substring(rg.lastIndexOf(".") + 1);
						that.logMessage("INFO", "receiving request " + funcName + " ...");

						//process
						var accessPoint = params.getRef("accessPoint");
						pebble.service.executeMethod(funcName, obj, new pebble.shared.Deployment(that.accessPointDeployments[accessPoint]));

						var mess = new pebble.Pebble();
						mess.setRef("reqType", "SIMM-RESPONSE");
						mess.setRef("reqId", req0.getRef("reqId"));
						mess.set("data", obj);

						event.source.postMessage(mess.toString(), event.origin);

						that.logMessage("INFO", "data processed");

					} else {

						console.log("IMPORTANT: no request");

					}
					break;

				case "DEPLOYMENT":

					console.log("INFO: receiving deployment request ...");

					var accessPoint = req0.getRef("accessPoint");

					var req1 = new pebble.Pebble();
					req1.setRef("reqType", "DEPLOYMENT");
					req1.setRef("reqId", req0.getRef("reqId"));
					req1.set("data", that.accessPointDeployments[accessPoint]);

					event.source.postMessage(req1.toString(), event.origin);
					console.log("SUCCESS: deployment processed and posted.")

						break;

				case "createDeploymentDoc":
					that.accessPointDeployments = {};
					break;

				case "updateDeploymentDoc":
					that.accessPointDeployments = {};
					break;


			}
		}

	}, false);

	
  
};

pebble.inherits(pebble.libs.backboneBuilder.Run, pebble.libs.standard.ClientControl);

pebble.libs.backboneBuilder.Run.prototype.executeMethod = function(funcName, obj) {
  var ret = 1;
  //list all ui public methods
	if (funcName == "clearLog") {
		this.clearLog();
		obj.callback();
	} else if (funcName == "restart") {
		this.startServer();
		obj.callback();
	} else {
		return pebble.libs.backboneBuilder.Run.superClass_.executeMethod.call(this, funcName, obj);
	}
	return ret;
};

pebble.libs.backboneBuilder.Run.prototype.launchClient = function(accessPoint, isDownload) {

	var model = this.getOriginInfo("model").get();

	this.logMessage("INFO", "building deployment ...");
	var that = this;
	pebble.libs.backboneBuilder.getDs(this, function(workspace) {

		var workspaceDs = new pebble.shared.ServerDataImpl_Xml(workspace);
		var deployment = model;
		var accessPointMeta = accessPoint;
		var libMeta = undefined;//req0.getRef("libMeta");

		var depObj = new pebble.shared.Deployment();
		depObj.buildDeployment(new pebble.shared.BuildDeployment(less), workspaceDs, libMeta, deployment, accessPointMeta, function(accessPointDeployment) {

			that.accessPointDeployments[accessPointMeta] = accessPointDeployment;

			depObj.addCodeToEnv_server();

			console.log("SUCCESS: deployment built and set properly");
			that.devices.push(window.open("/client.html?mode=dev&accessPoint=" + accessPointMeta));

			//if there are clients, reload
			that.broadcast("RELOAD");

			//if there are clients, reload
			that[accessPointMeta] = accessPointDeployment;
			if (that.isDownload) {
				that.isDownload = false;
				var peb = new pebble.Pebble(accessPointMeta);
				peb.set(".", accessPointDeployment);
				var blob = new Blob([peb.toString()]);
				var url = window.URL.createObjectURL(blob);
				window.open(url, '_blank', '');
			} 

		});

		that.logMessage("SUCCESS", "built!");
	});	

};

pebble.libs.backboneBuilder.Run.prototype.broadcast = function(reqType) {
	var req1 = new pebble.Pebble();
	req1.setRef("reqType", reqType);
	for (var i = 0; i < this.devices.length; i++) {
		this.devices[i].postMessage(req1.toString(), "*");
	}
}

pebble.libs.backboneBuilder.Run.prototype.logMessage = function(level, message) {
  
  //should just append to "logs"
  
  //but for now ... (bootstrap: default, primary, success, info, warning, danger)
  var div = document.createElement("div");
  var span = document.createElement("span");
  span.className = "label label-" + level.toLowerCase();
  span.appendChild(document.createTextNode(level.toUpperCase()));
  div.appendChild(span);
  div.appendChild(document.createTextNode(message));
  this.log.appendChild(div);

};

pebble.libs.backboneBuilder.Run.prototype.clearLog = function() {

		this.log.innerHTML = "";
};

pebble.libs.backboneBuilder.Run.prototype.startServer = function() {
    
    this.clearLog();  
		this.logMessage("INFO", "server ready");
};

/**
 * @override
 */
pebble.libs.backboneBuilder.Run.prototype.onDataModelChanged = function(source, field, relPath, cb) {
	var that = this;
	if (relPath.indexOf("_request") != -1) {
	//rel:accessPoints.ACCESSPOINT._request
    var accessPoint = relPath.split(".")[1];
		this.launchClient(accessPoint, false);
		
	} else if (relPath.indexOf("_reqDownload") != -1) {
		
		that.isDownload = true;
    var accessPoint = relPath.split(".")[1];
		this.launchClient(accessPoint, true);
		
	}
	
	pebble.libs.backboneBuilder.Run.superClass_.onDataModelChanged.call(this, source, field, relPath, function() {
		cb();
	});
	return false;
};

/**
 */
pebble.libs.backboneBuilder.Run.prototype.runScenario = function() {
  this.currentIndex = 0;
  this.resumeScenario();
};

/**
 */
pebble.libs.backboneBuilder.Run.prototype.resumeScenario = function() {
  this.isRunning = true;
  var snipplets = this.getRecords('snipplets');
  while (this.currentIndex < snipplets.length) {
    var action = snipplets[this.currentIndex];
    this.currentIndex++;
    if (action.getBool('breakpoint')) {
      break;
    }
    if (!action.getBool('exclude')) {
      var snippletRef = action.getRef('.');
      var elements = snippletRef.split('.');
      var collection, name;
      name = elements.pop();
      elements.pop();
      collection = elements.pop();
      var o = pebble.libs[collection].e2ecode[name];
      if (o !== null) {
        var actionInstance = new o();
        actionInstance.executeAction(action);

        //should be in pebble.standard.e2ecode
        var className = action.getValue('class');
        var mouseEvent = action.getValue('mouseEvent');
        if (false) { //webdriver: wsid

        } else {
          //native simulated
          var el = document.getElementsByClassName(className);
          simulate(el, mouseEvent);
        }
      }
    }
  }
  this.isRunning = false;
};

/**
 * @constructor
 * @extends {pebble.shared.Authorizer}
 */
HandlesAuthorizationImpl_DummyServer = function(userId, rolesStr) {
	pebble.shared.Authorizer.call(this, userId);
	this.rolesStr = rolesStr;
}

pebble.inherits(HandlesAuthorizationImpl_DummyServer, pebble.shared.Authorizer);

/**
 * @param {string} actorGroup
 * @param {pebble.Pebble} userGroup
 * @return {boolean}
 */
HandlesAuthorizationImpl_DummyServer.prototype.isInGroup = function(actorGroup, userGroup){
	if (this.rolesStr) {
		var roles = this.rolesStr.split(",");
		for (var i = 0; i < roles.length; i++) {
			var role = roles[i];
			if (role == actorGroup) {
				return true;
			}
		}
	}
	return false;
}

function WebSocketImpl(ev) {
	
	this.event = ev;

}

WebSocketImpl.prototype.send = function (message) {

	this.event.source.postMessage(message, "*"); //this.event.origin

}

/**
 * needs to be global, read from serviceLayer
 * @constructor
 */
WebSocketServerImpl = function(){

	var that = this;

	window.addEventListener("message", function(event) {

		if (that.fn) {
			that.fn(new WebSocketImpl(event), event.data);
		}

	}, false);

}

WebSocketServerImpl.prototype.setOnMessage = function (fn) {

	this.fn = fn;

}

})();
]]>
        </devCode>
      </Run>
      <ClosureCompiler>
        <devCode>
          <![CDATA[
/**
 * @constructor
 * @extends{pebble.libs.standard.ArrayTreeBase}
 */
pebble.libs.backboneBuilder.ClosureCompiler = function(moduleAccess, dm, isLoadTop) {
  pebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);
 
};

pebble.inherits(pebble.libs.backboneBuilder.ClosureCompiler, pebble.libs.standard.ClientControl);

/**
 * @override
 */
pebble.libs.backboneBuilder.ClosureCompiler.prototype.onReady = function () {

  var origin = this.getOriginInfo("model");
  var scripts = origin.getRecords();
  var code = "";
  for (var i = 0; i < scripts.length; i++) {
    
    var script = scripts[i];
    code += script.getValue("devCode");
  
  }
  
	this.request(code);
  this.setLoaded();	

};

pebble.libs.backboneBuilder.ClosureCompiler.prototype.executeMethod = function(funcName, obj) {
  var ret = 1;
	//list all ui public methods
	if (funcName == "searchUsage") {
		this.searchUsage(obj);
	} else if (funcName == "searchHasValue") {
		this.searchWithCriteria(obj, checkHasValue);
	} else {
		return pebble.libs.backboneBuilder.ClosureCompiler.superClass_.executeMethod.call(this, funcName, obj);
	}
	return ret;
};

pebble.libs.backboneBuilder.ClosureCompiler.prototype.request = function(code) {
	var data = "";
	data += "js_code=" + encodeURIComponent(code) + "&";
	//data += "code_url=http://&";

	//WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, and ADVANCED_OPTIMIZATIONS
	data += "&compilation_level=SIMPLE_OPTIMIZATIONS";
	//data += "&compilation_level=ADVANCED_OPTIMIZATIONS";

	//text, xml, json
	data += "&output_format=json";

	//???	
	//data += "&output_file_name=something.js";

	//compiled_code, warnings, errors, and statistics
	data += "&output_info=compiled_code";
	data += "&output_info=statistics";
	data += "&output_info=warnings";
	data += "&output_info=errors";

	data += "&warning_level=verbose";

	var xmlhttp = new XMLHttpRequest();
	xmlhttp.open('POST', 'http://closure-compiler.appspot.com/compile', true);
	xmlhttp.setRequestHeader("Content-type","application/x-www-form-urlencoded");
	var that = this;
	xmlhttp.onreadystatechange = function() {
		if (xmlhttp.readyState == 4 && xmlhttp.status == 200){
			var result = JSON.parse(xmlhttp.responseText);

			if (result.compiledCode) {
				var compiledCode = new pebble.Pebble();
				compiledCode.setMarkup(".", result.compiledCode);
				var compiledCodeOrigin = that.getOriginInfo("compilationResult.compiledCode");
				compiledCodeOrigin.set(compiledCode, that, false);
			}

			//statistics
			var stats = result.statistics;
			var statPeb = new pebble.Pebble();
			statPeb.setValue("originalSize", stats.originalSize);
			statPeb.setValue("originalGZipSize", stats.originalGzipSize);
			statPeb.setValue("compressedSize", stats.compressedSize);
			statPeb.setValue("compressedGZipSize", stats.compressedGzipSize);
			statPeb.setValue("compileTime", stats.compileTime);

			var statsOrigin = that.getOriginInfo("compilationResult.statistics");
			statsOrigin.set(statPeb, that, false);

			if (result.warnings) {
				var warnings = new pebble.Pebble();
				for (var i = 0; i < result.warnings.length; i++) {
					var warning = result.warnings[i];

					var warningPeb = new pebble.Pebble();

					warningPeb.setValue("warning", warning.warning);
					warningPeb.setValue("type", warning.type);
					warningPeb.setValue("file", warning.file);
					warningPeb.setValue("lineno", warning.lineno);
					warningPeb.setValue("charno", warning.charno);
					warningPeb.setValue("line", warning.line);

					warnings.add2Array(".", warningPeb);
				}

				var origin = that.getOriginInfo("compilationResult.warnings");
				origin.set(warnings, that, false);
			}

			if (result.errors) { 
				var errors = new pebble.Pebble();
				for (var i = 0; i < result.errors.length; i++) {
					var error = result.errors[i];

					var errorPeb = new pebble.Pebble();

					errorPeb.setValue("error", error.error);
					errorPeb.setValue("type", error.type);
					errorPeb.setValue("file", error.file);
					errorPeb.setValue("lineno", error.lineno);
					errorPeb.setValue("charno", error.charno);
					errorPeb.setValue("line", error.line);

					errors.add2Array(".", errorPeb);
				}

				var errorsOrigin = that.getOriginInfo("compilationResult.errors");
				errorsOrigin.set(errors, that, false);
			}

		}
	};
	xmlhttp.send(data); 
};

/**
 * @param {pebble.libs.standard.interfaces.DataChangable} source
 * @param {string} field
 * @param {string} relPath
 * @param {Function} cb
 * @return {boolean}
 * @override
 */
pebble.libs.backboneBuilder.ClosureCompiler.prototype.onDataModelChanged = function(source, field, relPath, cb) {

	var that = this;
	pebble.libs.backboneBuilder.ClosureCompiler.superClass_.onDataModelChanged.call(this, source, field, relPath, function() {
	
			cb();
	});
};

]]>
        </devCode>
      </ClosureCompiler>
      <jasmine>
        <devCode>
          <![CDATA[
pebble.libs.backboneBuilder.jasmine = function(moduleAccess, dm, isLoadTop){
  pebble.libs.standard.ClientControl.call(this, moduleAccess, dm, isLoadTop);
  this.ifr = document.createElement("iframe");
  this.ifr.style.border = "0px";
  this.ifr.style.width = "100%";
  this.ifr.style.height = "100%";
  this.ifr.src = "/jasmine.html";
  var that = this;
	window.addEventListener("message", function(event) {
	
  	var s = event.data;
		var req0 = new pebble.Pebble(s);
		var reqId = req0.getRef("reqId");
		var type = req0.getRef("reqType");
  
		switch (type) {
  				 
		case "JASMINE-WORKSPACE":
		  pebble.libs.backboneBuilder.getDs(that, function(ws) {
		    var data = new pebble.Pebble();
		    data.set("workspace", ws);
		    
			  var model = that.getOriginInfo("model").get();
		    
		    var req1 = new pebble.Pebble();
				req1.setRef("reqType", "JASMINE-WORKSPACE");
				req1.setRef("reqId", req0.getRef("reqId"));
				req1.set("data", model);

				event.source.postMessage(req1.toString(), event.origin);
		
		  });
		break;
  
		}
	
	}, false);
	
	this.element.appendChild(this.ifr);
};

pebble.inherits(pebble.libs.backboneBuilder.jasmine, pebble.libs.standard.ClientControl);

pebble.libs.backboneBuilder.jasmine.prototype.executeMethod = function(funcName, obj) {
  var ret = 1;
  //list all ui public methods
	if (funcName == "launchTestClient") {
    this.launchTestClient(obj);	  
	} else {
		return pebble.libs.backboneBuilder.jasmine.superClass_.executeMethod.call(this, funcName, obj);
	}
	return ret;
};

pebble.libs.backboneBuilder.jasmine.prototype.launchTestClient = function(obj) {
  var params = obj.getParams();
  
	var req = new pebble.Pebble();
	req.setRef("reqType", "LAUNCH_TEST_CLIENT");
	req.setRef("accessPoint", params.getValue("accessPoint"));

	this.ifr.contentWindow.postMessage(req.toString(), "*"); // Send data to our worker.

  obj.callback();

};

/**
 * @override
 */
pebble.libs.backboneBuilder.jasmine.prototype.onDataModelChanged = function(source, field, relPath, cb) {
	var that = this;
	pebble.libs.backboneBuilder.jasmine.superClass_.onDataModelChanged.call(this, source, field, relPath, function() {

		if (field == "startServer") {
			var startServer = that.getOriginInfo("startServer").getBool();

			var model = that.getOriginInfo("model").get();
			
			that.log.innerHTML += "starting server ...<br />";
		  pebble.libs.backboneBuilder.getDs(that, function(workspace) {

  			var req = new pebble.Pebble();
  			req.setRef("reqType", "BUILD_DEPLOYMENT");
  			req.setRef("reqId", that.getId());
  			req.set("workspace", workspace);
  			req.set("deployment", model);
  
  			that.ifr.contentWindow.postMessage(req.toString(), "*"); // Send data to our worker.
		    
		  });	
		} 
		cb();
	});
	return false;
};
]]>
        </devCode>
      </jasmine>
    </clientScripts>
    <serverScripts>
      <serviceLayer>
        <devCode>
          <![CDATA[
(function() {
/**
 * @constructor
 */
var Service = function(ws, ds) {
	pebble.shared.ServerControl.call(this, ws, ds);
}
pebble.inherits(Service, pebble.shared.ServerControl);

/**
 * @param {string} funcName
 * @param {pebble.Pebble} obj
 * @return {number}
 * @override
 */
Service.prototype.executeMethod = function(funcName, obj, deployment) {
  this.deployment = deployment;
	var ret = 1;
	//list all ui public methods
	if (funcName == "loginServer") {
		this.loginServer(obj);
	} else if (funcName == "logoutServer") {
		this.logoutServer(obj);
	} else if (funcName == "replaceDs") {
		this.replaceDs(obj);
	} else if (funcName == "getDs") {
		this.getDs(obj);
	} else {
		return Service.superClass_.executeMethod.call(this, funcName, obj, deployment);
	}
	return ret;
}

/**
 * @param {pebble.Pebble} obj
 */
Service.prototype.loginServer = function(obj) {
	var params = obj.getParams();
	var url = params.getValue("returnToUrl");
	obj.setValue("redirectUrl", "fake-login.html?returnToUrl=" + url);
}
/**
 * @param {pebble.Pebble} obj
 */
Service.prototype.logoutServer = function(obj) {
	var params = obj.getParams();
	var url = params.getValue("returnToUrl");
	//set query param u=""
	var elements = url.split("&u=");
	obj.setValue("redirectUrl", elements[0]);
}

/**
 * @param {pebble.Pebble} obj
 */
Service.prototype.replaceDs = function(obj) {
	var params = obj.getParams();
	var app = params.get("app");
	var path = params.getRef("path");
	this.ds.setDs(path, app);
}

Service.prototype.getDs = function(obj) {
	var params = obj.getParams();
	var path = params.getRef("path");
	obj.set(".", this.ds.getDs(path));
}

 //WebSocketServerImpl are defined in server.html
	pebble.service = new Service(new WebSocketServerImpl(), new pebble.shared.ServerDataImpl_Xml(new pebble.Pebble()));

})();
]]>
        </devCode>
      </serviceLayer>
    </serverScripts>
    <cssTemplates>
      <TemporaryAutoComplete>
        <css>
          <![CDATA[
            .ui-autocomplete { position: absolute; cursor: default;z-index:1010 !important;} 
            ]]>
        </css>
      </TemporaryAutoComplete>
      <defaultMobile>
        <css>
          <![CDATA[ 
            .pebble-panel-full {
            position:absolute;
            top:0px;
            bottom:0px;
            right:0px;
            left:0px;
            }
            .pebble-panel-left {
            position:absolute;
            top:0px;
            bottom:0px;
            width:300px;
            left:0px;
            border-right:solid 1px #ddd;
            }
            .pebble-panel-right {
            position:absolute;
            top:0px;
            bottom:0px;
            width:300px;
            right:0px;
            border-left:solid 1px #ddd;
            }
            .pebble-panel-leftcenter {
            position:absolute;
            top:0px;
            bottom:0px;
            right:300px;
            left:0px;
            }
            .pebble-panel-centerright {
            position:absolute;
            top:0px;
            bottom:0px;
            right:0px;
            left:300px;
            }
            .pebble-panel-center {
            position:absolute;
            top:0px;
            bottom:0px;
            right:300px;
            left:300px;
            }
            .pebble-panel-header {
            position:absolute;
            top:0px;
            height:25px;
            right:0px;
            left:0px;
            }
            .pebble-panel-body {
            position:absolute;
            top:25px;
            bottom:0px;
            right:0px;
            left:0px;
            overflow-y:auto;
            }
            .pebble-description {
            padding:10px;
            overflow:auto;
            }

            /* Large desktop */
            @media (min-width: 1200px) {
            }
            /* Portrait tablet to landscape and desktop */
            @media (min-width: 768px) and (max-width: 979px) {
            }
            /* Landscape phone to portrait tablet */
            @media (max-width: 767px) {
            .section-top-space {
            display:none;
            }
            }
            /* Landscape phones and down */
            @media (max-width: 480px) {
            }
            ]]>
        </css>
      </defaultMobile>
    </cssTemplates>
    <deployment>
      <theControlApp>
        <name>Pebble Fields</name>
        <description>
          <![CDATA[Pebble Fields builds software to allows you to create
                robust, inherently stable and secure applications in the browser
                without introducing the complexity of programming, development
                tools, and infrastructure setup.]]>
        </description>
        <profiles>
          <ryan>
            <name>ryan</name>
            <friends>
              <a0>
                <ref ref="miyuki"/>
              </a0>
            </friends>
          </ryan>
          <miyuki>
            <name>miyuki</name>
            <friends>
              <a0>
                <ref ref="ryan"/>
              </a0>
            </friends>
          </miyuki>
        </profiles>
        <externalLibs>
          <chartLib1>
            <description>
              <![CDATA[Chart Library with ... elements ...]]>
            </description>
            <version>0.001</version>
            <license>MIT</license>
          </chartLib1>
          <chartLib2>
            <description>
              <![CDATA[Chart Library with ... elements ...]]>
            </description>
            <version>0.001</version>
            <license>MIT</license>
          </chartLib2>
          <meteorBackend1>
            <description>
              <![CDATA[Backend that wraps meteorjs ...]]>
            </description>
            <version>0.002</version>
            <license>BSD</license>
          </meteorBackend1>
        </externalLibs>
        <lov>
          <side>
            <name>side</name>
            <array>
              <t>top</t>
              <b>bottom</b>
              <l>left</l>
              <r>right</r>
            </array>
          </side>
          <relAppPath>
            <name>relAppPath</name>
            <array>
              <this>this</this>
              <parent>parent</parent>
              <topApp>topApp</topApp>
            </array>
          </relAppPath>
          <numberFormats>
            <name>numberFormats</name>
            <array>
              <decimal>Decimal</decimal>
              <currency>Currency</currency>
              <scientific>Scientific</scientific>
              <percent>Percent</percent>
              <custom>Custom</custom>
            </array>
          </numberFormats>
          <formFactor>
            <name>formFactor</name>
            <array>
              <desktop>desktop</desktop>
              <mobile>mobile</mobile>
              <tablet>tablet</tablet>
              <phonegap>phonegap</phonegap>
            </array>
          </formFactor>
          <languages>
            <name>languages</name>
            <array>
              <ja>ja</ja>
              <en>en</en>
            </array>
          </languages>
          <genericOperators>
            <name>genericOperators</name>
            <array>
              <eq>eq</eq>
              <lt>lt</lt>
              <gt>gt</gt>
            </array>
          </genericOperators>
          <dateTimeFormats>
            <name>dateTimeFormats</name>
            <array>
              <fullDateTime>Full Date/Time</fullDateTime>
              <longDateTime>Long Date/Time</longDateTime>
              <mediumDateTime>Medium Date/Time</mediumDateTime>
              <shortDateTime>Short Date/Time</shortDateTime>
              <fullDate>Full Date/Time</fullDate>
              <longDate>Long Date/Time</longDate>
              <mediumDate>Medium Date/Time</mediumDate>
              <shortDate>Short Date/Time</shortDate>
              <fullTime>Full Date/Time</fullTime>
              <longTime>Long Date/Time</longTime>
              <mediumTime>Medium Date/Time</mediumTime>
              <shortTime>Short Date/Time</shortTime>
              <custom>Custom</custom>
            </array>
          </dateTimeFormats>
          <winRefPoints>
            <name>winRefPoints</name>
            <array>
              <tl>tl</tl>
              <tr>tr</tr>
              <bl>bl</bl>
              <br>br</br>
            </array>
          </winRefPoints>
        </lov>
      </theControlApp>
      <stringMaps>
        <css/>
        <string>
          <workspace>
            <![CDATA[#Workspace

                  # Getting Started

                  Pebble is a ...
                  For devopers in a hurry, markdown of apps.

                  >This should explain how to get a basic app running in the browser.  At the end introduce the environments you can deploy to.

                  ## Workspace

                  Your workspace contains everything to ...  is created and remains in your browser local storage.  You may import and export workspaces.

                  - Go to site
                  - Import standard

                  - Add css, bootstrap.css

                  ## Create an Application

                  The application is what defines how and what data you will collect from the users of your application.


                  ### Create Types

                  The types collecion consist of all the types that you will use in your application.  

                  ### Fields

                  Defining the fields on your applicatin is stating where you will logically store each type of data.
                  The fields can be thought of in two types of data, collection and configuration.

                  #### Collections

                  Collecitons fields specify ...

                  #### Config Data

                  Configuration data is instatiated when you create your deployment for the application.
                  Here you may have fields such as "Application Name", "Description", etc.

                  ##### List of Values

                  Often your application requires predefined list of values.  This may be a
                  convinient place to define such static data. 


                  ### Create Roles

                  Create ficticious roles to map to data.  The roles are also available to your
                  controls at `app.global.user.roles` to help construct you workflow.




                  ### Create Types

                  ### Create Controls and Panels

                  Create controls to display your types(nav, details)
                  Create top control
                  Controls are the *controllers" in the client side MVC architecture.  The
                  container multiple *views*.  The data in a control is shared accross views.

                  ### Create Top Controls

                  ## Deployments

                  ## Creating a Deployment

                  A deployment is an instance of your application.  

                  ### Datasource Maps

                  ### Group Maps

                  ### Access Points

                  Add and name and specify on of your top controls.

                  #### Dependencies

                  #### Header Scripts


                  ## Run the Server, Test, Send Away



                  ]]>
          </workspace>
          <deployments>
            <![CDATA[#Deployments

                  ]]>
          </deployments>
          <schemafields>
            <![CDATA[#Schema Fields

                  ]]>
          </schemafields>
          <queries>
            <![CDATA[#Queries

                  ]]>
          </queries>
          <services>
            <![CDATA[#Services

                  ]]>
          </services>
          <types>
            <![CDATA[#Utility Types

                  ]]>
          </types>
          <servercode>
            <![CDATA[#Server Side Code

                  ]]>
          </servercode>
          <widgets>
            <![CDATA[#Widgets

                  The building blocks for your user interface.



                  This page lets you create HTML by entering text in a simple format that's easy to read and write.

                  - Type Markdown text in the left window
                  - See the HTML in the right

                  Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email.  As [John Gruber] writes on the [Markdown site] [1]:

                  > The overriding design goal for Markdown's
                  > formatting syntax is to make it as readable 
                  > as possible. The idea is that a
                  > Markdown-formatted document should be
                  > publishable as-is, as plain text, without
                  > looking like it's been marked up with tags
                  > or formatting instructions.

                  This document is written in Markdown; you can see the plain-text version on the left.  To get a feel for Markdown's syntax, type some text into the left window and watch the results in the right.  You can see a Markdown syntax guide by switching the right-hand window from *Preview* to *Syntax Guide*.

                  Showdown is a Javascript port of Markdown.  You can get the full [source code] by clicking on the version number at the bottom of the page.

                  **Start with a [blank page] or edit this document in the left window.**

                  [john gruber]: http://daringfireball.net/
                  [1]: http://daringfireball.net/projects/markdown/
                  [source code]: http://www.attacklab.net/showdown-v0.9.zip
                  [blank page]: ?blank=1 "Clear all text"


                  ## Syntax highlighting

                  When combined with [highlight.js][] this starts looking as a kind of IDE :-)

                  HTML:

                  <h1>HTML code</h1><p class="some">This is an example</p>

                  XML:

                  <innerMarkup ref="myref"><data>55</data><field /></innerMarkup>

                  Python:

                  def func():
                  for i in [1, 2, 3]:
                  print "%s" % i

                  Javascript:

                  function myfunc() {
                  var a = 1;
                  for (var i = 0; i < obj.count; i++) {
                  //do something
                  }
                  }

                  [highlight.js]: http://softwaremaniacs.org/soft/highlight/en/]]>
          </widgets>
          <filters>
            <![CDATA[#Filters
                  # Features

                  Features allows you to augment the base control system.  You may handle custom tags accross multiple types of widgets to implement your feature.

                  > Where would they define the fields???

                  ## How to

                  `pebble.libs.standard.features.MyFeature = function () { ...`

                  Must inherit `pebble.libs.standard.Feature`

                  Internally, in ClientControl constructor

                  for (key in pebble.libs.standard.features) {
                  this.features[key] = new pebble.libs.standard.features[key](this);
                  }

                  ## ExecuteMethod

                  Allow functions to be defined (note: on ClientControl)

                  >standard base features migth need particular instantiaation order

                  for (key in this.features) {
                  var handled = this.features[key].executeMethod(obj);
                  if (handled) {
                  break;
                  }
                  }

                  ## eb
                  export PATH=$PATH:<path to eb>
                    eb start
                    eb status --verbose
                    git aws.push
                    eb stop								//this will terminate the app and the RDS data will be lost, be sure to do a RDS snapshot
                    eb delete							//clean up from directory

                    ]]>
          </filters>
          <expressions>
            <![CDATA[
                    # Expression

                    Expressions are easily inputted text that can only handle and be evaluated to
                    native values (text, bool, number, etc.) at a certain trigger points.
                    Expression cannot contain advanced logic such as condionals, loops, or
                    functions.  When logic goes beyond the scope of expressions *custom controls*
                    are used.

                    Expressions usage differs slightly depending on the context in which they are
                    used.

                    ## Expressions in control's innerMarkup

                    Expressions can be used in a control's innerMarkup for simple data display.
                    They are evaluated on load and continue to be bound and managed by the control.

                    <innermarkup><span>{{model.num * 10}}</span></innermarkup>

                    At load time all child controls have been loaded.  Their data may be accessed
                    by an expression if you define a bind point on the control to which the child control binds.

                    <innermarkup><span>{{bindPoint}}</span><div><control ref="standard.controls.text"><model><_bind ref="bindPoint" /></model><model>hello!</model></control></div></innermarkup>

                  TBD: Put back _meta in OriginInfo.getValue()

                  ## Expressions as control data 

                  Expressions within a control are evaluated at load time and are bound and
                  managed by the control. When data in the expression changes the expression is
                  re-evaluated.  After evaluated the result is set, notifiying other controls
                  possibly bound.

                  <innermarkup><span><item ref="system:text"><startopen><_xp>!ctx:isOpen</_xp></startopen><sum><_xp>num1:model + num2:model</_xp></sum></item></span></innermarkup>

              ### Special Tags that use this

              Conrols can accomplish tasks when data is set.  Expression can trigger these
              tasks when the expression sets back to the control.

              #### Filter

              ArrayTreeBase sends the filter tag to the server anytime the `<filter>` tag is
                altered.  The following will replace the values and set back to the control.

                <filter><condition><_replace>name like txt1:model && age >= num1:model</_replace></condition></filter>

              > note: this would nice if it could handle functions/services as well.  ex. age >= num1:getData('model')

              If you server only needs the query data, the following would also work using
              `_bind` because any change will cause ArrayTreeBase to send `<filter>` to the
                server.

                <filter><queryFunction ref="topApp.queryA" /><item><name><_bind ref="txt1:model" /></name><age><_bind ref="num1:model" /></age></item></filter>

            #### ShowRecsFilter

            ArrayControl applies the `<showRecsFilter>` to every array item.

              <showRecsFilter><_replace>name == txt1:model && age >= num1:model</_replace></showRecsFilter>

            > note: formatRecs will have to find name, age  (not surrounded by "" words) or use handlebars
            <_replace>{{name}} == txt1:model && {{age}} >= num1:model</_replace>

          #### Class

          ClientControl sets the container css class in `<class>` if it exists.

            <class><_xp>ctx:model._selection.default.selected == true ? "active" : ""</xp></class>


          #### InnerControl function execution, need?

          Arbitrary functions can be executed.  The expression will bind to relavant data.

          <onDataChangedLogic><exec ref="mainStackPanel.selectSingleItem"><meta><_xp>ctx:issomething ? "main" : ... </_xp></meta></exec></onDataChagedLogic>

        ## Expressions in displayControls

        Expressions can be used the `displayControl.innerMarkup` when using *simple markup* as the array control's display control.
        When using in diplay controls, `model` is not necessary because *simple markup* controls do not define data of their own.

        <displayControl><innermarkup><span>{{name}}</span></innermarkup></displayControl>

        In rare cases where the array item is a native type, such as text, specify the model as `{{.}}`.

        The array item's key can be displayed with `{{_meta}}`

        ## Expressions as parameters to functions

        Expressions can be used in parameters to functions which are evaluated when the
        function executes.  

        <myfunction><exec ref="this.dosomething"><param>{{this.aa.bb + item.aa}}</param></exec></myfunction>


        ### ClientControl Specifiers

        - `this` :this means the executing control
        - `ctx` :ctx refers to the executing executing, the context or control that the
        current control is executing in.
        - `pctx` : pctx
        - `item` :  Refers to an item passed in.  Depending on the context may refer to
        different objects.
        - `app` : Refers to the top app.  `global` would get the *global object* 
        - `event.data`:

        Specifiers cannot reach modules that have not been instatiated, such as panels yet to be rendered in a *StackPanel*

        > specifiers might need a prefix so they are not confused with other text "how
        > about this." would trigger specifier.

        ### ServerControl Specifiers

        - `doc`:  TBD  


        ## Extending Expressions

        > extending probably needs to be an optional injected object because it needs
        > to be available to all controls.

        ]]>
          </expressions>
          <clientcode>
            <![CDATA[#Client Side Code

        ]]>
          </clientcode>
          <css>
            <![CDATA[#Css

        ]]>
          </css>
          <arrays>
            <![CDATA[#Collections and Arrays

        Arrays are lists\ of items.  There are two types of arrays, external and
        embedded.  External arrays' items are the unit of storage on the server,
        sometimes refered to as documents or records in a database.  Embedded arrays
        are lists of items that exist in an external item.  Due to these differences,
        what you can do with these arrays also differs.

        The server corresponds with a server proxy to keep data in sync.

        ### Configuration: Server Fields, Proxy protocol

        Fields can be defined for a server to configure functionality declaratively.

        Similar to `_selection`, the proxy generates `_collection` tags.  These can be
        used when you don't push and reload data to show that the data state has
        changed.

        > If the `arrayControlType=readWrite`, the proxy may send `isDirty` ...

        ## Server Proxy

        The Server Proxy is a buffer between the UI and the actual server.  The UI
        interacts with the proxy as if it has collections of objects.  The proxy
        implements the actual CRUD operations to the datasource.  Because the
        applications being created are stateful, one of the main jobs of the proxy is
        to ensure fresh data.

        The proxy knows about the state of the application, which controls have been
        loaded, fields required, etc.  Only ArrayTreeBase controls that handle
        collection items are relavent, including the ArrayTreeBase controls in
        references.  It can respond to server events and notify the loaded controls.
        The controls also specify what `arrayControlType` they are so the proxy can
        perform tasks more effectively.  For example, if an `arrayControlType=readOnly`
        then the proxy can safely push and reload data at anytime.  

        If a computer sleeps, etc, the state can become out of sync with the server.
        The server proxy can reload the controls registered to it.

        ##External Arrays

        With external arrays a separate call to retrieve items must be made.  The
        retrived items can, like embedded arrays, be filterd, paged and sorted.  

        - External arrays must be pulled down from an *Array Control* via a *query*.
        Furthermore, the *Array Control* must specify the required fields in *query*
        and cannot depend on what other Array Controls download.  They are kept in sync
        with the server origin directly.

        - There is no natural order, display order must be performed in the query. as
        well as other operations.  

        - *Paging* also must be done in the query.  

        - By default, state is not mainted accross queries, except for *Selection
        Policy* data.


        > client need to send presences notifications (device id, bind points) every n
        > seconds so server knows currently connected devices.  When device comes back
        > online it sends presence.  The server will also need to time stamp bind
        > points to know whether a device is in sync or not.

        Basic Operations

        - Create:  Create an external array item will create it on the server side.  If
        you want to create the item with data, build a input control for your model
        and expose a function that will be executed *onSave*.
        - Retrieve:  Retrieve is usually used on controls that must display more
        information when selected such as *ArrayStackControl* 
        - Update:
        - Delete: 
        - Query:

        ## Filtering Process

        1. Retrieve records via a *filter* from the server (external arrays only);
        2. The retrived array, or an embedded array may be further filtered via a *showRecsFilter*.
        3. The final record set, *showRecs*, may be paged and sorted.  Thus, Pagers and Sorters bind to this array.

        ##Embedded Arrays 

        - Embedded arrays are always fully avaiable with the encompassing document.
        Thus, *filter* operations are of no use, only *localfilters* work.  Likewise,
        all fields for the items in the array are also available.  

        - Embedded arrays have natural order, the order that they were stored.  Their
        order can be manupulated, via drag drop operations, etc.  

        - Embedded arrays are fields and therefore can be manipulated without persiting
        to the datastore.

        Embedded Arrays are different than collections and are updated similar to
        normal data on a collection item.  They are different from normal data in that
        they have CRUD and order operations placed on them.  As such, the operations
        all fall under a collection item `update` with an extended signature.

        - relPath : equal to the path to the array and the operation
        - operation : update | add | delete | move

        Basic Operations

        - Create:  Creating an embedded array item creates it on the client side.
        Often, you will want to follow your *create* with a *select* **TBD**
        *createandselect* because you need to select the created item.  Or, use return
        of *create* statement.
        - Retrieve:  There is not need to retrieve. 
        - Update:  Updates client side only.  Use *writethru* to persist to the server.
        - Delete:  Deletes client side only.  Use *writethru* to persist to the server. 
        - Filter:  There is no filter, its all in the encompassing item.
        - Local Filter:  





        ## Filter

        For an *Array Control* it must retrieve data by setting a *filter* field.
        Because all *Array Controls* bound to *External Arrays* get their own data,
        each must have a *filter* field to load data ... TBD.  They are bound together
        via a path and send and receive *Selection Policy* and *Array Events*, however
        they must react directly with the server origin upon these events.


        ## Local Filter

        An *Array Control's* local filter filters data from whereever it is bound and
        sets the data in the field *showrecs*.  Multilevel filtering can be achieved
        when child *Array Controls* bind to the *showrecs* field of their context and
        then may filter futher.  

        > old queryConditions (tag, location, my, meta, date,
        number, text, bool, isNull, type, reference, inheritType,
        referenceAncestorPath, in)

        ## Page Filter

        Further, a page filter can be applied to the result showRecs.  Sort is also
        related.  On sort, should the page change to the page with the selected item,
        stay on the current page, go to page 0.


        ### Filter Execution

        Filter parameters can be directly set or retrieved from the UI via *_generate*
        and *_bind*.  Calling the array control's doQuery() or changes received from
        *_bind* parameters will execute the filter.  *_generate* will be calculated
        when the filter executes.

        <showRecsFilter><tag>Baseball</tag><parentId><_generate ref="ctx.getReference()" /></parentId><searchText><_bind ref="searhText" /></searchText></showRecsFilter>

    ## Selection Policy

    Selection is based on some type of user input that triggers a function on
    ArrayTreeBase or its decendants.  ArrayTreeBase supports single and multiple
    generic selection policies.  It exposes setSingleSelectedItem and
    setMultipleSelectedItem to be accessed in any way.  That is, the policy is
    decouple from the input event.  One could add new input methods, such as voice,
    and trigger these functions when certain conditions are met.  If one were to
    add a new policy, they would sub class ArrayTreeBase and expose new public
    functions.

    ex.


    ### Selection Groups

    Selection policies manipulate data's meta value at path, "ps.selection".  Items
    belong to multiple selections groups as soon as they are selected by setting
    "ps.selection.groupId.selected" = "true".  Thus, items can be selected in one
    group while remaining unselected in another.  Selection policies sets these
    values based on certain rules, or a policy.  For example, the single select
    policy is trigger by calling setSingleSelectedItem which then deselects the
    current and selects the new item.  It may do other things such as fire an event
    changing the data at the array origin path "ps.selectedMeta".  This would allow
    controls interested in knowing when selectedMeta changed happend can be alerted.
    Multiple select policy toggles on/off an item selected.  It may also check key
    events to do other things.
    QueryCondition is now an expression.  The envrironment will evaluate it.  Thus,
    when on the client side it is used for showRecsFilter, display filter, dragDrop
    filter.  The server side can parse this to generate a query statement or use it
    in funcitons.


    ### Pagination

    Pagination allows you to view a small subset of the *showRecs* data.
    Pagination data is generated by ArrayControl when *itemPerPage* is set.
    Pagination controls can bind to *arrayPages* of the ArrayControl to display the
    pages available.  When the ArrayControl handles external arrays it uses
    *itemsPerPage* to make decisions on retrieving data.

    The ArrayControl generates *arrayPages* for an array bound to its *showRecs* field.
    For external arrays a query must be made for this to be
    set.  

    #### Embedded Arrays

    Embedded arrays are always complete and thus can filter pages by using the *showRecsFilter*.


    <showRecsFilter><page><_generate ref="pager.getData('currentPage')" /></page></showRecsFilter>

  #### External Arrays

  With External Arrays the only way to know if you have enough data for a page is
  to leaving the filtering to the server.  Although slower in performance,
  performing the filtering on the server always addresses all of the data.  For
  external arrays if you are fetching using pagination then you should not use
  the *showRecsFilter*

  <filter><searchText>Ramen</searchText><page><_generate ref="pager.getData('currentPage')" /><_bind ref="currentPage" /></page></filter>

> later data retrieval schemes could be configurable, prefetch.  ArrayControl must keep a prefetch cache.
>- buffer: when cached number of pages < buffer then fetch next.

<prefetch><num>5</num><buffer>3</buffer></prefetch>

### Sorting

Array controls expose `sort` functions.  If you need other sort functions you
may extend ArrayControl and overide and/or augment.




## ArrayControl

<control ref="standard:ArrayControl"><beforeload /><trigger /><proxy>

    > Might not need SERVER or DATA-EVENTS because it will just be configuring <proxy>


      ## ArrayStackControl

      ArrayStackControls require more decisions regarding behavior.

      - onAdded:  Do you want to select the new item.
      - onUpdated:  Do you want to push data
      - onDeleted:  Do you want to select previous.

      ## Panels

      Panels help display the data for a collection item and must decide whether to
      update when loaded/rendered or redisplayed.  The default is to push updates and
      reload control.  You may not wan't push and reload if you are editing.  There
      are also hooks to execute functions.

      <control ref="standard:StackPanel"><onUpdated /><onAdded /><model><win1><dontPushUpdate>true</dontPushUpdate>


            ## Simulation Code

            You may write code to simulate your server by inheriting the `ServerSimulator`
            base class.  The base class allows basic CRUD operations to collections of
            objects.

            code ...

            ## Server Proxy Code

            You may write your own server proxy by inheriting from the `ServerProxy` base class.  


            ### doQuery

            - path
            - arrayControltype: readOnly, readWrite

            ### getArrayItemDocument
            ]]>
          </arrays>
        </string>
      </stringMaps>
      <accessPoints>
        <pebbleDesktop>
          <topControl ref="default"/>
          <dependencies>
            <a1 ref="standard"/>
            <a2 ref="bootstrap"/>
            <a0 ref="backboneBuilder"/>
          </dependencies>
          <groupMaps>
            <a0 ref="viewOnly">
              <name>groupMap1</name>
              <toGroup ref="theModel.clientWorkspace.libs.site.types.usergroup-defaults">
                <allowedStandardUserGroup ref="public"/>
              </toGroup>
            </a0>
            <a1 ref="editors">
              <name>groupMap2</name>
              <toGroup ref="theModel.clientWorkspace.libs.site.types.usergroup-defaults">
                <allowedStandardUserGroup ref="public"/>
              </toGroup>
            </a1>
            <a2 ref="creators">
              <name>groupMap3</name>
              <toGroup ref="theModel.clientWorkspace.libs.site.types.usergroup-defaults">
                <allowedStandardUserGroup ref="public"/>
              </toGroup>
            </a2>
          </groupMaps>
        </pebbleDesktop>
        <pebbleMobile>
          <topControl ref="defaultMobile"/>
          <dependencies>
            <a1 ref="standard"/>
            <a0 ref="backboneBuilder"/>
          </dependencies>
        </pebbleMobile>
        <pebblePhoneGap>
          <topControl ref="defaultPhoneGap"/>
          <dependencies>
            <a1 ref="standard"/>
            <a0 ref="backboneBuilder"/>
          </dependencies>
        </pebblePhoneGap>
        <pebbleFacebook>
          <topControl ref="defaultGadget"/>
          <dependencies>
            <a1 ref="standard"/>
            <a0 ref="backboneBuilder"/>
          </dependencies>
        </pebbleFacebook>
        <pebbleGadget>
          <topControl ref="defaultGadget"/>
          <dependencies>
            <a1 ref="standard"/>
            <a0 ref="backboneBuilder"/>
          </dependencies>
        </pebbleGadget>
        <richTextEditorTest>
          <topControl ref="richTextEditorTest"/>
          <dependencies>
            <a1 ref="standard"/>
            <a0 ref="backboneBuilder"/>
          </dependencies>
        </richTextEditorTest>
        <tableTest>
          <topControl ref="tableTest"/>
          <dependencies>
            <a1 ref="standard"/>
            <a2 ref="bootstrap"/>
            <a0 ref="backboneBuilder"/>
          </dependencies>
        </tableTest>
        <testAppControl>
          <topControl ref="testAppControl"/>
          <dependencies>
            <a1 ref="standard"/>
            <a0 ref="backboneBuilder"/>
          </dependencies>
        </testAppControl>
      </accessPoints>
    </deployment>
    <types>
      <_compressedCollection>true</_compressedCollection>
    </types>
    <controls>
      <_compressedCollection>true</_compressedCollection>
    </controls>
    <services>
      <_compressedCollection>true</_compressedCollection>
    </services>
  </backboneBuilder>
</theModel_libs>
<theModel_libs_backboneBuilder_types>
  <listOfValues>
    <description/>
    <fields>
      <name>
        <name>name</name>
        <type ref="theModel.libs.standard.types.text"/>
      </name>
      <array>
        <name>array</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.text"/>
        </type>
      </array>
    </fields>
  </listOfValues>
  <profile>
    <description>
      <![CDATA[User preferences.]]>
    </description>
    <fields>
      <name>
        <name>profile name</name>
        <type ref="theModel.libs.standard.types.text"/>
      </name>
      <backgroundColor>
        <name>background color</name>
        <type ref="theModel.libs.standard.types.text"/>
      </backgroundColor>
      <editorKeyBindings>
        <name>editor key bindings</name>
        <type ref="theModel.libs.standard.types.text"/>
      </editorKeyBindings>
      <editorFontSize>
        <name>editor font size</name>
        <type ref="theModel.libs.standard.types.text"/>
      </editorFontSize>
      <editorTheme>
        <name>editor theme</name>
        <type ref="theModel.libs.standard.types.text"/>
      </editorTheme>
      <friends>
        <name>friends</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.itemRelRef"/>
        </type>
      </friends>
      <rtc>
        <name>rtc</name>
        <type ref="theModel.libs.standard.types.rtc"/>
      </rtc>
    </fields>
  </profile>
  <searchCriteria>
    <description>
      <![CDATA[ ]]>
    </description>
    <fields>
      <keyword>
        <name>keyword</name>
        <type ref="theModel.libs.standard.types.text"/>
      </keyword>
    </fields>
  </searchCriteria>
  <compilationResult>
    <description>
      <![CDATA[ ]]>
    </description>
    <fields>
      <warnings>
        <name>warnings</name>
        <type ref="theModel.libs.standard.types.array"/>
      </warnings>
      <errors>
        <name>errors</name>
        <type ref="theModel.libs.standard.types.array"/>
      </errors>
      <originalSize>
        <name>originalSize</name>
        <type ref="theModel.libs.standard.types.text"/>
      </originalSize>
    </fields>
  </compilationResult>
  <workspace>
    <description>
      <![CDATA[ ]]>
    </description>
    <fields>
      <name>
        <name>name</name>
        <type ref="theModel.libs.standard.types.text"/>
      </name>
      <description>
        <name>description</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </description>
      <libs>
        <name>libs</name>
        <type ref="theModel.libs.standard.types.collection">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.lib"/>
        </type>
      </libs>
      <globalIndexItems>
        <name>globalIndexItems</name>
        <type ref="theModel.libs.standard.types.collection">
          <arrayFormId ref="theModel.libs.standard.types.globalIndexItem"/>
        </type>
      </globalIndexItems>
    </fields>
  </workspace>
  <accessPoint>
    <fields>
      <description>
        <name>description</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </description>
      <topControl>
        <name>top control</name>
        <type ref="theModel.libs.standard.types.itemRelRef"/>
      </topControl>
      <dependencies>
        <name>dependencies</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.itemRelRef"/>
        </type>
      </dependencies>
    </fields>
  </accessPoint>
  <clientScript>
    <description/>
    <fields>
      <name>
        <name>name</name>
        <type ref="theModel.libs.standard.types.text"/>
      </name>
      <description>
        <name>description</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </description>
      <devCode>
        <name>devCode</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </devCode>
      <actualCode>
        <name>actualCode</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </actualCode>
    </fields>
  </clientScript>
  <cssTemplate>
    <description/>
    <fields>
      <css>
        <name>css</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </css>
      <less>
        <name>less</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.markup"/>
        </type>
      </less>
    </fields>
  </cssTemplate>
  <deployment>
    <description>
      <![CDATA[Deployment is created at development time but much of it is auto created when deployment is built into a datasource.  That is why at runtime only collections are accessible.  Thus, app is not accessible, rather app is placed in the collection appInstances when deployment is created. ]]>
    </description>
    <fields>
      <name>
        <name>name</name>
        <type ref="theModel.libs.standard.types.text"/>
      </name>
      <description>
        <name>description</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </description>
      <groupMaps>
        <name>groupMaps</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.itemRelRef"/>
        </type>
      </groupMaps>
      <scenarios>
        <name>scenarios</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.scenario"/>
        </type>
      </scenarios>
      <customizeLibs>
        <name>customizeLibs</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.itemRelRef"/>
        </type>
      </customizeLibs>
      <theControlApp>
        <name>theControlApp</name>
        <type ref="theModel.libs.standard.types.itemRelRef">
          <itemPath ref="theModel.clientWorkspace.libs"/>
        </type>
      </theControlApp>
      <accessPoints>
        <name>accessPoints</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.accessPoint"/>
        </type>
      </accessPoints>
      <strings>
        <name>strings</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.markup"/>
        </type>
      </strings>
      <jasmineSpecs>
        <name>jasmineSpecs</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.testScript"/>
        </type>
      </jasmineSpecs>
      <clientScripts>
        <name>clientScripts</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.clientScript"/>
        </type>
      </clientScripts>
      <serverScripts>
        <name>serverScripts</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.clientScript"/>
        </type>
      </serverScripts>
      <appInstances>
        <name>appInstances</name>
        <type ref="theModel.libs.standard.types.collection">
          <arrayFormId ref="theModel.libs.standard.types.indexItem"/>
        </type>
      </appInstances>
      <libs>
        <name>libs</name>
        <type ref="theModel.libs.standard.types.collection">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.lib"/>
        </type>
      </libs>
    </fields>
  </deployment>
  <scenario>
    <description/>
    <fields>
      <name>
        <name>name</name>
        <type ref="theModel.libs.standard.types.text"/>
      </name>
      <target>
        <name>target</name>
        <type ref="theModel.libs.standard.types.text"/>
      </target>
      <snipplets>
        <name>snipplets</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.itemRelRef"/>
        </type>
      </snipplets>
    </fields>
  </scenario>
  <testScript>
    <description/>
    <fields>
      <name>
        <name>name</name>
        <type ref="theModel.libs.standard.types.text"/>
      </name>
      <description>
        <name>description</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </description>
      <devCode>
        <name>devCode</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </devCode>
    </fields>
  </testScript>
  <groupMap>
    <fields>
      <name>
        <name>name</name>
        <type ref="theModel.libs.standard.types.text"/>
      </name>
      <description>
        <name>description</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </description>
      <toGroup>
        <name>toGroup</name>
        <type ref="theModel.libs.standard.types.itemRelRef"/>
      </toGroup>
    </fields>
  </groupMap>
  <lib>
    <description>
      <![CDATA[The schema is the definition for creating application schemas.]]>
    </description>
    <inherits ref="theModel.libs.standard.types.superBase"/>
    <fields>
      <description>
        <name>description</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </description>
      <version>
        <name>version</name>
        <type ref="theModel.libs.standard.types.text"/>
      </version>
      <license>
        <name>license</name>
        <type ref="theModel.libs.standard.types.text"/>
      </license>
      <actorGroups>
        <name>actorGroups</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.actorGroup"/>
        </type>
      </actorGroups>
      <deployment>
        <name>deployment</name>
        <type ref="theModel.libs.backboneBuilder.types.deployment"/>
      </deployment>
      <types>
        <name>types</name>
        <type ref="theModel.libs.standard.types.collection">
          <arrayFormId ref="theModel.libs.standard.types.basicType"/>
        </type>
      </types>
      <controls>
        <name>controls</name>
        <type ref="theModel.libs.standard.types.collection">
          <arrayFormId ref="theModel.libs.standard.types.control"/>
        </type>
      </controls>
      <queries>
        <name>queries</name>
        <type ref="theModel.libs.standard.types.collection">
          <arrayFormId ref="theModel.libs.standard.types.query"/>
        </type>
      </queries>
      <e2esnipplet>
        <inherits ref="theModel.clientWorkspace.libs.standard.types.superBase"/>
        <fields>
          <name>
            <name>name</name>
            <type ref="theModel.clientWorkspace.libs.standard.types.text"/>
          </name>
          <description>
            <name>description</name>
            <type ref="theModel.clientWorkspace.libs.standard.types.markup"/>
          </description>
          <devCode>
            <name>devCode</name>
            <type ref="theModel.clientWorkspace.libs.standard.types.markup"/>
          </devCode>
        </fields>
      </e2esnipplet>
      <e2ecode>
        <name>e2ecode</name>
        <type ref="theModel.libs.standard.types.collection">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.e2esnipplet"/>
        </type>
      </e2ecode>
      <filters>
        <name>filters</name>
        <type ref="theModel.libs.standard.types.collection">
          <arrayFormId ref="theModel.libs.standard.types.expressionFilter"/>
        </type>
      </filters>
      <validations>
        <name>validations</name>
        <type ref="theModel.libs.standard.types.collection">
          <arrayFormId ref="theModel.libs.standard.types.validationFilter"/>
        </type>
      </validations>
      <services>
        <name>services</name>
        <type ref="theModel.libs.standard.types.collection">
          <arrayFormId ref="theModel.libs.standard.types.functionDef"/>
        </type>
      </services>
      <clientScripts>
        <name>clientScripts</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.clientScript"/>
        </type>
      </clientScripts>
      <serverScripts>
        <name>serverScripts</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.clientScript"/>
        </type>
      </serverScripts>
      <cssTemplates>
        <name>cssTemplates</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.cssTemplate"/>
        </type>
      </cssTemplates>
    </fields>
  </lib>
  <backboneBuilder>
    <description>
      <![CDATA[backboneBuilder type ]]>
    </description>
    <fields>
      <name>
        <name>name</name>
        <type ref="theModel.libs.standard.types.text"/>
      </name>
      <description>
        <name>description</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </description>
      <lov>
        <name>lov</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.listOfValues"/>
        </type>
      </lov>
      <clientWorkspace>
        <name>clientWorkspace</name>
        <type ref="theModel.libs.backboneBuilder.types.workspace"/>
      </clientWorkspace>
      <profiles>
        <name>profiles</name>
        <type ref="theModel.libs.standard.types.collection">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.profile"/>
        </type>
      </profiles>
      <workspaces>
        <name>workspaces</name>
        <type ref="theModel.libs.standard.types.collection">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.workspace"/>
        </type>
      </workspaces>
      <externalLibs>
        <name>externalLibs</name>
        <type ref="theModel.libs.standard.types.collection">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.lib"/>
        </type>
      </externalLibs>
    </fields>
  </backboneBuilder>
</theModel_libs_backboneBuilder_types>
<theModel_libs_backboneBuilder_controls>
  <default>
    <inherits ref="theModel.libs.standard.controls.AppControlBase"/>
    <fields>
      <model>
        <name>backboneBuilder</name>
        <type ref="theModel.libs.backboneBuilder.types.backboneBuilder"/>
      </model>
      <wins>
        <name>wins</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.win"/>
        </type>
      </wins>
      <showUtils>
        <name>showUtils</name>
        <type ref="theModel.libs.standard.types.bool"/>
      </showUtils>
      <fullScreen>
        <name>fullScreen</name>
        <type ref="theModel.libs.standard.types.bool"/>
      </fullScreen>
    </fields>
    <serverBindMatchPaths>
      <a2>
        <path ref="model.libs"/>
      </a2>
    </serverBindMatchPaths>
    <fixedData>
      <layoutStates>
        <b0>
          <url>libs/{{lib}}</url>
          <layoutPaths>
            <a0 ref="libs.contents.libsDetailsPanel.{{lib}}"/>
          </layoutPaths>
          <dataPath ref="model.clientWorkspace.libs.{{lib}}"/>
        </b0>
        <b1>
          <url>libs/{{lib}}/customizeLibs/{{customizeLib}}</url>
          <layoutPaths>
            <a0 ref="customizeLibs.{{lib}}.contents.{{customizeLib}}"/>
          </layoutPaths>
          <dataPath ref="model.clientWorkspace.libs.{{lib}}.deployment.customizeLibs.{{customizeLib}}"/>
        </b1>
        <b4>
          <url>libs/{{lib}}/customizeLibs/{{customizeLib}}/{{panel}}</url>
          <layoutPaths>
            <a0 ref="customizeLibs.{{lib}}.contents.{{customizeLib}}.{{panel}}"/>
          </layoutPaths>
        </b4>
        <b6>
          <url>libs/{{lib}}/customizeLibs/{{customizeLib}}/stringMaps/{{stringMap}}</url>
          <layoutPaths>
            <a0 ref="customizeLibs.{{lib}}.contents.{{customizeLib}}.stringMaps.{{stringMap}}"/>
          </layoutPaths>
          <dataPath ref="model.clientWorkspace.libs.{{lib}}.deployment.customizeLibs.{{customizeLib}}.stringMaps.{{stringMap}}"/>
        </b6>
        <b2>
          <url>libs/{{lib}}/accessPoints/{{accessPoint}}</url>
          <layoutPaths>
            <a0 ref="accessPoints.{{lib}}.accessPoints.contents.{{accessPoint}}"/>
          </layoutPaths>
          <dataPath ref="model.clientWorkspace.libs.{{lib}}.deployment.accessPoints.{{accessPoint}}"/>
        </b2>
        <scenarios>
          <url>libs/{{lib}}/scenarios/{{scenario}}</url>
          <layoutPaths>
            <a0 ref="accessPoints.{{lib}}.contents.scenarios.{{scenario}}"/>
          </layoutPaths>
          <dataPath ref="model.clientWorkspace.libs.{{lib}}.deployment.scenarios.{{scenario}}"/>
        </scenarios>
        <c1>
          <url>profile</url>
          <layoutPaths>
            <a0 ref="profile.{{profile}}.contents.generalPanel"/>
          </layoutPaths>
          <dataPath ref="model.profiles.{{profile}}"/>
        </c1>
        <c2>
          <url>friends</url>
          <layoutPaths>
            <a0 ref="profile.{{profile}}.contents.friendsPanel.{{friend}}"/>
          </layoutPaths>
          <dataPath ref="model.profiles.{{profile}}.friends.{{friend}}"/>
        </c2>
        <a11>
          <url>libs/libsDetails/{{app}}/controls/{{control}}</url>
          <layoutPaths>
            <a0 ref="templates.{{app}}.contents.{{control}}"/>
          </layoutPaths>
          <dataPath ref="model.clientWorkspace.libs.{{app}}.controls.{{control}}"/>
        </a11>
        <a113>
          <url>libs/libsDetails/{{app}}/cssTemplates/{{cssTemplate}}</url>
          <layoutPaths>
            <a0 ref="css.{{app}}.css.contents.{{cssTemplate}}.general"/>
          </layoutPaths>
          <dataPath ref="model.clientWorkspace.libs.{{app}}.cssTemplates.{{cssTemplate}}"/>
        </a113>
        <a14>
          <url>libs/libsDetails/{{app}}/css/{{css}}</url>
          <layoutPaths>
            <a0 ref="css.{{app}}.css.contents.{{css}}"/>
          </layoutPaths>
          <dataPath ref="model.clientWorkspace.libs.{{app}}.cssTemplates.{{css}}"/>
        </a14>
        <a114>
          <url>libs/libsDetails/{{app}}/cssTemplates/{{cssTemplate}}/less/{{lessFile}}</url>
          <layoutPaths>
            <a0 ref="css.{{app}}.css.contents.{{cssTemplate}}.less.{{lessFile}}"/>
          </layoutPaths>
          <dataPath ref="model.clientWorkspace.libs.{{app}}.cssTemplates.{{cssTemplate}}.less.{{lessFile}}"/>
        </a114>
        <b3>
          <url>libs/{{lib}}/assets/{{asset}}</url>
          <layoutPaths>
            <a0 ref="css.{{lib}}.assets.contents.{{asset}}"/>
          </layoutPaths>
          <dataPath ref="model.clientWorkspace.libs.{{lib}}.deployment.assets.{{asset}}"/>
        </b3>
        <a13>
          <url>libs/libsDetails/{{app}}/code/{{code}}</url>
          <layoutPaths>
            <a0 ref="views.{{app}}.clientCode.contents.codePanel.{{code}}"/>
          </layoutPaths>
          <dataPath ref="model.clientWorkspace.libs.{{app}}.clientScripts.{{code}}"/>
        </a13>
        <a0>
          <url>libs/schema/{{app}}/{{panel}}</url>
          <layoutPaths>
            <a0 ref="schema.{{app}}.{{panel}}"/>
          </layoutPaths>
        </a0>
        <a3>
          <url>libs/schema/{{app}}/services/{{service}}</url>
          <layoutPaths>
            <a0 ref="schema.{{app}}.services.contents.{{service}}.general"/>
          </layoutPaths>
          <dataPath ref="model.clientWorkspace.libs.{{app}}.services.{{service}}"/>
        </a3>
        <a5>
          <url>libs/schema/{{app}}/code/{{code}}</url>
          <layoutPaths>
            <a0 ref="views.{{app}}.serverCode.contents.{{code}}"/>
          </layoutPaths>
          <dataPath ref="model.clientWorkspace.libs.{{app}}.serverScripts.{{code}}"/>
        </a5>
      </layoutStates>
    </fixedData>
    <innerMarkup>
      <div style="position:absolute;height:50px;top:0px;left:0px;right:0px;">
        <nav class="navbar navbar-inverse">
          <form class="navbar-form">
            <div class="navbar-header" style="width:285px;">
              <a href="#" class="navbar-brand">Pebble Fields</a>
            </div>
            <ul class="nav navbar-nav">
              <li>
                <a href="#">
                  <span>
                    <control ref="standard:markup">
                      <model>
                        <![CDATA[<i class="fa fa-folder-o fa-lg"></i> workspace]]>
                      </model>
                      <mouseEvents>
                        <click>
                          <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                            <meta ref="libs"/>
                          </exec>
                        </click>
                      </mouseEvents>
                    </control>
                  </span>
                  <em>
                    <b>{{this.model.clientWorkspace.libs._selection.default.singleSelectedMeta ? " " + this.model.clientWorkspace.libs._selection.default.singleSelectedMeta : ""}}</b>
                  </em>
                </a>
              </li>
            </ul>
            <ul class="nav navbar-nav" style="visibility:{{this.model.clientWorkspace.libs._selection.default.singleSelectedMeta ? 'visible' : 'hidden'}};">
              <control ref="standard:ArrayControl">
                <enableUrlBind>true</enableUrlBind>
                <childElement>
                  <li/>
                </childElement>
                <displayControl>
                  <selectionClass>
                    <group ref="default">
                      <class>active</class>
                    </group>
                  </selectionClass>
                  <innerMarkup>
                    <a href="#">
                      <i class="fa {{item.iconClass}}"/>
                      <span> {{item.name}}</span>
                    </a>
                  </innerMarkup>
                  <mouseEvents>
                    <click>
                      <exec ref="this.setSingleSelectedItem"/>
                    </click>
                  </mouseEvents>
                </displayControl>
                <model>
                  <_bind ref="wins"/>
                  <views>
                    <name>code</name>
                    <iconClass>fa-laptop</iconClass>
                  </views>
                  <templates>
                    <name>templates</name>
                    <iconClass>fa-laptop</iconClass>
                  </templates>
                  <css>
                    <name>css</name>
                    <iconClass>fa-laptop</iconClass>
                  </css>
                  <customizeLibs>
                    <name>strings</name>
                    <iconClass>fa-play</iconClass>
                  </customizeLibs>
                  <accessPoints>
                    <name>run</name>
                    <iconClass>fa-play</iconClass>
                  </accessPoints>
                </model>
                <beforeload>
                  <exec ref="this.setStyleProperty">
                    <property>visibility</property>
                    <value>visible</value>
                  </exec>
                </beforeload>
              </control>
            </ul>
          </form>
          <div class="navbar-header navbar-right">
            <control ref="standard:StackPanel">
              <beforeload>
                <exec ref="this.setSingleSelectedItemByMeta">
                  <meta>{{app.global.user.isAuth == "true" ? 'logout' : 'login'}}</meta>
                </exec>
              </beforeload>
              <autoHeight>true</autoHeight>
              <model>
                <login>
                  <innerMarkup>
                    <ul class="nav navbar-nav">
                      <li>
                        <a href="#" class="btn btn-link">
                          <control ref="standard:markup">
                            <model>
                              <![CDATA[login <i class="fa fa-sign-out fa-lg"></i>]]>
                            </model>
                            <mouseEvents>
                              <click>
                                <exec ref="ctx.login"/>
                              </click>
                            </mouseEvents>
                          </control>
                        </a>
                      </li>
                    </ul>
                  </innerMarkup>
                </login>
                <logout>
                  <innerMarkup>
                    <ul class="nav navbar-nav">
                      <li>
                        <a href="#" class="btn btn-link">
                          <control ref="standard:markup">
                            <model>
                              <![CDATA[profile <i class="fa fa-cog fa-lg"></i>]]>
                            </model>
                            <mouseEvents>
                              <click>
                                <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                                  <meta ref="profile"/>
                                </exec>
                              </click>
                            </mouseEvents>
                          </control>
                        </a>
                      </li>
                      <li>
                        <a href="#" class="btn btn-link">
                          <control ref="standard:markup">
                            <model>
                              <![CDATA[logout <i class="fa fa-sign-out fa-lg"></i>]]>
                            </model>
                            <mouseEvents>
                              <click>
                                <exec ref="ctx.logout"/>
                              </click>
                            </mouseEvents>
                          </control>
                        </a>
                      </li>
                    </ul>
                  </innerMarkup>
                </logout>
              </model>
            </control>
          </div>
          <div class="navbar-header navbar-right">
            <ul class="nav navbar-nav">
              <li>
                <a data-toggle="modal" href="#importExportWorkspaceModal" class="btn btn-link">
                  <control ref="standard:markup">
                    <model>
                      <![CDATA[manage <i class="fa fa-wrench fa-lg"></i>]]>
                    </model>
                    <mouseEvents>
                      <click>
                        <exec ref="modal.setData">
                          <path ref="showPanel"/>
                          <data>true</data>
                          <propagate>true</propagate>
                        </exec>
                      </click>
                    </mouseEvents>
                  </control>
                </a>
              </li>
              <li>
                <a href="#">
                  <control ref="backboneBuilder:toggleButton">
                    <text>
                      <![CDATA[search <i class="fa fa-search fa-lg"></i>]]>
                    </text>
                    <model>
                      <_bind ref="showUtils"/>
                    </model>
                  </control>
                </a>
              </li>
            </ul>
          </div>
        </nav>
      </div>
      <div style="position:absolute;top:50px;right:0px;bottom:0px;left:0px;-moz-transition:right 0.7s ease-out;-o-transition:right 0.7s ease-out;-webkit-transition:right 0.7s ease-out;transition:right 0.7s ease-out;">
        <control id="mainStackPanel" ref="standard:StackPanel">
          <initModule ref="libs"/>
          <enableUrlBind>true</enableUrlBind>
          <triggers>
            <trig ref="this.setStyleProperty">
              <property>right</property>
              <value>{{ctx.showUtils ? '300px' : '0px'}}</value>
            </trig>
          </triggers>
          <model>
            <_bind ref="wins"/>
            <libs>
              <innerMarkup>
                <div>
                  <control ref="backboneBuilder:desktopTop">
                    <model>
                      <_bind ref="model"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </libs>
            <views>
              <innerMarkup>
                <div>
                  <control ref="standard:ArrayStackControl">
                    <crud>
                      <update ref="CW.updateItem"/>
                      <retrieve ref="CW.retrieveItem"/>
                    </crud>
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:desktopViews"/>
                    <model>
                      <_bind ref="model.clientWorkspace.libs"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </views>
            <templates>
              <innerMarkup>
                <div>
                  <control ref="standard:ArrayStackControl">
                    <crud>
                      <update ref="CW.updateItem"/>
                      <retrieve ref="CW.retrieveItem"/>
                    </crud>
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:desktopTemplates"/>
                    <model>
                      <_bind ref="model.clientWorkspace.libs"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </templates>
            <css>
              <innerMarkup>
                <div>
                  <control ref="standard:ArrayStackControl">
                    <crud>
                      <update ref="CW.updateItem"/>
                      <retrieve ref="CW.retrieveItem"/>
                    </crud>
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:desktopCssAndAssets"/>
                    <model>
                      <_bind ref="model.clientWorkspace.libs"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </css>
            <accessPoints>
              <innerMarkup>
                <div>
                  <control ref="standard:ArrayStackControl">
                    <crud>
                      <retrieve ref="CW.retrieveItem"/>
                    </crud>
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:desktopAccessPoints">
                      <mapPath ref="deployment"/>
                    </displayControl>
                    <model>
                      <_bind ref="model.clientWorkspace.libs"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </accessPoints>
            <customizeLibs>
              <innerMarkup>
                <div>
                  <control ref="standard:ArrayStackControl">
                    <crud>
                      <retrieve ref="CW.retrieveItem"/>
                    </crud>
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:desktopCustomLibs">
                      <mapPath ref="deployment"/>
                    </displayControl>
                    <model>
                      <_bind ref="model.clientWorkspace.libs"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </customizeLibs>
            <profile>
              <innerMarkup>
                <div>
                  <control ref="standard:ArrayStackControl">
                    <crud>
                      <update ref="SERVER.updateItem"/>
                      <retrieve ref="SERVER.retrieveItem"/>
                    </crud>
                    <enableUrlBind>true</enableUrlBind>
                    <afterload>
                      <exec ref="this.setSelectedItemByIndex">
                        <index>0</index>
                      </exec>
                    </afterload>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:profileDetails"/>
                    <model>
                      <_bind ref="model.profiles"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </profile>
          </model>
        </control>
      </div>
      <div style="background-color:#eee;position:absolute;top:50px;right:-300px;bottom:0px;width:300px;-moz-transition:right 0.7s ease-out;-o-transition:right 0.7s ease-out;-webkit-transition:right 0.7s ease-out;transition:right 0.7s ease-out;">
        <control id="utils" ref="standard:Panel">
          <showPanel>true</showPanel>
          <triggers>
            <trig ref="this.setStyleProperty">
              <property>right</property>
              <value>{{ctx.showUtils ? '0px' : '-300px'}}</value>
            </trig>
          </triggers>
          <innerMarkup>
            <control ref="backboneBuilder:GlobalUtils">
              <model>
                <_bind ref="model.clientWorkspace.globalIndexItems"/>
              </model>
            </control>
          </innerMarkup>
        </control>
      </div>
      <div class="modal fade" id="importExportWorkspaceModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <control id="modal" ref="standard:Panel">
              <innerMarkup>
                <div class="modal-header">
                  <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>
                  <h4 class="modal-title">import/export your workspace</h4>
                </div>
                <div class="modal-body">
                  <div class="row">
                    <div class="col-md-6">
                      <p>
                        <b>import workspace</b>
                      </p>
                      <ul class="nav nav-pills nav-stacked">
                        <control id="workspacesCtrl" ref="standard:ArrayControl">
                          <crud>
                            <create ref="SERVER.createItem"/>
                          </crud>
                          <childElement>
                            <li/>
                          </childElement>
                          <displayControl>
                            <innerMarkup>
                              <a href="#">{{item.key_}}</a>
                            </innerMarkup>
                            <mouseEvents>
                              <click>
                                <exec ref="this.setSingleSelectedItem"/>
                              </click>
                            </mouseEvents>
                          </displayControl>
                          <selectionAction>
                            <exec ref="CW.replaceDs">
                              <app>
                                <_generate ref="this.getSelectedItem"/>
                              </app>
                            </exec>
                            <exec ref="CW.generateIndexes"/>
                            <exec ref="ctx.reload"/>
                          </selectionAction>
                          <model>
                            <_bind ref="model.workspaces"/>
                          </model>
                        </control>
                      </ul>
                      <hr/>
                      <p>
                        <input type="file">
                          <control ref="standard:FileInputPebble">
                            <onChange>
                              <exec ref="CW.replaceDs">
                                <app>
                                  <_generate ref="this.getData">
                                    <path ref="fileData"/>
                                  </_generate>
                                </app>
                              </exec>
                              <exec ref="CW.generateIndexes"/>
                              <exec ref="ctx.reload"/>
                            </onChange>
                            <model>
                              <_bind ref="model.clientWorkspace"/>
                            </model>
                          </control>
                        </input>
                      </p>
                    </div>
                    <div class="col-md-6">
                      <p>
                        <b>export workspace</b>
                      </p>
                      <input class="form-control" type="text">
                        <control id="tagNameCtrl" ref="standard:textInput"/>
                      </input>
                      <button class="btn btn-success btn-sm">
                        <control ref="standard:text">
                          <model>publish workspace</model>
                          <mouseEvents>
                            <click>
                              <exec ref="tagNameCtrl.save"/>
                              <exec ref="workspacesCtrl.create">
                                <tagName>
                                  <_generate ref="tagNameCtrl.getData">
                                    <path ref="model"/>
                                  </_generate>
                                </tagName>
                                <withData>
                                  <_generate ref="CW.getDs">
                                    <path ref="theModel.clientWorkspace"/>
                                  </_generate>
                                </withData>
                              </exec>
                            </click>
                          </mouseEvents>
                        </control>
                      </button>
                      <hr/>
                      <button class="btn btn-danger btn-sm">
                        <control ref="standard:text">
                          <model>Delete Workspace</model>
                          <mouseEvents>
                            <click>
                              <exec ref="CW.replaceDs">
                                <app/>
                              </exec>
                              <exec ref="ctx.reload"/>
                            </click>
                          </mouseEvents>
                        </control>
                      </button>
                      <hr/>
                      <div>
                        <a class="btn btn-link">
                          <control ref="standard:download">
                            <useBindPath>true</useBindPath>
                            <text>workspace.xml</text>
                            <model>
                              <_bind ref="model.clientWorkspace"/>
                            </model>
                          </control>
                        </a>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
              </innerMarkup>
            </control>
          </div>
        </div>
      </div>
    </innerMarkup>
  </default>
  <desktopFunctionDef>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>functionDef</name>
        <type ref="theModel.libs.standard.types.functionDef"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <control id="stackPanel" ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="functionPanel"/>
          <model>
            <functionPanel>
              <innerMarkup>
                <div class="panel panel-default">
                  <div class="panel-heading">General</div>
                  <div class="panel-body">
                    <div>
                      <control ref="backboneBuilder:formTextInputHor">
                        <model>
                          <_bind ref="model.name"/>
                        </model>
                      </control>
                    </div>
                    <div>
                      <control ref="backboneBuilder:formTextAreaHor">
                        <model>
                          <_bind ref="model.description"/>
                        </model>
                      </control>
                    </div>
                  </div>
                </div>
              </innerMarkup>
            </functionPanel>
            <fieldsPanel>
              <innerMarkup>
                <div>
                  <control ref="standard:ArrayStackControl">
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:desktopSchema">
                      <libCollection ref="types"/>
                    </displayControl>
                    <model>
                      <_bind ref="model.fields"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </fieldsPanel>
          </model>
        </control>
      </div>
    </innerMarkup>
  </desktopFunctionDef>
  <mobileAppDef>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>appDef</name>
        <type ref="theModel.libs.backboneBuilder.types.lib"/>
      </model>
      <wins>
        <name>wins</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.win"/>
        </type>
      </wins>
    </fields>
    <innerMarkup>
      <div style="position:absolute;height:110px;top:0px;left:0px;right:0px;">
        <h3>
          <span onclick="{{this.backFunc}}">back</span>
          <span> : {{this.model.key_}}</span>
        </h3>
        <ul class="nav nav-tabs">
          <control ref="standard:ArrayControl">
            <childElement>
              <li/>
            </childElement>
            <displayControl>
              <selectionClass>
                <group ref="default">
                  <class>active</class>
                </group>
              </selectionClass>
              <innerMarkup>
                <a href="#">{{item.name}}</a>
              </innerMarkup>
              <mouseEvents>
                <click>
                  <exec ref="this.setSingleSelectedItem"/>
                </click>
              </mouseEvents>
            </displayControl>
            <model>
              <_bind ref="wins"/>
              <main>
                <name>main</name>
              </main>
              <types>
                <name>types</name>
              </types>
              <controls>
                <name>controls</name>
              </controls>
            </model>
          </control>
        </ul>
      </div>
      <div style="position:absolute;bottom:20px;top:110px;left:0px;right:0px;">
        <control id="win4" ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="main"/>
          <model>
            <_bind ref="wins"/>
            <main>
              <innerMarkup>
                <p>
                  <b>Description</b>
                </p>
                <blockquote>
                  <control ref="standard:markup">
                    <model>
                      <_bind ref="model.description"/>
                    </model>
                  </control>
                </blockquote>
                <p>
                  <b>Roles</b>
                </p>
                <div>
                  <control ref="standard:ArrayControl">
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl>
                      <innerMarkup>
                        <p>{{item.name}}</p>
                        <p>{{item.description}}</p>
                      </innerMarkup>
                    </displayControl>
                    <model>
                      <_bind ref="model.actorGroups"/>
                    </model>
                  </control>
                </div>
                <p>
                  <b>Schema</b>
                </p>
                <div>
                  <control ref="standard:ArrayControl">
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl>
                      <innerMarkup>
                        <p>{{item.key_}}</p>
                        <p>{{item.name}}</p>
                        <p>{{item.description}}</p>
                      </innerMarkup>
                    </displayControl>
                    <model>
                      <_bind ref="model.fields"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </main>
            <types>
              <innerMarkup>
                <div>
                  <control id="stackPanel" ref="standard:StackPanel">
                    <enableUrlBind>true</enableUrlBind>
                    <initModule ref="types"/>
                    <model>
                      <types>
                        <innerMarkup>
                          <div>
                            <ul class="nav nav-pills nav-stacked">
                              <control ref="standard:ArrayControl">
                                <childElement>
                                  <li/>
                                </childElement>
                                <displayControl>
                                  <innerMarkup>
                                    <a href="#">{{item.key_}}</a>
                                  </innerMarkup>
                                  <mouseEvents>
                                    <click>
                                      <exec ref="this.setSingleSelectedItem"/>
                                    </click>
                                  </mouseEvents>
                                </displayControl>
                                <model>
                                  <_bind ref="model.types"/>
                                </model>
                              </control>
                            </ul>
                          </div>
                        </innerMarkup>
                      </types>
                      <typeDetails>
                        <innerMarkup>
                          <div>
                            <control ref="standard:ArrayStackControl">
                              <enableUrlBind>true</enableUrlBind>
                              <childElement>
                                <div/>
                              </childElement>
                              <displayControl ref="backboneBuilder:mobileType">
                                <backFunc>
                                  <exec ref="stackPanel.setSingleSelectedItemByMeta">
                                    <meta ref="types"/>
                                  </exec>
                                </backFunc>
                              </displayControl>
                              <model>
                                <_bind ref="model.types"/>
                              </model>
                            </control>
                          </div>
                        </innerMarkup>
                      </typeDetails>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </types>
            <controls>
              <innerMarkup>
                <div>
                  <control id="stackPanelControls" ref="standard:StackPanel">
                    <enableUrlBind>true</enableUrlBind>
                    <initModule ref="ctrls"/>
                    <model>
                      <ctrls>
                        <innerMarkup>
                          <div>
                            <ul class="nav nav-pills nav-stacked">
                              <control ref="standard:ArrayControl">
                                <childElement>
                                  <li/>
                                </childElement>
                                <displayControl>
                                  <innerMarkup>
                                    <a href="#">{{item.key_}}</a>
                                  </innerMarkup>
                                  <mouseEvents>
                                    <click>
                                      <exec ref="this.setSingleSelectedItem"/>
                                    </click>
                                  </mouseEvents>
                                </displayControl>
                                <model>
                                  <_bind ref="model.controls"/>
                                </model>
                              </control>
                            </ul>
                          </div>
                        </innerMarkup>
                      </ctrls>
                      <controlDetails>
                        <innerMarkup>
                          <div>
                            <control ref="standard:ArrayStackControl">
                              <enableUrlBind>true</enableUrlBind>
                              <childElement>
                                <div/>
                              </childElement>
                              <displayControl ref="backboneBuilder:mobileControl">
                                <backFunc>
                                  <exec ref="stackPanelControls.setSingleSelectedItemByMeta">
                                    <meta ref="ctrls"/>
                                  </exec>
                                </backFunc>
                              </displayControl>
                              <model>
                                <_bind ref="model.controls"/>
                              </model>
                            </control>
                          </div>
                        </innerMarkup>
                      </controlDetails>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </controls>
          </model>
        </control>
      </div>
      <div style="position:absolute;height:20px;bottom:0px;left:0px;right:0px;" class="mobileBottomBorder"/>
    </innerMarkup>
  </mobileAppDef>
  <desktopControl>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>control</name>
        <type ref="theModel.libs.standard.types.control"/>
      </model>
      <wins>
        <name>wins</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.win"/>
        </type>
      </wins>
    </fields>
    <innerMarkup>
      <div class="pebble-panel-body">
        <control id="stackPanel" ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="view"/>
          <model>
            <_bind ref="wins"/>
            <view>
              <innerMarkup>
                <div class="pebble-panel-full">
                  <control ref="backboneBuilder:AceEditor">
                    <mode>pxml</mode>
                    <model>
                      <_bind ref="model.innerMarkup"/>
                    </model>
                    <onBlur>
                      <exec ref="this.saveThru"/>
                    </onBlur>
                  </control>
                </div>
              </innerMarkup>
            </view>
            <general>
              <innerMarkup>
                <div>
                  <control ref="backboneBuilder:desktopControlGeneral">
                    <model>
                      <_bind ref="model"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </general>
            <fixedData>
              <innerMarkup>
                <div style="background-color:white;position:absolute;top:50px;right:0px;left:0px;bottom:0px;">
                  <control ref="backboneBuilder:AceEditor">
                    <mode>pxml</mode>
                    <model>
                      <_bind ref="model.fixedData"/>
                    </model>
                    <onBlur>
                      <exec ref="this.saveThru"/>
                    </onBlur>
                  </control>
                </div>
              </innerMarkup>
            </fixedData>
            <functions>
              <innerMarkup>
                <div>
                  <control ref="standard:ArrayStackControl">
                    <crud>
                      <update ref="CW.updateItem"/>
                      <retrieve ref="CW.retrieveItem"/>
                    </crud>
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:desktopFunctionDef"/>
                    <model>
                      <_bind ref="model.functions"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </functions>
            <fields>
              <innerMarkup>
                <div>
                  <control ref="standard:ArrayStackControl">
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:desktopSchema">
                      <libCollection ref="types"/>
                    </displayControl>
                    <model>
                      <_bind ref="model.fields"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </fields>
          </model>
        </control>
      </div>
    </innerMarkup>
  </desktopControl>
  <mobileType>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>type</name>
        <type ref="theModel.libs.standard.types.basicType"/>
      </model>
      <backFunc>
        <name>backFunc</name>
        <type ref="theModel.libs.standard.types.function"/>
      </backFunc>
    </fields>
    <innerMarkup>
      <h3>
        <span onclick="{{this.backFunc}}">back</span>
        <span>: {{this.model.key_}}</span>
      </h3>
      <blockquote>{{this.model.description}}</blockquote>
      <div>
        <control ref="standard:referenceTextInput">
          <model>
            <_bind ref="model.inherits"/>
          </model>
        </control>
      </div>
      <div>
        <control ref="standard:ArrayControl">
          <childElement>
            <div/>
          </childElement>
          <displayControl>
            <innerMarkup>
              <p>{{item.name}}</p>
              <p>{{item.description}}</p>
            </innerMarkup>
          </displayControl>
          <model>
            <_bind ref="model.fields"/>
          </model>
        </control>
      </div>
    </innerMarkup>
  </mobileType>
  <mobileControl>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>type</name>
        <type ref="theModel.libs.standard.types.control"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <control id="win0" ref="standard:StackPanel">
          <animationDuration>500</animationDuration>
          <initModule ref="menu"/>
          <model>
            <menu>
              <innerMarkup>
                <h3>
                  <span onclick="{{this.backFunc}}">back</span>
                  <span>: {{this.model.key_}}</span>
                </h3>
                <blockquote>{{this.model.description}}</blockquote>
                <div>
                  <control ref="standard:referenceTextInput">
                    <model>
                      <_bind ref="model.inherits"/>
                    </model>
                  </control>
                </div>
                <ul class="nav nav-pills nav-stacked">
                  <li>
                    <a href="#">
                      <control ref="standard:text">
                        <model>fields</model>
                        <mouseEvents>
                          <click>
                            <exec ref="win0.setSingleSelectedItemByMeta">
                              <meta ref="fields"/>
                            </exec>
                          </click>
                        </mouseEvents>
                      </control>
                    </a>
                  </li>
                  <li>
                    <a href="#">
                      <control ref="standard:text">
                        <model>functions</model>
                        <mouseEvents>
                          <click>
                            <exec ref="win0.setSingleSelectedItemByMeta">
                              <meta ref="functions"/>
                            </exec>
                          </click>
                        </mouseEvents>
                      </control>
                    </a>
                  </li>
                </ul>
              </innerMarkup>
            </menu>
            <fields>
              <innerMarkup>
                <b>
                  <control ref="standard:text">
                    <mouseEvents>
                      <click>
                        <exec ref="win0.setSingleSelectedItemByMeta">
                          <meta ref="menu"/>
                        </exec>
                      </click>
                    </mouseEvents>
                    <model>back</model>
                  </control>
                </b>
                <div>
                  <control ref="standard:ArrayControl">
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl>
                      <innerMarkup>
                        <p>{{item.name}}</p>
                        <p>{{item.description}}</p>
                      </innerMarkup>
                    </displayControl>
                    <model>
                      <_bind ref="model.fields"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </fields>
            <functions>
              <innerMarkup>
                <b>
                  <control ref="standard:text">
                    <mouseEvents>
                      <click>
                        <exec ref="win0.setSingleSelectedItemByMeta">
                          <meta ref="menu"/>
                        </exec>
                      </click>
                    </mouseEvents>
                    <model>back</model>
                  </control>
                </b>
                <div>
                  <control ref="standard:ArrayControl">
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:mobileFunctionShow"/>
                    <model>
                      <_bind ref="model.functions"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </functions>
          </model>
        </control>
      </div>
    </innerMarkup>
  </mobileControl>
  <defaultGadget>
    <inherits ref="theModel.libs.facebookSharedLib.controls.googleGadgetBase"/>
    <fields>
      <model>
        <name>theApp</name>
        <type ref="theModel.libs.backboneBuilder.types.backboneBuilder"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <control ref="standard:text">
          <model>
            <_bind ref="model.name"/>
          </model>
        </control>
      </div>
      <div class="btn">
        <control ref="standard:text">
          <model>navigate to canvas</model>
          <mouseEvents>
            <click>
              <exec ref="ctx.navigateToCanvas"/>
            </click>
          </mouseEvents>
        </control>
      </div>
    </innerMarkup>
  </defaultGadget>
  <defaultPhoneGap>
    <inherits ref="theModel.libs.phoneGapApis.controls.phoneGapBase"/>
    <fields>
      <model>
        <name>theApp</name>
        <type ref="theModel.libs.backboneBuilder.types.backboneBuilder"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <control ref="standard:text">
          <model>
            <_bind ref="model.name"/>
          </model>
        </control>
      </div>
      <div class="btn">
        <control ref="standard:text">
          <model>take picture</model>
          <mouseEvents>
            <click>
              <exec ref="ctx.takePicture"/>
            </click>
          </mouseEvents>
        </control>
      </div>
    </innerMarkup>
  </defaultPhoneGap>
  <mobileFunctionShow>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>functionDef</name>
        <type ref="theModel.libs.standard.types.functionDef"/>
      </model>
    </fields>
    <innerMarkup>
      <p>
        <b>{{this.model.name}}</b>
      </p>
      <p>
        <b>{{this.model.description}}</b>
      </p>
      <p>parameters</p>
      <div>
        <control ref="standard:ArrayControl">
          <childElement>
            <div/>
          </childElement>
          <displayControl>
            <innerMarkup>
              <p>{{item.name}}</p>
              <p>{{item.description}}</p>
            </innerMarkup>
          </displayControl>
          <model>
            <_bind ref="model.fields"/>
          </model>
        </control>
      </div>
    </innerMarkup>
  </mobileFunctionShow>
  <mobileDeployment>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>deployment</name>
        <type ref="theModel.libs.backboneBuilder.types.deployment"/>
      </model>
      <backFunc>
        <name>backFunc</name>
        <type ref="theModel.libs.standard.types.function"/>
      </backFunc>
    </fields>
    <innerMarkup>
      <control id="win0" ref="standard:StackPanel">
        <initModule ref="menu"/>
        <model>
          <menu>
            <innerMarkup>
              <p>
                <b>
                  <control ref="standard:text">
                    <mouseEvents>
                      <click>
                        <exec ref="ctx.execFunction">
                          <path ref="backFunc"/>
                        </exec>
                      </click>
                    </mouseEvents>
                    <model>back</model>
                  </control>
                </b>
              </p>
              <p>other stuff about deployment</p>
              <p>
                <b>
                  <control ref="standard:text">
                    <mouseEvents>
                      <click>
                        <exec ref="win0.setSingleSelectedItemByMeta">
                          <meta ref="accessPoints"/>
                        </exec>
                      </click>
                    </mouseEvents>
                    <model>access points</model>
                  </control>
                </b>
              </p>
            </innerMarkup>
          </menu>
          <accessPoints>
            <innerMarkup>
              <p>
                <b>
                  <control ref="standard:text">
                    <mouseEvents>
                      <click>
                        <exec ref="win0.setSingleSelectedItemByMeta">
                          <meta ref="menu"/>
                        </exec>
                      </click>
                    </mouseEvents>
                    <model>back</model>
                  </control>
                </b>
              </p>
              <div>
                <control ref="standard:ArrayControl">
                  <childElement>
                    <div/>
                  </childElement>
                  <displayControl>
                    <innerMarkup>
                      <p>???</p>
                    </innerMarkup>
                  </displayControl>
                  <model>
                    <_bind ref="model.accessPoints"/>
                  </model>
                </control>
              </div>
            </innerMarkup>
          </accessPoints>
        </model>
      </control>
    </innerMarkup>
  </mobileDeployment>
  <actorGroupInput>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>actorGroup</name>
        <type ref="theModel.libs.backboneBuilder.types.actorGroup"/>
      </model>
      <onDeleteBtn>
        <name>onDeleteBtn</name>
        <type ref="theModel.libs.standard.types.function"/>
      </onDeleteBtn>
    </fields>
    <innerMarkup>
      <div>
        <control id="mainStackPanel" ref="standard:StackPanel">
          <initModule ref="show"/>
          <autoHeight>true</autoHeight>
          <model>
            <show>
              <innerMarkup>
                <div>
                  <control ref="standard:text">
                    <model>
                      <_bind ref="model.name"/>
                    </model>
                  </control>
                </div>
                <div>
                  <blockquote>
                    <control ref="standard:text">
                      <model>
                        <_bind ref="model.description"/>
                      </model>
                    </control>
                  </blockquote>
                </div>
                <div>
                  <button class="btn btn-sm">
                    <control ref="standard:text">
                      <model>edit</model>
                      <mouseEvents>
                        <click>
                          <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                            <meta ref="edit"/>
                          </exec>
                        </click>
                      </mouseEvents>
                    </control>
                  </button>
                  <button class="btn btn-sm">
                    <control ref="standard:text">
                      <model>delete</model>
                      <mouseEvents>
                        <click>
                          <exec ref="ctx.execFunction">
                            <path ref="onDeleteBtn"/>
                          </exec>
                        </click>
                      </mouseEvents>
                    </control>
                  </button>
                </div>
              </innerMarkup>
            </show>
            <edit>
              <innerMarkup>
                <div>
                  <input type="text" class="form-control">
                    <control ref="standard:textInput">
                      <model>
                        <_bind ref="model.name"/>
                      </model>
                    </control>
                  </input>
                </div>
                <div>
                  <textarea class="form-control">
                    <control ref="standard:textInput">
                      <model>
                        <_bind ref="model.description"/>
                      </model>
                    </control>
                  </textarea>
                </div>
                <div>
                  <button class="btn btn-sm">
                    <control ref="standard:text">
                      <model>cancel</model>
                      <mouseEvents>
                        <click>
                          <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                            <meta ref="show"/>
                          </exec>
                        </click>
                      </mouseEvents>
                    </control>
                  </button>
                  <button class="btn btn-sm">
                    <control ref="standard:text">
                      <model>update</model>
                      <mouseEvents>
                        <click>
                          <exec ref="ctx.save"/>
                          <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                            <meta ref="show"/>
                          </exec>
                        </click>
                      </mouseEvents>
                    </control>
                  </button>
                </div>
              </innerMarkup>
            </edit>
          </model>
        </control>
      </div>
    </innerMarkup>
  </actorGroupInput>
  <TemporaryAutoComplete>
    <description>
      <![CDATA[Temporary AutoComplete while native is being decided.  
        Possibilities:  Auto generate indexes on client side (for small databases).  getAllDocs() or analyze accessPoint.topControl to find collections.
        Note: AutoComplete that directs you to various places in app might include a stackPanel layout, doesn't always need to be data.]]>
    </description>
    <inherits ref="theModel.libs.standard.controls.ArrayTreeBase"/>
    <fields>
      <model>
        <name>indexes</name>
        <type ref="theModel.libs.standard.types.array"/>
      </model>
    </fields>
  </TemporaryAutoComplete>
  <Analyzer>
    <description>
      <![CDATA[Analyzer performs searches and analysis to help check you application's integrity.  Binds to globalIndexItems and produces and filtered list.]]>
    </description>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>indexes</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.globalIndexItem"/>
        </type>
      </model>
      <filteredGlobalIndexItems>
        <name>filteredGlobalIndexItems</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.globalIndexItem"/>
        </type>
      </filteredGlobalIndexItems>
    </fields>
    <innerMarkup>
      <div>
        <control ref="standard:ArrayControl">
          <childElement>
            <button class="btn btn-xs btn-block"/>
          </childElement>
          <displayControl>
            <innerMarkup>{{item.text}}</innerMarkup>
            <mouseEvents>
              <click>
                <exec ref="this.setSingleSelectedItem"/>
              </click>
            </mouseEvents>
          </displayControl>
          <model>
            <_bind ref="filteredGlobalIndexItems"/>
          </model>
        </control>
      </div>
    </innerMarkup>
    <functions>
      <_compressedCollection>true</_compressedCollection>
    </functions>
  </Analyzer>
  <desktopAccessPoint>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>type</name>
        <type ref="theModel.libs.backboneBuilder.types.accessPoint"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="pebble-panel-header">
        <div>
          <div class="pull-right">
            <button class="btn btn-xs">
              <control ref="standard:text">
                <model>instance</model>
                <mouseEvents>
                  <click>
                    <exec ref="stackPanel.setSingleSelectedItemByMeta">
                      <meta ref="instance"/>
                    </exec>
                  </click>
                </mouseEvents>
              </control>
            </button>
            <button class="btn btn-xs">
              <control ref="standard:text">
                <model>general</model>
                <mouseEvents>
                  <click>
                    <exec ref="stackPanel.setSingleSelectedItemByMeta">
                      <meta ref="config"/>
                    </exec>
                  </click>
                </mouseEvents>
              </control>
            </button>
          </div>
        </div>
      </div>
      <div class="pebble-panel-body">
        <control id="stackPanel" ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="instance"/>
          <model>
            <config>
              <innerMarkup>
                <div>
                  <control ref="backboneBuilder:AceEditor">
                    <mode>pxml</mode>
                    <model>
                      <_bind ref="model.config"/>
                    </model>
                    <onBlur>
                      <exec ref="this.saveThru"/>
                    </onBlur>
                  </control>
                </div>
              </innerMarkup>
            </config>
            <instance>
              <innerMarkup>
                <div>
                  <control ref="backboneBuilder:AceEditor">
                    <mode>pxml</mode>
                    <model>
                      <_bind ref="model"/>
                    </model>
                    <onBlur>
                      <exec ref="this.saveThru"/>
                    </onBlur>
                  </control>
                </div>
              </innerMarkup>
            </instance>
          </model>
        </control>
      </div>
    </innerMarkup>
  </desktopAccessPoint>
  <desktopTypeGeneral>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>type</name>
        <type ref="theModel.libs.standard.types.basicType"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="panel panel-default">
        <div class="panel-heading">General</div>
        <div class="panel-body">
          <div>
            <control ref="backboneBuilder:formTextAreaHor">
              <model>
                <_bind ref="model.description"/>
              </model>
            </control>
          </div>
          <div>
            <control ref="backboneBuilder:formRefTextInputHor">
              <libCollection ref="types"/>
              <model>
                <_bind ref="model.inherits"/>
              </model>
            </control>
          </div>
        </div>
      </div>
    </innerMarkup>
  </desktopTypeGeneral>
  <defaultMobile>
    <inherits ref="theModel.libs.standard.controls.AppControlBase"/>
    <fields>
      <model>
        <name>sharedLib</name>
        <type ref="theModel.libs.backboneBuilder.types.backboneBuilder"/>
      </model>
      <stackPanelBindPoint>
        <name>stackPanelBindPoint</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.win"/>
        </type>
      </stackPanelBindPoint>
    </fields>
    <fixedData>
      <layoutStates>
        <a2>
          <url>{{panel}}</url>
          <layoutPaths>
            <a0 ref="{{panel}}"/>
          </layoutPaths>
        </a2>
        <a0>
          <url>libs/{{app}}</url>
          <layoutPaths>
            <a0 ref="appDefDetails.{{app}}"/>
          </layoutPaths>
          <dataPath ref="model.libs.{{app}}"/>
        </a0>
        <a00>
          <url>libs/{{app}}/{{panel}}</url>
          <layoutPaths>
            <a0 ref="appDefDetails.{{app}}.{{panel}}"/>
          </layoutPaths>
        </a00>
        <a3>
          <url>libs/{{app}}/types/{{panel}}</url>
          <layoutPaths>
            <a0 ref="appDefDetails.{{app}}.types.{{panel}}"/>
          </layoutPaths>
        </a3>
        <a4>
          <url>libs/{{app}}/types/typeDetails/{{type}}</url>
          <layoutPaths>
            <a0 ref="appDefDetails.{{app}}.types.typeDetails.{{type}}"/>
          </layoutPaths>
          <dataPath ref="model.libs.{{app}}.types.{{type}}"/>
        </a4>
        <a002>
          <url>libs/{{app}}/controls/{{panel}}</url>
          <layoutPaths>
            <a0 ref="appDefDetails.{{app}}.controls.{{panel}}"/>
          </layoutPaths>
        </a002>
        <a001>
          <url>libs/{{app}}/controls/controlDetails/{{control}}</url>
          <layoutPaths>
            <a0 ref="appDefDetails.{{app}}.controls.controlDetails.{{control}}"/>
          </layoutPaths>
          <dataPath ref="model.libs.{{app}}.controls.{{control}}"/>
        </a001>
        <a1>
          <url>deployments/{{dep}}</url>
          <layoutPaths>
            <a0 ref="deploymentDetails.{{dep}}"/>
          </layoutPaths>
          <dataPath ref="model.deployments.{{dep}}"/>
        </a1>
      </layoutStates>
    </fixedData>
    <innerMarkup>
      <div class="container">
        <control id="win0" ref="standard:StackPanel">
          <animationDuration>500</animationDuration>
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="menu"/>
          <model>
            <menu>
              <innerMarkup>
                <div class="row">
                  <div class="span12">
                    <h1>{{this.model.name}}</h1>
                  </div>
                </div>
                <div class="row">
                  <div class="span12">
                    <div>
                      <b>Applications</b>
                    </div>
                    <ul class="nav nav-pills nav-stacked">
                      <control ref="standard:ArrayControl">
                        <childElement>
                          <li/>
                        </childElement>
                        <displayControl>
                          <innerMarkup>
                            <a href="#">{{item.key_}}</a>
                          </innerMarkup>
                          <mouseEvents>
                            <click>
                              <exec ref="this.setSingleSelectedItem"/>
                            </click>
                          </mouseEvents>
                        </displayControl>
                        <model>
                          <_bind ref="model.libs"/>
                        </model>
                      </control>
                    </ul>
                    <div>
                      <b>Deployments</b>
                    </div>
                    <ul class="nav nav-pills nav-stacked">
                      <control ref="standard:ArrayControl">
                        <childElement>
                          <li/>
                        </childElement>
                        <displayControl>
                          <innerMarkup>
                            <a href="#">{{item.key_}}</a>
                          </innerMarkup>
                          <mouseEvents>
                            <click>
                              <exec ref="this.setSingleSelectedItem"/>
                            </click>
                          </mouseEvents>
                        </displayControl>
                        <model>
                          <_bind ref="model.deployments"/>
                        </model>
                      </control>
                    </ul>
                  </div>
                </div>
              </innerMarkup>
            </menu>
            <appDefDetails>
              <innerMarkup>
                <div class="row">
                  <div class="span12">
                    <control ref="standard:ArrayStackControl">
                      <enableUrlBind>true</enableUrlBind>
                      <childElement>
                        <div/>
                      </childElement>
                      <displayControl ref="backboneBuilder:mobileAppDef">
                        <backFunc>
                          <exec ref="win0.setSingleSelectedItemByMeta">
                            <meta ref="menu"/>
                          </exec>
                        </backFunc>
                      </displayControl>
                      <model>
                        <_bind ref="model.libs"/>
                      </model>
                    </control>
                  </div>
                </div>
              </innerMarkup>
            </appDefDetails>
            <deploymentsDetails>
              <innerMarkup>
                <div class="row">
                  <div class="span12">
                    <control ref="standard:ArrayStackControl">
                      <childElement>
                        <div/>
                      </childElement>
                      <displayControl ref="backboneBuilder:mobileDeployment">
                        <backFunc>
                          <exec ref="win0.setSingleSelectedItemByMeta">
                            <meta ref="menu"/>
                          </exec>
                        </backFunc>
                      </displayControl>
                      <model>
                        <_bind ref="model.deployments"/>
                      </model>
                    </control>
                  </div>
                </div>
              </innerMarkup>
            </deploymentsDetails>
          </model>
        </control>
      </div>
    </innerMarkup>
  </defaultMobile>
  <desktopTemplates>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>appDef</name>
        <type ref="theModel.libs.backboneBuilder.types.lib"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="pebble-panel-left">
        <control ref="backboneBuilder:documentSimpleList">
          <crud>
            <create ref="CW.createItem"/>
            <delete ref="CW.deleteItem"/>
            <retrieve ref="CW.retrieveItem"/>
          </crud>
          <title>Widgets</title>
          <placeholder>name</placeholder>
          <iconClass>fa-gears</iconClass>
          <model>
            <_bind ref="model.controls"/>
          </model>
          <loadQuery ref="CW.getControls">
            <libRef>
              <_generate ref="this.getSelectedItemMetaFromTop">
                <path ref="model.clientWorkspace.libs"/>
                <useRelPath>true</useRelPath>
              </_generate>
            </libRef>
          </loadQuery>
        </control>
      </div>
      <div class="pebble-panel-centerright">
        <control ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="help"/>
          <model>
            <help>
              <innerMarkup>
                <div class="pebble-description">
                  <control ref="backboneBuilder:showdown">
                    <model>
                      <![CDATA[@pebble-string_widgets]]>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </help>
            <contents>
              <innerMarkup>
                <div class="pebble-panel-full">
                  <control ref="standard:ArrayStackControl">
                    <crud>
                      <update ref="CW.updateItem"/>
                      <retrieve ref="CW.retrieveItem"/>
                    </crud>
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:desktopControl"/>
                    <model>
                      <_bind ref="model.controls"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </contents>
          </model>
        </control>
      </div>
    </innerMarkup>
  </desktopTemplates>
  <desktopCssAndAssets>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>appDef</name>
        <type ref="theModel.libs.backboneBuilder.types.lib"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="pebble-panel-full">
        <control id="stackPanel" ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="css"/>
          <model>
            <css>
              <innerMarkup>
                <div>
                  <control ref="backboneBuilder:desktopCss">
                    <model>
                      <_bind ref="model"/>
                    </model>
                    <onAssets>
                      <exec ref="stackPanel.setSingleSelectedItemByMeta">
                        <meta ref="assets"/>
                      </exec>
                    </onAssets>
                  </control>
                </div>
              </innerMarkup>
            </css>
            <assets>
              <innerMarkup>
                <div>
                  <control ref="backboneBuilder:desktopAssets">
                    <model>
                      <_bind ref="model"/>
                    </model>
                    <onCss>
                      <exec ref="stackPanel.setSingleSelectedItemByMeta">
                        <meta ref="css"/>
                      </exec>
                    </onCss>
                  </control>
                </div>
              </innerMarkup>
            </assets>
          </model>
        </control>
      </div>
    </innerMarkup>
  </desktopCssAndAssets>
  <desktopCss>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>appDef</name>
        <type ref="theModel.libs.backboneBuilder.types.lib"/>
      </model>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;left:0px;width:300px;top:0px;bottom:0px;">
        <div style="overflow-y:auto;position:absolute;top:0px;bottom:0px;left:0px;right:0px;border-right:solid 1px #ddd;">
          <control ref="backboneBuilder:documentSimpleListWriteThru">
            <title>Css</title>
            <placeholder>unique name</placeholder>
            <iconClass>fa-css3</iconClass>
            <model>
              <_bind ref="model.cssTemplates"/>
            </model>
            <utilBtnText>
              <![CDATA[<button class="btn btn-success btn-xs">assets</button>]]>
            </utilBtnText>
            <onUtilBtn>
              <exec ref="ctx.execFunction">
                <path ref="onAssets"/>
              </exec>
            </onUtilBtn>
          </control>
        </div>
      </div>
      <div style="background-color:white;position:absolute;top:0px;left:300px;right:0px;bottom:0px;">
        <control ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="help"/>
          <model>
            <help>
              <innerMarkup>
                <div class="pebble-description">
                  <control ref="backboneBuilder:showdown">
                    <model>
                      <![CDATA[@pebble-string_css]]>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </help>
            <contents>
              <innerMarkup>
                <div style="position:absolute;top:0px;left:0px;right:0px;bottom:0px;">
                  <control ref="standard:ArrayStackControl">
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:CssTemplate"/>
                    <model>
                      <_bind ref="model.cssTemplates"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </contents>
          </model>
        </control>
      </div>
    </innerMarkup>
  </desktopCss>
  <desktopViews>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>appDef</name>
        <type ref="theModel.libs.backboneBuilder.types.lib"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="pebble-panel-full">
        <control id="stackPanel" ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="clientCode"/>
          <model>
            <clientCode>
              <innerMarkup>
                <div>
                  <control ref="backboneBuilder:desktopClientCode">
                    <model>
                      <_bind ref="model"/>
                    </model>
                    <onServerCode>
                      <exec ref="stackPanel.setSingleSelectedItemByMeta">
                        <meta ref="serverCode"/>
                      </exec>
                    </onServerCode>
                  </control>
                </div>
              </innerMarkup>
            </clientCode>
            <serverCode>
              <innerMarkup>
                <div>
                  <control ref="backboneBuilder:desktopSchemaDetails">
                    <model>
                      <_bind ref="model"/>
                    </model>
                    <onClientCode>
                      <exec ref="stackPanel.setSingleSelectedItemByMeta">
                        <meta ref="clientCode"/>
                      </exec>
                    </onClientCode>
                  </control>
                </div>
              </innerMarkup>
            </serverCode>
          </model>
        </control>
      </div>
    </innerMarkup>
  </desktopViews>
  <desktopClientCode>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>appDef</name>
        <type ref="theModel.libs.backboneBuilder.types.lib"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="pebble-panel-left">
        <control ref="backboneBuilder:documentSimpleListWriteThru">
          <title>Code</title>
          <placeholder>unique name</placeholder>
          <iconClass>fa-code</iconClass>
          <model>
            <_bind ref="model.clientScripts"/>
          </model>
          <utilBtnText>
            <![CDATA[<button class="btn btn-success btn-xs">server code</button>]]>
          </utilBtnText>
          <onUtilBtn>
            <exec ref="ctx.execFunction">
              <path ref="onServerCode"/>
            </exec>
          </onUtilBtn>
          <utilBtnText1>
            <![CDATA[<button class="btn btn-success btn-xs">run tests</button>]]>
          </utilBtnText1>
          <onUtilBtn1>
            <exec ref="appStackPanel.setSingleSelectedItemByMeta">
              <meta ref="closureCompilerPanel"/>
            </exec>
          </onUtilBtn1>
        </control>
      </div>
      <div class="pebble-panel-centerright">
        <control ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="help"/>
          <model>
            <help>
              <innerMarkup>
                <div class="pebble-description">
                  <control ref="backboneBuilder:showdown">
                    <model>
                      <![CDATA[@pebble-string_clientcode]]>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </help>
            <contents>
              <innerMarkup>
                <div class="pebble-panel-full">
                  <control id="appStackPanel" ref="standard:StackPanel">
                    <enableUrlBind>true</enableUrlBind>
                    <initModule ref="codePanel"/>
                    <model>
                      <codePanel>
                        <innerMarkup>
                          <div class="pebble-panel-full">
                            <control ref="standard:ArrayStackControl">
                              <enableUrlBind>true</enableUrlBind>
                              <childElement>
                                <div/>
                              </childElement>
                              <displayControl ref="backboneBuilder:desktopCode"/>
                              <model>
                                <_bind ref="model.clientScripts"/>
                              </model>
                            </control>
                          </div>
                        </innerMarkup>
                      </codePanel>
                      <closureCompilerPanel>
                        <innerMarkup>
                          <div class="pebble-panel-full">
                            <control ref="backboneBuilder:jasmine">
                              <model>
                                <_bind ref="model.clientScripts"/>
                              </model>
                            </control>
                          </div>
                        </innerMarkup>
                      </closureCompilerPanel>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </contents>
          </model>
        </control>
      </div>
    </innerMarkup>
  </desktopClientCode>
  <desktopSchema>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>field</name>
        <type ref="theModel.libs.standard.types.typeField"/>
      </model>
      <wins>
        <name>wins</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.win"/>
        </type>
      </wins>
      <showConfig>
        <name>showConfig</name>
        <type ref="theModel.libs.standard.types.bool"/>
      </showConfig>
      <libCollection>
        <name>libCollection</name>
        <type ref="theModel.libs.standard.types.itemRelRef"/>
      </libCollection>
    </fields>
    <innerMarkup>
      <div style="position:absolute;top:0px;height:400px;right:0px;left:0px;">
        <div class="panel panel-default">
          <div class="panel-heading">Schema Field</div>
          <div class="panel-body">
            <div>
              <control ref="backboneBuilder:formTextInputHor">
                <model>
                  <_bind ref="model.name"/>
                </model>
              </control>
            </div>
            <div>
              <control ref="backboneBuilder:formTextAreaHor">
                <model>
                  <_bind ref="model.description"/>
                </model>
              </control>
            </div>
            <div>
              <control ref="backboneBuilder:formCheckBoxHor">
                <model>
                  <_bind ref="model.validation.isRequired"/>
                </model>
              </control>
            </div>
            <div>
              <control ref="backboneBuilder:formRefTextInputHor">
                <libCollection>
                  <_bind ref="libCollection"/>
                </libCollection>
                <model>
                  <_bind ref="model.type"/>
                </model>
              </control>
            </div>
            <div>
              <control ref="standard:DynControl">
                <serverKey ref="CW"/>
                <model>
                  <_bind ref="model.type"/>
                </model>
                <displayControlFilters>
                  <a1>
                    <filter>true</filter>
                    <displayControl>
                      <innerMarkup>
                        <div>
                          <control ref="backboneBuilder:formRefTextInputHor">
                            <libCollection>
                              <_bind ref="libCollection"/>
                            </libCollection>
                          </control>
                        </div>
                      </innerMarkup>
                    </displayControl>
                  </a1>
                </displayControlFilters>
              </control>
            </div>
            <div>
              <a href="#" class="btn btn-link">
                <control ref="backboneBuilder:toggleButton">
                  <text>advanced config (anything)</text>
                  <model>
                    <_bind ref="showConfig"/>
                  </model>
                </control>
              </a>
            </div>
          </div>
        </div>
      </div>
      <div style="position:absolute;top:400px;bottom:0px;right:0px;left:0px;">
        <div style="height:300px;-moz-transition:height 0.7s ease-out;-o-transition:height 0.7s ease-out;-webkit-transition:height 0.7s ease-out;transition:height 0.7s ease-out;">
          <control ref="standard:Panel">
            <showPanel>
              <_bind ref="showConfig"/>
            </showPanel>
            <triggers>
              <trig1 ref="this.setStyleProperty">
                <property>visibility</property>
                <value>{{ctx.showConfig ? 'visible' : 'hidden'}}</value>
              </trig1>
              <trig ref="this.setStyleProperty">
                <property>height</property>
                <value>{{ctx.showConfig ? '100px' : '0px'}}</value>
              </trig>
            </triggers>
            <innerMarkup>
              <div style="position:absolute;top:0px;bottom:0px;right:0px;left:0px;">
                <control ref="backboneBuilder:AceEditor">
                  <mode>pxml</mode>
                  <model>
                    <_bind ref="model.config"/>
                  </model>
                  <onBlur>
                    <exec ref="this.saveThru"/>
                  </onBlur>
                </control>
              </div>
            </innerMarkup>
          </control>
        </div>
      </div>
    </innerMarkup>
  </desktopSchema>
  <formCheckBoxHor>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>bool</name>
        <type ref="theModel.libs.standard.types.bool"/>
      </model>
      <label>
        <name>label</name>
        <type ref="theModel.libs.standard.types.text"/>
      </label>
    </fields>
    <innerMarkup>
      <div class="form-horizontal">
        <div class="form-group">
          <div class="col-lg-2"/>
          <div class="col-lg-10">
            <label class="checkbox">
              <input type="checkbox">
                <control ref="standard:checkBox">
                  <containerEvents>
                    <change>
                      <exec ref="this.saveThru"/>
                    </change>
                  </containerEvents>
                  <model>
                    <_bind ref="model"/>
                  </model>
                </control>
              </input>
              <span>{{this.model._field.name}}</span>
            </label>
          </div>
        </div>
      </div>
    </innerMarkup>
  </formCheckBoxHor>
  <formRefTextInputHor>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>reference</name>
        <type ref="theModel.libs.standard.types.itemRelRef"/>
      </model>
      <placeholder>
        <name>placeholder</name>
        <type ref="theModel.libs.standard.types.text"/>
      </placeholder>
      <label>
        <name>label</name>
        <type ref="theModel.libs.standard.types.text"/>
      </label>
      <libCollection>
        <name>libCollection</name>
        <type ref="theModel.libs.standard.types.itemRelRef"/>
      </libCollection>
      <useRelPath>
        <name>useRelPath</name>
        <type ref="theModel.libs.standard.types.bool"/>
      </useRelPath>
    </fields>
    <innerMarkup>
      <div class="form-horizontal">
        <div class="form-group">
          <label class="col-lg-2 control-label">{{this.model._field.name}}</label>
          <div class="col-lg-10">
            <input class="form-control" type="text" placeholder="path.to.item">
              <control ref="backboneBuilder:ReferenceInput">
                <thisLib>
                  <_bind ref="thisLib"/>
                </thisLib>
                <fixedLibs>
                  <_bind ref="fixedLibs"/>
                </fixedLibs>
                <libCollection>
                  <_bind ref="libCollection"/>
                </libCollection>
                <useRelPath>
                  <_bind ref="useRelPath"/>
                </useRelPath>
                <containerEvents>
                  <blur>
                    <exec ref="this.saveThru"/>
                  </blur>
                </containerEvents>
                <model>
                  <_bind ref="model"/>
                </model>
              </control>
            </input>
            <span class="help-inline">{{this.model._field.status}}</span>
          </div>
        </div>
      </div>
    </innerMarkup>
  </formRefTextInputHor>
  <formTextAreaHor>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>text</name>
        <type ref="theModel.libs.standard.types.text"/>
      </model>
      <rows>
        <name>rows</name>
        <type ref="theModel.libs.standard.types.number"/>
      </rows>
      <label>
        <name>label</name>
        <type ref="theModel.libs.standard.types.text"/>
      </label>
    </fields>
    <innerMarkup>
      <div class="form-horizontal">
        <div class="form-group">
          <label class="col-lg-2 control-label">{{this.model._field.name}}</label>
          <div class="col-lg-10">
            <textarea class="form-control">
              <control ref="standard:TextArea">
                <containerEvents>
                  <blur>
                    <exec ref="this.saveThru"/>
                  </blur>
                </containerEvents>
                <model>
                  <_bind ref="model"/>
                </model>
              </control>
            </textarea>
            <span class="help-inline">{{this.model._field.status}}</span>
          </div>
        </div>
      </div>
    </innerMarkup>
  </formTextAreaHor>
  <formTextInputHor>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>text</name>
        <type ref="theModel.libs.standard.types.text"/>
      </model>
      <placeholder>
        <name>placeholder</name>
        <type ref="theModel.libs.standard.types.text"/>
      </placeholder>
      <label>
        <name>label</name>
        <type ref="theModel.libs.standard.types.text"/>
      </label>
    </fields>
    <innerMarkup>
      <div class="form-horizontal">
        <div class="form-group">
          <label class="col-lg-2 control-label">{{this.model._field.name}}</label>
          <div class="col-lg-10">
            <input type="text" class="form-control">
              <control ref="standard:textInput">
                <containerEvents>
                  <blur>
                    <exec ref="this.saveThru"/>
                  </blur>
                </containerEvents>
                <model>
                  <_bind ref="model"/>
                </model>
              </control>
            </input>
          </div>
        </div>
      </div>
    </innerMarkup>
  </formTextInputHor>
  <addApp>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>app</name>
        <type ref="theModel.libs.backboneBuilder.types.lib"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <control id="mainStackPanel" ref="standard:StackPanel">
          <initModule ref="show"/>
          <autoHeight>true</autoHeight>
          <model>
            <show>
              <innerMarkup>
                <div>
                  <control ref="standard:text">
                    <model>add app</model>
                    <mouseEvents>
                      <click>
                        <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                          <meta ref="edit"/>
                        </exec>
                      </click>
                    </mouseEvents>
                  </control>
                </div>
              </innerMarkup>
            </show>
            <edit>
              <innerMarkup>
                <div>
                  <input style="width:200px;" type="text" class="form-control" placeholder="unique name">
                    <control ref="standard:textInput">
                      <model>
                        <_bind ref="model.key_"/>
                      </model>
                    </control>
                  </input>
                </div>
                <div>
                  <button class="btn btn-sm">
                    <control ref="standard:text">
                      <model>cancel</model>
                      <mouseEvents>
                        <click>
                          <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                            <meta ref="show"/>
                          </exec>
                        </click>
                      </mouseEvents>
                    </control>
                  </button>
                  <button class="btn btn-sm">
                    <control ref="standard:text">
                      <model>add</model>
                      <mouseEvents>
                        <click>
                          <exec ref="ctx.save"/>
                          <exec ref="ctx.execFunction">
                            <path ref="onSave"/>
                          </exec>
                          <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                            <meta ref="show"/>
                          </exec>
                        </click>
                      </mouseEvents>
                    </control>
                  </button>
                </div>
              </innerMarkup>
            </edit>
          </model>
        </control>
      </div>
    </innerMarkup>
  </addApp>
  <addControl>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>app</name>
        <type ref="theModel.libs.standard.types.control"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <control id="mainStackPanel" ref="standard:StackPanel">
          <initModule ref="show"/>
          <autoHeight>true</autoHeight>
          <model>
            <show>
              <innerMarkup>
                <div>
                  <control ref="standard:text">
                    <model>add app</model>
                    <mouseEvents>
                      <click>
                        <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                          <meta ref="edit"/>
                        </exec>
                      </click>
                    </mouseEvents>
                  </control>
                </div>
              </innerMarkup>
            </show>
            <edit>
              <innerMarkup>
                <div>
                  <input style="width:200px;" type="text" class="form-control" placeholder="unique name">
                    <control ref="standard:textInput">
                      <model>
                        <_bind ref="model.key_"/>
                      </model>
                    </control>
                  </input>
                </div>
                <div>
                  <button class="btn btn-sm">
                    <control ref="standard:text">
                      <model>cancel</model>
                      <mouseEvents>
                        <click>
                          <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                            <meta ref="show"/>
                          </exec>
                        </click>
                      </mouseEvents>
                    </control>
                  </button>
                  <button class="btn btn-sm">
                    <control ref="standard:text">
                      <model>add</model>
                      <mouseEvents>
                        <click>
                          <exec ref="ctx.save"/>
                          <exec ref="ctx.execFunction">
                            <path ref="onSave"/>
                          </exec>
                          <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                            <meta ref="show"/>
                          </exec>
                        </click>
                      </mouseEvents>
                    </control>
                  </button>
                </div>
              </innerMarkup>
            </edit>
          </model>
        </control>
      </div>
    </innerMarkup>
  </addControl>
  <documentSimpleList>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>array</name>
        <type ref="theModel.libs.standard.types.array"/>
      </model>
      <title>
        <name>title</name>
        <type ref="theModel.libs.standard.types.text"/>
      </title>
      <placeholder>
        <name>placeholder</name>
        <type ref="theModel.libs.standard.types.text"/>
      </placeholder>
      <iconClass>
        <name>iconClass</name>
        <type ref="theModel.libs.standard.types.text"/>
      </iconClass>
      <utilBtnText>
        <name>util button text</name>
        <type ref="theModel.libs.standard.types.text"/>
      </utilBtnText>
      <onUtilBtn>
        <name>onUtilBtn</name>
        <type ref="theModel.libs.standard.types.function"/>
      </onUtilBtn>
      <utilBtnText1>
        <name>util button markup</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </utilBtnText1>
      <onUtilBtn1>
        <name>onUtilBtn1</name>
        <type ref="theModel.libs.standard.types.function"/>
      </onUtilBtn1>
    </fields>
    <innerMarkup>
      <div class="pebble-panel-header">
        <control ref="backboneBuilder:TitleBarPartsWriteThru">
          <model>
            <_bind ref="model"/>
          </model>
          <title>
            <_bind ref="title"/>
          </title>
          <placeholder>
            <_bind ref="placeholder"/>
          </placeholder>
          <iconClass>
            <_bind ref="iconClass"/>
          </iconClass>
          <onSave>
            <exec ref="listCtrl.create">
              <withData>
                <key_>
                  <_generate ref="this.getData">
                    <path ref="text"/>
                  </_generate>
                </key_>
              </withData>
            </exec>
            <exec ref="this.setData">
              <path ref="text"/>
              <data/>
            </exec>
          </onSave>
          <onDelete>
            <exec ref="listCtrl.delete"/>
          </onDelete>
          <utilBtnText>
            <_bind ref="utilBtnText"/>
          </utilBtnText>
          <onUtilBtn>
            <_bind ref="onUtilBtn"/>
          </onUtilBtn>
          <utilBtnText1>
            <_bind ref="utilBtnText1"/>
          </utilBtnText1>
          <onUtilBtn1>
            <_bind ref="onUtilBtn1"/>
          </onUtilBtn1>
        </control>
      </div>
      <div class="pebble-panel-body">
        <ul class="nav nav-pills nav-stacked">
          <control id="listCtrl" ref="standard:ArrayControl">
            <crud>
              <_bind ref="crud"/>
            </crud>
            <enableUrlBind>true</enableUrlBind>
            <childElement>
              <li/>
            </childElement>
            <loadQuery>
              <_bind ref="loadQuery"/>
            </loadQuery>
            <displayControl>
              <innerMarkup>
                <a href="#">{{item.key_}}</a>
              </innerMarkup>
              <mouseEvents>
                <click>
                  <exec ref="this.setSingleSelectedItem">
                    <byDataPath>true</byDataPath>
                  </exec>
                </click>
              </mouseEvents>
              <selectionClass>
                <group ref="default">
                  <class>active</class>
                </group>
              </selectionClass>
            </displayControl>
            <model>
              <_bind ref="model"/>
            </model>
          </control>
        </ul>
      </div>
    </innerMarkup>
  </documentSimpleList>
  <documentSimpleListWriteThru>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>appDef</name>
        <type ref="theModel.libs.standard.types.array"/>
      </model>
      <title>
        <name>title</name>
        <type ref="theModel.libs.standard.types.text"/>
      </title>
      <placeholder>
        <name>placeholder</name>
        <type ref="theModel.libs.standard.types.text"/>
      </placeholder>
      <iconClass>
        <name>iconClass</name>
        <type ref="theModel.libs.standard.types.text"/>
      </iconClass>
      <utilBtnText>
        <name>util button text</name>
        <type ref="theModel.libs.standard.types.text"/>
      </utilBtnText>
      <onUtilBtn>
        <name>onUtilBtn</name>
        <type ref="theModel.libs.standard.types.function"/>
      </onUtilBtn>
      <utilBtnText1>
        <name>util button markup</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </utilBtnText1>
      <onUtilBtn1>
        <name>onUtilBtn1</name>
        <type ref="theModel.libs.standard.types.function"/>
      </onUtilBtn1>
    </fields>
    <innerMarkup>
      <div class="pebble-panel-header">
        <control ref="backboneBuilder:TitleBarPartsWriteThru">
          <model>
            <_bind ref="model"/>
          </model>
          <title>
            <_bind ref="title"/>
          </title>
          <placeholder>
            <_bind ref="placeholder"/>
          </placeholder>
          <iconClass>
            <_bind ref="iconClass"/>
          </iconClass>
          <onSave>
            <exec ref="listCtrl.createThru">
              <withData>
                <key_>
                  <_generate ref="this.getData">
                    <path ref="text"/>
                  </_generate>
                </key_>
              </withData>
            </exec>
            <exec ref="this.setData">
              <path ref="text"/>
              <data/>
            </exec>
          </onSave>
          <onDelete>
            <exec ref="listCtrl.deleteThru"/>
          </onDelete>
          <utilBtnText>
            <_bind ref="utilBtnText"/>
          </utilBtnText>
          <onUtilBtn>
            <_bind ref="onUtilBtn"/>
          </onUtilBtn>
          <utilBtnText1>
            <_bind ref="utilBtnText1"/>
          </utilBtnText1>
          <onUtilBtn1>
            <_bind ref="onUtilBtn1"/>
          </onUtilBtn1>
        </control>
      </div>
      <div class="pebble-panel-body">
        <ul class="nav nav-pills nav-stacked">
          <control id="listCtrl" ref="standard:ArrayControl">
            <enableUrlBind>true</enableUrlBind>
            <childElement>
              <li/>
            </childElement>
            <displayControl>
              <innerMarkup>
                <a href="#">{{item.key_}}</a>
              </innerMarkup>
              <mouseEvents>
                <click>
                  <exec ref="this.setSingleSelectedItem">
                    <byDataPath>true</byDataPath>
                  </exec>
                </click>
              </mouseEvents>
              <selectionClass>
                <group ref="default">
                  <class>active</class>
                </group>
              </selectionClass>
            </displayControl>
            <model>
              <_bind ref="model"/>
            </model>
          </control>
        </ul>
      </div>
    </innerMarkup>
  </documentSimpleListWriteThru>
  <addText>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>app</name>
        <type ref="theModel.libs.standard.types.text"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <control id="spAddByMeta" ref="standard:StackPanel">
          <initModule ref="show"/>
          <autoHeight>true</autoHeight>
          <model>
            <show>
              <innerMarkup>
                <button class="btn btn-xs btn-block">
                  <control ref="standard:text">
                    <model>add</model>
                    <mouseEvents>
                      <click>
                        <exec ref="spAddByMeta.setSingleSelectedItemByMeta">
                          <meta ref="edit"/>
                        </exec>
                      </click>
                    </mouseEvents>
                  </control>
                </button>
              </innerMarkup>
            </show>
            <edit>
              <innerMarkup>
                <div>
                  <input style="width:200px;" type="text" class="form-control" placeholder="unique name">
                    <control ref="standard:textInput">
                      <model>
                        <_bind ref="model"/>
                      </model>
                    </control>
                  </input>
                </div>
                <div>
                  <button class="btn btn-sm">
                    <control ref="standard:text">
                      <model>cancel</model>
                      <mouseEvents>
                        <click>
                          <exec ref="spAddByMeta.setSingleSelectedItemByMeta">
                            <meta ref="show"/>
                          </exec>
                        </click>
                      </mouseEvents>
                    </control>
                  </button>
                  <button class="btn btn-sm">
                    <control ref="standard:text">
                      <model>add</model>
                      <mouseEvents>
                        <click>
                          <exec ref="ctx.save"/>
                          <exec ref="ctx.execFunction">
                            <path ref="onSave"/>
                          </exec>
                          <exec ref="spAddByMeta.setSingleSelectedItemByMeta">
                            <meta ref="show"/>
                          </exec>
                        </click>
                      </mouseEvents>
                    </control>
                  </button>
                </div>
              </innerMarkup>
            </edit>
          </model>
        </control>
      </div>
    </innerMarkup>
  </addText>
  <desktopAppDefComponentsTableView>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>appDef</name>
        <type ref="theModel.libs.backboneBuilder.types.lib"/>
      </model>
      <controlsSortFields>
        <name>controlsSortFields</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.sortField"/>
        </type>
      </controlsSortFields>
    </fields>
    <innerMarkup>
      <div class="row">
        <div class="col-md-6">
          <table class="table table-hover table-striped table-condensed">
            <thead>
              <tr>
                <control ref="standard:ArrayControl">
                  <model>
                    <_bind ref="controlsSortFields"/>
                    <blank>
                      <name/>
                    </blank>
                    <key>
                      <name>name</name>
                      <path ref="key_"/>
                    </key>
                  </model>
                  <childElement>
                    <th/>
                  </childElement>
                  <displayControl ref="backboneBuilder:sortButton">
                    <selectFunction>
                      <exec ref="this.setSingleSelectedItem"/>
                    </selectFunction>
                  </displayControl>
                </control>
              </tr>
            </thead>
            <tbody>
              <control ref="standard:ArrayControl">
                <itemsPerPage>10</itemsPerPage>
                <arrayPages_>
                  <_bind ref="pages1"/>
                </arrayPages_>
                <sortFields>
                  <_bind ref="controlsSortFields"/>
                </sortFields>
                <childElement>
                  <tr/>
                </childElement>
                <displayControl ref="backboneBuilder:ControlTableRec">
                  <onCheckBoxClick>
                    <exec ref="this.setMultipleSelectedItem">
                      <group>groupA</group>
                    </exec>
                  </onCheckBoxClick>
                </displayControl>
                <loadQuery ref="CW.getControls">
                  <libRef ref="backboneBuilder"/>
                </loadQuery>
                <model>
                  <_bind ref="model.controls"/>
                </model>
              </control>
            </tbody>
          </table>
          <ul class="pagination">
            <control ref="standard:ArrayControl">
              <childElement>
                <li/>
              </childElement>
              <prependControls>
                <prependControl ref="standard:markup">
                  <model>
                    <![CDATA[<span>&laquo;</span>]]>
                  </model>
                  <mouseEvents>
                    <click>
                      <exec ref="this.selectFirst"/>
                    </click>
                  </mouseEvents>
                </prependControl>
                <prependControl ref="standard:markup">
                  <model>
                    <![CDATA[<span>&lt;</span>]]>
                  </model>
                  <mouseEvents>
                    <click>
                      <exec ref="this.selectPrev"/>
                    </click>
                  </mouseEvents>
                </prependControl>
              </prependControls>
              <appendControls>
                <appendControl ref="standard:markup">
                  <model>
                    <![CDATA[<span>&gt;</span>]]>
                  </model>
                  <mouseEvents>
                    <click>
                      <exec ref="this.selectNext"/>
                    </click>
                  </mouseEvents>
                </appendControl>
                <appendControl ref="standard:markup">
                  <model>
                    <![CDATA[<span>&raquo;</span>]]>
                  </model>
                  <mouseEvents>
                    <click>
                      <exec ref="this.selectLast"/>
                    </click>
                  </mouseEvents>
                </appendControl>
              </appendControls>
              <displayControl ref="standard:text">
                <innerMarkup>
                  <a href="#">{{item.name}}</a>
                </innerMarkup>
                <mouseEvents>
                  <click>
                    <exec ref="this.setSingleSelectedItem"/>
                  </click>
                </mouseEvents>
                <selectionClass>
                  <group ref="default">
                    <class>active</class>
                  </group>
                </selectionClass>
              </displayControl>
              <model>
                <_bind ref="pages1"/>
              </model>
            </control>
          </ul>
        </div>
        <div class="col-md-6">
          <table class="table table-hover table-striped table-condensed">
            <thead>
              <tr>
                <control ref="standard:ArrayControl">
                  <model>
                    <_bind ref="controlsSortFields"/>
                    <blank>
                      <name/>
                    </blank>
                    <key>
                      <name>name</name>
                      <path ref="key_"/>
                    </key>
                  </model>
                  <childElement>
                    <th/>
                  </childElement>
                  <displayControl ref="backboneBuilder:sortButton">
                    <selectFunction>
                      <exec ref="this.setSingleSelectedItem"/>
                    </selectFunction>
                  </displayControl>
                </control>
              </tr>
            </thead>
            <tbody>
              <control ref="standard:ArrayControl">
                <itemsPerPage>5</itemsPerPage>
                <arrayPages_>
                  <_bind ref="pages2"/>
                </arrayPages_>
                <sortFields>
                  <_bind ref="controlsSortFields"/>
                </sortFields>
                <childElement>
                  <tr/>
                </childElement>
                <displayControl ref="backboneBuilder:ControlTableRec">
                  <onCheckBoxClick>
                    <exec ref="this.setMultipleSelectedItem">
                      <group>groupA</group>
                    </exec>
                  </onCheckBoxClick>
                </displayControl>
                <loadQuery ref="CW.getControls">
                  <libRef ref="backboneBuilder"/>
                </loadQuery>
                <model>
                  <_bind ref="model.controls"/>
                </model>
              </control>
            </tbody>
          </table>
          <ul class="pagination">
            <control ref="standard:ArrayControl">
              <childElement>
                <li/>
              </childElement>
              <displayControl ref="standard:text">
                <innerMarkup>
                  <a href="#">{{item.pageNumber}}</a>
                </innerMarkup>
                <mouseEvents>
                  <click>
                    <exec ref="this.setSingleSelectedItem"/>
                  </click>
                </mouseEvents>
                <selectionClass>
                  <group ref="default">
                    <class>active</class>
                  </group>
                </selectionClass>
              </displayControl>
              <model>
                <_bind ref="pages2"/>
              </model>
            </control>
          </ul>
        </div>
      </div>
    </innerMarkup>
  </desktopAppDefComponentsTableView>
  <arrayAutoComplete>
    <description>
      <![CDATA[       ]]>
    </description>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>array</name>
        <type ref="theModel.libs.standard.types.array"/>
      </model>
    </fields>
    <innerMarkup>
      <input type="text" class="form-control">
        <control id="textInput" ref="standard:textInput">
          <model>
            <_bind ref="searchText"/>
          </model>
          <containerEvents>
            <keyup>
              <exec ref="overlayToolTip.getOverlay">
                <objRef ref="textInput"/>
                <pinType ref="bottom"/>
                <overlayType ref="popover"/>
              </exec>
              <exec ref="this.setControlDataToModel"/>
            </keyup>
          </containerEvents>
        </control>
      </input>
      <div>
        <control id="overlayToolTip" ref="standard:Overlay">
          <model>
            <innerMarkup>
              <div class="dropdown open">
                <ul class="dropdown-menu">
                  <control ref="standard:ArrayControl">
                    <childElement>
                      <li/>
                    </childElement>
                    <displayControl>
                      <innerMarkup>
                        <a href="#">{{item.text}}</a>
                      </innerMarkup>
                      <mouseEvents>
                        <click>
                          <exec ref="this.setSingleSelectedItem"/>
                          <exec ref="this.hideOverlays"/>
                        </click>
                      </mouseEvents>
                    </displayControl>
                    <triggers>
                      <trig k="this.applyLocalFilter">
                        <showRecsFilter>{{item.text.indexOf('ctx.searchText') == 0}}</showRecsFilter>
                      </trig>
                    </triggers>
                    <model>
                      <_bind ref="model"/>
                    </model>
                  </control>
                </ul>
              </div>
            </innerMarkup>
          </model>
        </control>
      </div>
    </innerMarkup>
  </arrayAutoComplete>
  <arrayAutoCompleteToken>
    <description>
      <![CDATA[
    Attempt to create a facebook style autocomplete (multiselect).


    Still needs the invisible textInput (actually arrayAutoComplete so list shows below textInput) as the appendCtrl for arrayHorPanel.  When appendCtrl always insert before last ctrl.
    Need to set style on TextInput to style="outline-color: -moz-use-text-color; outline-style: none; outline-width: medium;" thus need textBoxStyle for textInput
    ... also
    border: 0;
    width: 100px;
    padding: 3px 8px;
    background-color: white;
    margin: 2px 0;

    TextInput must listent to Enter (then add to list, clear text, set focus again)
    TextInput must listen to backspace (onKeyDown(when char code = 8) then delete

    Need to implement MultiSuggestWordOracle into pebble filter         
    ]]>
    </description>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>array</name>
        <type ref="theModel.libs.standard.types.array"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="horizontal pebble-form">
        <control ref="standard:ArrayControl">
          <childElement>
            <div/>
          </childElement>
          <displayControl>
            <innerMarkup>{{item.text}}</innerMarkup>
          </displayControl>
          <appendDisplayControl>
            <innerMarkup>
              <div>
                <control ref="backboneBuilder:arrayAutoComplete">
                  <model>
                    <_bind ref="model"/>
                  </model>
                </control>
              </div>
            </innerMarkup>
          </appendDisplayControl>
          <triggers>
            <trig k="this.applyLocalFilter">
              <showRecsFilter>{{item._selection.marked.selected == true}}</showRecsFilter>
            </trig>
          </triggers>
          <model>
            <_bind ref="model"/>
          </model>
        </control>
      </div>
    </innerMarkup>
  </arrayAutoCompleteToken>
  <sortButton>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>sortField</name>
        <type ref="theModel.libs.standard.types.sortField"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <control id="mainStackPanel" ref="standard:StackPanel">
          <triggers>
            <resetTrigger ref="this.setSingleSelectedItemByMeta">
              <meta>{{ctx.model._selection.default.selected ? 'sel' : 'default'}}</meta>
            </resetTrigger>
          </triggers>
          <initModule ref="default"/>
          <autoHeight>true</autoHeight>
          <model>
            <default>
              <innerMarkup>
                <div>
                  <control ref="standard:text">
                    <model>
                      <_bind ref="model.name"/>
                    </model>
                    <mouseEvents>
                      <click>
                        <exec ref="ctx.execFunction">
                          <path ref="selectFunction"/>
                        </exec>
                      </click>
                    </mouseEvents>
                  </control>
                </div>
              </innerMarkup>
            </default>
            <sel>
              <innerMarkup>
                <div>
                  <control id="dirStackPanel" ref="standard:StackPanel">
                    <initModule ref="asc"/>
                    <autoHeight>true</autoHeight>
                    <model>
                      <asc>
                        <innerMarkup>
                          <div>
                            <control ref="standard:text">
                              <model>{{ctx.model.name + ' ▼'}} </model>
                              <mouseEvents>
                                <click>
                                  <exec ref="ctx.setData">
                                    <path ref="model.sortDir"/>
                                    <data>desc</data>
                                  </exec>
                                  <exec ref="dirStackPanel.setSingleSelectedItemByMeta">
                                    <meta ref="desc"/>
                                  </exec>
                                </click>
                              </mouseEvents>
                            </control>
                          </div>
                        </innerMarkup>
                      </asc>
                      <desc>
                        <innerMarkup>
                          <div>
                            <control ref="standard:text">
                              <model>{{ctx.model.name + ' ▲'}} </model>
                              <mouseEvents>
                                <click>
                                  <exec ref="ctx.setData">
                                    <path ref="model.sortDir"/>
                                    <data>asc</data>
                                  </exec>
                                  <exec ref="dirStackPanel.setSingleSelectedItemByMeta">
                                    <meta ref="asc"/>
                                  </exec>
                                </click>
                              </mouseEvents>
                            </control>
                          </div>
                        </innerMarkup>
                      </desc>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </sel>
          </model>
        </control>
      </div>
    </innerMarkup>
  </sortButton>
  <toggleButton>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>bool</name>
        <type ref="theModel.libs.standard.types.bool"/>
      </model>
      <text>
        <name>markup</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </text>
    </fields>
    <fixedData>
      <triggers>
        <trig ref="this.setClass">
          <class>{{this.model ? 'btn btn-primary' : 'btn'}}</class>
        </trig>
      </triggers>
      <containerEvents>
        <click>
          <exec ref="this.toggle">
            <path ref="model"/>
          </exec>
        </click>
      </containerEvents>
    </fixedData>
    <innerMarkup>
      <div>
        <control ref="standard:markup">
          <model>
            <_bind ref="text"/>
          </model>
        </control>
      </div>
    </innerMarkup>
  </toggleButton>
  <richTextEditorTest>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>array</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <div class="btn-group">
          <div>
            <control ref="backboneBuilder:toggleButton">
              <text>bold</text>
              <model>
                <_bind ref="isBold"/>
              </model>
            </control>
          </div>
          <div>
            <control ref="backboneBuilder:toggleButton">
              <text>italic</text>
              <model>
                <_bind ref="isItalic"/>
              </model>
            </control>
          </div>
          <div>
            <control ref="backboneBuilder:toggleButton">
              <text>underline</text>
              <model>
                <_bind ref="isUnderline"/>
              </model>
            </control>
          </div>
          <div>
            <control ref="backboneBuilder:toggleButton">
              <text>subscript</text>
              <model>
                <_bind ref="isSubscript"/>
              </model>
            </control>
          </div>
          <div>
            <control ref="backboneBuilder:toggleButton">
              <text>superscript</text>
              <model>
                <_bind ref="isSuperscript"/>
              </model>
            </control>
          </div>
          <div>
            <control ref="backboneBuilder:toggleButton">
              <text>strikethrough</text>
              <model>
                <_bind ref="isStrikethrough"/>
              </model>
            </control>
          </div>
        </div>
      </div>
      <div class="horizontal btn-group">
        <div onclick="win9.setLeftJustification()" class="btn">
          <i class="icon-align-left"/>
        </div>
        <div onclick="win9.setCenterJustification()" class="btn">
          <i class="icon-align-center"/>
        </div>
        <div onclick="win9.setRightJustification()" class="btn">
          <i class="icon-align-right"/>
        </div>
        <div onclick="win9.indentLeft()" class="btn">
          <i class="icon-indent-left"/>
        </div>
        <div onclick="win9.indentRight()" class="btn">
          <i class="icon-indent-right"/>
        </div>
        <div onclick="win9.insertHorizontalRule()" class="btn">hr</div>
        <div onclick="win9.insertOrderedList()" class="btn">ol</div>
        <div onclick="win9.insertUnorderedList()" class="btn">ul</div>
        <div onclick="win9.undo()" class="btn">undo</div>
        <div onclick="win9.redo()" class="btn">redo</div>
        <div onclick="win9.insertHTML()" class="btn">html</div>
        <div class="btn">
          <control ref="standard:text">
            <model>insert image</model>
            <mouseEvents>
              <click>
                <exec ref="imageUrlOverlay.getOverlay">
                  <objRef ref="win9"/>
                  <pinType ref="innerTopLeft"/>
                </exec>
              </click>
            </mouseEvents>
          </control>
        </div>
        <div class="btn">
          <control ref="standard:text">
            <model>set back color</model>
            <mouseEvents>
              <click>
                <exec ref="backColorOverlay.getOverlay">
                  <objRef ref="win9"/>
                  <pinType ref="innerTopLeft"/>
                </exec>
              </click>
            </mouseEvents>
          </control>
        </div>
        <div class="btn">
          <control ref="standard:text">
            <model>set fore color</model>
            <mouseEvents>
              <click>
                <exec ref="foreColorOverlay.getOverlay">
                  <objRef ref="win9"/>
                  <pinType ref="innerTopLeft"/>
                </exec>
              </click>
            </mouseEvents>
          </control>
        </div>
      </div>
      <div style="height:400px;clear:both;">
        <control id="win9" ref="standard:richTextEditor">
          <isBold>
            <_bind ref="isBold"/>
          </isBold>
          <isItalic>
            <_bind ref="isItalic"/>
          </isItalic>
          <isUnderline>
            <_bind ref="isUnderline"/>
          </isUnderline>
          <isSubscript>
            <_bind ref="isSubscript"/>
          </isSubscript>
          <isSuperscript>
            <_bind ref="isSuperscript"/>
          </isSuperscript>
          <isStrikethrough>
            <_bind ref="isStrikethrough"/>
          </isStrikethrough>
        </control>
      </div>
      <div>
        <control id="foreColorOverlay" ref="standard:Overlay">
          <model>
            <innerMarkup>
              <div class="tooltip">
                <div class="tooltip-arrow"/>
                <div class="tooltip-inner">
                  <control id="getColor" ref="backboneBuilder:richTextEditor-getColor">
                    <onSetFunc>
                      <exec ref="win9.setForeColor">
                        <foreColor>
                          <_generate ref="this.getData">
                            <path ref="model"/>
                          </_generate>
                        </foreColor>
                      </exec>
                    </onSetFunc>
                  </control>
                </div>
              </div>
            </innerMarkup>
          </model>
        </control>
      </div>
      <div>
        <control id="backColorOverlay" ref="standard:Overlay">
          <model>
            <innerMarkup>
              <div class="tooltip">
                <div class="tooltip-arrow"/>
                <div class="tooltip-inner">
                  <control id="getColor" ref="backboneBuilder:richTextEditor-getColor">
                    <onSetFunc>
                      <exec ref="win9.setBackColor">
                        <foreColor>
                          <_generate ref="this.getData">
                            <path ref="model"/>
                          </_generate>
                        </foreColor>
                      </exec>
                    </onSetFunc>
                  </control>
                </div>
              </div>
            </innerMarkup>
          </model>
        </control>
      </div>
      <div>
        <control id="imageUrlOverlay" ref="standard:Overlay">
          <model>
            <innerMarkup>
              <div class="tooltip">
                <div class="tooltip-arrow"/>
                <div class="tooltip-inner">
                  <control id="getColor" ref="testApp:richTextEditor-getImageUrl">
                    <onSetFunc>
                      <exec ref="win9.insertImage">
                        <foreColor>
                          <_generate ref="this.getData">
                            <path ref="model"/>
                          </_generate>
                        </foreColor>
                      </exec>
                    </onSetFunc>
                  </control>
                </div>
              </div>
            </innerMarkup>
          </model>
        </control>
      </div>
    </innerMarkup>
  </richTextEditorTest>
  <richTextEditor-getColor>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>color</name>
        <type ref="theModel.libs.standard.types.text"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <input type="text">
          <control ref="standard:textInput">
            <model>
              <_bind ref="model"/>
            </model>
          </control>
        </input>
      </div>
      <div class="horizontal btn-group">
        <div class="btn">
          <control ref="standard:text">
            <model>Cancel</model>
            <mouseEvents>
              <click>
                <exec ref="ctx.kill"/>
              </click>
            </mouseEvents>
          </control>
        </div>
        <div class="btn">
          <control ref="standard:text">
            <model>Set</model>
            <mouseEvents>
              <click>
                <exec ref="ctx.save"/>
                <exec ref="ctx.execFunction">
                  <path ref="onSetFunc"/>
                </exec>
              </click>
            </mouseEvents>
          </control>
        </div>
      </div>
    </innerMarkup>
  </richTextEditor-getColor>
  <richTextEditor-getImageUrl>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>array</name>
        <type ref="theModel.libs.standard.types.url"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <input type="text">
          <control ref="standard:textInput">
            <model>
              <_bind ref="model"/>
            </model>
          </control>
        </input>
      </div>
      <div class="horizontal btn-group">
        <div class="btn">
          <control ref="standard:text">
            <model>Cancel</model>
            <mouseEvents>
              <click>
                <exec ref="ctx.kill"/>
              </click>
            </mouseEvents>
          </control>
        </div>
        <div class="btn">
          <control ref="standard:text">
            <model>Set</model>
            <mouseEvents>
              <click>
                <exec ref="ctx.save"/>
                <exec ref="ctx.execFunction">
                  <path ref="onSetFunc"/>
                </exec>
              </click>
            </mouseEvents>
          </control>
        </div>
      </div>
    </innerMarkup>
  </richTextEditor-getImageUrl>
  <CustomStackPanel>
    <inherits ref="theModel.libs.standard.controls.StackPanel"/>
    <fields>
      <model>
        <name>model</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.win"/>
        </type>
      </model>
      <animationDuration>
        <name>animationDuration</name>
        <type ref="theModel.libs.standard.types.number"/>
      </animationDuration>
    </fields>
  </CustomStackPanel>
  <peerConnection>
    <inherits ref="theModel.libs.standard.controls.PeerConnectionBase"/>
    <fields>
      <model>
        <name>type</name>
        <type ref="theModel.libs.standard.types.rtc"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <control ref="standard:text">
          <model>
            <_bind ref="model.name"/>
          </model>
        </control>
      </div>
      <div>
        <control ref="standard:text">
          <model>
            <_bind ref="model.rtc.offer"/>
          </model>
        </control>
      </div>
      <div>
        <control ref="standard:text">
          <model>
            <_bind ref="model.rtc.offerCandidate"/>
          </model>
        </control>
      </div>
      <div>
        <control ref="standard:text">
          <model>
            <_bind ref="model.rtc.answer"/>
          </model>
        </control>
      </div>
      <div>
        <control ref="standard:text">
          <model>
            <_bind ref="model.rtc.answerCandidate"/>
          </model>
        </control>
      </div>
      <div class="btn">
        <control ref="standard:text">
          <model>call</model>
          <mouseEvents>
            <click>
              <exec ref="ctx.makeOffer"/>
            </click>
          </mouseEvents>
        </control>
      </div>
    </innerMarkup>
  </peerConnection>
  <profile>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>type</name>
        <type ref="theModel.libs.backboneBuilder.types.profile"/>
      </model>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;left:0px;right:0px;top:20px;bottom:0px;">
        <div style="position:absolute;width:300px;left:0px;top:0px;bottom:0px;">
          <video autoplay="true" src="{{this.localVideo}}"/>
        </div>
        <div style="position:absolute;left:300px;right:300px;top:0px;bottom:0px;">
          <control ref="backboneBuilder:peerConnection">
            <model>
              <_bind ref="model.rtc"/>
            </model>
          </control>
        </div>
        <div style="position:absolute;width:300px;right:0px;top:0px;bottom:0px;">
          <video autoplay="true" src="{{this.remoteVideo}}"/>
        </div>
      </div>
    </innerMarkup>
  </profile>
  <server>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>deployment</name>
        <type ref="theModel.libs.backboneBuilder.types.deployment"/>
      </model>
    </fields>
  </server>
  <accessPointLauncher>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>accessPoint</name>
        <type ref="theModel.libs.backboneBuilder.types.accessPoint"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="clearfix">
        <span>
          <control ref="standard:text">
            <model>
              <_bind ref="model.key_"/>
            </model>
          </control>
        </span>
        <button class="pull-right btn btn-xs">
          <control ref="standard:markup">
            <model>
              <![CDATA[<i class="fa fa-rocket" />]]>
            </model>
            <mouseEvents>
              <click>
                <exec ref="ctx.setData">
                  <path ref="model._request"/>
                  <data>true</data>
                </exec>
              </click>
            </mouseEvents>
          </control>
        </button>
        <button class="pull-right btn btn-xs">
          <control ref="standard:markup">
            <model>
              <![CDATA[<i class="fa fa-download" />]]>
            </model>
            <mouseEvents>
              <click>
                <exec ref="ctx.setData">
                  <path ref="model._reqDownload"/>
                  <apdep>true</apdep>
                </exec>
              </click>
            </mouseEvents>
          </control>
        </button>
      </div>
    </innerMarkup>
  </accessPointLauncher>
  <scenarioNavItem>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>scenario</name>
        <type ref="theModel.libs.backboneBuilder.types.scenario"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="clearfix">
        <span>
          <control ref="standard:text">
            <model>
              <_bind ref="model.key_"/>
            </model>
          </control>
        </span>
        <button class="pull-right btn btn-xs">
          <control ref="standard:markup">
            <model>
              <![CDATA[<i class="fa fa-rocket" />]]>
            </model>
            <mouseEvents>
              <click>
                <exec ref="ctx.setData">
                  <path ref="model._request"/>
                  <data>true</data>
                </exec>
              </click>
            </mouseEvents>
          </control>
        </button>
      </div>
    </innerMarkup>
  </scenarioNavItem>
  <Usage>
    <description>
      <![CDATA[Usage will tell you where the document is used.]]>
    </description>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>globalIndexItems</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.globalIndexItem"/>
        </type>
      </model>
      <reference>
        <name>reference</name>
        <type ref="theModel.libs.standard.types.itemRelRef">
          <itemPath ref="theModel.globalIndexItems"/>
        </type>
      </reference>
    </fields>
    <innerMarkup>
      <div>
        <control ref="standard:Reference">
          <innerArrayControl>
            <innerMarkup>
              <div>
                <control ref="backboneBuilder:TemporaryAutoComplete">
                  <loadQuery ref="CW.getIndexedItems"/>
                </control>
              </div>
            </innerMarkup>
          </innerArrayControl>
          <model>
            <_bind ref="reference"/>
          </model>
        </control>
      </div>
      <div>
        <button class="btn btn-block btn-sm">
          <control ref="standard:text">
            <model>Controls with client code </model>
            <mouseEvents>
              <click>
                <exec ref="analyzer.searchHasReference">
                  <searchCriteria>
                    <searchControls>true</searchControls>
                    <searchLibs>true</searchLibs>
                    <ref ref="theModel.clientWorkspace.libs.standard.controls.text"/>
                  </searchCriteria>
                </exec>
              </click>
            </mouseEvents>
          </control>
        </button>
      </div>
      <div>
        <control id="analyzer" ref="backboneBuilder:Analyzer">
          <model>
            <_bind ref="model"/>
          </model>
        </control>
      </div>
    </innerMarkup>
  </Usage>
  <GlobalUtils>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>globalIndexItems</name>
        <type ref="theModel.libs.standard.types.array"/>
      </model>
      <wins>
        <name>wins</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.win"/>
        </type>
      </wins>
    </fields>
    <innerMarkup>
      <div style="position:absolute;height:50px;top:0px;left:0px;right:0px;">
        <control ref="backboneBuilder:TemporaryAutoComplete">
          <model>
            <_bind ref="model"/>
          </model>
          <loadQuery ref="CW.getIndexedItems"/>
        </control>
      </div>
      <div style="position:absolute;height:50px;top:50px;left:0px;right:0px;">
        <ul class="nav nav-tabs">
          <control ref="standard:ArrayControl">
            <model>
              <_bind ref="wins"/>
              <search>
                <name>search</name>
              </search>
              <usage>
                <name>usage</name>
              </usage>
              <quick>
                <name>quick analysis</name>
              </quick>
            </model>
            <childElement>
              <li/>
            </childElement>
            <displayControl>
              <selectionClass>
                <group ref="default">
                  <class>active</class>
                </group>
              </selectionClass>
              <mouseEvents>
                <click>
                  <exec ref="this.setSingleSelectedItem"/>
                </click>
              </mouseEvents>
              <innerMarkup>
                <a href="#">{{item.name}}</a>
              </innerMarkup>
            </displayControl>
          </control>
        </ul>
      </div>
      <div style="position:absolute;top:100px;left:0px;right:0px;bottom:0px;overflow:scroll;">
        <control ref="standard:StackPanel">
          <initModule ref="search"/>
          <model>
            <_bind ref="wins"/>
            <search>
              <innerMarkup>
                <div>
                  <control ref="backboneBuilder:Search">
                    <globalIndexes>
                      <_bind ref="model"/>
                    </globalIndexes>
                  </control>
                </div>
              </innerMarkup>
            </search>
            <usage>
              <innerMarkup>
                <div>
                  <control ref="backboneBuilder:Usage">
                    <model>
                      <_bind ref="model"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </usage>
            <quick>
              <innerMarkup>
                <div>
                  <control ref="backboneBuilder:QuickFind">
                    <model>
                      <_bind ref="model"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </quick>
          </model>
        </control>
      </div>
    </innerMarkup>
  </GlobalUtils>
  <Search>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>searches</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.searchCriteria"/>
        </type>
      </model>
      <globalIndexes>
        <name>globalIndexes</name>
        <type ref="theModel.libs.standard.types.array"/>
      </globalIndexes>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;height:40px;top:0px;left:0px;right:0px;">
        <ul class="nav nav-tabs">
          <control ref="standard:ArrayControl">
            <crud>
              <create ref="SERVER.createItem"/>
            </crud>
            <model>
              <_bind ref="model"/>
            </model>
            <childElement>
              <li/>
            </childElement>
            <displayControl>
              <selectionClass>
                <group ref="default">
                  <class>active</class>
                </group>
              </selectionClass>
              <mouseEvents>
                <click>
                  <exec ref="this.setSingleSelectedItem"/>
                </click>
              </mouseEvents>
              <innerMarkup>
                <a href="#">{{item.key_}}</a>
              </innerMarkup>
            </displayControl>
            <appendControls>
              <appendControl>
                <innerMarkup>
                  <a href="#">+</a>
                </innerMarkup>
                <mouseEvents>
                  <click>
                    <exec ref="this.create">
                      <withData/>
                    </exec>
                  </click>
                </mouseEvents>
              </appendControl>
            </appendControls>
          </control>
        </ul>
      </div>
      <div style="background-color:white;position:absolute;left:0px;right:0px;top:40px;bottom:0px;">
        <control ref="standard:ArrayStackControl">
          <childElement>
            <div/>
          </childElement>
          <displayControl ref="backboneBuilder:SearchDisplay"/>
          <model>
            <_bind ref="model"/>
          </model>
        </control>
      </div>
    </innerMarkup>
  </Search>
  <QuickFind>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>globalIndexItems</name>
        <type ref="theModel.libs.standard.types.array"/>
      </model>
      <searches>
        <name>searches</name>
        <type ref="theModel.libs.standard.types.array"/>
      </searches>
    </fields>
    <innerMarkup>
      <select class="form-control">
        <control ref="standard:ArraySelect">
          <childElement>
            <option/>
          </childElement>
          <prependControls>
            <prependControl ref="standard:text">
              <model>Quick Analysis</model>
              <mouseEvents>
                <click>
                  <exec ref="analyzer.clear"/>
                </click>
              </mouseEvents>
            </prependControl>
          </prependControls>
          <displayControl>
            <innerMarkup>{{item.name}}</innerMarkup>
          </displayControl>
          <model>
            <findClientCode>
              <name>find client code</name>
              <function>
                <exec ref="analyzer.searchHasValue">
                  <searchCriteria>
                    <searchControls>true</searchControls>
                    <searchLibs>true</searchLibs>
                    <meta>clientCode</meta>
                  </searchCriteria>
                </exec>
              </function>
            </findClientCode>
            <findServerCode>
              <name>find server code</name>
              <function>
                <exec ref="analyzer.searchHasValue">
                  <searchCriteria>
                    <searchControls>true</searchControls>
                    <searchLibs>true</searchLibs>
                    <meta>serverCode</meta>
                  </searchCriteria>
                </exec>
              </function>
            </findServerCode>
            <findUnusedControls>
              <name>find unused controls</name>
              <function>
                <exec ref="analyzer.findUnused">
                  <searchCriteria>
                    <searchControls>true</searchControls>
                  </searchCriteria>
                </exec>
              </function>
            </findUnusedControls>
            <findUnusedTypes>
              <name>find unused types</name>
              <function>
                <exec ref="analyzer.findUnused">
                  <searchCriteria>
                    <searchTypes>true</searchTypes>
                  </searchCriteria>
                </exec>
              </function>
            </findUnusedTypes>
            <findUndefinedControlData>
              <name>find undefined control data</name>
              <function>
                <exec ref="analyzer.findUndefined">
                  <controlData>true</controlData>
                </exec>
              </function>
            </findUndefinedControlData>
          </model>
        </control>
      </select>
      <label class="checkbox-inline">
        <input type="checkbox" value="option1">
          <control ref="standard:checkBox">
            <model>
              <_bind ref="searchCriteria.searchClientCode"/>
            </model>
            <mouseEvents>
              <change>
                <exec ref="this.setControlDataToModel"/>
              </change>
            </mouseEvents>
          </control>
        </input>
        <span>client code</span>
      </label>
      <label class="checkbox-inline">
        <input type="checkbox">
          <control ref="standard:checkBox">
            <model>
              <_bind ref="searchCriteria.searchServerCode"/>
            </model>
            <mouseEvents>
              <click>
                <exec ref="this.save"/>
              </click>
            </mouseEvents>
          </control>
        </input>
        <span>server code</span>
      </label>
      <div>
        <control id="analyzer" ref="backboneBuilder:Analyzer">
          <model>
            <_bind ref="model"/>
          </model>
          <triggers>
            <trig ref="this.searchHasValue">
              <searchCriteria>
                <_bind ref="searchCriteria"/>
              </searchCriteria>
            </trig>
          </triggers>
        </control>
      </div>
    </innerMarkup>
  </QuickFind>
  <SearchDisplay>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>search criteria</name>
        <type ref="theModel.libs.backboneBuilder.types.searchCriteria"/>
      </model>
    </fields>
    <innerMarkup>
      <form class="form-inline" role="form">
        <div class="form-group">
          <input type="email" class="form-control" placeholder="keyword">
            <control id="keywordInput" ref="standard:textInput">
              <model>
                <_bind ref="model.keyword"/>
              </model>
            </control>
          </input>
        </div>
        <button class="btn btn-default">
          <control ref="standard:text">
            <model>Search</model>
            <mouseEvents>
              <click>
                <exec ref="keywordInput.setControlDataToModel"/>
                <exec ref="analyzer.search">
                  <searchCriteria>
                    <keyword>
                      <_generate ref="keywordInput.getData">
                        <path ref="model"/>
                      </_generate>
                    </keyword>
                    <searchAll>true</searchAll>
                  </searchCriteria>
                </exec>
              </click>
            </mouseEvents>
          </control>
        </button>
      </form>
      <div>
        <control id="analyzer" ref="backboneBuilder:Analyzer">
          <model>
            <_bind ref="model"/>
          </model>
        </control>
      </div>
    </innerMarkup>
  </SearchDisplay>
  <ClosureCompiler>
    <description/>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>clientScripts</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.backboneBuilder.types.clientScript"/>
        </type>
      </model>
      <compilationResult>
        <name>compilationResult</name>
        <type ref="theModel.libs.backboneBuilder.types.compilationResult"/>
      </compilationResult>
    </fields>
    <innerMarkup>
      <div>
        <div>{{ctx.compilationResult.statistics.originalSize}}</div>
        <div>
          <control ref="standard:ArrayControl">
            <childElement>
              <div/>
            </childElement>
            <displayControl>
              <innerMarkup>
                <span class="label label-warning">{{item.warning}}</span>
              </innerMarkup>
            </displayControl>
            <model>
              <_bind ref="compilationResult.warnings"/>
            </model>
          </control>
        </div>
        <div>
          <control ref="standard:ArrayControl">
            <childElement>
              <div/>
            </childElement>
            <displayControl>
              <innerMarkup>
                <p class="text-danger">{{item.type + " " + item.lineno + ": " + item.error + " > " + item.line}}</p>
              </innerMarkup>
            </displayControl>
            <model>
              <_bind ref="compilationResult.errors"/>
            </model>
          </control>
        </div>
        <div>
          <pre>{{this.compilationResult.compiledCode}}</pre>
        </div>
        <div>
          <pre>
            <control ref="standard:markup">
              <model>
                <_bind ref="compilationResult.compiledCode"/>
              </model>
            </control>
          </pre>
        </div>
      </div>
    </innerMarkup>
  </ClosureCompiler>
  <desktopSchemaDetails>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>appDef</name>
        <type ref="theModel.libs.backboneBuilder.types.lib"/>
      </model>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;left:0px;width:300px;top:0px;bottom:0px;">
        <div style="overflow-y:auto;position:absolute;top:0px;bottom:0px;left:0px;right:0px;border-right:solid 1px #ddd">
          <div>
            <control ref="backboneBuilder:documentSimpleListWriteThru">
              <title>Server Code</title>
              <placeholder>unique name</placeholder>
              <model>
                <_bind ref="model.serverScripts"/>
              </model>
              <utilBtnText>
                <![CDATA[<button class="btn btn-success btn-xs">client code</button>]]>
              </utilBtnText>
              <onUtilBtn>
                <exec ref="ctx.execFunction">
                  <path ref="onClientCode"/>
                </exec>
              </onUtilBtn>
            </control>
          </div>
        </div>
      </div>
      <div class="pebble-panel-centerright">
        <control ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="help"/>
          <model>
            <help>
              <innerMarkup>
                <div class="pebble-description">
                  <control ref="backboneBuilder:showdown">
                    <model>
                      <![CDATA[@pebble-string_servercode]]>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </help>
            <contents>
              <innerMarkup>
                <div class="pebble-panel-full">
                  <control ref="standard:ArrayStackControl">
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:desktopCode"/>
                    <model>
                      <_bind ref="model.serverScripts"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </contents>
          </model>
        </control>
      </div>
    </innerMarkup>
  </desktopSchemaDetails>
  <desktopExpressionFilter>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>filter</name>
        <type ref="theModel.libs.standard.types.expressionFilter"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <control ref="backboneBuilder:AceEditor">
          <model>
            <_bind ref="model.code"/>
          </model>
          <mode>javascript</mode>
          <onBlur>
            <exec ref="this.saveThru"/>
          </onBlur>
        </control>
      </div>
    </innerMarkup>
  </desktopExpressionFilter>
  <jasmine>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>deployment</name>
        <type ref="theModel.libs.backboneBuilder.types.deployment"/>
      </model>
    </fields>
  </jasmine>
  <desktopTop>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>backboneBuilder</name>
        <type ref="theModel.libs.backboneBuilder"/>
      </model>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;left:0px;width:{{app.fullScreen ? '0px' : '300px'}};top:0px;bottom:0px;">
        <div class="pebble-panel-header">
          <button class="btn btn-xs btn-block">
            <control ref="standard:text">
              <model>import app/lib</model>
              <mouseEvents>
                <click>
                  <exec ref="helpContentsStackPanel.setSingleSelectedItemByMeta">
                    <meta ref="contents"/>
                  </exec>
                  <exec ref="libsStackPanel.setSingleSelectedItemByMeta">
                    <meta ref="addPanel"/>
                  </exec>
                </click>
              </mouseEvents>
            </control>
          </button>
        </div>
        <div class="pebble-panel-body">
          <ul class="nav nav-pills nav-stacked">
            <control id="listCtrl" ref="standard:ArrayControl">
              <crud>
                <create ref="CW.createItem"/>
                <delete ref="CW.deleteItem"/>
                <retrieve ref="SERVER.retrieveItem"/>
              </crud>
              <enableUrlBind>true</enableUrlBind>
              <childElement>
                <li/>
              </childElement>
              <displayControl>
                <innerMarkup>
                  <a href="#">{{item.key_}}</a>
                </innerMarkup>
                <mouseEvents>
                  <click>
                    <exec ref="this.setSingleSelectedItem">
                      <byDataPath>true</byDataPath>
                    </exec>
                  </click>
                </mouseEvents>
                <selectionClass>
                  <group ref="default">
                    <class>active</class>
                  </group>
                </selectionClass>
              </displayControl>
              <loadQuery ref="CW.getLibs"/>
              <model>
                <_bind ref="model.clientWorkspace.libs"/>
              </model>
            </control>
          </ul>
          <div>
            <control ref="backboneBuilder:addText">
              <onSave>
                <exec ref="listCtrl.create">
                  <withData>
                    <key_>
                      <_generate ref="this.getData">
                        <path ref="model"/>
                      </_generate>
                    </key_>
                  </withData>
                </exec>
                <exec ref="this.setData">
                  <path ref="model"/>
                  <data/>
                </exec>
              </onSave>
            </control>
          </div>
        </div>
      </div>
      <div style="background-color:white;position:absolute;top:0px;left:300px;right:0px;bottom:0px;">
        <div>
          <control id="helpContentsStackPanel" ref="standard:StackPanel">
            <enableUrlBind>true</enableUrlBind>
            <initModule ref="help"/>
            <model>
              <help>
                <innerMarkup>
                  <div class="pebble-description">
                    <control ref="backboneBuilder:showdown">
                      <model>
                        <![CDATA[@pebble-string_workspace]]>
                      </model>
                    </control>
                  </div>
                  <ul class="nav nav-pills">
                    <control id="extListCtrl" ref="standard:ArrayControl">
                      <crud>
                        <create ref="SERVER.createItem"/>
                        <retrieve ref="SERVER.retrieveItem"/>
                      </crud>
                      <enableUrlBind>true</enableUrlBind>
                      <childElement>
                        <li/>
                      </childElement>
                      <displayControl ref="backboneBuilder:libDetailsPublic">
                        <onAddBtnClick>
                          <exec ref="this.setSingleSelectedItem"/>
                          <exec ref="listCtrl.create">
                            <useSourceName>true</useSourceName>
                            <asDs>true</asDs>
                            <withData>
                              <_generate ref="this.getSelectedItem">
                                <asDs>true</asDs>
                              </_generate>
                            </withData>
                          </exec>
                        </onAddBtnClick>
                      </displayControl>
                      <model>
                        <_bind ref="model.externalLibs"/>
                      </model>
                      <loadQuery ref="SERVER.getExternalLibs"/>
                    </control>
                  </ul>
                </innerMarkup>
              </help>
              <contents>
                <innerMarkup>
                  <div class="pebble-panel-full">
                    <control id="libsStackPanel" ref="standard:StackPanel">
                      <enableUrlBind>true</enableUrlBind>
                      <initModule ref="addPanel"/>
                      <model>
                        <addPanel>
                          <innerMarkup>
                            <div style="position:absolute;top:0px;left:0px;right:0px;bottom:0px;padding:10px;">
                              <control ref="backboneBuilder:importApp">
                                <model>
                                  <_bind ref="model"/>
                                </model>
                              </control>
                            </div>
                          </innerMarkup>
                        </addPanel>
                        <libsDetailsPanel>
                          <innerMarkup>
                            <div style="position:absolute;top:0px;left:0px;right:0px;bottom:0px;padding:10px;">
                              <control ref="standard:ArrayStackControl">
                                <crud>
                                  <update ref="CW.updateItem"/>
                                  <retrieve ref="CW.retrieveItem"/>
                                  <delete ref="CW.deleteItem"/>
                                </crud>
                                <enableUrlBind>true</enableUrlBind>
                                <childElement>
                                  <div/>
                                </childElement>
                                <displayControl ref="backboneBuilder:libDetails">
                                  <onDeleteBtnClick>
                                    <exec ref="this.delete"/>
                                  </onDeleteBtnClick>
                                  <onPublishBtnClick>
                                    <exec ref="extListCtrl.create">
                                      <useSourceName>true</useSourceName>
                                      <asDs>true</asDs>
                                      <withData>
                                        <_generate ref="this.getSelectedItem">
                                          <asDs>true</asDs>
                                        </_generate>
                                      </withData>
                                    </exec>
                                  </onPublishBtnClick>
                                </displayControl>
                                <model>
                                  <_bind ref="model.clientWorkspace.libs"/>
                                </model>
                              </control>
                            </div>
                          </innerMarkup>
                        </libsDetailsPanel>
                      </model>
                    </control>
                  </div>
                </innerMarkup>
              </contents>
            </model>
          </control>
        </div>
      </div>
    </innerMarkup>
  </desktopTop>
  <desktopManageLibs>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>backboneBuilder</name>
        <type ref="theModel.libs.backboneBuilder"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <div>
          <control ref="standard:ArrayControl">
            <enableUrlBind>true</enableUrlBind>
            <childElement>
              <a class="list-group-item"/>
            </childElement>
            <displayControl ref="backboneBuilder:libNavItem">
              <mouseEvents>
                <click>
                  <exec ref="this.setSingleSelectedItem">
                    <byDataPath>true</byDataPath>
                  </exec>
                </click>
              </mouseEvents>
            </displayControl>
            <model>
              <_bind ref="model.libs"/>
            </model>
          </control>
        </div>
        <hr/>
        <a data-toggle="modal" href="#myModal" class="pull-right btn btn-link">
          <control ref="standard:text">
            <model>import/export workspace</model>
            <mouseEvents>
              <click>
                <exec ref="modal.render">
                  <propagate>true</propagate>
                </exec>
              </click>
            </mouseEvents>
          </control>
        </a>
      </div>
    </innerMarkup>
  </desktopManageLibs>
  <libNavItem>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>lib</name>
        <type ref="theModel.libs.backboneBuilder.types.lib"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="clearfix">
        <span>
          <control ref="standard:text">
            <model>
              <_bind ref="model.key_"/>
            </model>
          </control>
        </span>
        <button class="pull-right btn btn-xs">
          <control ref="standard:text">
            <model>dev</model>
            <mouseEvents>
              <click>
                <exec ref="ctx.setData">
                  <path ref="model._request"/>
                  <data>true</data>
                </exec>
              </click>
            </mouseEvents>
          </control>
        </button>
      </div>
    </innerMarkup>
  </libNavItem>
  <libDetails>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>type</name>
        <type ref="theModel.libs.backboneBuilder.types.lib"/>
      </model>
      <wins>
        <name>wins</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.win"/>
        </type>
      </wins>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;top:0px;right:0px;left:0px;bottom:0px;">
        <control ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="general"/>
          <model>
            <_bind ref="wins"/>
            <general>
              <innerMarkup>
                <div style="position:absolute;top:0px;bottom:0px;left:0px;right:0px;">
                  <innerMarkup>
                    <div>
                      <control ref="backboneBuilder:formTextAreaHor">
                        <model>
                          <_bind ref="model.description"/>
                        </model>
                      </control>
                    </div>
                    <div>
                      <control ref="backboneBuilder:formTextInputHor">
                        <model>
                          <_bind ref="model.version"/>
                        </model>
                      </control>
                    </div>
                    <div>
                      <control ref="backboneBuilder:formTextInputHor">
                        <model>
                          <_bind ref="model.license"/>
                        </model>
                      </control>
                    </div>
                    <div>
                      <control ref="backboneBuilder:formDownloadHor">
                        <label>export</label>
                        <text>download</text>
                        <useBindPath>true</useBindPath>
                        <model>
                          <_bind ref="model"/>
                        </model>
                      </control>
                    </div>
                    <div class="form-horizontal" role="form">
                      <div class="form-group">
                        <div class="col-xs-offset-2 col-xs-10">
                          <button type="submit" class="btn btn-danger">
                            <control ref="standard:text">
                              <model>delete</model>
                              <mouseEvents>
                                <click>
                                  <exec ref="ctx.execFunction">
                                    <path ref="onDeleteBtnClick"/>
                                  </exec>
                                </click>
                              </mouseEvents>
                            </control>
                          </button>
                        </div>
                      </div>
                    </div>
                    <div class="form-horizontal" role="form">
                      <div class="form-group">
                        <div class="col-xs-offset-2 col-xs-10">
                          <button class="btn btn-success">
                            <control ref="standard:text">
                              <model>publish</model>
                              <mouseEvents>
                                <click>
                                  <exec ref="ctx.execFunction">
                                    <path ref="onPublishBtnClick"/>
                                  </exec>
                                </click>
                              </mouseEvents>
                            </control>
                          </button>
                        </div>
                      </div>
                    </div>
                  </innerMarkup>
                </div>
              </innerMarkup>
            </general>
            <roles>
              <innerMarkup>
                <div>
                  <control ref="standard:ArrayStackControl">
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:Role"/>
                    <model>
                      <_bind ref="model.actorGroups"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </roles>
          </model>
        </control>
      </div>
    </innerMarkup>
  </libDetails>
  <formFileInputPebbleHor>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>text</name>
        <type ref="theModel.libs.standard.types.text"/>
      </model>
      <label>
        <name>text</name>
        <type ref="theModel.libs.standard.types.text"/>
      </label>
    </fields>
    <innerMarkup>
      <div class="form-horizontal">
        <div class="form-group">
          <label class="col-lg-2 control-label">{{this.label || this.model._field.name}}</label>
          <div class="col-lg-10">
            <input type="file" class="form-control">
              <control ref="standard:FileInputPebble">
                <model>
                  <_bind ref="model"/>
                </model>
                <useBindPath>
                  <_bind ref="useBindPath"/>
                </useBindPath>
              </control>
            </input>
          </div>
        </div>
      </div>
    </innerMarkup>
  </formFileInputPebbleHor>
  <formDownloadHor>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>text</name>
        <type ref="theModel.libs.standard.types.text"/>
      </model>
      <placeholder>
        <name>placeholder</name>
        <type ref="theModel.libs.standard.types.text"/>
      </placeholder>
      <label>
        <name>label</name>
        <type ref="theModel.libs.standard.types.text"/>
      </label>
    </fields>
    <innerMarkup>
      <div class="form-horizontal">
        <div class="form-group">
          <label class="col-lg-2 control-label">{{this.label || this.model._field.name}}</label>
          <div class="col-lg-10">
            <a href="#" class="form-control-static">
              <control ref="standard:download">
                <text>
                  <_bind ref="text"/>
                </text>
                <useBindPath>
                  <_bind ref="useBindPath"/>
                </useBindPath>
                <onClick>
                  <_bind ref="onClick"/>
                </onClick>
                <model>
                  <_bind ref="model"/>
                </model>
              </control>
            </a>
          </div>
        </div>
      </div>
    </innerMarkup>
  </formDownloadHor>
  <addLibByFile>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>app</name>
        <type ref="theModel.libs.backboneBuilder.types.lib"/>
      </model>
    </fields>
    <innerMarkup>
      <form class="form-inline" role="form">
        <div class="form-group">
          <input type="file" class="form-control">
            <control ref="standard:FileInputPebble">
              <model>
                <_bind ref="model"/>
              </model>
            </control>
          </input>
        </div>
        <button type="submit" class="btn btn-default">
          <control ref="standard:text">
            <model>import pebble file</model>
            <mouseEvents>
              <click>
                <exec ref="ctx.save"/>
                <exec ref="ctx.execFunction">
                  <path ref="onSave"/>
                </exec>
              </click>
            </mouseEvents>
          </control>
        </button>
      </form>
    </innerMarkup>
  </addLibByFile>
  <libDetailsPublic>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>type</name>
        <type ref="theModel.libs.backboneBuilder.types.lib"/>
      </model>
    </fields>
    <innerMarkup>
      <div style="width:400px;padding:0px 10px 10px 10px;">
        <div class="panel panel-default">
          <div class="panel-heading">
            <h3 class="panel-title">{{this.model.key_}}</h3>
          </div>
          <div class="panel-body">
            <div>
              <control ref="standard:markup">
                <model>
                  <_bind ref="model.description"/>
                </model>
              </control>
            </div>
            <div>
              <control ref="standard:text">
                <model>
                  <_bind ref="model.version"/>
                </model>
              </control>
            </div>
            <div>
              <control ref="standard:text">
                <model>
                  <_bind ref="model.license"/>
                </model>
              </control>
            </div>
            <div>
              <button class="btn btn-primary">
                <control ref="standard:text">
                  <model>add to workspace</model>
                  <mouseEvents>
                    <click>
                      <exec ref="ctx.execFunction">
                        <path ref="onAddBtnClick"/>
                      </exec>
                    </click>
                  </mouseEvents>
                </control>
              </button>
            </div>
          </div>
        </div>
      </div>
    </innerMarkup>
  </libDetailsPublic>
  <desktopCode>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>control</name>
        <type ref="theModel.libs.standard.types.control"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="pebble-panel-header">
        <div>
          <div class="pull-right">
            <button class="btn btn-xs">
              <control ref="standard:text">
                <model>code</model>
                <mouseEvents>
                  <click>
                    <exec ref="stackPanel.setSingleSelectedItemByMeta">
                      <meta ref="dev"/>
                    </exec>
                  </click>
                </mouseEvents>
              </control>
            </button>
            <button class="btn btn-xs">
              <control ref="standard:text">
                <model>tests</model>
                <mouseEvents>
                  <click>
                    <exec ref="stackPanel.setSingleSelectedItemByMeta">
                      <meta ref="test"/>
                    </exec>
                  </click>
                </mouseEvents>
              </control>
            </button>
          </div>
        </div>
      </div>
      <div class="pebble-panel-body">
        <control id="stackPanel" ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="dev"/>
          <model>
            <dev>
              <innerMarkup>
                <div>
                  <control ref="backboneBuilder:AceEditor">
                    <mode>javascript</mode>
                    <model>
                      <_bind ref="model.devCode"/>
                    </model>
                    <onBlur>
                      <exec ref="this.saveThru"/>
                    </onBlur>
                  </control>
                </div>
              </innerMarkup>
            </dev>
            <test>
              <innerMarkup>
                <div>
                  <control ref="backboneBuilder:AceEditor">
                    <mode>javascript</mode>
                    <model>
                      <_bind ref="model.testCode"/>
                    </model>
                    <onBlur>
                      <exec ref="this.saveThru"/>
                    </onBlur>
                  </control>
                </div>
              </innerMarkup>
            </test>
          </model>
        </control>
      </div>
    </innerMarkup>
  </desktopCode>
  <desktopTests>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>deployment</name>
        <type ref="theModel.libs.backboneBuilder.types.deployment"/>
      </model>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;left:0px;width:300px;top:0px;bottom:0px;">
        <div class="pebble-panel-header">
          <control ref="backboneBuilder:TitleBarPartsWriteThru">
            <model>
              <_bind ref="model.jasmineSpecs"/>
            </model>
            <title>Tests</title>
            <placeholder>unique name</placeholder>
            <iconClass>
              <_bind ref="iconClass"/>
            </iconClass>
            <onSave>
              <exec ref="listCtrl.createThru">
                <withData>
                  <key_>
                    <_generate ref="this.getData">
                      <path ref="text"/>
                    </_generate>
                  </key_>
                </withData>
              </exec>
              <exec ref="this.setData">
                <path ref="text"/>
                <data/>
              </exec>
            </onSave>
            <onDelete>
              <exec ref="listCtrl.deleteThru"/>
            </onDelete>
            <utilBtnText>
              <![CDATA[<button class="btn btn-success btn-xs">run tests</button>]]>
            </utilBtnText>
            <onUtilBtn>
              <exec ref="testsStackPanel.setSingleSelectedItemByMeta">
                <meta ref="jasminePanel"/>
              </exec>
            </onUtilBtn>
          </control>
        </div>
        <div class="pebble-panel-body">
          <ul class="nav nav-pills nav-stacked">
            <control id="listCtrl" ref="standard:ArrayControl">
              <enableUrlBind>true</enableUrlBind>
              <childElement>
                <li/>
              </childElement>
              <displayControl>
                <innerMarkup>
                  <a href="#">{{item.key_}}</a>
                </innerMarkup>
                <mouseEvents>
                  <click>
                    <exec ref="this.setLayoutByDataPath">
                      <params>
                        <app>
                          <_generate ref="this.getSelectedItemMetaFromTop">
                            <path ref="model.clientWorkspace.libs"/>
                            <useRelPath>true</useRelPath>
                          </_generate>
                        </app>
                      </params>
                    </exec>
                  </click>
                </mouseEvents>
                <selectionClass>
                  <group ref="default">
                    <class>active</class>
                  </group>
                </selectionClass>
              </displayControl>
              <model>
                <_bind ref="model.jasmineSpecs"/>
              </model>
            </control>
          </ul>
        </div>
      </div>
      <div style="background-color:white;position:absolute;top:0px;left:300px;left:0px;bottom:0px;">
        <control id="testsStackPanel" ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="testsPanel"/>
          <model>
            <testsPanel>
              <innerMarkup>
                <div>
                  <control ref="standard:ArrayStackControl">
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:desktopTest"/>
                    <model>
                      <_bind ref="model.jasmineSpecs"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </testsPanel>
            <jasminePanel>
              <innerMarkup>
                <div style="background-color:white;position:absolute;top:0px;right:0px;left:0px;height:40px;">
                  <div class="panel panel-default">
                    <div class="panel-heading">Jasmine</div>
                  </div>
                </div>
                <div style="background-color:white;position:absolute;top:50px;right:0px;left:0px;bottom:0px;">
                  <control ref="backboneBuilder:jasmine">
                    <model>
                      <_bind ref="model"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </jasminePanel>
          </model>
        </control>
      </div>
    </innerMarkup>
  </desktopTests>
  <showdown>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>markup</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </model>
    </fields>
  </showdown>
  <desktopStrings>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>deployment</name>
        <type ref="theModel.libs.backboneBuilder.types.deployment"/>
      </model>
    </fields>
    <innerMarkup>
      <div style="position:absolute;top:0px;right:0px;left:0px;height:40px;">
        <div class="panel panel-default">
          <div class="panel-heading">
            <span>stringMap</span>
            <button class="btn btn-sm pull-right">
              <control ref="standard:text">
                <model>instance</model>
                <mouseEvents>
                  <click>
                    <exec ref="stackPanel.setSingleSelectedItemByMeta">
                      <meta ref="instance"/>
                    </exec>
                  </click>
                </mouseEvents>
              </control>
            </button>
            <button class="btn btn-sm pull-right">
              <control ref="standard:text">
                <model>itemized</model>
                <mouseEvents>
                  <click>
                    <exec ref="stackPanel.setSingleSelectedItemByMeta">
                      <meta ref="itemized"/>
                    </exec>
                  </click>
                </mouseEvents>
              </control>
            </button>
          </div>
        </div>
      </div>
      <div style="background-color:white;position:absolute;top:50px;right:0px;left:0px;bottom:0px;">
        <control id="stackPanel" ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="instance"/>
          <model>
            <itemized>
              <innerMarkup>
                <div style="background-color:white;position:absolute;right:0px;width:300px;top:0px;bottom:0px;">
                  <div style="overflow-y:auto;position:absolute;top:0px;bottom:0px;left:0px;right:0px;border-right:solid 1px #ddd;">
                    <div class="panel panel-warning">
                      <div class="panel-heading">Localize</div>
                      <div class="list-group">
                        <div class="list-group-item">
                          <div>
                            <control ref="backboneBuilder:TitleBarPartsWriteThru">
                              <title>String</title>
                              <placeholder>unique name</placeholder>
                              <model>
                                <_bind ref="model"/>
                              </model>
                              <onSave>
                                <exec ref="listCtrl.createThru">
                                  <withData>
                                    <key_>
                                      <_generate ref="this.getData">
                                        <path ref="text"/>
                                      </_generate>
                                    </key_>
                                  </withData>
                                </exec>
                                <exec ref="this.setData">
                                  <path ref="text"/>
                                  <data/>
                                </exec>
                              </onSave>
                              <onDelete>
                                <exec ref="listCtrl.deleteThru"/>
                              </onDelete>
                            </control>
                          </div>
                          <ul class="nav nav-pills nav-stacked">
                            <control id="listCtrl" ref="standard:ArrayControl">
                              <enableUrlBind>true</enableUrlBind>
                              <childElement>
                                <li/>
                              </childElement>
                              <displayControl>
                                <innerMarkup>
                                  <a href="#">{{item.key_}}</a>
                                </innerMarkup>
                                <mouseEvents>
                                  <click>
                                    <exec ref="this.setLayoutByDataPath">
                                      <params>
                                        <app>
                                          <_generate ref="this.getSelectedItemMetaFromTop">
                                            <path ref="model.clientWorkspace.libs"/>
                                            <useRelPath>true</useRelPath>
                                          </_generate>
                                        </app>
                                      </params>
                                    </exec>
                                  </click>
                                </mouseEvents>
                                <selectionClass>
                                  <group ref="default">
                                    <class>active</class>
                                  </group>
                                </selectionClass>
                              </displayControl>
                              <model>
                                <_bind ref="model"/>
                              </model>
                            </control>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div style="background-color:white;position:absolute;top:0px;right:300px;left:0px;bottom:0px;">
                  <div style="background-color:white;position:absolute;top:0px;right:0px;left:0px;height:40px;">
                    <div class="panel panel-default">
                      <div class="panel-heading">l10n</div>
                    </div>
                  </div>
                  <div style="background-color:white;position:absolute;top:50px;right:0px;left:0px;bottom:0px;">
                    <control ref="standard:ArrayStackControl">
                      <enableUrlBind>true</enableUrlBind>
                      <childElement>
                        <div/>
                      </childElement>
                      <displayControl ref="backboneBuilder:desktopString"/>
                      <model>
                        <_bind ref="model"/>
                      </model>
                    </control>
                  </div>
                </div>
              </innerMarkup>
            </itemized>
            <instance>
              <innerMarkup>
                <div>
                  <control ref="backboneBuilder:AceEditor">
                    <mode>pxml</mode>
                    <model>
                      <_bind ref="model"/>
                    </model>
                    <onBlur>
                      <exec ref="this.saveThru"/>
                    </onBlur>
                  </control>
                </div>
              </innerMarkup>
            </instance>
          </model>
        </control>
      </div>
    </innerMarkup>
  </desktopStrings>
  <desktopFunctionNavItem>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>function</name>
        <type ref="theModel.libs.standard.types.functionDef"/>
      </model>
      <onFunctionSelected>
        <name>onFunctionSelected</name>
        <type ref="theModel.libs.standard.types.function"/>
      </onFunctionSelected>
    </fields>
    <fixedData>
      <triggers>
        <func ref="this.setClass">
          <class>{{this.model._selection.default.selected ? "active" : ""}}</class>
        </func>
      </triggers>
    </fixedData>
    <innerMarkup>
      <div>
        <control ref="standard:text">
          <mouseEvents>
            <click>
              <exec ref="ctx.execFunction">
                <path ref="onFunctionSelected"/>
              </exec>
            </click>
          </mouseEvents>
          <model>
            <_bind ref="model.key_"/>
          </model>
        </control>
      </div>
      <div class="nav-pills nav-stacked">
        <control id="mainStackPanel" ref="standard:StackPanel">
          <triggers>
            <resetTrigger ref="this.setSingleSelectedItemByMeta">
              <meta>{{ctx.model._selection.default.selected ? 'sel' : 'default'}}</meta>
            </resetTrigger>
          </triggers>
          <initModule ref="default"/>
          <autoHeight>true</autoHeight>
          <model>
            <default>
              <innerMarkup>
                <div id="hidden"/>
              </innerMarkup>
            </default>
            <sel>
              <innerMarkup>
                <div id="shown">
                  <control ref="backboneBuilder:documentSimpleListWriteThru">
                    <title>Parameters</title>
                    <placeholder>unique name</placeholder>
                    <iconClass>fa-list</iconClass>
                    <model>
                      <_bind ref="model.fields"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </sel>
          </model>
        </control>
      </div>
    </innerMarkup>
  </desktopFunctionNavItem>
  <desktopService>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>basicType</name>
        <type ref="theModel.libs.standard.types.basicType"/>
      </model>
      <wins>
        <name>wins</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.win"/>
        </type>
      </wins>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;right:0px;width:300px;top:0px;bottom:0px;">
        <div style="overflow-y:auto;position:absolute;top:0px;bottom:0px;left:0px;right:0px;border-right:solid 1px #ddd;">
          <div class="panel panel-info">
            <div class="panel-heading">Sub Menu</div>
            <div class="list-group">
              <div class="list-group-item">
                <p>
                  <i class="fa fa-th pull-right"/>
                  <span>Parts</span>
                </p>
                <ul class="nav nav-pills nav-stacked">
                  <control ref="standard:ArrayControl">
                    <enableUrlBind>true</enableUrlBind>
                    <model>
                      <_bind ref="wins"/>
                      <general>
                        <name>general</name>
                      </general>
                    </model>
                    <childElement>
                      <li/>
                    </childElement>
                    <displayControl>
                      <innerMarkup>
                        <a href="#">{{item.name}}</a>
                      </innerMarkup>
                      <mouseEvents>
                        <click>
                          <exec ref="this.setSingleSelectedItem"/>
                        </click>
                      </mouseEvents>
                      <selectionClass>
                        <group ref="default">
                          <class>active</class>
                        </group>
                      </selectionClass>
                    </displayControl>
                  </control>
                </ul>
              </div>
              <div class="list-group-item">
                <div>
                  <control ref="backboneBuilder:documentSimpleListWriteThru">
                    <title>Parameters</title>
                    <placeholder>unique name</placeholder>
                    <iconClass>fa-list</iconClass>
                    <model>
                      <_bind ref="model.fields"/>
                    </model>
                  </control>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div style="background-color:white;position:absolute;top:0px;right:300px;left:0px;bottom:0px;">
        <control id="stackPanel" ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="general"/>
          <model>
            <_bind ref="wins"/>
            <general>
              <innerMarkup>
                <div class="panel panel-default">
                  <div class="panel-heading">General</div>
                  <div class="panel-body">
                    <control ref="backboneBuilder:ServiceGeneral">
                      <model>
                        <_bind ref="model"/>
                      </model>
                    </control>
                  </div>
                </div>
              </innerMarkup>
            </general>
            <fields>
              <innerMarkup>
                <div>
                  <control ref="standard:ArrayStackControl">
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:desktopSchema">
                      <libCollection ref="types"/>
                    </displayControl>
                    <model>
                      <_bind ref="model.fields"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </fields>
          </model>
        </control>
      </div>
    </innerMarkup>
  </desktopService>
  <desktopControlGeneral>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>type</name>
        <type ref="theModel.libs.standard.types.control"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="panel panel-default">
        <div class="panel-heading">General</div>
        <div class="panel-body">
          <div>
            <control ref="backboneBuilder:formRefTextInputHor">
              <libCollection ref="controls"/>
              <model>
                <_bind ref="model.inherits"/>
              </model>
            </control>
          </div>
          <div>
            <control ref="backboneBuilder:formTextAreaHor">
              <model>
                <_bind ref="model.description"/>
              </model>
            </control>
          </div>
        </div>
      </div>
    </innerMarkup>
  </desktopControlGeneral>
  <CssTemplate>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>cssTemplate</name>
        <type ref="theModel.libs.backboneBuilder.types.cssTemplate"/>
      </model>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;right:0px;width:300px;top:0px;bottom:0px;">
        <div style="overflow-y:auto;position:absolute;top:0px;bottom:0px;left:0px;right:0px;border-right:solid 1px #ddd;">
          <div class="panel panel-warning">
            <div class="panel-heading">
              <i class="fa fa-css3"/>
              <span> Css Templates</span>
            </div>
            <div class="list-group">
              <div class="list-group-item">
                <i class="fa fa-home fa-fw"/>
                <span>
                  <control ref="standard:text">
                    <mouseEvents>
                      <click>
                        <exec ref="stackPanel.setSingleSelectedItemByMeta">
                          <meta ref="general"/>
                        </exec>
                      </click>
                    </mouseEvents>
                    <model>general</model>
                  </control>
                </span>
              </div>
              <div class="list-group-item">
                <div>
                  <control ref="backboneBuilder:documentSimpleListWriteThru">
                    <title>Less</title>
                    <placeholder>unique name</placeholder>
                    <iconClass>fa-sort-amount-asc</iconClass>
                    <model>
                      <_bind ref="model.less"/>
                    </model>
                    <utilBtnText>
                      <![CDATA[<button class="btn btn-success btn-xs">compile</button>]]>
                    </utilBtnText>
                    <onUtilBtn/>
                  </control>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div style="background-color:white;position:absolute;top:0px;right:300px;left:0px;bottom:0px;">
        <control id="stackPanel" ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="general"/>
          <model>
            <general>
              <innerMarkup>
                <div style="position:absolute;top:0px;bottom:0px;right:0px;left:0px;">
                  <control ref="backboneBuilder:AceEditor">
                    <mode>css</mode>
                    <model>
                      <_bind ref="model.css"/>
                    </model>
                    <onBlur>
                      <exec ref="this.saveThru"/>
                    </onBlur>
                  </control>
                </div>
              </innerMarkup>
            </general>
            <less>
              <innerMarkup>
                <div>
                  <control ref="standard:ArrayStackControl">
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:desktopLess"/>
                    <model>
                      <_bind ref="model.less"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </less>
          </model>
        </control>
      </div>
    </innerMarkup>
  </CssTemplate>
  <importApp>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>type</name>
        <type ref="theModel.libs.backboneBuilder.types.lib"/>
      </model>
      <wins>
        <name>wins</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.win"/>
        </type>
      </wins>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;right:0px;width:300px;top:0px;bottom:0px;">
        <div style="overflow-y:auto;position:absolute;top:0px;bottom:0px;left:0px;right:0px;border-right:solid 1px #ddd;">
          <div class="panel panel-info">
            <div class="panel-heading">
              <i class="fa fa-puzzle-piece pull-right"/>
              <span>Apps / Libs</span>
            </div>
            <div class="list-group">
              <div class="list-group-item">
                <p>
                  <i class="fa fa-th pull-right"/>
                  <span>Popular</span>
                </p>
                <ul class="nav nav-pills nav-stacked">
                  <control ref="standard:ArrayControl">
                    <model>
                      <_bind ref="wins"/>
                      <general>
                        <name>general</name>
                      </general>
                      <roles>
                        <name>roles</name>
                      </roles>
                    </model>
                    <childElement>
                      <li/>
                    </childElement>
                    <displayControl>
                      <selectionClass>
                        <group ref="default">
                          <class>active</class>
                        </group>
                      </selectionClass>
                      <mouseEvents>
                        <click>
                          <exec ref="this.setSingleSelectedItem"/>
                        </click>
                      </mouseEvents>
                      <innerMarkup>
                        <a href="#">{{item.name}}</a>
                      </innerMarkup>
                    </displayControl>
                  </control>
                </ul>
              </div>
              <div class="list-group-item">
                <p>
                  <i class="fa fa-group pull-right"/>
                  <span>Recent</span>
                </p>
                <ul class="nav nav-pills nav-stacked"/>
              </div>
              <div style="display:none">
                <control id="listCtrl" ref="standard:ArrayTreeBase">
                  <crud>
                    <create ref="CW.createItem"/>
                    <delete ref="CW.deleteItem"/>
                  </crud>
                  <model>
                    <_bind ref="model.clientWorkspace.libs"/>
                  </model>
                </control>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div style="background-color:white;position:absolute;top:0px;right:300px;left:0px;bottom:0px;">
        <control ref="standard:StackPanel">
          <initModule ref="general"/>
          <model>
            <_bind ref="wins"/>
            <general>
              <innerMarkup>
                <div class="panel panel-default">
                  <div class="panel-heading">
                    <h3 class="panel-title">Apps / Libs</h3>
                  </div>
                  <div class="panel-body">
                    <innerMarkup>
                      <div>
                        <control ref="backboneBuilder:addLibByFile">
                          <onSave>
                            <exec ref="CW.replaceDs">
                              <collection ref="theModel.clientWorkspace.libs"/>
                              <app>
                                <_generate ref="this.getData">
                                  <path ref="model"/>
                                </_generate>
                              </app>
                            </exec>
                            <exec ref="this.setData">
                              <path ref="model"/>
                              <data/>
                            </exec>
                          </onSave>
                        </control>
                      </div>
                      <hr/>
                      <ul class="nav nav-pills">
                        <control id="extListCtrl" ref="standard:ArrayControl">
                          <enableUrlBind>true</enableUrlBind>
                          <childElement>
                            <li/>
                          </childElement>
                          <displayControl ref="backboneBuilder:libDetailsPublic">
                            <onAddBtnClick>
                              <exec ref="this.setSingleSelectedItem"/>
                              <exec ref="listCtrl.create">
                                <useSourceName>true</useSourceName>
                                <asDs>true</asDs>
                                <withData>
                                  <_generate ref="this.getSelectedItem">
                                    <asDs>true</asDs>
                                  </_generate>
                                </withData>
                              </exec>
                            </onAddBtnClick>
                          </displayControl>
                          <model>
                            <_bind ref="model.externalLibs"/>
                          </model>
                          <loadQuery ref="SERVER.getExternalLibs"/>
                        </control>
                      </ul>
                    </innerMarkup>
                  </div>
                </div>
              </innerMarkup>
            </general>
            <roles>
              <innerMarkup>
                <div class="panel panel-default">
                  <div class="panel-heading">
                    <h3 class="panel-title">Roles</h3>
                  </div>
                  <div class="panel-body">
                    <ul class="list-group"/>
                  </div>
                </div>
              </innerMarkup>
            </roles>
          </model>
        </control>
      </div>
    </innerMarkup>
  </importApp>
  <desktopString>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>string</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </model>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;top:0px;right:0px;left:0px;height:40px;">
        <div class="panel panel-default">
          <div class="panel-heading">
            <span>Strings</span>
          </div>
        </div>
      </div>
      <div style="position:absolute;right:0px;left:0px;top:50px;bottom:0px;">
        <control ref="backboneBuilder:AceEditor">
          <mode>markdown</mode>
          <model>
            <_bind ref="model"/>
          </model>
          <onBlur>
            <exec ref="this.saveThru"/>
          </onBlur>
        </control>
      </div>
    </innerMarkup>
  </desktopString>
  <desktopTest>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>test</name>
        <type ref="theModel.libs.standard.types.control"/>
      </model>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;top:0px;right:0px;left:0px;bottom:0px;">
        <div style="background-color:white;position:absolute;top:0px;right:0px;left:0px;height:40px;">
          <div class="panel panel-default">
            <div class="panel-heading">
              <span>Test</span>
            </div>
          </div>
        </div>
        <div style="background-color:white;position:absolute;top:50px;right:0px;left:0px;bottom:0px;">
          <control ref="backboneBuilder:AceEditor">
            <mode>javascript</mode>
            <model>
              <_bind ref="model.devCode"/>
            </model>
            <onBlur>
              <exec ref="this.saveThru"/>
            </onBlur>
          </control>
        </div>
      </div>
    </innerMarkup>
  </desktopTest>
  <desktopLess>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>markup</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </model>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;top:0px;right:0px;left:0px;bottom:0px;">
        <div style="background-color:white;position:absolute;top:0px;right:0px;left:0px;height:40px;">
          <div class="panel panel-default">
            <div class="panel-heading">
              <span>Less File</span>
            </div>
          </div>
        </div>
        <div style="background-color:white;position:absolute;top:50px;right:0px;left:0px;bottom:0px;">
          <control ref="backboneBuilder:AceEditor">
            <mode>less</mode>
            <model>
              <_bind ref="model"/>
            </model>
            <onBlur>
              <exec ref="this.saveThru"/>
            </onBlur>
          </control>
        </div>
      </div>
    </innerMarkup>
  </desktopLess>
  <desktopQuery>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>markup</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </model>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;top:0px;right:0px;left:0px;bottom:0px;">
        <div style="background-color:white;position:absolute;top:0px;right:0px;left:0px;height:40px;">
          <div class="panel panel-default">
            <div class="panel-heading">
              <span>Query</span>
            </div>
          </div>
        </div>
        <div style="background-color:white;position:absolute;top:50px;right:0px;left:0px;bottom:0px;">
          <control ref="backboneBuilder:AceEditor">
            <mode>pxml</mode>
            <model>
              <_bind ref="model"/>
            </model>
            <onBlur>
              <exec ref="this.saveThru"/>
            </onBlur>
          </control>
        </div>
      </div>
    </innerMarkup>
  </desktopQuery>
  <TitleBarPartsWriteThru>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>array</name>
        <type ref="theModel.libs.standard.types.array"/>
      </model>
      <text>
        <name>text</name>
        <type ref="theModel.libs.standard.types.text"/>
      </text>
      <title>
        <name>title</name>
        <type ref="theModel.libs.standard.types.text"/>
      </title>
      <placeholder>
        <name>placeholder</name>
        <type ref="theModel.libs.standard.types.text"/>
      </placeholder>
      <iconClass>
        <name>iconClass</name>
        <type ref="theModel.libs.standard.types.text"/>
      </iconClass>
      <onSave>
        <name>onSave</name>
        <type ref="theModel.libs.standard.types.function"/>
      </onSave>
      <onDelete>
        <name>onDelete</name>
        <type ref="theModel.libs.standard.types.function"/>
      </onDelete>
      <utilBtnText>
        <name>util button markup</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </utilBtnText>
      <onUtilBtn>
        <name>onUtilBtn</name>
        <type ref="theModel.libs.standard.types.function"/>
      </onUtilBtn>
      <utilBtnText1>
        <name>util button markup</name>
        <type ref="theModel.libs.standard.types.markup"/>
      </utilBtnText1>
      <onUtilBtn1>
        <name>onUtilBtn1</name>
        <type ref="theModel.libs.standard.types.function"/>
      </onUtilBtn1>
    </fields>
    <innerMarkup>
      <div class="clearfix">
        <i class="fa {{this.iconClass}}"/>
        <span> {{this.title}}</span>
        <div class="pull-right">
          <control id="spAddByMeta" ref="standard:StackPanel">
            <initModule ref="show"/>
            <autoHeight>true</autoHeight>
            <model>
              <show>
                <innerMarkup>
                  <span style="display:{{this.onUtilBtn == null ? 'inline' : 'none'}}">
                    <control ref="standard:markup">
                      <model>
                        <_bind ref="utilBtnText"/>
                      </model>
                      <mouseEvents>
                        <click>
                          <exec ref="ctx.execFunction">
                            <path ref="onUtilBtn"/>
                          </exec>
                        </click>
                      </mouseEvents>
                    </control>
                  </span>
                  <span style="display:{{this.onUtilBtn1 == null ? 'inline' : 'none'}}">
                    <control ref="standard:markup">
                      <model>
                        <_bind ref="utilBtnText1"/>
                      </model>
                      <mouseEvents>
                        <click>
                          <exec ref="ctx.execFunction">
                            <path ref="onUtilBtn1"/>
                          </exec>
                        </click>
                      </mouseEvents>
                    </control>
                  </span>
                  <button class="btn btn-xs" style="display:{{this.model._selection.default.singleSelectedMeta ? 'inline' : 'none'}}">
                    <control ref="standard:text">
                      <model>delete</model>
                      <mouseEvents>
                        <click>
                          <exec ref="ctx.execFunction">
                            <path ref="onDelete"/>
                          </exec>
                        </click>
                      </mouseEvents>
                    </control>
                  </button>
                  <button class="btn btn-xs">
                    <control ref="standard:text">
                      <model>add</model>
                      <mouseEvents>
                        <click>
                          <exec ref="spAddByMeta.setSingleSelectedItemByMeta">
                            <meta ref="edit"/>
                          </exec>
                          <exec ref="inputCtrl.setStyleProperty">
                            <property>display</property>
                            <value>block</value>
                          </exec>
                        </click>
                      </mouseEvents>
                    </control>
                  </button>
                </innerMarkup>
              </show>
              <edit>
                <innerMarkup>
                  <div>
                    <button class="btn btn-xs">
                      <control ref="standard:text">
                        <model>cancel</model>
                        <mouseEvents>
                          <click>
                            <exec ref="spAddByMeta.setSingleSelectedItemByMeta">
                              <meta ref="show"/>
                            </exec>
                            <exec ref="inputCtrl.setStyleProperty">
                              <property>display</property>
                              <value>none</value>
                            </exec>
                          </click>
                        </mouseEvents>
                      </control>
                    </button>
                    <button class="btn btn-xs">
                      <control ref="standard:text">
                        <model>add</model>
                        <mouseEvents>
                          <click>
                            <exec ref="inputCtrl.save"/>
                            <exec ref="ctx.execFunction">
                              <path ref="onSave"/>
                            </exec>
                            <exec ref="spAddByMeta.setSingleSelectedItemByMeta">
                              <meta ref="show"/>
                            </exec>
                            <exec ref="inputCtrl.setStyleProperty">
                              <property>display</property>
                              <value>none</value>
                            </exec>
                          </click>
                        </mouseEvents>
                      </control>
                    </button>
                  </div>
                </innerMarkup>
              </edit>
            </model>
          </control>
        </div>
      </div>
      <div>
        <input style="display:none;" type="text" class="form-control" placeholder="{{ctx.placeholder}}">
          <control id="inputCtrl" ref="standard:textInput">
            <model>
              <_bind ref="text"/>
            </model>
          </control>
        </input>
      </div>
    </innerMarkup>
  </TitleBarPartsWriteThru>
  <AceEditor>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>anything</name>
        <type ref="theModel.libs.standard.types.undefined"/>
      </model>
      <mode>
        <name>mode</name>
        <type ref="theModel.libs.standard.types.text"/>
      </mode>
      <onBlur>
        <name>onBlur</name>
        <type ref="theModel.libs.standard.types.function"/>
      </onBlur>
    </fields>
  </AceEditor>
  <profileDetails>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>profile</name>
        <type ref="theModel.libs.backboneBuilder.types.profile"/>
      </model>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;left:0px;width:300px;top:0px;bottom:0px;">
        <div style="overflow-y:auto;position:absolute;top:0px;bottom:0px;left:0px;right:0px;border-right:solid 1px #ddd">
          <div class="panel panel-primary">
            <div class="panel-heading">
              <i class="fa fa-folder-o pull-right"/>
              <span>Parts</span>
            </div>
            <div class="list-group">
              <div class="list-group-item">
                <p>
                  <control ref="standard:text">
                    <model>preferences</model>
                    <mouseEvents>
                      <click>
                        <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                          <meta ref="contents"/>
                        </exec>
                        <exec ref="stackPanel.setSingleSelectedItemByMeta">
                          <meta ref="generalPanel"/>
                        </exec>
                      </click>
                    </mouseEvents>
                  </control>
                </p>
              </div>
              <div class="list-group-item">
                <control ref="backboneBuilder:documentSimpleListWriteThru">
                  <model>
                    <_bind ref="model.friends"/>
                  </model>
                  <title>Friends</title>
                  <placeholder>search??</placeholder>
                  <iconClass>fa-user</iconClass>
                  <onSave>
                    <exec ref="listCtrl.create">
                      <withData>
                        <key_>
                          <_generate ref="this.getData">
                            <path ref="model"/>
                          </_generate>
                        </key_>
                      </withData>
                    </exec>
                    <exec ref="this.setData">
                      <path ref="model"/>
                      <data/>
                    </exec>
                  </onSave>
                </control>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div style="background-color:white;position:absolute;top:0px;left:300px;right:0px;bottom:0px;">
        <div>
          <control id="mainStackPanel" ref="standard:StackPanel">
            <enableUrlBind>true</enableUrlBind>
            <initModule ref="help"/>
            <model>
              <help>
                <innerMarkup>
                  <div class="pebble-description">
                    <control ref="backboneBuilder:showdown">
                      <model>
                        <![CDATA[@pebble-string_profile]]>
                      </model>
                    </control>
                  </div>
                </innerMarkup>
              </help>
              <contents>
                <innerMarkup>
                  <div style="position:absolute;top:0px;left:0px;right:0px;bottom:0px;">
                    <control id="stackPanel" ref="standard:StackPanel">
                      <enableUrlBind>true</enableUrlBind>
                      <initModule ref="generalPanel"/>
                      <model>
                        <generalPanel>
                          <innerMarkup>
                            <div>
                              <control ref="backboneBuilder:preferences">
                                <model>
                                  <_bind ref="model"/>
                                </model>
                              </control>
                            </div>
                          </innerMarkup>
                        </generalPanel>
                        <friendPanel>
                          <innerMarkup>
                            <div>
                              <control ref="standard:ArrayControl">
                                <enableUrlBind>true</enableUrlBind>
                                <childElement>
                                  <div/>
                                </childElement>
                                <displayControl ref="backboneBuilder:profile"/>
                                <model>
                                  <_bind ref="model.friends"/>
                                </model>
                              </control>
                            </div>
                          </innerMarkup>
                        </friendPanel>
                      </model>
                    </control>
                  </div>
                </innerMarkup>
              </contents>
            </model>
          </control>
        </div>
      </div>
    </innerMarkup>
  </profileDetails>
  <preferences>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>type</name>
        <type ref="theModel.libs.backboneBuilder.types.profile"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="panel panel-default">
        <div class="panel-heading">General</div>
        <div class="panel-body">
          <div>
            <control ref="backboneBuilder:formTextInputHor">
              <model>
                <_bind ref="model.name"/>
              </model>
            </control>
          </div>
          <div>
            <control ref="backboneBuilder:formTextInputHor">
              <model>
                <_bind ref="model.backgroundColor"/>
              </model>
            </control>
          </div>
          <div>
            <control ref="backboneBuilder:formTextInputHor">
              <model>
                <_bind ref="model.editorKeyBindings"/>
              </model>
            </control>
          </div>
          <div>
            <control ref="backboneBuilder:formTextInputHor">
              <model>
                <_bind ref="model.editorTheme"/>
              </model>
            </control>
          </div>
          <div>
            <control ref="backboneBuilder:formTextInputHor">
              <model>
                <_bind ref="model.editorFontSize"/>
              </model>
            </control>
          </div>
        </div>
      </div>
    </innerMarkup>
  </preferences>
  <Role>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>type</name>
        <type ref="theModel.libs.backboneBuilder.types.actorGroup"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="panel panel-default">
        <div class="panel-heading">Role</div>
        <div class="panel-body">
          <div>
            <control ref="backboneBuilder:formTextInputHor">
              <model>
                <_bind ref="model.name"/>
              </model>
            </control>
          </div>
          <div>
            <control ref="backboneBuilder:formTextAreaHor">
              <model>
                <_bind ref="model.description"/>
              </model>
            </control>
          </div>
        </div>
      </div>
    </innerMarkup>
  </Role>
  <CssTemplateNav>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>cssTemplate</name>
        <type ref="theModel.libs.backboneBuilder.types.cssTemplate"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="panel panel-warning">
        <div class="panel-heading">
          <button class="btn btn-link">
            <control ref="standard:markup">
              <model>
                <![CDATA[<i class="fa fa-chevron-circle-left fa-2x" />]]>
              </model>
              <mouseEvents>
                <click>
                  <exec ref="ctx.execFunction">
                    <path ref="onBackBtn"/>
                  </exec>
                </click>
              </mouseEvents>
            </control>
          </button>
          <i class="fa fa-css3"/>
          <span> Css Templates</span>
        </div>
        <div class="list-group">
          <div class="list-group-item">
            <i class="fa fa-home fa-fw"/>
            <span>
              <control ref="standard:text">
                <mouseEvents>
                  <click>
                    <exec ref="stackPanel.setSingleSelectedItemByMeta">
                      <meta ref="general"/>
                    </exec>
                  </click>
                </mouseEvents>
                <model>general</model>
              </control>
            </span>
          </div>
          <div class="list-group-item">
            <div>
              <control ref="backboneBuilder:TitleBarPartsWriteThru">
                <model>
                  <_bind ref="model.less"/>
                </model>
                <title>Less</title>
                <placeholder>unique name</placeholder>
                <iconClass>fa-sort-amount-asc</iconClass>
                <onSave>
                  <exec ref="listCtrl.createThru">
                    <withData>
                      <key_>
                        <_generate ref="this.getData">
                          <path ref="text"/>
                        </_generate>
                      </key_>
                    </withData>
                  </exec>
                  <exec ref="this.setData">
                    <path ref="text"/>
                    <data/>
                  </exec>
                </onSave>
                <onDelete>
                  <exec ref="listCtrl.deleteThru"/>
                </onDelete>
                <utilBtnText>
                  <![CDATA[<button class="btn btn-success btn-xs">compile</button>]]>
                </utilBtnText>
              </control>
            </div>
            <ul class="nav nav-pills nav-stacked">
              <control id="listCtrl" ref="standard:ArrayControl">
                <enableUrlBind>true</enableUrlBind>
                <childElement>
                  <li/>
                </childElement>
                <displayControl>
                  <innerMarkup>
                    <a href="#">{{item.key_}}</a>
                  </innerMarkup>
                  <mouseEvents>
                    <click>
                      <exec ref="this.setLayoutByDataPath">
                        <params>
                          <app>
                            <_generate ref="this.getSelectedItemMetaFromTop">
                              <path ref="model.clientWorkspace.libs"/>
                              <useRelPath>true</useRelPath>
                            </_generate>
                          </app>
                        </params>
                      </exec>
                    </click>
                  </mouseEvents>
                  <selectionClass>
                    <group ref="default">
                      <class>active</class>
                    </group>
                  </selectionClass>
                </displayControl>
                <model>
                  <_bind ref="model.less"/>
                </model>
              </control>
            </ul>
          </div>
        </div>
      </div>
    </innerMarkup>
  </CssTemplateNav>
  <desktopStringsNav>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>deployment</name>
        <type ref="theModel.libs.backboneBuilder.types.deployment"/>
      </model>
      <onBackBtn>
        <name>onBackBtn</name>
        <type ref="theModel.libs.standard.types.function"/>
      </onBackBtn>
    </fields>
    <innerMarkup>
      <div class="panel panel-warning">
        <div class="panel-heading">
          <button class="btn btn-link">
            <control ref="standard:markup">
              <model>
                <![CDATA[<i class="fa fa-chevron-circle-left fa-2x" />]]>
              </model>
              <mouseEvents>
                <click>
                  <exec ref="ctx.execFunction">
                    <path ref="onBackBtn"/>
                  </exec>
                </click>
              </mouseEvents>
            </control>
          </button>
          <span> Localize</span>
        </div>
        <div class="list-group">
          <div class="list-group-item">
            <div>
              <control ref="backboneBuilder:TitleBarPartsWriteThru">
                <title>String</title>
                <placeholder>unique name</placeholder>
                <model>
                  <_bind ref="model.strings"/>
                </model>
                <onSave>
                  <exec ref="listCtrl.createThru">
                    <withData>
                      <key_>
                        <_generate ref="this.getData">
                          <path ref="text"/>
                        </_generate>
                      </key_>
                    </withData>
                  </exec>
                  <exec ref="this.setData">
                    <path ref="text"/>
                    <data/>
                  </exec>
                </onSave>
                <onDelete>
                  <exec ref="listCtrl.deleteThru"/>
                </onDelete>
              </control>
            </div>
            <ul class="nav nav-pills nav-stacked">
              <control id="listCtrl" ref="standard:ArrayControl">
                <enableUrlBind>true</enableUrlBind>
                <childElement>
                  <li/>
                </childElement>
                <displayControl>
                  <innerMarkup>
                    <a href="#">{{item.key_}}</a>
                  </innerMarkup>
                  <mouseEvents>
                    <click>
                      <exec ref="this.setLayoutByDataPath">
                        <params>
                          <app>
                            <_generate ref="this.getSelectedItemMetaFromTop">
                              <path ref="model.clientWorkspace.libs"/>
                              <useRelPath>true</useRelPath>
                            </_generate>
                          </app>
                        </params>
                      </exec>
                    </click>
                  </mouseEvents>
                  <selectionClass>
                    <group ref="default">
                      <class>active</class>
                    </group>
                  </selectionClass>
                </displayControl>
                <model>
                  <_bind ref="model.strings"/>
                </model>
              </control>
            </ul>
          </div>
        </div>
      </div>
    </innerMarkup>
  </desktopStringsNav>
  <desktopTestsNav>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>deployment</name>
        <type ref="theModel.libs.backboneBuilder.types.deployment"/>
      </model>
      <onBackBtn>
        <name>onBackBtn</name>
        <type ref="theModel.libs.standard.types.function"/>
      </onBackBtn>
      <onJasmineBtn>
        <name>onJasmineBtn</name>
        <type ref="theModel.libs.standard.types.function"/>
      </onJasmineBtn>
    </fields>
    <innerMarkup>
      <div class="panel panel-warning">
        <div class="panel-heading">
          <button class="btn btn-link">
            <control ref="standard:markup">
              <model>
                <![CDATA[<i class="fa fa-chevron-circle-left fa-2x" />]]>
              </model>
              <mouseEvents>
                <click>
                  <exec ref="ctx.execFunction">
                    <path ref="onBackBtn"/>
                  </exec>
                </click>
              </mouseEvents>
            </control>
          </button>
          <span> Tests</span>
        </div>
        <div class="list-group">
          <div class="list-group-item">
            <div>
              <control ref="backboneBuilder:TitleBarPartsWriteThru">
                <model>
                  <_bind ref="model.jasmineSpecs"/>
                </model>
                <title>Tests</title>
                <placeholder>unique name</placeholder>
                <iconClass>
                  <_bind ref="iconClass"/>
                </iconClass>
                <onSave>
                  <exec ref="listCtrl.createThru">
                    <withData>
                      <key_>
                        <_generate ref="this.getData">
                          <path ref="text"/>
                        </_generate>
                      </key_>
                    </withData>
                  </exec>
                  <exec ref="this.setData">
                    <path ref="text"/>
                    <data/>
                  </exec>
                </onSave>
                <onDelete>
                  <exec ref="listCtrl.deleteThru"/>
                </onDelete>
                <utilBtnText>
                  <![CDATA[<button class="btn btn-success btn-xs">run tests</button>]]>
                </utilBtnText>
                <onUtilBtn>
                  <exec ref="ctx.execFunction">
                    <path ref="onJasmineBtn"/>
                  </exec>
                </onUtilBtn>
              </control>
            </div>
            <ul class="nav nav-pills nav-stacked">
              <control id="listCtrl" ref="standard:ArrayControl">
                <enableUrlBind>true</enableUrlBind>
                <childElement>
                  <li/>
                </childElement>
                <displayControl>
                  <innerMarkup>
                    <a href="#">{{item.key_}}</a>
                  </innerMarkup>
                  <mouseEvents>
                    <click>
                      <exec ref="this.setLayoutByDataPath">
                        <params>
                          <app>
                            <_generate ref="this.getSelectedItemMetaFromTop">
                              <path ref="model.clientWorkspace.libs"/>
                              <useRelPath>true</useRelPath>
                            </_generate>
                          </app>
                        </params>
                      </exec>
                    </click>
                  </mouseEvents>
                  <selectionClass>
                    <group ref="default">
                      <class>active</class>
                    </group>
                  </selectionClass>
                </displayControl>
                <model>
                  <_bind ref="model.jasmineSpecs"/>
                </model>
              </control>
            </ul>
          </div>
        </div>
      </div>
    </innerMarkup>
  </desktopTestsNav>
  <CssTemplateSep>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>cssTemplate</name>
        <type ref="theModel.libs.backboneBuilder.types.cssTemplate"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <control id="stackPanel" ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="general"/>
          <model>
            <general>
              <innerMarkup>
                <div style="position:absolute;top:0px;height:50px;right:0px;left:0px;">
                  <div class="panel panel-default">
                    <div class="panel-heading">Css</div>
                  </div>
                </div>
                <div style="position:absolute;top:50px;bottom:0px;right:0px;left:0px;">
                  <control ref="backboneBuilder:AceEditor">
                    <mode>css</mode>
                    <model>
                      <_bind ref="model.css"/>
                    </model>
                    <onBlur>
                      <exec ref="this.saveThru"/>
                    </onBlur>
                  </control>
                </div>
              </innerMarkup>
            </general>
            <less>
              <innerMarkup>
                <div>
                  <control ref="standard:ArrayStackControl">
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:desktopLess"/>
                    <model>
                      <_bind ref="model.less"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </less>
          </model>
        </control>
      </div>
    </innerMarkup>
  </CssTemplateSep>
  <Deployment>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>deployment</name>
        <type ref="theModel.libs.backboneBuilder.types.deployment"/>
      </model>
      <wins>
        <name>wins</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.win"/>
        </type>
      </wins>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;left:0px;width:300px;top:0px;bottom:0px;">
        <div style="overflow-y:auto;position:absolute;top:0px;bottom:0px;left:0px;right:0px;border-right:solid 1px #ddd">
          <div class="panel panel-primary">
            <div class="panel-heading">
              <i class="fa fa-cloud pull-right"/>
              <span>Access Points</span>
            </div>
            <div class="list-group">
              <div class="list-group-item">
                <div>
                  <control ref="backboneBuilder:TitleBarPartsWriteThru">
                    <model>
                      <_bind ref="model.accessPoints"/>
                    </model>
                    <title>Access Points</title>
                    <placeholder>unique name</placeholder>
                    <iconClass>fa-laptop</iconClass>
                    <onSave>
                      <exec ref="accessPointsCtrl.createThru">
                        <withData>
                          <key_>
                            <_generate ref="this.getData">
                              <path ref="text"/>
                            </_generate>
                          </key_>
                        </withData>
                      </exec>
                      <exec ref="this.setData">
                        <path ref="text"/>
                        <data/>
                      </exec>
                    </onSave>
                    <onDelete>
                      <exec ref="accessPointsCtrl.deleteThru"/>
                    </onDelete>
                  </control>
                </div>
                <div>
                  <control id="accessPointsCtrl" ref="standard:ArrayControl">
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <a class="list-group-item"/>
                    </childElement>
                    <displayControl ref="backboneBuilder:accessPointLauncher">
                      <mouseEvents>
                        <click>
                          <exec ref="this.setLayoutByDataPath">
                            <params>
                              <app>
                                <_generate ref="this.getSelectedItemMetaFromTop">
                                  <path ref="model.clientWorkspace.libs"/>
                                  <useRelPath>true</useRelPath>
                                </_generate>
                              </app>
                            </params>
                          </exec>
                        </click>
                      </mouseEvents>
                    </displayControl>
                    <model>
                      <_bind ref="model.accessPoints"/>
                    </model>
                  </control>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div style="background-color:white;position:absolute;top:0px;left:300px;right:0px;bottom:0px;">
        <control id="depStackPanel" ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="deploymentPanel"/>
          <model>
            <deploymentPanel>
              <innerMarkup>
                <div style="background-color:white;position:absolute;right:0px;width:300px;top:0px;bottom:0px;">
                  <div style="overflow-y:auto;position:absolute;top:0px;bottom:0px;left:0px;right:0px;border-right">
                    <control id="mainStackPanel" ref="standard:StackPanel">
                      <enableUrlBind>true</enableUrlBind>
                      <initModule ref="general"/>
                      <model>
                        <_bind ref="wins"/>
                        <general>
                          <innerMarkup>
                            <div>
                              <div class="panel panel-info">
                                <div class="panel-heading">Deployment Parts</div>
                                <div class="list-group">
                                  <div class="list-group-item">
                                    <p>
                                      <i class="fa fa-list pull-right"/>
                                      <span>Parts</span>
                                    </p>
                                    <ul class="nav nav-pills nav-stacked">
                                      <control ref="standard:ArrayControl">
                                        <enableUrlBind>true</enableUrlBind>
                                        <model>
                                          <_bind ref="wins"/>
                                          <general>
                                            <name>general</name>
                                            <iconClass>fa-files-o</iconClass>
                                          </general>
                                          <tests>
                                            <name>tests</name>
                                            <iconClass>fa-files-o</iconClass>
                                          </tests>
                                          <strings>
                                            <name>localize strings</name>
                                            <iconClass>fa-files-o</iconClass>
                                          </strings>
                                        </model>
                                        <childElement>
                                          <li/>
                                        </childElement>
                                        <displayControl>
                                          <selectionClass>
                                            <group ref="default">
                                              <class>active</class>
                                            </group>
                                          </selectionClass>
                                          <mouseEvents>
                                            <click>
                                              <exec ref="this.setSingleSelectedItem"/>
                                            </click>
                                          </mouseEvents>
                                          <innerMarkup>
                                            <a href="#">
                                              <i class="fa {{item.iconClass}}"/>
                                              <span> {{item.name}}</span>
                                            </a>
                                          </innerMarkup>
                                        </displayControl>
                                      </control>
                                    </ul>
                                  </div>
                                  <div class="list-group-item">
                                    <p>
                                      <button class="btn btn-xs pull-right">
                                        <control ref="standard:markup">
                                          <model>
                                            <![CDATA[<i class="fa fa-repeat"/>]]>
                                          </model>
                                          <mouseEvents>
                                            <click>
                                              <exec ref="server.restart"/>
                                            </click>
                                          </mouseEvents>
                                        </control>
                                      </button>
                                      <button class="btn btn-xs pull-right">
                                        <control ref="standard:markup">
                                          <model>
                                            <![CDATA[<i class="fa fa-eraser"/>]]>
                                          </model>
                                          <mouseEvents>
                                            <click>
                                              <exec ref="server.clearLog"/>
                                            </click>
                                          </mouseEvents>
                                        </control>
                                      </button>
                                      <i class="fa fa-sitemap"/>
                                      <span> Server</span>
                                    </p>
                                    <div>
                                      <control id="server" ref="backboneBuilder:server">
                                        <startServer>
                                          <_bind ref="serverRunning"/>
                                        </startServer>
                                        <model>
                                          <_bind ref="model"/>
                                        </model>
                                      </control>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </innerMarkup>
                        </general>
                        <tests>
                          <innerMarkup>
                            <div>
                              <control ref="backboneBuilder:desktopTestsNav">
                                <model>
                                  <_bind ref="model"/>
                                </model>
                                <onBackBtn>
                                  <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                                    <meta ref="general"/>
                                  </exec>
                                </onBackBtn>
                                <onJasmineBtn>
                                  <exec ref="testsStackPanel.setSingleSelectedItemByMeta">
                                    <meta ref="jasminePanel"/>
                                  </exec>
                                </onJasmineBtn>
                              </control>
                            </div>
                          </innerMarkup>
                        </tests>
                        <strings>
                          <innerMarkup>
                            <div>
                              <control ref="backboneBuilder:desktopStringsNav">
                                <model>
                                  <_bind ref="model"/>
                                </model>
                                <onBackBtn>
                                  <exec ref="mainStackPanel.setSingleSelectedItemByMeta">
                                    <meta ref="general"/>
                                  </exec>
                                </onBackBtn>
                              </control>
                            </div>
                          </innerMarkup>
                        </strings>
                      </model>
                    </control>
                  </div>
                </div>
                <div style="background-color:white;position:absolute;top:0px;right:300px;left:0px;bottom:0px;">
                  <control ref="standard:StackPanel">
                    <enableUrlBind>true</enableUrlBind>
                    <initModule ref="general"/>
                    <model>
                      <_bind ref="wins"/>
                      <general>
                        <innerMarkup>
                          <div>
                            <control ref="standard:StackPanel">
                              <enableUrlBind>true</enableUrlBind>
                              <initModule ref="theControlApp"/>
                              <model>
                                <groupMaps>
                                  <innerMarkup>
                                    <div style="background-color:white;position:absolute;top:0px;right:0px;left:0px;height:40px;">
                                      <div class="panel-heading">
                                        <span>Role Mapping</span>
                                      </div>
                                    </div>
                                    <div style="background-color:white;position:absolute;top:50px;right:0px;left:0px;bottom:0px;">
                                      <control id="groupMapsCtrl" ref="backboneBuilder:AceEditor">
                                        <mode>pxml</mode>
                                        <model>
                                          <_bind ref="model.groupMaps"/>
                                        </model>
                                        <onBlur>
                                          <exec ref="this.saveThru"/>
                                        </onBlur>
                                      </control>
                                    </div>
                                  </innerMarkup>
                                </groupMaps>
                                <theControlApp>
                                  <innerMarkup>
                                    <div style="position:absolute;top:0px;right:0px;left:0px;height:40px;">
                                      <div class="panel panel-default">
                                        <div class="panel-heading">
                                          <span>theControlApp</span>
                                        </div>
                                      </div>
                                    </div>
                                    <div style="background-color:white;position:absolute;top:43px;right:0px;left:0px;bottom:0px;">
                                      <control id="theControlAppCtrl" ref="backboneBuilder:AceEditor">
                                        <mode>pxml</mode>
                                        <model>
                                          <_bind ref="model.theControlApp"/>
                                        </model>
                                        <onBlur>
                                          <exec ref="this.saveThru"/>
                                        </onBlur>
                                      </control>
                                    </div>
                                  </innerMarkup>
                                </theControlApp>
                              </model>
                            </control>
                          </div>
                        </innerMarkup>
                      </general>
                      <tests>
                        <innerMarkup>
                          <div>
                            <control id="testsStackPanel" ref="standard:StackPanel">
                              <enableUrlBind>true</enableUrlBind>
                              <initModule ref="testsPanel"/>
                              <model>
                                <testsPanel>
                                  <innerMarkup>
                                    <div>
                                      <control ref="standard:ArrayStackControl">
                                        <enableUrlBind>true</enableUrlBind>
                                        <childElement>
                                          <div/>
                                        </childElement>
                                        <displayControl ref="backboneBuilder:desktopTest"/>
                                        <model>
                                          <_bind ref="model.jasmineSpecs"/>
                                        </model>
                                      </control>
                                    </div>
                                  </innerMarkup>
                                </testsPanel>
                                <jasminePanel>
                                  <innerMarkup>
                                    <div style="background-color:white;position:absolute;top:0px;right:0px;left:0px;height:40px;">
                                      <div class="panel panel-default">
                                        <div class="panel-heading">Jasmine</div>
                                      </div>
                                    </div>
                                    <div style="background-color:white;position:absolute;top:50px;right:0px;left:0px;bottom:0px;">
                                      <control ref="backboneBuilder:jasmine">
                                        <model>
                                          <_bind ref="model"/>
                                        </model>
                                      </control>
                                    </div>
                                  </innerMarkup>
                                </jasminePanel>
                              </model>
                            </control>
                          </div>
                        </innerMarkup>
                      </tests>
                      <strings>
                        <innerMarkup>
                          <div>
                            <div style="background-color:white;position:absolute;top:0px;right:0px;left:0px;height:40px;">
                              <div class="panel panel-default">
                                <div class="panel-heading">l10n</div>
                              </div>
                            </div>
                            <div style="background-color:white;position:absolute;top:50px;right:0px;left:0px;bottom:0px;">
                              <control ref="standard:ArrayStackControl">
                                <enableUrlBind>true</enableUrlBind>
                                <childElement>
                                  <div/>
                                </childElement>
                                <displayControl ref="backboneBuilder:desktopString"/>
                                <model>
                                  <_bind ref="model.strings"/>
                                </model>
                              </control>
                            </div>
                          </div>
                        </innerMarkup>
                      </strings>
                      <accessPointsPanel>
                        <innerMarkup>
                          <div style="background-color:white;">
                            <control ref="standard:ArrayStackControl">
                              <enableUrlBind>true</enableUrlBind>
                              <model>
                                <_bind ref="model.accessPoints"/>
                              </model>
                              <childElement>
                                <div/>
                              </childElement>
                              <displayControl ref="backboneBuilder:desktopAccessPoint"/>
                            </control>
                          </div>
                        </innerMarkup>
                      </accessPointsPanel>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </deploymentPanel>
          </model>
        </control>
      </div>
    </innerMarkup>
  </Deployment>
  <ReferenceInput>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>type</name>
        <type ref="theModel.libs.standard.types.itemRelRef"/>
      </model>
    </fields>
  </ReferenceInput>
  <ServiceGeneral>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>type</name>
        <type ref="theModel.libs.standard.types.basicType"/>
      </model>
    </fields>
    <innerMarkup>
      <div style="position:absolute;top:0px;height:400px;right:0px;left:0px;">
        <div class="panel panel-default">
          <div class="panel-heading">Service</div>
          <div class="panel-body">
            <div>
              <control ref="backboneBuilder:formTextAreaHor">
                <model>
                  <_bind ref="model.description"/>
                </model>
              </control>
            </div>
            <div>
              <control ref="backboneBuilder:formRefTextInputHor">
                <libCollection ref="types"/>
                <model>
                  <_bind ref="model.inherits"/>
                </model>
              </control>
            </div>
            <div>
              <a href="#" class="btn btn-link">
                <control ref="backboneBuilder:toggleButton">
                  <text>add query</text>
                  <model>
                    <_bind ref="showConfig"/>
                  </model>
                </control>
              </a>
            </div>
          </div>
        </div>
      </div>
      <div style="position:absolute;top:400px;bottom:0px;right:0px;left:0px;">
        <div style="height:300px;-moz-transition:height 0.7s ease-out;-o-transition:height 0.7s ease-out;-webkit-transition:height 0.7s ease-out;transition:height 0.7s ease-out;">
          <control ref="standard:Panel">
            <showPanel>
              <_bind ref="showConfig"/>
            </showPanel>
            <triggers>
              <trig1 ref="this.setStyleProperty">
                <property>visibility</property>
                <value>{{ctx.showConfig ? 'visible' : 'hidden'}}</value>
              </trig1>
              <trig ref="this.setStyleProperty">
                <property>height</property>
                <value>{{ctx.showConfig ? '100px' : '0px'}}</value>
              </trig>
            </triggers>
            <innerMarkup>
              <div style="position:absolute;top:0px;bottom:0px;right:0px;left:0px;">
                <control ref="backboneBuilder:AceEditor">
                  <mode>pxml</mode>
                  <model>
                    <_bind ref="model.query"/>
                  </model>
                  <onBlur>
                    <exec ref="this.saveThru"/>
                  </onBlur>
                </control>
              </div>
            </innerMarkup>
          </control>
        </div>
      </div>
    </innerMarkup>
  </ServiceGeneral>
  <desktopType>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>basicType</name>
        <type ref="theModel.libs.standard.types.basicType"/>
      </model>
      <wins>
        <name>wins</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.win"/>
        </type>
      </wins>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;right:0px;width:300px;top:0px;bottom:0px;">
        <div style="overflow-y:auto;position:absolute;top:0px;bottom:0px;left:0px;right:0px;border-right:solid 1px #ddd;">
          <div class="panel panel-info">
            <div class="panel-heading">Sub Menu</div>
            <div class="list-group">
              <div class="list-group-item">
                <p>
                  <i class="fa fa-th pull-right"/>
                  <span>Parts</span>
                </p>
                <ul class="nav nav-pills nav-stacked">
                  <control ref="standard:ArrayControl">
                    <enableUrlBind>true</enableUrlBind>
                    <model>
                      <_bind ref="wins"/>
                      <general>
                        <name>general</name>
                      </general>
                    </model>
                    <childElement>
                      <li/>
                    </childElement>
                    <displayControl>
                      <innerMarkup>
                        <a href="#">{{item.name}}</a>
                      </innerMarkup>
                      <mouseEvents>
                        <click>
                          <exec ref="this.setSingleSelectedItem"/>
                        </click>
                      </mouseEvents>
                      <selectionClass>
                        <group ref="default">
                          <class>active</class>
                        </group>
                      </selectionClass>
                    </displayControl>
                  </control>
                </ul>
              </div>
              <div class="list-group-item">
                <div>
                  <control ref="backboneBuilder:documentSimpleListWriteThru">
                    <title>Fields</title>
                    <placeholder>unique name</placeholder>
                    <iconClass>fa-list</iconClass>
                    <model>
                      <_bind ref="model.fields"/>
                    </model>
                  </control>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div style="background-color:white;position:absolute;top:0px;right:300px;left:0px;bottom:0px;">
        <control id="stackPanel" ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="general"/>
          <model>
            <_bind ref="wins"/>
            <general>
              <innerMarkup>
                <div>
                  <control ref="backboneBuilder:desktopTypeGeneral">
                    <model>
                      <_bind ref="model"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </general>
            <fields>
              <innerMarkup>
                <div>
                  <control ref="standard:ArrayStackControl">
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:desktopSchema">
                      <libCollection ref="types"/>
                    </displayControl>
                    <model>
                      <_bind ref="model.fields"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </fields>
          </model>
        </control>
      </div>
    </innerMarkup>
  </desktopType>
  <Dependency>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>dependecy</name>
        <type ref="theModel.libs.standard.types.itemRelRef"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="form-inline">
        <div class="form-group">
          <input class="form-control" type="text">
            <control ref="backboneBuilder:ReferenceInput">
              <libsOnly>true</libsOnly>
              <model>
                <_bind ref="model"/>
              </model>
            </control>
          </input>
        </div>
        <div class="form-group">
          <button class="btn btn-xs">
            <control ref="standard:markup">
              <model>
                <![CDATA[<i class="fa fa-times" />]]>
              </model>
              <mouseEvents>
                <click>
                  <exec ref="ctx.execFunction">
                    <path ref="onDeleteBtn"/>
                  </exec>
                </click>
              </mouseEvents>
            </control>
          </button>
        </div>
      </div>
    </innerMarkup>
  </Dependency>
  <formArrayRefDep>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>array</name>
        <type ref="theModel.libs.standard.types.array"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="form-horizontal">
        <div class="form-group">
          <label class="col-lg-2 control-label">{{this.model._field.name}}</label>
          <div class="col-lg-10">
            <div style="padding-left:14px">
              <div class="form-inline">
                <div class="form-group">
                  <input type="text" class="form-control" placeholder="dependency">
                    <control id="inputCtrl" ref="backboneBuilder:ReferenceInput">
                      <libsOnly>
                        <_bind ref="libsOnly"/>
                      </libsOnly>
                    </control>
                  </input>
                </div>
                <div class="form-group">
                  <button class="btn btn-xs">
                    <control ref="standard:markup">
                      <model>
                        <![CDATA[<i class="fa fa-plus" />]]>
                      </model>
                      <mouseEvents>
                        <click>
                          <exec ref="inputCtrl.save"/>
                          <exec ref="listCtrl.createThru">
                            <withData>
                              <_generate ref="inputCtrl.getData">
                                <path ref="model"/>
                              </_generate>
                            </withData>
                          </exec>
                          <exec ref="inputCtrl.setData">
                            <path ref="model"/>
                            <data/>
                          </exec>
                        </click>
                      </mouseEvents>
                    </control>
                  </button>
                </div>
                <div>
                  <control id="listCtrl" ref="standard:ArrayControl">
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:Dependency">
                      <onDeleteBtn>
                        <exec ref="this.setSingleSelectedItem"/>
                        <exec ref="this.deleteThru"/>
                      </onDeleteBtn>
                      <selectionClass>
                        <group ref="default">
                          <class>active</class>
                        </group>
                      </selectionClass>
                    </displayControl>
                    <model>
                      <_bind ref="model"/>
                    </model>
                  </control>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </innerMarkup>
  </formArrayRefDep>
  <editClickText>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>text</name>
        <type ref="theModel.libs.standard.types.text"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <control id="spAddByMeta" ref="standard:StackPanel">
          <initModule ref="show"/>
          <autoHeight>true</autoHeight>
          <model>
            <show>
              <innerMarkup>
                <span class="btn btn-xs btn-block">
                  <control ref="standard:text">
                    <model>
                      <_bind ref="model"/>
                    </model>
                    <mouseEvents>
                      <click>
                        <exec ref="spAddByMeta.setSingleSelectedItemByMeta">
                          <meta ref="edit"/>
                        </exec>
                      </click>
                    </mouseEvents>
                  </control>
                </span>
              </innerMarkup>
            </show>
            <edit>
              <innerMarkup>
                <input type="text" class="form-control">
                  <control ref="standard:textInput">
                    <model>
                      <_bind ref="model"/>
                    </model>
                    <containerEvents>
                      <blur>
                        <exec ref="this.saveThru"/>
                        <exec ref="spAddByMeta.setSingleSelectedItemByMeta">
                          <meta ref="show"/>
                        </exec>
                      </blur>
                    </containerEvents>
                  </control>
                </input>
              </innerMarkup>
            </edit>
          </model>
        </control>
      </div>
    </innerMarkup>
  </editClickText>
  <desktopValidation>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>filter</name>
        <type ref="theModel.libs.standard.types.customValidation"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <control ref="backboneBuilder:AceEditor">
          <model>
            <_bind ref="model.code"/>
          </model>
          <mode>javascript</mode>
          <onBlur>
            <exec ref="this.saveThru"/>
          </onBlur>
        </control>
      </div>
    </innerMarkup>
  </desktopValidation>
  <tableTest>
    <inherits ref="theModel.libs.standard.controls.AppControlBase"/>
    <fields>
      <model>
        <name>array</name>
        <type ref="theModel.libs.backboneBuilder.types.backboneBuilder"/>
      </model>
    </fields>
    <innerMarkup>
      <div>
        <control ref="backboneBuilder:desktopAppDefComponentsTableView">
          <model>
            <_bind ref="model.clientWorkspace.libs.backboneBuilder"/>
          </model>
        </control>
      </div>
    </innerMarkup>
  </tableTest>
  <ControlTableRec>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>type</name>
        <type ref="theModel.libs.standard.types.control"/>
      </model>
      <onCheckBoxClick>
        <name>onCheckBoxClick</name>
        <type ref="theModel.libs.standard.types.function"/>
      </onCheckBoxClick>
    </fields>
    <innerMarkup>
      <td>
        <input type="checkbox">
          <control ref="standard:checkBox">
            <model>
              <_bind ref="model._selection.groupA.selected"/>
            </model>
            <mouseEvents>
              <change>
                <exec ref="ctx.execFunction">
                  <path ref="onCheckBoxClick"/>
                </exec>
              </change>
            </mouseEvents>
          </control>
        </input>
      </td>
      <td>
        <control ref="standard:text">
          <mouseEvents>
            <click>
              <exec ref="ctx.execFunction">
                <path ref="onCheckBoxClick"/>
              </exec>
            </click>
          </mouseEvents>
          <model>
            <_bind ref="model.key_"/>
          </model>
        </control>
      </td>
    </innerMarkup>
  </ControlTableRec>
  <desktopScenarios>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>deployment</name>
        <type ref="theModel.libs.backboneBuilder.types.deployment"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="pebble-panel-left">
        <div class="pebble-panel-header">
          <control ref="backboneBuilder:TitleBarPartsWriteThru">
            <model>
              <_bind ref="model.scenarios"/>
            </model>
            <title>scenarios</title>
            <placeholder>unique name</placeholder>
            <iconClass>fa-laptop</iconClass>
            <onSave>
              <exec ref="scenariosCtrl.createThru">
                <withData>
                  <key_>
                    <_generate ref="this.getData">
                      <path ref="text"/>
                    </_generate>
                  </key_>
                </withData>
              </exec>
              <exec ref="this.setData">
                <path ref="text"/>
                <data/>
              </exec>
            </onSave>
            <onDelete>
              <exec ref="scenariosCtrl.deleteThru"/>
            </onDelete>
          </control>
        </div>
        <div style="position:absolute;left:300px;right:0px;top:25px;bottom:0px;">
          <control id="scenariosCtrl" ref="standard:ArrayControl">
            <enableUrlBind>true</enableUrlBind>
            <childElement>
              <a class="list-group-item"/>
            </childElement>
            <displayControl ref="backboneBuilder:scenarioNavItem">
              <mouseEvents>
                <click>
                  <exec ref="this.setLayoutByDataPath">
                    <params>
                      <app>
                        <_generate ref="this.getSelectedItemMetaFromTop">
                          <path ref="model.clientWorkspace.libs"/>
                          <useRelPath>true</useRelPath>
                        </_generate>
                      </app>
                    </params>
                  </exec>
                </click>
              </mouseEvents>
            </displayControl>
            <model>
              <_bind ref="model.scenarios"/>
            </model>
          </control>
        </div>
        <div>
          <button class="btn btn-block btn-sm">
            <control ref="standard:text">
              <model>run all</model>
              <mouseEvents>
                <click>
                  <exec ref="analyzer.searchHasReference">
                    <searchCriteria>
                      <searchControls>true</searchControls>
                      <searchLibs>true</searchLibs>
                      <ref ref="theModel.clientWorkspace.libs.standard.controls.text"/>
                    </searchCriteria>
                  </exec>
                </click>
              </mouseEvents>
            </control>
          </button>
        </div>
      </div>
      <div style="background-color:white;position:absolute;top:0px;left:300px;right:0px;bottom:0px;">
        <div style="position:absolute;top:0px;left:0px;right:0px;bottom:0px;">
          <control ref="standard:StackPanel">
            <enableUrlBind>true</enableUrlBind>
            <initModule ref="help"/>
            <model>
              <help>
                <innerMarkup>
                  <div class="pebble-description">
                    <control ref="backboneBuilder:showdown">
                      <model>
                        <![CDATA[@pebble-string_services]]>
                      </model>
                    </control>
                  </div>
                </innerMarkup>
              </help>
              <contents>
                <innerMarkup>
                  <div style="position:absolute;top:0px;left:0px;right:0px;bottom:0px;">
                    <control ref="standard:ArrayStackControl">
                      <enableUrlBind>true</enableUrlBind>
                      <model>
                        <_bind ref="model.scenarios"/>
                      </model>
                      <childElement>
                        <div/>
                      </childElement>
                      <displayControl ref="backboneBuilder:AceEditor">
                        <mode>pxml</mode>
                        <onBlur>
                          <exec ref="this.saveThru"/>
                        </onBlur>
                      </displayControl>
                    </control>
                  </div>
                </innerMarkup>
              </contents>
            </model>
          </control>
        </div>
      </div>
    </innerMarkup>
  </desktopScenarios>
  <desktopCustomLibs>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>deployment</name>
        <type ref="theModel.libs.backboneBuilder.types.deployment"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="pebble-panel-left">
        <control ref="backboneBuilder:documentSimpleList">
          <title>Customize lib instances</title>
          <placeholder>name</placeholder>
          <iconClass>fa-gear</iconClass>
          <model>
            <_bind ref="model.customizeLibs"/>
          </model>
        </control>
      </div>
      <div class="pebble-panel-centerright">
        <control ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="help"/>
          <model>
            <help>
              <innerMarkup>
                <div class="pebble-description">
                  <control ref="backboneBuilder:showdown">
                    <model>
                      <![CDATA[@pebble-string_services]]>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </help>
            <contents>
              <innerMarkup>
                <div style="position:absolute;top:0px;left:0px;right:0px;bottom:0px;">
                  <control ref="standard:ArrayStackControl">
                    <enableUrlBind>true</enableUrlBind>
                    <model>
                      <_bind ref="model.customizeLibs"/>
                    </model>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:CustomizeLib"/>
                  </control>
                </div>
              </innerMarkup>
            </contents>
          </model>
        </control>
      </div>
    </innerMarkup>
  </desktopCustomLibs>
  <desktopAccessPoints>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>deployment</name>
        <type ref="theModel.libs.backboneBuilder.types.deployment"/>
      </model>
    </fields>
    <innerMarkup>
      <div class="pebble-panel-leftcenter">
        <control id="stackPanel" ref="standard:StackPanel">
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="accessPoints"/>
          <model>
            <accessPoints>
              <innerMarkup>
                <div class="pebble-panel-left">
                  <div class="pebble-panel-header">
                    <control ref="backboneBuilder:TitleBarPartsWriteThru">
                      <model>
                        <_bind ref="model.accessPoints"/>
                      </model>
                      <title>Access Points</title>
                      <placeholder>unique name</placeholder>
                      <iconClass>fa-laptop</iconClass>
                      <onSave>
                        <exec ref="accessPointsCtrl.createThru">
                          <withData>
                            <key_>
                              <_generate ref="this.getData">
                                <path ref="text"/>
                              </_generate>
                            </key_>
                          </withData>
                        </exec>
                        <exec ref="this.setData">
                          <path ref="text"/>
                          <data/>
                        </exec>
                      </onSave>
                      <onDelete>
                        <exec ref="accessPointsCtrl.deleteThru"/>
                      </onDelete>
                    </control>
                  </div>
                  <div class="pebble-panel-body">
                    <control id="accessPointsCtrl" ref="standard:ArrayControl">
                      <enableUrlBind>true</enableUrlBind>
                      <childElement>
                        <a class="list-group-item"/>
                      </childElement>
                      <displayControl ref="backboneBuilder:accessPointLauncher">
                        <mouseEvents>
                          <click>
                            <exec ref="this.setLayoutByDataPath">
                              <params>
                                <app>
                                  <_generate ref="this.getSelectedItemMetaFromTop">
                                    <path ref="model.clientWorkspace.libs"/>
                                    <useRelPath>true</useRelPath>
                                  </_generate>
                                </app>
                              </params>
                            </exec>
                          </click>
                        </mouseEvents>
                      </displayControl>
                      <model>
                        <_bind ref="model.accessPoints"/>
                      </model>
                    </control>
                  </div>
                </div>
                <div class="pebble-panel-centerright">
                  <control ref="standard:StackPanel">
                    <enableUrlBind>true</enableUrlBind>
                    <initModule ref="help"/>
                    <model>
                      <help>
                        <innerMarkup>
                          <div class="pebble-description">
                            <control ref="backboneBuilder:showdown">
                              <model>
                                <![CDATA[@pebble-string_services]]>
                              </model>
                            </control>
                          </div>
                        </innerMarkup>
                      </help>
                      <contents>
                        <innerMarkup>
                          <div class="pebble-panel-full">
                            <control ref="standard:ArrayStackControl">
                              <enableUrlBind>true</enableUrlBind>
                              <model>
                                <_bind ref="model.accessPoints"/>
                              </model>
                              <childElement>
                                <div/>
                              </childElement>
                              <displayControl ref="backboneBuilder:desktopAccessPoint"/>
                            </control>
                          </div>
                        </innerMarkup>
                      </contents>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </accessPoints>
            <scenarios>
              <innerMarkup>
                <div class="pebble-panel-full">
                  <control ref="backboneBuilder:desktopScenarios">
                    <model>
                      <_bind ref="model.scenarios"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </scenarios>
          </model>
        </control>
      </div>
      <div class="pebble-panel-right">
        <div class="pebble-panel-header">
          <p>
            <button class="btn btn-xs pull-right">
              <control ref="standard:markup">
                <model>
                  <![CDATA[access points]]>
                </model>
                <mouseEvents>
                  <click>
                    <exec ref="stackPanel.setSingleSelectedItemByMeta">
                      <meta ref="accessPoints"/>
                    </exec>
                  </click>
                </mouseEvents>
              </control>
            </button>
            <button class="btn btn-xs pull-right">
              <control ref="standard:markup">
                <model>
                  <![CDATA[scenarios]]>
                </model>
                <mouseEvents>
                  <click>
                    <exec ref="stackPanel.setSingleSelectedItemByMeta">
                      <meta ref="scenarios"/>
                    </exec>
                  </click>
                </mouseEvents>
              </control>
            </button>
            <button class="btn btn-xs pull-right">
              <control ref="standard:markup">
                <model>
                  <![CDATA[<i class="fa fa-repeat"/>]]>
                </model>
                <mouseEvents>
                  <click>
                    <exec ref="server.restart"/>
                  </click>
                </mouseEvents>
              </control>
            </button>
            <button class="btn btn-xs pull-right">
              <control ref="standard:markup">
                <model>
                  <![CDATA[<i class="fa fa-eraser"/>]]>
                </model>
                <mouseEvents>
                  <click>
                    <exec ref="server.clearLog"/>
                  </click>
                </mouseEvents>
              </control>
            </button>
            <i class="fa fa-sitemap"/>
            <span> Server</span>
          </p>
        </div>
        <div class="pebble-panel-body">
          <control id="server" ref="backboneBuilder:server">
            <startServer>
              <_bind ref="serverRunning"/>
            </startServer>
            <model>
              <_bind ref="model"/>
            </model>
          </control>
        </div>
      </div>
    </innerMarkup>
  </desktopAccessPoints>
  <desktopAssets>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>deployment</name>
        <type ref="theModel.libs.backboneBuilder.types.deployment"/>
      </model>
      <wins>
        <name>wins</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.win"/>
        </type>
      </wins>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;left:0px;width:300px;top:0px;bottom:0px;">
        <control ref="backboneBuilder:documentSimpleList">
          <title>Customize assets</title>
          <placeholder>name</placeholder>
          <iconClass>fa-gear</iconClass>
          <model>
            <_bind ref="model.assets"/>
          </model>
          <utilBtnText>
            <![CDATA[<button class="btn btn-success btn-xs">css</button>]]>
          </utilBtnText>
          <onUtilBtn>
            <exec ref="ctx.execFunction">
              <path ref="onCss"/>
            </exec>
          </onUtilBtn>
        </control>
      </div>
      <div style="background-color:white;position:absolute;top:25px;left:300px;right:0px;bottom:0px;">
        <div>
          <control ref="standard:StackPanel">
            <enableUrlBind>true</enableUrlBind>
            <initModule ref="help"/>
            <model>
              <help>
                <innerMarkup>
                  <div class="pebble-description">
                    <control ref="backboneBuilder:showdown">
                      <model>
                        <![CDATA[@pebble-string_servercode]]>
                      </model>
                    </control>
                  </div>
                </innerMarkup>
              </help>
              <contents>
                <innerMarkup>
                  <div style="position:absolute;top:0px;left:0px;right:0px;bottom:0px;">
                    <control ref="standard:ArrayStackControl">
                      <enableUrlBind>true</enableUrlBind>
                      <childElement>
                        <div/>
                      </childElement>
                      <displayControl ref="backboneBuilder:AceEditor">
                        <mode>pxml</mode>
                        <model>
                          <_bind ref="model"/>
                        </model>
                        <onBlur>
                          <exec ref="this.saveThru"/>
                        </onBlur>
                      </displayControl>
                      <model>
                        <_bind ref="model.assets"/>
                      </model>
                    </control>
                  </div>
                </innerMarkup>
              </contents>
            </model>
          </control>
        </div>
      </div>
    </innerMarkup>
  </desktopAssets>
  <CustomizeLib>
    <inherits ref="theModel.libs.standard.controls.ClientControl"/>
    <fields>
      <model>
        <name>deployment</name>
        <type ref="theModel.libs.backboneBuilder.types.deployment"/>
      </model>
      <wins>
        <name>wins</name>
        <type ref="theModel.libs.standard.types.array">
          <arrayFormId ref="theModel.libs.standard.types.win"/>
        </type>
      </wins>
    </fields>
    <innerMarkup>
      <div style="background-color:white;position:absolute;right:0px;width:300px;top:0px;bottom:0px;">
        <div style="overflow-y:auto;position:absolute;top:0px;bottom:0px;left:0px;right:0px;border-right:solid 1px #ddd;">
          <div class="list-group">
            <div class="list-group-item">
              <p>
                <i class="fa fa-th pull-right"/>
                <span>Parts</span>
              </p>
              <ul class="nav nav-pills nav-stacked">
                <control ref="standard:ArrayControl">
                  <enableUrlBind>true</enableUrlBind>
                  <model>
                    <_bind ref="wins"/>
                    <theControlApp>
                      <name>theControlApp</name>
                      <iconClass>fa-code</iconClass>
                    </theControlApp>
                  </model>
                  <childElement>
                    <li/>
                  </childElement>
                  <displayControl>
                    <innerMarkup>
                      <a href="#">
                        <i class="fa {{item.iconClass}}"/>
                        <span> {{item.name}}</span>
                      </a>
                    </innerMarkup>
                    <mouseEvents>
                      <click>
                        <exec ref="this.setSingleSelectedItem"/>
                      </click>
                    </mouseEvents>
                    <selectionClass>
                      <group ref="default">
                        <class>active</class>
                      </group>
                    </selectionClass>
                  </displayControl>
                </control>
              </ul>
            </div>
            <div class="list-group-item">
              <div>
                <control ref="backboneBuilder:documentSimpleListWriteThru">
                  <title>stringMaps</title>
                  <placeholder>unique name</placeholder>
                  <iconClass>fa-list</iconClass>
                  <model>
                    <_bind ref="model.stringMaps"/>
                  </model>
                </control>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div style="background-color:white;position:absolute;top:0px;right:300px;left:0px;bottom:0px;">
        <control ref="standard:StackPanel">
          <_bind ref="wins"/>
          <enableUrlBind>true</enableUrlBind>
          <initModule ref="theControlApp"/>
          <model>
            <stringMaps>
              <innerMarkup>
                <div style="background-color:white;position:absolute;top:0px;right:0px;left:0px;bottom:0px;">
                  <control ref="standard:ArrayStackControl">
                    <enableUrlBind>true</enableUrlBind>
                    <childElement>
                      <div/>
                    </childElement>
                    <displayControl ref="backboneBuilder:desktopStrings"/>
                    <model>
                      <_bind ref="model.stringMaps"/>
                    </model>
                  </control>
                </div>
              </innerMarkup>
            </stringMaps>
            <theControlApp>
              <innerMarkup>
                <div style="background-color:white;position:absolute;top:0px;right:0px;left:0px;bottom:0px;">
                  <control id="theControlAppCtrl" ref="backboneBuilder:AceEditor">
                    <mode>pxml</mode>
                    <model>
                      <_bind ref="model.theControlApp"/>
                    </model>
                    <onBlur>
                      <exec ref="this.saveThru"/>
                    </onBlur>
                  </control>
                </div>
              </innerMarkup>
            </theControlApp>
          </model>
        </control>
      </div>
    </innerMarkup>
  </CustomizeLib>
</theModel_libs_backboneBuilder_controls>
<theModel_libs_backboneBuilder_controls_Analyzer_functions>
  <searchHasValue>
    <name>searchHasValues</name>
    <description/>
    <fields>
      <searchCriteria>
        <name>path</name>
        <type ref="theModel.libs.standard.types.itemRelRef">
          <itemPath ref="parent"/>
        </type>
      </searchCriteria>
    </fields>
  </searchHasValue>
</theModel_libs_backboneBuilder_controls_Analyzer_functions>
<theModel_libs_backboneBuilder_services>
  <getFields>
    <returnType ref="theModel.clientWorkspace.libs.standard.types.array"/>
    <name>getFields</name>
    <fields/>
  </getFields>
  <generateIndexes>
    <name>generateIndexes</name>
    <fields/>
    <returnType ref="theModel.clientWorkspace.libs.standard.types.undefined"/>
  </generateIndexes>
  <getDs>
    <name>getDs</name>
    <fields>
      <path>
        <name>path</name>
        <type ref="theModel.libs.standard.types.itemRelRef"/>
      </path>
    </fields>
  </getDs>
  <getControls>
    <name>getControls</name>
    <fields>
      <libRef>
        <name>libRef</name>
        <type ref="theModel.libs.standard.types.itemRelRef"/>
      </libRef>
    </fields>
    <query>
      <select>
        <field ref="*"/>
      </select>
      <from>
        <controls ref="clientWorkspace.libs.{{libRef}}.controls"/>
      </from>
    </query>
  </getControls>
  <getLibs>
    <name>getLibs</name>
    <fields/>
    <query>
      <select>
        <field ref="*"/>
      </select>
      <from>
        <path ref="clientWorkspace.libs"/>
      </from>
    </query>
  </getLibs>
  <getTypes>
    <name>getTypes</name>
    <fields>
      <libRef>
        <name>libRef</name>
        <type ref="theModel.libs.standard.types.itemRelRef"/>
      </libRef>
    </fields>
    <query>
      <select>
        <field ref="*"/>
      </select>
      <from>
        <path ref="clientWorkspace.libs.{{libRef}}.types"/>
      </from>
    </query>
  </getTypes>
  <getDeployments>
    <name>getDeployments</name>
    <fields>
      <libRef>
        <name>libRef</name>
        <type ref="theModel.libs.standard.types.itemRelRef"/>
      </libRef>
    </fields>
    <query>
      <select>
        <field ref="*"/>
      </select>
      <from>
        <dep ref="clientWorkspace.deployments"/>
      </from>
      <where>
        <condition ref="theControlApp" op="eq">{{libRef}}</condition>
      </where>
    </query>
  </getDeployments>
  <getControlFunctions>
    <name>getControlFunctions</name>
    <fields>
      <libRef>
        <name>libRef</name>
        <type ref="theModel.libs.standard.types.itemRelRef"/>
      </libRef>
      <controlRef>
        <name>controlRef</name>
        <type ref="theModel.libs.standard.types.itemRelRef"/>
      </controlRef>
    </fields>
    <query>
      <select>
        <field ref="*"/>
      </select>
      <from>
        <path ref="clientWorkspace.libs.{{libRef}}.controls.{{controlRef}}.functions"/>
      </from>
    </query>
  </getControlFunctions>
  <getServices>
    <name>getServices</name>
    <fields>
      <libRef>
        <name>libRef</name>
        <type ref="theModel.libs.standard.types.itemRelRef"/>
      </libRef>
    </fields>
    <query>
      <select>
        <field ref="*"/>
      </select>
      <from>
        <path ref="clientWorkspace.libs.{{libRef}}.services"/>
      </from>
    </query>
  </getServices>
  <getExternalLibs>
    <name>getExternalLibs</name>
    <fields/>
    <query>
      <select>
        <field ref="*"/>
      </select>
      <from>
        <path ref="externalLibs"/>
      </from>
    </query>
  </getExternalLibs>
  <getMyProfile>
    <name>getMyProfile</name>
    <fields/>
    <query>
      <path ref="profiles"/>
      <returnFields/>
      <condition>
        <ownerId>{{_user.id}}</ownerId>
      </condition>
    </query>
  </getMyProfile>
  <getMyWorkspaces>
    <name>getMyWorkspaces</name>
    <fields/>
    <query>
      <select>
        <field ref="*"/>
      </select>
      <from>
        <path ref="workspaces"/>
      </from>
      <where>
        <condition>
          <ownerId>{{_user.id}}</ownerId>
        </condition>
      </where>
    </query>
  </getMyWorkspaces>
  <getIndexedItems>
    <name>getIndexedItems</name>
    <fields/>
    <query>
      <select>
        <field ref="*"/>
      </select>
      <from>
        <path ref="clientWorkspace.globalIndexItems"/>
      </from>
    </query>
  </getIndexedItems>
  <getFilters>
    <name>getFilters</name>
    <fields>
      <libRef>
        <name>libRef</name>
        <type ref="theModel.libs.standard.types.itemRelRef"/>
      </libRef>
    </fields>
    <query>
      <select>
        <field ref="*"/>
      </select>
      <from>
        <controls ref="clientWorkspace.libs.{{libRef}}.filters"/>
      </from>
    </query>
  </getFilters>
  <getValidations>
    <name>getValidations</name>
    <fields>
      <libRef>
        <name>libRef</name>
        <type ref="theModel.libs.standard.types.itemRelRef"/>
      </libRef>
    </fields>
    <query>
      <select>
        <field ref="*"/>
      </select>
      <from>
        <controls ref="clientWorkspace.libs.{{libRef}}.validations"/>
      </from>
    </query>
  </getValidations>
</theModel_libs_backboneBuilder_services>
<theModel_appInstances>
  <theInstance ref="backboneBuilder">
    <theControlApp>
      <name>Pebble Fields</name>
      <description>
        <![CDATA[Pebble Fields builds software to allows you to create
                robust, inherently stable and secure applications in the browser
                without introducing the complexity of programming, development
                tools, and infrastructure setup.]]>
      </description>
      <profiles>
        <ryan>
          <name>ryan</name>
          <friends>
            <a0>
              <ref ref="miyuki"/>
            </a0>
          </friends>
        </ryan>
        <miyuki>
          <name>miyuki</name>
          <friends>
            <a0>
              <ref ref="ryan"/>
            </a0>
          </friends>
        </miyuki>
      </profiles>
      <externalLibs>
        <chartLib1>
          <description>
            <![CDATA[Chart Library with ... elements ...]]>
          </description>
          <version>0.001</version>
          <license>MIT</license>
        </chartLib1>
        <chartLib2>
          <description>
            <![CDATA[Chart Library with ... elements ...]]>
          </description>
          <version>0.001</version>
          <license>MIT</license>
        </chartLib2>
        <meteorBackend1>
          <description>
            <![CDATA[Backend that wraps meteorjs ...]]>
          </description>
          <version>0.002</version>
          <license>BSD</license>
        </meteorBackend1>
      </externalLibs>
      <lov>
        <side>
          <name>side</name>
          <array>
            <t>top</t>
            <b>bottom</b>
            <l>left</l>
            <r>right</r>
          </array>
        </side>
        <relAppPath>
          <name>relAppPath</name>
          <array>
            <this>this</this>
            <parent>parent</parent>
            <topApp>topApp</topApp>
          </array>
        </relAppPath>
        <numberFormats>
          <name>numberFormats</name>
          <array>
            <decimal>Decimal</decimal>
            <currency>Currency</currency>
            <scientific>Scientific</scientific>
            <percent>Percent</percent>
            <custom>Custom</custom>
          </array>
        </numberFormats>
        <formFactor>
          <name>formFactor</name>
          <array>
            <desktop>desktop</desktop>
            <mobile>mobile</mobile>
            <tablet>tablet</tablet>
            <phonegap>phonegap</phonegap>
          </array>
        </formFactor>
        <languages>
          <name>languages</name>
          <array>
            <ja>ja</ja>
            <en>en</en>
          </array>
        </languages>
        <genericOperators>
          <name>genericOperators</name>
          <array>
            <eq>eq</eq>
            <lt>lt</lt>
            <gt>gt</gt>
          </array>
        </genericOperators>
        <dateTimeFormats>
          <name>dateTimeFormats</name>
          <array>
            <fullDateTime>Full Date/Time</fullDateTime>
            <longDateTime>Long Date/Time</longDateTime>
            <mediumDateTime>Medium Date/Time</mediumDateTime>
            <shortDateTime>Short Date/Time</shortDateTime>
            <fullDate>Full Date/Time</fullDate>
            <longDate>Long Date/Time</longDate>
            <mediumDate>Medium Date/Time</mediumDate>
            <shortDate>Short Date/Time</shortDate>
            <fullTime>Full Date/Time</fullTime>
            <longTime>Long Date/Time</longTime>
            <mediumTime>Medium Date/Time</mediumTime>
            <shortTime>Short Date/Time</shortTime>
            <custom>Custom</custom>
          </array>
        </dateTimeFormats>
        <winRefPoints>
          <name>winRefPoints</name>
          <array>
            <tl>tl</tl>
            <tr>tr</tr>
            <bl>bl</bl>
            <br>br</br>
          </array>
        </winRefPoints>
      </lov>
    </theControlApp>
    <stringMaps>
      <css/>
      <string>
        <workspace>
          <![CDATA[#Workspace

                  # Getting Started

                  Pebble is a ...
                  For devopers in a hurry, markdown of apps.

                  >This should explain how to get a basic app running in the browser.  At the end introduce the environments you can deploy to.

                  ## Workspace

                  Your workspace contains everything to ...  is created and remains in your browser local storage.  You may import and export workspaces.

                  - Go to site
                  - Import standard

                  - Add css, bootstrap.css

                  ## Create an Application

                  The application is what defines how and what data you will collect from the users of your application.


                  ### Create Types

                  The types collecion consist of all the types that you will use in your application.  

                  ### Fields

                  Defining the fields on your applicatin is stating where you will logically store each type of data.
                  The fields can be thought of in two types of data, collection and configuration.

                  #### Collections

                  Collecitons fields specify ...

                  #### Config Data

                  Configuration data is instatiated when you create your deployment for the application.
                  Here you may have fields such as "Application Name", "Description", etc.

                  ##### List of Values

                  Often your application requires predefined list of values.  This may be a
                  convinient place to define such static data. 


                  ### Create Roles

                  Create ficticious roles to map to data.  The roles are also available to your
                  controls at `app.global.user.roles` to help construct you workflow.




                  ### Create Types

                  ### Create Controls and Panels

                  Create controls to display your types(nav, details)
                  Create top control
                  Controls are the *controllers" in the client side MVC architecture.  The
                  container multiple *views*.  The data in a control is shared accross views.

                  ### Create Top Controls

                  ## Deployments

                  ## Creating a Deployment

                  A deployment is an instance of your application.  

                  ### Datasource Maps

                  ### Group Maps

                  ### Access Points

                  Add and name and specify on of your top controls.

                  #### Dependencies

                  #### Header Scripts


                  ## Run the Server, Test, Send Away



                  ]]>
        </workspace>
        <deployments>
          <![CDATA[#Deployments

                  ]]>
        </deployments>
        <schemafields>
          <![CDATA[#Schema Fields

                  ]]>
        </schemafields>
        <queries>
          <![CDATA[#Queries

                  ]]>
        </queries>
        <services>
          <![CDATA[#Services

                  ]]>
        </services>
        <types>
          <![CDATA[#Utility Types

                  ]]>
        </types>
        <servercode>
          <![CDATA[#Server Side Code

                  ]]>
        </servercode>
        <widgets>
          <![CDATA[#Widgets

                  The building blocks for your user interface.



                  This page lets you create HTML by entering text in a simple format that's easy to read and write.

                  - Type Markdown text in the left window
                  - See the HTML in the right

                  Markdown is a lightweight markup language based on the formatting conventions that people naturally use in email.  As [John Gruber] writes on the [Markdown site] [1]:

                  > The overriding design goal for Markdown's
                  > formatting syntax is to make it as readable 
                  > as possible. The idea is that a
                  > Markdown-formatted document should be
                  > publishable as-is, as plain text, without
                  > looking like it's been marked up with tags
                  > or formatting instructions.

                  This document is written in Markdown; you can see the plain-text version on the left.  To get a feel for Markdown's syntax, type some text into the left window and watch the results in the right.  You can see a Markdown syntax guide by switching the right-hand window from *Preview* to *Syntax Guide*.

                  Showdown is a Javascript port of Markdown.  You can get the full [source code] by clicking on the version number at the bottom of the page.

                  **Start with a [blank page] or edit this document in the left window.**

                  [john gruber]: http://daringfireball.net/
                  [1]: http://daringfireball.net/projects/markdown/
                  [source code]: http://www.attacklab.net/showdown-v0.9.zip
                  [blank page]: ?blank=1 "Clear all text"


                  ## Syntax highlighting

                  When combined with [highlight.js][] this starts looking as a kind of IDE :-)

                  HTML:

                  <h1>HTML code</h1><p class="some">This is an example</p>

                  XML:

                  <innerMarkup ref="myref"><data>55</data><field /></innerMarkup>

                  Python:

                  def func():
                  for i in [1, 2, 3]:
                  print "%s" % i

                  Javascript:

                  function myfunc() {
                  var a = 1;
                  for (var i = 0; i < obj.count; i++) {
                  //do something
                  }
                  }

                  [highlight.js]: http://softwaremaniacs.org/soft/highlight/en/]]>
        </widgets>
        <filters>
          <![CDATA[#Filters
                  # Features

                  Features allows you to augment the base control system.  You may handle custom tags accross multiple types of widgets to implement your feature.

                  > Where would they define the fields???

                  ## How to

                  `pebble.libs.standard.features.MyFeature = function () { ...`

                  Must inherit `pebble.libs.standard.Feature`

                  Internally, in ClientControl constructor

                  for (key in pebble.libs.standard.features) {
                  this.features[key] = new pebble.libs.standard.features[key](this);
                  }

                  ## ExecuteMethod

                  Allow functions to be defined (note: on ClientControl)

                  >standard base features migth need particular instantiaation order

                  for (key in this.features) {
                  var handled = this.features[key].executeMethod(obj);
                  if (handled) {
                  break;
                  }
                  }

                  ## eb
                  export PATH=$PATH:<path to eb>
                    eb start
                    eb status --verbose
                    git aws.push
                    eb stop								//this will terminate the app and the RDS data will be lost, be sure to do a RDS snapshot
                    eb delete							//clean up from directory

                    ]]>
        </filters>
        <expressions>
          <![CDATA[
                    # Expression

                    Expressions are easily inputted text that can only handle and be evaluated to
                    native values (text, bool, number, etc.) at a certain trigger points.
                    Expression cannot contain advanced logic such as condionals, loops, or
                    functions.  When logic goes beyond the scope of expressions *custom controls*
                    are used.

                    Expressions usage differs slightly depending on the context in which they are
                    used.

                    ## Expressions in control's innerMarkup

                    Expressions can be used in a control's innerMarkup for simple data display.
                    They are evaluated on load and continue to be bound and managed by the control.

                    <innermarkup><span>{{model.num * 10}}</span></innermarkup>

                    At load time all child controls have been loaded.  Their data may be accessed
                    by an expression if you define a bind point on the control to which the child control binds.

                    <innermarkup><span>{{bindPoint}}</span><div><control ref="standard.controls.text"><model><_bind ref="bindPoint" /></model><model>hello!</model></control></div></innermarkup>

                  TBD: Put back _meta in OriginInfo.getValue()

                  ## Expressions as control data 

                  Expressions within a control are evaluated at load time and are bound and
                  managed by the control. When data in the expression changes the expression is
                  re-evaluated.  After evaluated the result is set, notifiying other controls
                  possibly bound.

                  <innermarkup><span><item ref="system:text"><startopen><_xp>!ctx:isOpen</_xp></startopen><sum><_xp>num1:model + num2:model</_xp></sum></item></span></innermarkup>

              ### Special Tags that use this

              Conrols can accomplish tasks when data is set.  Expression can trigger these
              tasks when the expression sets back to the control.

              #### Filter

              ArrayTreeBase sends the filter tag to the server anytime the `<filter>` tag is
                altered.  The following will replace the values and set back to the control.

                <filter><condition><_replace>name like txt1:model && age >= num1:model</_replace></condition></filter>

              > note: this would nice if it could handle functions/services as well.  ex. age >= num1:getData('model')

              If you server only needs the query data, the following would also work using
              `_bind` because any change will cause ArrayTreeBase to send `<filter>` to the
                server.

                <filter><queryFunction ref="topApp.queryA" /><item><name><_bind ref="txt1:model" /></name><age><_bind ref="num1:model" /></age></item></filter>

            #### ShowRecsFilter

            ArrayControl applies the `<showRecsFilter>` to every array item.

              <showRecsFilter><_replace>name == txt1:model && age >= num1:model</_replace></showRecsFilter>

            > note: formatRecs will have to find name, age  (not surrounded by "" words) or use handlebars
            <_replace>{{name}} == txt1:model && {{age}} >= num1:model</_replace>

          #### Class

          ClientControl sets the container css class in `<class>` if it exists.

            <class><_xp>ctx:model._selection.default.selected == true ? "active" : ""</xp></class>


          #### InnerControl function execution, need?

          Arbitrary functions can be executed.  The expression will bind to relavant data.

          <onDataChangedLogic><exec ref="mainStackPanel.selectSingleItem"><meta><_xp>ctx:issomething ? "main" : ... </_xp></meta></exec></onDataChagedLogic>

        ## Expressions in displayControls

        Expressions can be used the `displayControl.innerMarkup` when using *simple markup* as the array control's display control.
        When using in diplay controls, `model` is not necessary because *simple markup* controls do not define data of their own.

        <displayControl><innermarkup><span>{{name}}</span></innermarkup></displayControl>

        In rare cases where the array item is a native type, such as text, specify the model as `{{.}}`.

        The array item's key can be displayed with `{{_meta}}`

        ## Expressions as parameters to functions

        Expressions can be used in parameters to functions which are evaluated when the
        function executes.  

        <myfunction><exec ref="this.dosomething"><param>{{this.aa.bb + item.aa}}</param></exec></myfunction>


        ### ClientControl Specifiers

        - `this` :this means the executing control
        - `ctx` :ctx refers to the executing executing, the context or control that the
        current control is executing in.
        - `pctx` : pctx
        - `item` :  Refers to an item passed in.  Depending on the context may refer to
        different objects.
        - `app` : Refers to the top app.  `global` would get the *global object* 
        - `event.data`:

        Specifiers cannot reach modules that have not been instatiated, such as panels yet to be rendered in a *StackPanel*

        > specifiers might need a prefix so they are not confused with other text "how
        > about this." would trigger specifier.

        ### ServerControl Specifiers

        - `doc`:  TBD  


        ## Extending Expressions

        > extending probably needs to be an optional injected object because it needs
        > to be available to all controls.

        ]]>
        </expressions>
        <clientcode>
          <![CDATA[#Client Side Code

        ]]>
        </clientcode>
        <css>
          <![CDATA[#Css

        ]]>
        </css>
        <arrays>
          <![CDATA[#Collections and Arrays

        Arrays are lists\ of items.  There are two types of arrays, external and
        embedded.  External arrays' items are the unit of storage on the server,
        sometimes refered to as documents or records in a database.  Embedded arrays
        are lists of items that exist in an external item.  Due to these differences,
        what you can do with these arrays also differs.

        The server corresponds with a server proxy to keep data in sync.

        ### Configuration: Server Fields, Proxy protocol

        Fields can be defined for a server to configure functionality declaratively.

        Similar to `_selection`, the proxy generates `_collection` tags.  These can be
        used when you don't push and reload data to show that the data state has
        changed.

        > If the `arrayControlType=readWrite`, the proxy may send `isDirty` ...

        ## Server Proxy

        The Server Proxy is a buffer between the UI and the actual server.  The UI
        interacts with the proxy as if it has collections of objects.  The proxy
        implements the actual CRUD operations to the datasource.  Because the
        applications being created are stateful, one of the main jobs of the proxy is
        to ensure fresh data.

        The proxy knows about the state of the application, which controls have been
        loaded, fields required, etc.  Only ArrayTreeBase controls that handle
        collection items are relavent, including the ArrayTreeBase controls in
        references.  It can respond to server events and notify the loaded controls.
        The controls also specify what `arrayControlType` they are so the proxy can
        perform tasks more effectively.  For example, if an `arrayControlType=readOnly`
        then the proxy can safely push and reload data at anytime.  

        If a computer sleeps, etc, the state can become out of sync with the server.
        The server proxy can reload the controls registered to it.

        ##External Arrays

        With external arrays a separate call to retrieve items must be made.  The
        retrived items can, like embedded arrays, be filterd, paged and sorted.  

        - External arrays must be pulled down from an *Array Control* via a *query*.
        Furthermore, the *Array Control* must specify the required fields in *query*
        and cannot depend on what other Array Controls download.  They are kept in sync
        with the server origin directly.

        - There is no natural order, display order must be performed in the query. as
        well as other operations.  

        - *Paging* also must be done in the query.  

        - By default, state is not mainted accross queries, except for *Selection
        Policy* data.


        > client need to send presences notifications (device id, bind points) every n
        > seconds so server knows currently connected devices.  When device comes back
        > online it sends presence.  The server will also need to time stamp bind
        > points to know whether a device is in sync or not.

        Basic Operations

        - Create:  Create an external array item will create it on the server side.  If
        you want to create the item with data, build a input control for your model
        and expose a function that will be executed *onSave*.
        - Retrieve:  Retrieve is usually used on controls that must display more
        information when selected such as *ArrayStackControl* 
        - Update:
        - Delete: 
        - Query:

        ## Filtering Process

        1. Retrieve records via a *filter* from the server (external arrays only);
        2. The retrived array, or an embedded array may be further filtered via a *showRecsFilter*.
        3. The final record set, *showRecs*, may be paged and sorted.  Thus, Pagers and Sorters bind to this array.

        ##Embedded Arrays 

        - Embedded arrays are always fully avaiable with the encompassing document.
        Thus, *filter* operations are of no use, only *localfilters* work.  Likewise,
        all fields for the items in the array are also available.  

        - Embedded arrays have natural order, the order that they were stored.  Their
        order can be manupulated, via drag drop operations, etc.  

        - Embedded arrays are fields and therefore can be manipulated without persiting
        to the datastore.

        Embedded Arrays are different than collections and are updated similar to
        normal data on a collection item.  They are different from normal data in that
        they have CRUD and order operations placed on them.  As such, the operations
        all fall under a collection item `update` with an extended signature.

        - relPath : equal to the path to the array and the operation
        - operation : update | add | delete | move

        Basic Operations

        - Create:  Creating an embedded array item creates it on the client side.
        Often, you will want to follow your *create* with a *select* **TBD**
        *createandselect* because you need to select the created item.  Or, use return
        of *create* statement.
        - Retrieve:  There is not need to retrieve. 
        - Update:  Updates client side only.  Use *writethru* to persist to the server.
        - Delete:  Deletes client side only.  Use *writethru* to persist to the server. 
        - Filter:  There is no filter, its all in the encompassing item.
        - Local Filter:  





        ## Filter

        For an *Array Control* it must retrieve data by setting a *filter* field.
        Because all *Array Controls* bound to *External Arrays* get their own data,
        each must have a *filter* field to load data ... TBD.  They are bound together
        via a path and send and receive *Selection Policy* and *Array Events*, however
        they must react directly with the server origin upon these events.


        ## Local Filter

        An *Array Control's* local filter filters data from whereever it is bound and
        sets the data in the field *showrecs*.  Multilevel filtering can be achieved
        when child *Array Controls* bind to the *showrecs* field of their context and
        then may filter futher.  

        > old queryConditions (tag, location, my, meta, date,
        number, text, bool, isNull, type, reference, inheritType,
        referenceAncestorPath, in)

        ## Page Filter

        Further, a page filter can be applied to the result showRecs.  Sort is also
        related.  On sort, should the page change to the page with the selected item,
        stay on the current page, go to page 0.


        ### Filter Execution

        Filter parameters can be directly set or retrieved from the UI via *_generate*
        and *_bind*.  Calling the array control's doQuery() or changes received from
        *_bind* parameters will execute the filter.  *_generate* will be calculated
        when the filter executes.

        <showRecsFilter><tag>Baseball</tag><parentId><_generate ref="ctx.getReference()" /></parentId><searchText><_bind ref="searhText" /></searchText></showRecsFilter>

    ## Selection Policy

    Selection is based on some type of user input that triggers a function on
    ArrayTreeBase or its decendants.  ArrayTreeBase supports single and multiple
    generic selection policies.  It exposes setSingleSelectedItem and
    setMultipleSelectedItem to be accessed in any way.  That is, the policy is
    decouple from the input event.  One could add new input methods, such as voice,
    and trigger these functions when certain conditions are met.  If one were to
    add a new policy, they would sub class ArrayTreeBase and expose new public
    functions.

    ex.


    ### Selection Groups

    Selection policies manipulate data's meta value at path, "ps.selection".  Items
    belong to multiple selections groups as soon as they are selected by setting
    "ps.selection.groupId.selected" = "true".  Thus, items can be selected in one
    group while remaining unselected in another.  Selection policies sets these
    values based on certain rules, or a policy.  For example, the single select
    policy is trigger by calling setSingleSelectedItem which then deselects the
    current and selects the new item.  It may do other things such as fire an event
    changing the data at the array origin path "ps.selectedMeta".  This would allow
    controls interested in knowing when selectedMeta changed happend can be alerted.
    Multiple select policy toggles on/off an item selected.  It may also check key
    events to do other things.
    QueryCondition is now an expression.  The envrironment will evaluate it.  Thus,
    when on the client side it is used for showRecsFilter, display filter, dragDrop
    filter.  The server side can parse this to generate a query statement or use it
    in funcitons.


    ### Pagination

    Pagination allows you to view a small subset of the *showRecs* data.
    Pagination data is generated by ArrayControl when *itemPerPage* is set.
    Pagination controls can bind to *arrayPages* of the ArrayControl to display the
    pages available.  When the ArrayControl handles external arrays it uses
    *itemsPerPage* to make decisions on retrieving data.

    The ArrayControl generates *arrayPages* for an array bound to its *showRecs* field.
    For external arrays a query must be made for this to be
    set.  

    #### Embedded Arrays

    Embedded arrays are always complete and thus can filter pages by using the *showRecsFilter*.


    <showRecsFilter><page><_generate ref="pager.getData('currentPage')" /></page></showRecsFilter>

  #### External Arrays

  With External Arrays the only way to know if you have enough data for a page is
  to leaving the filtering to the server.  Although slower in performance,
  performing the filtering on the server always addresses all of the data.  For
  external arrays if you are fetching using pagination then you should not use
  the *showRecsFilter*

  <filter><searchText>Ramen</searchText><page><_generate ref="pager.getData('currentPage')" /><_bind ref="currentPage" /></page></filter>

> later data retrieval schemes could be configurable, prefetch.  ArrayControl must keep a prefetch cache.
>- buffer: when cached number of pages < buffer then fetch next.

<prefetch><num>5</num><buffer>3</buffer></prefetch>

### Sorting

Array controls expose `sort` functions.  If you need other sort functions you
may extend ArrayControl and overide and/or augment.




## ArrayControl

<control ref="standard:ArrayControl"><beforeload /><trigger /><proxy>

    > Might not need SERVER or DATA-EVENTS because it will just be configuring <proxy>


      ## ArrayStackControl

      ArrayStackControls require more decisions regarding behavior.

      - onAdded:  Do you want to select the new item.
      - onUpdated:  Do you want to push data
      - onDeleted:  Do you want to select previous.

      ## Panels

      Panels help display the data for a collection item and must decide whether to
      update when loaded/rendered or redisplayed.  The default is to push updates and
      reload control.  You may not wan't push and reload if you are editing.  There
      are also hooks to execute functions.

      <control ref="standard:StackPanel"><onUpdated /><onAdded /><model><win1><dontPushUpdate>true</dontPushUpdate>


            ## Simulation Code

            You may write code to simulate your server by inheriting the `ServerSimulator`
            base class.  The base class allows basic CRUD operations to collections of
            objects.

            code ...

            ## Server Proxy Code

            You may write your own server proxy by inheriting from the `ServerProxy` base class.  


            ### doQuery

            - path
            - arrayControltype: readOnly, readWrite

            ### getArrayItemDocument
            ]]>
        </arrays>
      </string>
    </stringMaps>
    <accessPoints>
      <pebbleDesktop>
        <topControl ref="default"/>
        <dependencies>
          <a1 ref="standard"/>
          <a2 ref="bootstrap"/>
          <a0 ref="backboneBuilder"/>
        </dependencies>
        <groupMaps>
          <a0 ref="viewOnly">
            <name>groupMap1</name>
            <toGroup ref="theModel.clientWorkspace.libs.site.types.usergroup-defaults">
              <allowedStandardUserGroup ref="public"/>
            </toGroup>
          </a0>
          <a1 ref="editors">
            <name>groupMap2</name>
            <toGroup ref="theModel.clientWorkspace.libs.site.types.usergroup-defaults">
              <allowedStandardUserGroup ref="public"/>
            </toGroup>
          </a1>
          <a2 ref="creators">
            <name>groupMap3</name>
            <toGroup ref="theModel.clientWorkspace.libs.site.types.usergroup-defaults">
              <allowedStandardUserGroup ref="public"/>
            </toGroup>
          </a2>
        </groupMaps>
      </pebbleDesktop>
    </accessPoints>
  </theInstance>
</theModel_appInstances>undefined</i>